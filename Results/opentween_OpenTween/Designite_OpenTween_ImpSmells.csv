Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The method has 224 lines of code.
Long Method,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The method has 162 lines of code.
Long Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,SetFilters,The method has 131 lines of code.
Long Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ShowDetail,The method has 125 lines of code.
Long Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,The method has 114 lines of code.
Long Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,InitializeComponent,The method has 608 lines of code.
Long Method,OpenTween,SendErrorReportForm,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The method has 113 lines of code.
Long Method,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The method has 422 lines of code.
Long Method,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The method has 124 lines of code.
Long Method,OpenTween,HashtagManage,C:\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,InitializeComponent,The method has 201 lines of code.
Long Method,OpenTween,ListAvailable,C:\repos\opentween_OpenTween\OpenTween\ListAvailable.cs,InitializeComponent,The method has 153 lines of code.
Long Method,OpenTween,ListManage,C:\repos\opentween_OpenTween\OpenTween\ListManage.cs,InitializeComponent,The method has 399 lines of code.
Long Method,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The method has 105 lines of code.
Long Method,OpenTween,SearchWordDialog,C:\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,InitializeComponent,The method has 150 lines of code.
Long Method,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The method has 437 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The method has 375 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The method has 182 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The method has 105 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ContextMenuOperate_Opening,The method has 104 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,doStatusDelete,The method has 106 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SettingStripMenuItem_Click,The method has 217 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The method has 177 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveSpecifiedTab,The method has 107 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The method has 110 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The method has 448 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The method has 262 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAsync,The method has 151 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MenuItemOperate_DropDownOpening,The method has 100 lines of code.
Long Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The method has 2188 lines of code.
Long Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreatePostsFromStatusData,The method has 143 lines of code.
Long Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateDirectMessagesFromJson,The method has 103 lines of code.
Long Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,userStream_StatusArrived,The method has 139 lines of code.
Long Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The method has 145 lines of code.
Long Method,OpenTween.Models,PostFilterRule,C:\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeSummary,The method has 150 lines of code.
Long Method,OpenTween.Setting.Panel,ActionPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ActionPanel.cs,InitializeComponent,The method has 219 lines of code.
Long Method,OpenTween.Setting.Panel,CooperatePanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,InitializeComponent,The method has 269 lines of code.
Long Method,OpenTween.Setting.Panel,FontPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel.cs,InitializeComponent,The method has 233 lines of code.
Long Method,OpenTween.Setting.Panel,FontPanel2,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel2.cs,InitializeComponent,The method has 247 lines of code.
Long Method,OpenTween.Setting.Panel,GetCountPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The method has 141 lines of code.
Long Method,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,InitializeComponent,The method has 146 lines of code.
Long Method,OpenTween.Setting.Panel,NotifyPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,InitializeComponent,The method has 176 lines of code.
Long Method,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,InitializeComponent,The method has 188 lines of code.
Long Method,OpenTween.Setting.Panel,ProxyPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ProxyPanel.cs,InitializeComponent,The method has 106 lines of code.
Long Method,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,InitializeComponent,The method has 143 lines of code.
Long Method,OpenTween.Thumbnail,ThumbnailGenerator,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The method has 128 lines of code.
Complex Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,SetFilters,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,Cyclomatic complexity of the method is 14
Complex Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,FilterDialog_Shown,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonRuleMove_Click,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ContextMenuUserPicture_Opening,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ContextMenuPostBrowser_Opening,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweetExtractor,C:\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractUrlEntities,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,ImageFromSelectedFile,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,HashtagManage,C:\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,AdjustHashtags,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweetFormatter,C:\repos\opentween_OpenTween\OpenTween\TweetFormatter.cs,AutoLinkHtmlInternal,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,ExceptionOutMessage,Cyclomatic complexity of the method is 13
Complex Method,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,Cyclomatic complexity of the method is 52
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TimerTimeline_Elapsed,Cyclomatic complexity of the method is 25
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTimeline,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,Cyclomatic complexity of the method is 20
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,Cyclomatic complexity of the method is 13
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,FavAddAsyncInternal,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostMessageAsyncInternal,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RetweetAsyncInternal,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ContextMenuOperate_Opening,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_MouseMove,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetListProperty,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,FormatStatusText,Cyclomatic complexity of the method is 15
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,Colorize,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoSamePostToAnotherTab,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoPost,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoRelPost,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoInReplyToPostTree,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoBackInReplyToPostTree,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTasktrayIcon,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ContextMenuTabProperty_Opening,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ProcessDialogKey,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CheckReplyTo,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAsync,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Shown,Cyclomatic complexity of the method is 15
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SearchButton_Click,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MenuItemOperate_DropDownOpening,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyEvent,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreatePostsFromStatusData,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetRelatedResult,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateDirectMessagesFromJson,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,ReplaceTextFromApi,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateAccessibleText,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateHtmlAnchor,Cyclomatic complexity of the method is 10
Complex Method,OpenTween.Models,PostFilterRule,C:\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeFiltersExpr,Cyclomatic complexity of the method is 9
Complex Method,OpenTween.Models,PostFilterRule,C:\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeSummary,Cyclomatic complexity of the method is 28
Complex Method,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,SaveConfig,Cyclomatic complexity of the method is 9
Long Parameter List,OpenTween,NativeMethods,C:\repos\opentween_OpenTween\OpenTween\NativeMethods.cs,SetProxy,The method has 5 parameters. Parameters: pType' host' port' username' password
Long Parameter List,OpenTween,HashtagManage,C:\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,HashtagManage,The method has 6 parameters. Parameters: hashSuplForm' history' permanentHash' IsPermanent' IsHead' IsNotAddToAtReply
Long Parameter List,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,Notify,The method has 6 parameters. Parameters: notificationType' id' title' text' icon' url
Long Parameter List,OpenTween,SearchOptions,C:\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,SearchOptions,The method has 5 parameters. Parameters: type' query' newTab' caseSensitive' useRegex
Long Parameter List,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostMessageAsyncInternal,The method has 5 parameters. Parameters: p' ct' postParams' uploadService' uploadItems
Long Parameter List,OpenTween,IInternetSecurityManager,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,ProcessUrlAction,The method has 8 parameters. Parameters: pwszUrl' dwAction' pPolicy' cbPolicy' pContext' cbContext' dwFlags' dwReserved
Long Parameter List,OpenTween,IInternetSecurityManager,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,QueryCustomPolicy,The method has 7 parameters. Parameters: pwszUrl' guidKey' ppPolicy' pcbPolicy' pContext' cbContext' dwReserved
Long Parameter List,OpenTween,InternetSecurityManager,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,ProcessUrlAction,The method has 8 parameters. Parameters: pwszUrl' dwAction' pPolicy' cbPolicy' pContext' cbContext' dwFlags' dwReserved
Long Parameter List,OpenTween,InternetSecurityManager,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,QueryCustomPolicy,The method has 7 parameters. Parameters: pwszUrl' guidKey' ppPolicy' pcbPolicy' pContext' cbContext' dwReserved
Long Parameter List,OpenTween.Api,TwitterApi,C:\repos\opentween_OpenTween\OpenTween\Api\TwitterApi.cs,StatusesUpdate,The method has 6 parameters. Parameters: status' replyToId' mediaIds' autoPopulateReplyMetadata' excludeReplyUserIds' attachmentUrl
Long Parameter List,OpenTween.Api,TwitterApi,C:\repos\opentween_OpenTween\OpenTween\Api\TwitterApi.cs,SearchTweets,The method has 5 parameters. Parameters: query' lang' count' maxId' sinceId
Long Parameter List,OpenTween.Api,TwitterApi,C:\repos\opentween_OpenTween\OpenTween\Api\TwitterApi.cs,ListsStatuses,The method has 5 parameters. Parameters: listId' count' maxId' sinceId' includeRTs
Long Parameter List,OpenTween.Connection,Networking,C:\repos\opentween_OpenTween\OpenTween\Connection\Networking.cs,SetWebProxy,The method has 5 parameters. Parameters: proxyType' proxyAddress' proxyPort' proxyUser' proxyPassword
Long Parameter List,OpenTween.Connection,OAuthEchoHandler,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthEchoHandler.cs,CreateHandler,The method has 7 parameters. Parameters: innerHandler' authServiceProvider' consumerKey' consumerSecret' accessToken' accessSecret' realm
Long Parameter List,OpenTween.Connection,OAuthHandler,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthHandler.cs,OAuthHandler,The method has 5 parameters. Parameters: innerHandler' consumerKey' consumerSecret' accessToken' accessSecret
Long Parameter List,OpenTween.Connection,OAuthUtility,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,CreateAuthorization,The method has 8 parameters. Parameters: httpMethod' requestUri' query' consumerKey' consumerSecret' token' tokenSecret' realm
Long Parameter List,OpenTween.Connection,OAuthUtility,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,CreateSignature,The method has 5 parameters. Parameters: consumerSecret' tokenSecret' method' uri' parameter
Long Parameter List,OpenTween.Models,PostFilterRule,C:\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeFiltersExpr,The method has 10 parameters. Parameters: postParam' filterName' filterBody' filterSource' filterRt' useRegex' caseSensitive' useNameField' useLambda' filterByUrl
Long Parameter List,OpenTween.Models,PostFilterRule,C:\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeGenericFilter,The method has 6 parameters. Parameters: postParam' targetFieldName' pattern' useRegex' caseSensitive' exactMatch
Long Parameter List,OpenTween.OpenTweenCustomControl,DetailsListView,C:\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,ChangeSubItemStyles,The method has 5 parameters. Parameters: itemIndex' subitemIndex' backColor' foreColor' fnt
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SelectionSearchContextMenuItem is 30.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchWikipediaContextMenuItem is 30.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchPublicSearchContextMenuItem is 33.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchPostsDetailToolStripMenuItem is 34.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchAtPostsDetailToolStripMenuItem is 36.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ListManageUserContextToolStripMenuItem is 38.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SelectionTranslationToolStripMenuItem is 37.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ShowFriendShipToolStripMenuItem is 31.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ListManageUserContextToolStripMenuItem3 is 39.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ShowUserStatusToolStripMenuItem is 31.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchPostsDetailNameToolStripMenuItem is 38.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchAtPostsDetailNameToolStripMenuItem is 40.
Long Identifier,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SaveIconPictureToolStripMenuItem is 32.
Long Identifier,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,,The length of the parameter SelectionCopyToolStripMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,FavoriteChange,The length of the parameter multiFavoriteChangeDialogEnable is 31.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter UrlMultibyteSplitPullDownMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter PreventSmsCommandPullDownMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter UrlAutoShortenPullDownMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter IdeographicSpaceToSpacePullDownMenuItem is 39.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter FavoriteRetweetUnofficialMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ShowUserTimelineToolStripMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter TinyUrlConvertToolStripMenuItem is 31.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter UrlConvertAutoToolStripMenuItem is 31.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter DumpPostClassToolStripMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ListManageUserContextToolStripMenuItem2 is 39.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ReTweetUnofficialStripMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter FavoriteRetweetUnofficialContextMenu is 36.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ShowUserTimelineContextMenuItem is 31.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter TwitterApiStatusToolStripMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter LockListSortOrderToolStripMenuItem is 34.
Long Identifier,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter IdeographicSpaceToSpaceMenuItem is 31.
Long Identifier,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,,The length of the parameter url_invalid_without_protocol_preceding_chars is 44.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_DOWNLOAD_SIGNED_ACTIVEX is 33.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_SCRIPT_OVERRIDE_SAFETY is 32.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_TREATASUNTRUSTED is 34.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_NO_WEBOC_SCRIPT is 33.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_HTML_SUBMIT_FORMS_FROM is 32.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_HTML_SUBMIT_FORMS_TO is 30.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_HTML_SUBFRAME_NAVIGATE is 32.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_SHELL_INSTALL_DTITEMS is 31.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_SILENT_LOGON_OK is 37.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_MUST_PROMPT_USER is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY is 36.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_AUTHENTICATE_CLEARTEXT_OK is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE is 41.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_AUTHENTICATE_MUTUAL_ONLY is 34.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_COOKIES_SESSION_THIRD_PARTY is 37.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_ADDING_CHANNELS is 41.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_EDITING_CHANNELS is 42.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS is 43.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS is 46.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS is 47.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS is 48.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING is 41.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_CURR_MAX is 31.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_CHANNEL_SOFTDIST_MIN is 30.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_CHANNEL_SOFTDIST_PERMISSIONS is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CHANNEL_SOFTDIST_PRECACHE is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_CHANNEL_SOFTDIST_MAX is 30.
Long Identifier,OpenTween.Setting.Panel,CooperatePanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,,The length of the parameter ImgAzyobuziNetDisabledInDMCheckBox is 34.
Long Statement,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.ListViewGroup listViewGroup1 = new System.Windows.Forms.ListViewGroup("Timeline"' System.Windows.Forms.HorizontalAlignment.Left); " is 150.
Long Statement,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.ListViewGroup listViewGroup2 = new System.Windows.Forms.ListViewGroup("Others"' System.Windows.Forms.HorizontalAlignment.Left); " is 148.
Long Statement,OpenTween,MyApplication,C:\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,Main,The length of the statement  "                    MessageBox.Show(text' MyCommon.ReplaceAppName(Properties.Resources.StartupText2)' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 132.
Long Statement,OpenTween,MyApplication,C:\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,GetPreviousProcess,The length of the statement  "                    .FirstOrDefault(p => p.MainModule.FileName.Equals(currentProcess.MainModule.FileName' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,OpenTween,MyApplication,C:\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,SetConfigDirectoryPath,The length of the statement  "                            var message = string.Format(Properties.Resources.SettingPath_Relocation' Application.StartupPath' MyCommon.settingPath); " is 120.
Long Statement,OpenTween,AtIdSupplement,C:\repos\opentween_OpenTween\OpenTween\AtIdSupplement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AtIdSupplement)); " is 134.
Long Statement,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,Setting_FormClosing,The length of the statement  "                if (MessageBox.Show(Properties.Resources.Setting_FormClosing1' "Confirm"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel) " is 150.
Long Statement,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The length of the statement  "                    if (path.StartsWith("\""' StringComparison.Ordinal) && path.Length > 2 && path.IndexOf("\""' 2' StringComparison.Ordinal) > -1) " is 127.
Long Statement,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AppendSettingDialog)); " is 139.
Long Statement,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The length of the statement  "            this.TreeViewSetting.BeforeSelect += new System.Windows.Forms.TreeViewCancelEventHandler(this.TreeViewSetting_BeforeSelect); " is 124.
Long Statement,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The length of the statement  "            this.GetPeriodPanel.IntervalChanged += new System.EventHandler<OpenTween.IntervalChangedEventArgs>(this.GetPeriodPanel_IntervalChanged); " is 136.
Long Statement,OpenTween,AuthDialog,C:\repos\opentween_OpenTween\OpenTween\AuthDialog.cs,AuthLinkLabel_LinkClicked,The length of the statement  "                MessageBox.Show(this' string.Format(Properties.Resources.BrowserStartFailed' ex.ErrorCode)' this.Text' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 149.
Long Statement,OpenTween,AuthDialog,C:\repos\opentween_OpenTween\OpenTween\AuthDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AuthDialog)); " is 130.
Long Statement,OpenTween,AuthDialog,C:\repos\opentween_OpenTween\OpenTween\AuthDialog.cs,InitializeComponent,The length of the statement  "            this.AuthLinkLabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.AuthLinkLabel_LinkClicked); " is 124.
Long Statement,OpenTween,EmojiFormatter,C:\repos\opentween_OpenTween\OpenTween\EmojiFormatter.cs,ReplaceEmojiToImg,The length of the statement  "                    @"\ud83d[\udc68-\udc69](?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92])|(?:\ud83c[\udfcb\udfcc]|\ud83d\udd75|\u26f9)(?:\ufe0f|\ud83c[\udffb-\udfff])\u200d[\u2640\u2642]\ufe0f|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd37-\udd39\udd3d\udd3e\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|(?:[\u0023\u002a\u0030-\u0039])\ufe0f?\u20e3|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\uddd1-\udddd]|[\u270a\u270b])(?:\ud83c[\udffb-\udfff]|)|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud800\udc00|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a-\udc6d\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\udeeb\udeec\udef4-\udef8]|\ud83e[\udd10-\udd17\udd1d\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd40-\udd45\udd47-\udd4c\udd50-\udd6b\udd80-\udd97\uddc0\uddd0\uddde-\udde6]|[\u23e9-\u23ec\u23f0\u23f3\u2640\u2642\u2695\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a]|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u00a9\u00ae\u203c\u2049\u2122\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2694\u2696\u2697\u2699\u269b\u269c\u26a0\u26a1\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))"' " is 6283.
Long Statement,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,CreateListViewItem,The length of the statement  "            string[] s = { source.CreatedAt.ToString()' source.Event.ToUpper(CultureInfo.CurrentCulture)' source.Username' source.Target }; " is 127.
Long Statement,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,IsFilterMatch,The length of the statement  "                        MessageBox.Show(Properties.Resources.ButtonOK_ClickText3 + ex.Message' ""' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 125.
Long Statement,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,SaveLogButton_Click,The length of the statement  "            DialogResult rslt = MessageBox.Show(string.Format(Properties.Resources.SaveLogMenuItem_ClickText5' Environment.NewLine)' " is 120.
Long Statement,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,SaveLogButton_Click,The length of the statement  "                    SaveFileDialog1.FileName = MyCommon.GetAssemblyName() + "Events" + _curTab.Tag + DateTime.Now.ToString("yyMMdd-HHmmss") + ".tsv"; " is 129.
Long Statement,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventViewerDialog)); " is 137.
Long Statement,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The length of the statement  "            this.EventList.CacheVirtualItems += new System.Windows.Forms.CacheVirtualItemsEventHandler(this.EventList_CacheVirtualItems); " is 125.
Long Statement,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The length of the statement  "            this.EventList.RetrieveVirtualItem += new System.Windows.Forms.RetrieveVirtualItemEventHandler(this.EventList_RetrieveVirtualItem); " is 131.
Long Statement,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonDelete_Click,The length of the statement  "            var rslt = MessageBox.Show(tmp' Properties.Resources.ButtonDelete_ClickText2' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 131.
Long Statement,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,The length of the statement  "                MessageBox.Show(Properties.Resources.ButtonOK_ClickText1' Properties.Resources.ButtonOK_ClickText2' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 150.
Long Statement,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,The length of the statement  "                    MessageBox.Show(Properties.Resources.ButtonOK_ClickText4' Properties.Resources.ButtonOK_ClickText2' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 144.
Long Statement,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,IsValidRegexp,The length of the statement  "                MessageBox.Show(Properties.Resources.ButtonOK_ClickText3 + ex.Message' Properties.Resources.ButtonOK_ClickText2' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 163.
Long Statement,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckMatchRule,The length of the statement  "                if (string.IsNullOrEmpty(UID.Text) && string.IsNullOrEmpty(MSG1.Text) && string.IsNullOrEmpty(TextSource.Text) && CheckRetweet.Checked == false) " is 144.
Long Statement,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckExcludeRule,The length of the statement  "                if (string.IsNullOrEmpty(ExUID.Text) && string.IsNullOrEmpty(ExMSG1.Text) && string.IsNullOrEmpty(TextExSource.Text) && CheckExRetweet.Checked == false) " is 152.
Long Statement,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FilterDialog)); " is 132.
Long Statement,OpenTween,IndexedSortedSet<T>,C:\repos\opentween_OpenTween\OpenTween\IndexedSortedSet.cs,CopyTo,The length of the statement  "                throw new ArgumentException($"{nameof(arrayIndex)} is equal to or greater than {nameof(array)}.Length."' nameof(arrayIndex)); " is 125.
Long Statement,OpenTween,LoginDialog,C:\repos\opentween_OpenTween\OpenTween\LoginDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoginDialog)); " is 131.
Long Statement,OpenTween,SendErrorReportForm,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,buttonSendByDM_Click,The length of the statement  "                MessageBox.Show(Properties.Resources.SendErrorReport_DmSendCompleted' this.Text' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 131.
Long Statement,OpenTween,SendErrorReportForm,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SendErrorReportForm)); " is 139.
Long Statement,OpenTween,SendErrorReportForm,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            this.buttonSendByDM.DataBindings.Add(new System.Windows.Forms.Binding("Enabled"' this.bindingSource' "CanSendByDM"' true)); " is 123.
Long Statement,OpenTween,SendErrorReportForm,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            this.textBoxErrorReport.DataBindings.Add(new System.Windows.Forms.Binding("Text"' this.bindingSource' "ReportText"' true)); " is 123.
Long Statement,OpenTween,SendErrorReportForm,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxAnonymouns.DataBindings.Add(new System.Windows.Forms.Binding("Checked"' this.bindingSource' "AnonymousReport"' true)); " is 131.
Long Statement,OpenTween,ErrorReport,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,SendByMailAsync,The length of the statement  "            var mailto = $"mailto:{Uri.EscapeDataString(toAddress)}?subject={Uri.EscapeDataString(subject)}&body={Uri.EscapeDataString(body)}"; " is 131.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,AppendQuoteTweetAsync,The length of the statement  "            var loadingQuoteHtml = quoteStatusIds.Select(x => FormatQuoteTweetHtml(x' Properties.Resources.LoadingText' isReply: false)); " is 125.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,GetUserId,The length of the statement  "            Match m = Regex.Match(this._postBrowserStatusText' @"^https?://twitter.com/(#!/)?(?<ScreenName>[a-zA-Z0-9_]+)(/status(es)?/[0-9]+)?$"); " is 135.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,IconNameToolStripMenuItem_Click,The length of the statement  "            await this.Owner.OpenUriInBrowserAsync(imageUrl.Remove(imageUrl.LastIndexOf("_normal"' StringComparison.Ordinal)' 7)); // "_normal".Length " is 138.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ContextMenuPostBrowser_Opening,The length of the statement  "            MatchCollection ma = Regex.Matches(this.PostBrowser.DocumentText' @"href=""https?://twitter.com/(#!/)?(?<ScreenName>[a-zA-Z0-9_]+)(/status(es)?/[0-9]+)?"""); " is 157.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,FriendshipAllMenuItem_Click,The length of the statement  "            MatchCollection ma = Regex.Matches(this.PostBrowser.DocumentText' @"href=""https?://twitter.com/(#!/)?(?<ScreenName>[a-zA-Z0-9_]+)(/status(es)?/[0-9]+)?"""); " is 157.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetDetailsView)); " is 136.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ContextMenuUserPicture.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuUserPicture_Opening); " is 121.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ListManageUserContextToolStripMenuItem3.Click += new System.EventHandler(this.ListManageUserContextToolStripMenuItem_Click); " is 129.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchPostsDetailNameToolStripMenuItem.Click += new System.EventHandler(this.SearchPostsDetailNameToolStripMenuItem_Click); " is 128.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchAtPostsDetailNameToolStripMenuItem.Click += new System.EventHandler(this.SearchAtPostsDetailNameToolStripMenuItem_Click); " is 132.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.PostBrowser.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.PostBrowser_PreviewKeyDown); " is 120.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ContextMenuPostBrowser.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuPostBrowser_Opening); " is 121.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchPostsDetailToolStripMenuItem.Click += new System.EventHandler(this.SearchPostsDetailToolStripMenuItem_Click); " is 120.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchAtPostsDetailToolStripMenuItem.Click += new System.EventHandler(this.SearchAtPostsDetailToolStripMenuItem_Click); " is 124.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ListManageUserContextToolStripMenuItem.Click += new System.EventHandler(this.ListManageUserContextToolStripMenuItem_Click); " is 128.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SelectionTranslationToolStripMenuItem.Click += new System.EventHandler(this.SelectionTranslationToolStripMenuItem_Click); " is 126.
Long Statement,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SourceLinkLabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.SourceLinkLabel_LinkClicked); " is 128.
Long Statement,OpenTween,TweetExtractor,C:\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractMentionEntities,The length of the statement  "            var matchesAtList = Regex.Matches(text' @"(^|[^a-zA-Z0-9_/])([@＠][a-zA-Z0-9_]{1'20}/[a-zA-Z][a-zA-Z0-9\p{IsLatin-1Supplement}\-]{0'79})"); " is 138.
Long Statement,OpenTween,WaitingDialog,C:\repos\opentween_OpenTween\OpenTween\WaitingDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WaitingDialog)); " is 133.
Long Statement,OpenTween,InputDialog,C:\repos\opentween_OpenTween\OpenTween\InputDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InputDialog)); " is 131.
Long Statement,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,ImageFromSelectedFile,The length of the statement  "                                string.Format(Properties.Resources.PostPictureWarn3' this.ServiceName' MakeAvailableServiceText(ext' size)' ext' item.Name)' " is 124.
Long Statement,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MediaSelector)); " is 133.
Long Statement,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.ImagefilePathText.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 129.
Long Statement,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.ImagePageCombo.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 126.
Long Statement,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.FilePickButton.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 126.
Long Statement,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.ImageServiceCombo.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 129.
Long Statement,OpenTween,HashtagManage,C:\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,AdjustHashtags,The length of the statement  "                        if (isShowWarn) MessageBox.Show("Invalid hashtag. -> " + hash' "Hashtag warning"' MessageBoxButtons.OK' MessageBoxIcon.Asterisk); " is 129.
Long Statement,OpenTween,HashtagManage,C:\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(HashtagManage)); " is 133.
Long Statement,OpenTween,ListAvailable,C:\repos\opentween_OpenTween\OpenTween\ListAvailable.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListAvailable)); " is 133.
Long Statement,OpenTween,ListManage,C:\repos\opentween_OpenTween\OpenTween\ListManage.cs,ListsList_SelectedIndexChanged,The length of the statement  "            this.GetMoreUsersButton.Text = this.UserList.Items.Count > 0 ? Properties.Resources.ListManageGetMoreUsers2 : Properties.Resources.ListManageGetMoreUsers1; " is 155.
Long Statement,OpenTween,ListManage,C:\repos\opentween_OpenTween\OpenTween\ListManage.cs,DeleteUserButton_Click,The length of the statement  "                if (MessageBox.Show(Properties.Resources.ListManageDeleteUser1' Application.ProductName' MessageBoxButtons.OKCancel) == DialogResult.OK) " is 136.
Long Statement,OpenTween,ListManage,C:\repos\opentween_OpenTween\OpenTween\ListManage.cs,DeleteListButton_Click,The length of the statement  "                if (MessageBox.Show(Properties.Resources.ListManageDeleteLists1' Application.ProductName' MessageBoxButtons.OKCancel) == DialogResult.OK) " is 137.
Long Statement,OpenTween,ListManage,C:\repos\opentween_OpenTween\OpenTween\ListManage.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListManage)); " is 130.
Long Statement,OpenTween,TabsDialog,C:\repos\opentween_OpenTween\OpenTween\TabsDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TabsDialog)); " is 130.
Long Statement,OpenTween,TweetFormatter,C:\repos\opentween_OpenTween\OpenTween\TweetFormatter.cs,FormatHashtagEntity,The length of the statement  "            return "<a class=\"hashtag\" href=\"https://twitter.com/search?q=%23" + eu(entity.Text) + "\">" + t(e(targetText)) + "</a>"; " is 124.
Long Statement,OpenTween,TweetThumbnail,C:\repos\opentween_OpenTween\OpenTween\TweetThumbnail.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetThumbnail)); " is 134.
Long Statement,OpenTween,UpdateDialog,C:\repos\opentween_OpenTween\OpenTween\UpdateDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UpdateDialog)); " is 132.
Long Statement,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                    BindingFlags.CreateInstance' null' null' new object[] { "DIRECT_MESSAGE"' "DirectMessage" }' CultureInfo.InvariantCulture); " is 123.
Long Statement,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                    BindingFlags.CreateInstance' null' null' new object[] { "USERSTREAM_EVENT"' "UserStream Event" }' CultureInfo.InvariantCulture); " is 128.
Long Statement,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                _targetConnector.GetType().InvokeMember("EncryptionAlgorithm"' BindingFlags.SetProperty' null' _targetConnector' new object[] { encryptType }' CultureInfo.InvariantCulture); " is 173.
Long Statement,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                MethodInfo mi = _targetConnector.GetType().GetMethod("Register"' new Type[] { _growlApp.GetType()' _connector.GetType("Growl.Connector.NotificationType[]") }); " is 159.
Long Statement,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                MethodInfo miHandler = typeof(GrowlHelper).GetMethod("GrowlCallbackHandler"' BindingFlags.NonPublic | BindingFlags.Instance); " is 125.
Long Statement,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,Notify,The length of the statement  "            _targetConnector.GetType().InvokeMember("Notify"' BindingFlags.InvokeMethod' null' _targetConnector' new object[] { n' cc }' CultureInfo.InvariantCulture); " is 155.
Long Statement,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,GrowlCallbackHandler,The length of the statement  "                string notifyId = (string)callbackData.GetType().GetProperty("NotificationID").GetGetMethod().Invoke(callbackData' null); " is 121.
Long Statement,OpenTween,InputTabName,C:\repos\opentween_OpenTween\OpenTween\InputTabName.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InputTabName)); " is 132.
Long Statement,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,TraceOut,The length of the statement  "                var fileName = string.Format("{0}Trace-{1:0000}{2:00}{3:00}-{4:00}{5:00}{6:00}.log"' GetAssemblyName()' now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second); " is 168.
Long Statement,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,ExceptionOut,The length of the statement  "                var fileName = string.Format("{0}-{1:0000}{2:00}{3:00}-{4:00}{5:00}{6:00}.log"' GetAssemblyName()' now.Year' now.Month' now.Day' now.Hour' now.Minute' now.Second); " is 163.
Long Statement,OpenTween,MyLists,C:\repos\opentween_OpenTween\OpenTween\MyLists.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MyLists)); " is 127.
Long Statement,OpenTween,MyLists,C:\repos\opentween_OpenTween\OpenTween\MyLists.cs,InitializeComponent,The length of the statement  "            this.ListsCheckedListBox.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.ListsCheckedListBox_ItemCheck); " is 121.
Long Statement,OpenTween,OpenURL,C:\repos\opentween_OpenTween\OpenTween\OpenURL.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(OpenURL)); " is 127.
Long Statement,OpenTween,SearchWordDialog,C:\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SearchWordDialog)); " is 136.
Long Statement,OpenTween,SearchWordDialog,C:\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,InitializeComponent,The length of the statement  "            this.linkLabelSearchHelp.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabelSearchHelp_LinkClicked); " is 136.
Long Statement,OpenTween,SettingBase<T>,C:\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,LoadSettings,The length of the statement  "                                MessageBox.Show("File: " + GetSettingFilePath(FileId) + Environment.NewLine + "Use old setting file' because application can't read this setting file."); " is 153.
Long Statement,OpenTween,SettingBase<T>,C:\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,LoadSettings,The length of the statement  "                MessageBox.Show("File: " + GetSettingFilePath(FileId) + Environment.NewLine + "Use default setting' because application can't read this setting file."); " is 152.
Long Statement,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtmlAsync,The length of the statement  "                m.Groups[1].Value + await this.ExpandUrlAsync(m.Groups[2].Value' redirectLimit).ConfigureAwait(false) + m.Groups[3].Value); " is 123.
Long Statement,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ShortenByBitlyAsync,The length of the statement  "            if (string.IsNullOrEmpty(this.BitlyAccessToken) && (string.IsNullOrEmpty(this.BitlyId) || string.IsNullOrEmpty(this.BitlyKey))) " is 127.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,LinkLabel1_LinkClicked,The length of the statement  "            await this.mainForm.OpenUriInBrowserAsync("https://support.twitter.com/groups/31-twitter-basics/topics/111-features/articles/268350-x8a8d-x8a3c-x6e08-x307f-x30a2-x30ab-x30a6-x30f3-x30c8-x306b-x3064-x3044-x3066"); " is 212.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,LinkLabel2_LinkClicked,The length of the statement  "            await this.mainForm.OpenUriInBrowserAsync("https://support.twitter.com/groups/31-twitter-basics/topics/107-my-profile-account-settings/articles/243055-x516c-x958b-x3001-x975e-x516c-x958b-x30a2-x30ab-x30a6-x30f3-x30c8-x306b-x3064-x3044-x3066"); " is 243.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,DoChangeIcon,The length of the statement  "                MessageBox.Show("Err:" + ex.Message + Environment.NewLine + Properties.Resources.ChangeIconToolStripMenuItem_ClickText4); " is 121.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UserInfoDialog)); " is 134.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.ContextMenuRecentPostBrowser.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuRecentPostBrowser_Opening); " is 133.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.RecentPostBrowser.Navigating += new System.Windows.Forms.WebBrowserNavigatingEventHandler(this.WebBrowser_Navigating); " is 123.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.DescriptionBrowser.Navigating += new System.Windows.Forms.WebBrowserNavigatingEventHandler(this.WebBrowser_Navigating); " is 124.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.LinkLabelTweet.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked); " is 121.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.LinkLabelFollowers.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked); " is 125.
Long Statement,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.LinkLabelFollowing.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked); " is 125.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.FirstCountApi != 0 && !Twitter.VerifyFirstApiResultCount(SettingManager.Common.FirstCountApi)) " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.FavoritesCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.Favorites' SettingManager.Common.FavoritesCountApi)) " is 154.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.ListCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.List' SettingManager.Common.ListCountApi)) " is 139.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.SearchCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.PublicSearch' SettingManager.Common.SearchCountApi)) " is 151.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.UserTimelineCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.UserTimeline' SettingManager.Common.UserTimelineCountApi)) " is 163.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            tw.Initialize(SettingManager.Common.Token' SettingManager.Common.TokenSecret' SettingManager.Common.UserName' SettingManager.Common.UserId); " is 140.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            ImageSelector.Initialize(tw' this.tw.Configuration' SettingManager.Common.UseImageServiceName' SettingManager.Common.UseImageService); " is 134.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTimeline,The length of the statement  "                            MyCommon.TraceOut(ex' $"TabType: {tabModel.TabType}' Count: {tabModel.AllCount}' ListSize: {listView.VirtualListSize}"); " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The length of the statement  "                                //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2; " is 194.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The length of the statement  "                                //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2; " is 188.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The length of the statement  "                                //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2; " is 179.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The length of the statement  "                        //if (SettingDialog.DispUsername) { NotifyIcon1.BalloonTipTitle = tw.Username + " - "; } else { NotifyIcon1.BalloonTipTitle = ""; } " is 131.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The length of the statement  "                            //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2; " is 194.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The length of the statement  "                            //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2; " is 188.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The length of the statement  "                            //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2; " is 179.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The length of the statement  "            if (this.ExistCurrentPost && StatusText.Text.Trim() == string.Format("RT @{0}: {1}"' _curPost.ScreenName' _curPost.TextFromApi)) " is 128.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The length of the statement  "                var ret = MessageBox.Show(Properties.Resources.PostLengthOverMessage1' Properties.Resources.PostLengthOverMessage2' MessageBoxButtons.OKCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2); " is 202.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,FavRemoveAsyncInternal,The length of the statement  "                    p.Report(string.Format(Properties.Resources.GetTimelineWorker_RunWorkerCompletedText17' allCount' statusIds.Count' failedCount)); " is 129.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveToFavToolStripMenuItem_Click,The length of the statement  "                await this.OpenUriInBrowserAsync(MyCommon.TwitterUrl + "#!/" + GetCurTabPost(_curList.SelectedIndices[0]).ScreenName + "/favorites"); " is 133.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ContextMenuOperate_Opening,The length of the statement  "            if (_statuses.Tabs[ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.DirectMessage || !this.ExistCurrentPost || _curPost.IsDm) " is 135.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveSpecifiedTab,The length of the statement  "                    this.ListTab.SelectTab((this._beforeSelectedTab != null && this.ListTab.TabPages.Contains(this._beforeSelectedTab)) ? this._beforeSelectedTab : this.ListTab.TabPages[0]); " is 170.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_MouseMove,The length of the statement  "                Rectangle dragEnableRectangle = new Rectangle(_tabMouseDownPoint.X - (SystemInformation.DragSize.Width / 2)' _tabMouseDownPoint.Y - (SystemInformation.DragSize.Height / 2)' SystemInformation.DragSize.Width' SystemInformation.DragSize.Height); " is 242.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,FormatStatusText,The length of the statement  "                if (Regex.IsMatch(statusText' @"^[+\-\[\]\s\\.'*/(){}^~|='&%$#""<>?]*(d|dm|m)([+\-\[\]\s\\.'*/(){}^~|='&%$#""<>?]+|$)"' RegexOptions.IgnoreCase) " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The length of the statement  "                                                    e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"' " is 189.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "            var realIconSize = new SizeF(this._iconSz * this.CurrentScaleFactor.Width' this._iconSz * this.CurrentScaleFactor.Height).ToSize(); " is 131.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "                iconRect = Rectangle.Intersect(new Rectangle(e.Item.GetBounds(ItemBoundsPortion.Icon).Location' realIconSize)' itemRect); " is 121.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "                iconRect = Rectangle.Intersect(new Rectangle(e.Item.GetBounds(ItemBoundsPortion.Icon).Location' new Size(1' 1))' itemRect); " is 123.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "                Rectangle stateRect = Rectangle.Intersect(new Rectangle(new Point(iconRect.X + realIconSize.Width + 2' iconRect.Y)' realStateSize)' itemRect); " is 142.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DoTabSearch,The length of the statement  "                MessageBox.Show(Properties.Resources.DoTabSearchText2' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DoTabSearch,The length of the statement  "                MessageBox.Show(Properties.Resources.DoTabSearchText1' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 138.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DoTabSearch,The length of the statement  "                MessageBox.Show(Properties.Resources.DoTabSearchText2' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ShowSearchDialog,The length of the statement  "                        MessageBox.Show(Properties.Resources.DoTabSearchText1' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 138.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ShowSearchDialog,The length of the statement  "                        MessageBox.Show(Properties.Resources.DoTabSearchText2' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The length of the statement  "                if (_statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 || " is 124.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The length of the statement  "                            if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults) " is 193.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The length of the statement  "            if (this._curTab != null && this._statuses.GetTabByName(this._curTab.Text) != null) isDm = this._statuses.GetTabByName(this._curTab.Text).TabType == MyCommon.TabUsageType.DirectMessage; " is 185.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The length of the statement  "                        sb.AppendFormat("{0}:{1} [https://twitter.com/{0}/status/{2}]{3}"' post.ScreenName' post.TextSingleLine' post.RetweetedId' Environment.NewLine); " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The length of the statement  "                        sb.AppendFormat("{0}:{1} [https://twitter.com/{0}/status/{2}]{3}"' post.ScreenName' post.TextSingleLine' post.StatusId' Environment.NewLine); " is 141.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoInReplyToPostTree,The length of the statement  "            if (curTabClass.TabType == MyCommon.TabUsageType.PublicSearch && _curPost.InReplyToStatusId == null && _curPost.TextFromApi.Contains("@")) " is 138.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoBackInReplyToPostTree,The length of the statement  "                        var post = postList.FirstOrDefault((pst) => { return pst.Tab == curTabClass && isForward ? pst.Index > _curItemIndex : pst.Index < _curItemIndex; }); " is 149.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoStatus,The length of the statement  "                if (_statuses.Tabs[ListTab.TabPages[tabidx].Text].TabType != MyCommon.TabUsageType.DirectMessage && _statuses.Tabs[ListTab.TabPages[tabidx].Text].Contains(statusId)) " is 165.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoDirectMessage,The length of the statement  "                if (_statuses.Tabs[ListTab.TabPages[tabidx].Text].TabType == MyCommon.TabUsageType.DirectMessage && _statuses.Tabs[ListTab.TabPages[tabidx].Text].Contains(statusId)) " is 165.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenURLFileMenuItem_Click,The length of the statement  "            var ret = InputDialog.Show(this' Properties.Resources.OpenURL_InputText' Properties.Resources.OpenURL_Caption' out var inputText); " is 130.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveLogMenuItem_Click,The length of the statement  "            DialogResult rslt = MessageBox.Show(string.Format(Properties.Resources.SaveLogMenuItem_ClickText1' Environment.NewLine)' " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The length of the statement  "                    if ((_statuses.Tabs[ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.DirectMessage && isAuto) || (!isAuto && !isReply)) " is 129.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TabMenuItem_Click,The length of the statement  "                _curPost = _statuses.Tabs[this.ListTab.SelectedTab.Text][((DetailsListView)this.ListTab.SelectedTab.Tag).SelectedIndices[0]]; " is 125.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveOrCopy,The length of the statement  "                if (MessageBox.Show(_tmp' Properties.Resources.IDRuleMenuItem_ClickText5' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveOrCopy,The length of the statement  "                if (MessageBox.Show(_tmp' Properties.Resources.IDRuleMenuItem_ClickText7' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ClearTab,The length of the statement  "                if (MessageBox.Show(tmp' tabName + " " + Properties.Resources.ClearTabMenuItem_ClickText2' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel) " is 167.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The length of the statement  "                    ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText1' _statuses.GetTabByType(MyCommon.TabUsageType.Mentions).UnreadCount + _statuses.GetTabByType(MyCommon.TabUsageType.DirectMessage).UnreadCount); " is 205.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The length of the statement  "                    ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText3' ur' _statuses.GetTabByType(MyCommon.TabUsageType.Mentions).UnreadCount + _statuses.GetTabByType(MyCommon.TabUsageType.DirectMessage).UnreadCount); " is 209.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The length of the statement  "                    ttl.AppendFormat(Properties.Resources.OwnStatusTitle' tw.StatusesCount' tw.FriendsCount' tw.FollowersCount' tw.FollowersCount - followers); " is 139.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetStatusLabelText,The length of the statement  "            slbl.AppendFormat(Properties.Resources.SetStatusLabelText1' tur' tal' ur' al' urat' _postTimestamps.Count' _favTimestamps.Count' homeTab.TweetsPerHour); " is 152.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                    splitterDistance < this.SplitContainer1.Height - this.SplitContainer1.Panel2MinSize - this.SplitContainer1.SplitterWidth) " is 121.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                    if (dis > SplitContainer2.Panel1MinSize && dis < SplitContainer2.Height - SplitContainer2.Panel2MinSize - SplitContainer2.SplitterWidth) " is 136.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                        SplitContainer2.SplitterDistance = SplitContainer2.Height - SplitContainer2.Panel2MinSize - SplitContainer2.SplitterWidth; " is 122.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                if (previewDistance > this.SplitContainer3.Panel1MinSize && previewDistance < this.SplitContainer3.Width - this.SplitContainer3.Panel2MinSize - this.SplitContainer3.SplitterWidth) " is 179.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer1_SplitterMoved,The length of the statement  "                    var normalContainerHeight = this._mySize.Height - this.ToolStripContainer1.TopToolStripPanel.Height - this.ToolStripContainer1.BottomToolStripPanel.Height; " is 155.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer1_SplitterMoved,The length of the statement  "                    splitterDistance = Math.Min(splitterDistance' normalContainerHeight - this.SplitContainer1.SplitterWidth - this.SplitContainer1.Panel2MinSize); " is 143.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The length of the statement  "                    MessageBox.Show($"{repPost.ScreenName} / {repPost.Nickname}   ({repPost.CreatedAt})" + Environment.NewLine + repPost.TextFromApi); " is 130.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The length of the statement  "                        MessageBox.Show($"{repPost.ScreenName} / {repPost.Nickname}   ({repPost.CreatedAt})" + Environment.NewLine + repPost.TextFromApi); " is 130.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MultiLineMenuItem_Click,The length of the statement  "                SplitContainer2.SplitterDistance = SplitContainer2.Height - SplitContainer2.Panel2MinSize - SplitContainer2.SplitterWidth; " is 122.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAsync,The length of the statement  "                    MessageBox.Show(this' Properties.Resources.UrlConvert_BitlyAuthRequired' Application.ProductName' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 144.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAutoToolStripMenuItem_Click,The length of the statement  "                while (svc == SettingManager.Common.AutoShortUrlFirst || svc == MyCommon.UrlConverter.Nicoms || svc == MyCommon.UrlConverter.Unu); " is 130.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The length of the statement  "                        if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1) " is 166.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,doReTweetOfficial,The length of the statement  "                        if (isConfirm && MessageBox.Show(Questiontext' "Retweet"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel) " is 134.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CreateRetweetUnofficial,The length of the statement  "            statusHtml = Regex.Replace(statusHtml' "<a href=\"(?<href>.+?)\" title=\"(?<title>.+?)\">(?<text>.+?)</a>"' "${title}"); " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ApiUsageInfoMenuItem_Click,The length of the statement  "                    MessageBox.Show(Properties.Resources.ApiInfo5' Properties.Resources.ApiInfo4' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 128.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OwnStatusMenuItem_Click,The length of the statement  "            //    MessageBox.Show(Properties.Resources.ShowYourProfileText1' "Your status"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 130.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,IsTwitterId,The length of the statement  "                return !Regex.Match(name' @"^(about|jobs|tos|privacy|who_to_follow|download|messages)$"' RegexOptions.IgnoreCase).Success; " is 122.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MenuItemOperate_DropDownOpening,The length of the statement  "            if (_statuses.Tabs[ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.DirectMessage || !this.ExistCurrentPost || _curPost.IsDm) " is 135.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer3_SplitterMoved,The length of the statement  "                    splitterDistance = Math.Min(splitterDistance' normalContainerWidth - this.SplitContainer3.SplitterWidth - this.SplitContainer3.Panel2MinSize); " is 142.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,_hookGlobalHotkey_HotkeyPressed,The length of the statement  "            if ((this.WindowState == FormWindowState.Normal || this.WindowState == FormWindowState.Maximized) && this.Visible && Form.ActiveForm == this) " is 141.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CacheInfoMenuItem_Click,The length of the statement  "            //buf.AppendFormat("キャッシュメモリ容量         : {0}bytes({1}MB)" + Environment.NewLine' IconCache.CacheMemoryLimit' ((ImageDictionary)IconCache).CacheMemoryLimit / 1048576); " is 166.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyEvent,The length of the statement  "                //if (SettingDialog.DispUsername) NotifyIcon1.BalloonTipTitle = tw.Username + " - "; else NotifyIcon1.BalloonTipTitle = ""; " is 123.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyEvent,The length of the statement  "                //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [" + ev.Event.ToUpper() + "] by " + ((string)(!string.IsNullOrEmpty(ev.Username) ? ev.Username : "")' string); " is 171.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweenMain)); " is 129.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.UrlMultibyteSplitPullDownMenuItem.CheckedChanged += new System.EventHandler(this.UrlMultibyteSplitMenuItem_CheckedChanged); " is 128.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.PreventSmsCommandPullDownMenuItem.CheckedChanged += new System.EventHandler(this.PreventSmsCommandMenuItem_CheckedChanged); " is 128.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.UrlAutoShortenPullDownMenuItem.CheckedChanged += new System.EventHandler(this.UrlAutoShortenMenuItem_CheckedChanged); " is 122.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.IdeographicSpaceToSpacePullDownMenuItem.Click += new System.EventHandler(this.IdeographicSpaceToSpaceMenuItem_Click); " is 122.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer1.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.SplitContainer1_SplitterMoved); " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ContextMenuTabProperty.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuTabProperty_Opening); " is 121.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ImageSelector.FilePickDialogOpening += new System.EventHandler<System.EventArgs>(this.ImageSelector_FilePickDialogOpening); " is 128.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ImageSelector.FilePickDialogClosed += new System.EventHandler<System.EventArgs>(this.ImageSelector_FilePickDialogClosed); " is 126.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ImageSelector.SelectedServiceChanged += new System.EventHandler<System.EventArgs>(this.ImageSelector_SelectedServiceChanged); " is 130.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer3.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.SplitContainer3_SplitterMoved); " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer2.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.SplitContainer2_SplitterMoved); " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer2.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.SplitContainer2_MouseDoubleClick); " is 123.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetDetailsView.StatusChanged += new System.EventHandler<OpenTween.TweetDetailsViewStatusChengedEventArgs>(this.tweetDetailsView_StatusChanged); " is 150.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetThumbnail1.ThumbnailLoading += new System.EventHandler<System.EventArgs>(this.tweetThumbnail1_ThumbnailLoading); " is 122.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetThumbnail1.ThumbnailDoubleClick += new System.EventHandler<OpenTween.ThumbnailDoubleClickEventArgs>(this.tweetThumbnail1_ThumbnailDoubleClick); " is 153.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetThumbnail1.ThumbnailImageSearchClick += new System.EventHandler<OpenTween.ThumbnailImageSearchEventArgs>(this.tweetThumbnail1_ThumbnailImageSearchClick); " is 163.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.UrlMultibyteSplitMenuItem.CheckedChanged += new System.EventHandler(this.UrlMultibyteSplitMenuItem_CheckedChanged); " is 120.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ListManageUserContextToolStripMenuItem2.Click += new System.EventHandler(this.ListManageUserContextToolStripMenuItem_Click); " is 129.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.FavoriteRetweetUnofficialContextMenu.Click += new System.EventHandler(this.FavoriteRetweetUnofficialMenuItem_Click); " is 121.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.PostStateImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("PostStateImageList.ImageStream"))); " is 136.
Long Statement,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ContextMenuColumnHeader.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuColumnHeader_Opening); " is 123.
Long Statement,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,TweenAboutBox_Load,The length of the statement  "            this.TextBoxDescription.Text = string.Format(Properties.Resources.Description' ApplicationSettings.FeedbackTwitterName' ApplicationSettings.FeedbackEmailAddress) + Environment.NewLine + Environment.NewLine " is 205.
Long Statement,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweenAboutBox)); " is 133.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreatePostsFromStatusData,The length of the statement  "            post.AccessibleText = this.CreateAccessibleText(textFromApi' entities' (status.RetweetedStatus ?? status).QuotedStatus); " is 120.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetListStatus,The length of the statement  "                statuses = await this.Api.ListsStatuses(tab.ListInfo.Id' count' maxId: tab.OldestId' includeRTs: SettingManager.Common.IsListsIncludeRts) " is 137.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateAccessibleText,The length of the statement  "                            text = text.Replace(entity.Url' string.Format(Properties.Resources.QuoteStatus_AccessibleText' quoteStatus.User.ScreenName' quoteText)); " is 136.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateHtmlAnchor,The length of the statement  "            text = Regex.Replace(text' "(^|[^a-zA-Z0-9_/&#＃@＠>=.~])(sm|nm)([0-9]{1'10})"' "$1<a href=\"http://www.nicovideo.jp/watch/$2$3\">$2$3</a>"); " is 139.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,userStream_StatusArrived,The length of the statement  "                using (var jsonReader = JsonReaderWriterFactory.CreateJsonReader(Encoding.UTF8.GetBytes(line)' XmlDictionaryReaderQuotas.Max)) " is 126.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                        if (this.StoredEvent.Any(ev => ev.Username == evt.Username && ev.Eventtype == evt.Eventtype && ev.Target == evt.Target)) " is 120.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                        if (this.StoredEvent.Any(ev => ev.Username == evt.Username && ev.Eventtype == evt.Eventtype && ev.Target == evt.Target)) " is 120.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                    if (!TabInformations.GetInstance().BlockIds.Contains(eventData.Target.Id)) TabInformations.GetInstance().BlockIds.Add(eventData.Target.Id); " is 139.
Long Statement,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                    if (TabInformations.GetInstance().BlockIds.Contains(eventData.Target.Id)) TabInformations.GetInstance().BlockIds.Remove(eventData.Target.Id); " is 141.
Long Statement,OpenTween,InternetSecurityManager,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,ProcessUrlAction,The length of the statement  "                if (Regex.IsMatch(pwszUrl' @"^https?://((api\.)?twitter\.com/|([a-zA-Z0-9]+\.)?twimg\.com/)")) pPolicy = WebBrowserAPI.URLPOLICY_ALLOW; " is 135.
Long Statement,OpenTween.Api,BitlyApi,C:\repos\opentween_OpenTween\OpenTween\Api\BitlyApi.cs,GetAccessTokenAsync,The length of the statement  "                request.Headers.Authorization = new AuthenticationHeaderValue("Basic"' Convert.ToBase64String(Encoding.UTF8.GetBytes(authzParam))); " is 131.
Long Statement,OpenTween.Api,TwitterApiStatus,C:\repos\opentween_OpenTween\OpenTween\Api\TwitterApiStatus.cs,UpdateFromHeader,The length of the statement  "            this.UpdateFromHeader(header.ToDictionary(x => x.Key' x => string.Join("'"' x.Value)' StringComparer.OrdinalIgnoreCase)' endpointName); " is 135.
Long Statement,OpenTween.Connection,OAuthHandler,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthHandler.cs,SendAsync,The length of the statement  "            var credential = OAuthUtility.CreateAuthorization(request.Method.ToString().ToUpperInvariant()' request.RequestUri' query' " is 122.
Long Statement,OpenTween.Connection,OAuthHandler,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthHandler.cs,SendAsync,The length of the statement  "                request.Content = new StringContent(MyCommon.BuildQueryString(query)' Encoding.UTF8' "application/x-www-form-urlencoded"); " is 122.
Long Statement,OpenTween.Connection,TwitterApiConnection,C:\repos\opentween_OpenTween\OpenTween\Connection\TwitterApiConnection.cs,GetRequestTokenAsync,The length of the statement  "            var response = await GetOAuthTokenAsync(new Uri("https://api.twitter.com/oauth/request_token")' param' oauthToken: null) " is 120.
Long Statement,OpenTween.Setting.Panel,ActionPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ActionPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ActionPanel)); " is 131.
Long Statement,OpenTween.Setting.Panel,BasedPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\BasedPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BasedPanel)); " is 130.
Long Statement,OpenTween.Setting.Panel,ConnectionPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ConnectionPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConnectionPanel)); " is 135.
Long Statement,OpenTween.Setting.Panel,CooperatePanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,UserAppointUrlText_Validating,The length of the statement  "            if (!UserAppointUrlText.Text.StartsWith("http"' StringComparison.Ordinal) && !string.IsNullOrEmpty(UserAppointUrlText.Text)) " is 124.
Long Statement,OpenTween.Setting.Panel,CooperatePanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CooperatePanel)); " is 134.
Long Statement,OpenTween.Setting.Panel,CooperatePanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,InitializeComponent,The length of the statement  "            this.EnableImgAzyobuziNetCheckBox.CheckedChanged += new System.EventHandler(this.EnableImgAzyobuziNetCheckBox_CheckedChanged); " is 126.
Long Statement,OpenTween.Setting.Panel,FontPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FontPanel)); " is 129.
Long Statement,OpenTween.Setting.Panel,FontPanel2,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel2.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FontPanel2)); " is 130.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GetCountPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            this.UserTimelineTextCountApi.Validating += new System.ComponentModel.CancelEventHandler(this.UserTimelineTextCountApi_Validating); " is 131.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            this.FavoritesTextCountApi.Validating += new System.ComponentModel.CancelEventHandler(this.FavoritesTextCountApi_Validating); " is 125.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            this.GetMoreTextCountApi.Validating += new System.ComponentModel.CancelEventHandler(this.GetMoreTextCountApi_Validating); " is 121.
Long Statement,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GetPeriodPanel)); " is 134.
Long Statement,OpenTween.Setting.Panel,NotifyPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,LoadConfig,The length of the statement  "            this.ApplyEventNotifyFlag(settingCommon.EventNotifyEnabled' settingCommon.EventNotifyFlag' settingCommon.IsMyEventNotifyFlag); " is 126.
Long Statement,OpenTween.Setting.Panel,NotifyPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NotifyPanel)); " is 131.
Long Statement,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PreviewPanel)); " is 132.
Long Statement,OpenTween.Setting.Panel,ProxyPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ProxyPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProxyPanel)); " is 130.
Long Statement,OpenTween.Setting.Panel,ShortUrlPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ShortUrlPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ShortUrlPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,ShortUrlPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ShortUrlPanel.cs,InitializeComponent,The length of the statement  "            this.ComboBoxAutoShortUrlFirst.SelectedIndexChanged += new System.EventHandler(this.ComboBoxAutoShortUrlFirst_SelectedIndexChanged); " is 132.
Long Statement,OpenTween.Setting.Panel,StartupPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\StartupPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StartupPanel)); " is 132.
Long Statement,OpenTween.Setting.Panel,TweetActPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetActPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetActPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetPrvPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,InitializeComponent,The length of the statement  "            this.LabelDateTimeFormatApplied.VisibleChanged += new System.EventHandler(this.LabelDateTimeFormatApplied_VisibleChanged); " is 122.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://(?:www\.)?bcphotoshare\.com/photos/\d+/(\d+)$"' "http://images.bcphotoshare.com/storages/${1}/thumb180.jpg")' " is 148.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://p\.twipple\.jp/(?<contentId>[0-9a-z]+)"' "http://p.twipple.jp/show/large/${contentId}")' " is 127.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://www\.(mypix\.jp|shamoji\.info)/app\.php/picture/(?<contentId>[0-9a-z]+)"' "${0}/thumb.jpg")' " is 131.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://tuna\.be/t/(?<entryId>[a-zA-Z0-9\.\-_]+)$"' "http://tuna.be/show/thumb/${entryId}")' " is 123.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://gifmagazine\.net/post_images/(\d+)"' "http://img.gifmagazine.net/gifmagazine/images/${1}/original.gif")' " is 143.
Long Statement,OpenTween.Thumbnail,MapThumbGoogle,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbGoogle.cs,CreateStaticMapUrl,The length of the statement  "            return baseUrl + "?center=" + location + "&size=" + width + "x" + height + "&zoom=" + zoom + "&markers=" + location + "&sensor=false"; " is 134.
Long Statement,OpenTween.Thumbnail,MapThumbOSM,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,CreateMapLinkUrl,The length of the statement  "            return "http://www.openstreetmap.org/index.html?lat=" + latitude + "&lon=" + longitude + "&zoom=" + zoom + "&mlat=" + latitude + "&mlon=" + longitude; " is 150.
Long Statement,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The length of the statement  "            var topLeftTileNum = PointF.Add(centerTileNum' new SizeF(-this.ThumbnailSize.Width / 2.0f / TileSize.Width' -this.ThumbnailSize.Height / 2.0f / TileSize.Height)); " is 162.
Long Statement,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The length of the statement  "            var tileOffset = Size.Round(new SizeF(-TileSize.Width * (topLeftTileNum.X - (int)topLeftTileNum.X)' -TileSize.Height * (topLeftTileNum.Y - (int)topLeftTileNum.Y))); " is 164.
Long Statement,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The length of the statement  "            var tileCountY = (int)Math.Ceiling((double)(this.ThumbnailSize.Height + Math.Abs(tileOffset.Height)) / TileSize.Height); " is 120.
Complex Conditional,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckMatchRule,The conditional expression  "string.IsNullOrEmpty(UID.Text) && string.IsNullOrEmpty(MSG1.Text) && string.IsNullOrEmpty(TextSource.Text) && CheckRetweet.Checked == false"  is complex.
Complex Conditional,OpenTween,FilterDialog,C:\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckExcludeRule,The conditional expression  "string.IsNullOrEmpty(ExUID.Text) && string.IsNullOrEmpty(ExMSG1.Text) && string.IsNullOrEmpty(TextExSource.Text) && CheckExRetweet.Checked == false"  is complex.
Complex Conditional,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,ButtonEdit_Click,The conditional expression  "TextBoxName.Modified ||                          TextBoxLocation.Modified ||                          TextBoxWeb.Modified ||                          TextBoxDescription.Modified"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The conditional expression  "!_initial && SettingManager.Common.BlinkNewMentions && newMentions && Form.ActiveForm == null"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The conditional expression  "_statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 ||                      _statuses.SortOrder == SortOrder.Descending && lst.Items[foundIndex].Position.Y < _iconSz + 10"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,Colorize,The conditional expression  "SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.None &&                 SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Post &&                 SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Ver &&                 SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.OwnStatus"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The conditional expression  "tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The conditional expression  "_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The conditional expression  "_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoRelPost,The conditional expression  "post.ScreenName == _anchorPost.ScreenName ||                      post.RetweetedBy == _anchorPost.ScreenName ||                      post.ScreenName == _anchorPost.RetweetedBy ||                      (!string.IsNullOrEmpty(post.RetweetedBy) && post.RetweetedBy == _anchorPost.RetweetedBy) ||                      _anchorPost.ReplyToList.Any(x => x.Item1 == post.UserId) ||                      _anchorPost.ReplyToList.Any(x => x.Item1 == post.RetweetedByUserId) ||                      post.ReplyToList.Any(x => x.Item1 == _anchorPost.UserId) ||                      post.ReplyToList.Any(x => x.Item1 == _anchorPost.RetweetedByUserId)"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_DragDrop,The conditional expression  "rect.Left <= spos.X && spos.X <= rect.Right &&                      rect.Top <= spos.Y && spos.Y <= rect.Bottom"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The conditional expression  "(_statuses.Tabs[ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.DirectMessage && isAuto) || (!isAuto && !isReply)"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ProcessDialogKey,The conditional expression  "((keyData & Keys.Control) != Keys.Control && (keyData & Keys.Shift) != Keys.Shift) ||                                  ((keyData & Keys.Control) == Keys.Control && (keyData & Keys.Shift) == Keys.Shift)"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The conditional expression  "SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.None &&                  SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Post &&                  SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Ver &&                  SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.OwnStatus"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The conditional expression  "_initialLayout && SettingManager.Local != null && this.WindowState == FormWindowState.Normal && this.Visible"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriAsync,The conditional expression  "SettingManager.Common.OpenUserTimeline && !isReverseSettings ||                  !SettingManager.Common.OpenUserTimeline && isReverseSettings"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,_hookGlobalHotkey_HotkeyPressed,The conditional expression  "(this.WindowState == FormWindowState.Normal || this.WindowState == FormWindowState.Maximized) && this.Visible && Form.ActiveForm == this"  is complex.
Complex Conditional,OpenTween.Models,PostFilterRule,C:\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,Equals,The conditional expression  "other.FilterName != this.FilterName ||                      !other.FilterBody.SequenceEqual(this.FilterBody) ||                      other.FilterSource != this.FilterSource ||                      other.FilterRt != this.FilterRt ||                      other.FilterByUrl != this.FilterByUrl ||                      other.CaseSensitive != this.CaseSensitive ||                      other.UseNameField != this.UseNameField ||                      other.UseLambda != this.UseLambda ||                      other.UseRegex != this.UseRegex"  is complex.
Complex Conditional,OpenTween.Models,PostFilterRule,C:\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,Equals,The conditional expression  "other.ExFilterName != this.ExFilterName ||                      !other.ExFilterBody.SequenceEqual(this.ExFilterBody) ||                      other.ExFilterSource != this.ExFilterSource ||                      other.ExFilterRt != this.ExFilterRt ||                      other.ExFilterByUrl != this.ExFilterByUrl ||                      other.ExCaseSensitive != this.ExCaseSensitive ||                      other.ExUseNameField != this.ExUseNameField ||                      other.ExUseLambda != this.ExUseLambda ||                      other.ExUseRegex != this.ExUseRegex"  is complex.
Virtual Method Call from Constructor,OpenTween,ToolStripAPIGauge,C:\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,ToolStripAPIGauge,The constructor "ToolStripAPIGauge" calls a virtual method "UpdateText".
Virtual Method Call from Constructor,OpenTween.Models,ExpandedUrlInfo,C:\repos\opentween_OpenTween\OpenTween\Models\PostClass.cs,ExpandedUrlInfo,The constructor "ExpandedUrlInfo" calls a virtual method "DeepExpandAsync".
Empty Catch Block,OpenTween,MyApplication,C:\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,InitCulture,The method has an empty catch block.
Empty Catch Block,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The method has an empty catch block.
Empty Catch Block,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,PostBrowser_StatusTextChanged,The method has an empty catch block.
Empty Catch Block,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SaveIconPictureToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,MediaSelector,C:\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,ImageServiceCombo_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,OpenTween,ListAvailable,C:\repos\opentween_OpenTween\OpenTween\ListAvailable.cs,RefreshButton_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,ListManage,C:\repos\opentween_OpenTween\OpenTween\ListManage.cs,RefreshListsButton_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,ImageListViewItem,C:\repos\opentween_OpenTween\OpenTween\ImageListViewItem.cs,GetImageAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,ImageListViewItem,C:\repos\opentween_OpenTween\OpenTween\ImageListViewItem.cs,GetImageAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,ImageListViewItem,C:\repos\opentween_OpenTween\OpenTween\ImageListViewItem.cs,GetImageAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,MyLists,C:\repos\opentween_OpenTween\OpenTween\MyLists.cs,MenuItemReload_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,MyLists,C:\repos\opentween_OpenTween\OpenTween\MyLists.cs,ListRefreshButton_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,SettingBase<T>,C:\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,LoadSettings,The method has an empty catch block.
Empty Catch Block,OpenTween,SettingBase<T>,C:\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,The method has an empty catch block.
Empty Catch Block,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,FavAddAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SettingStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DispSelectedPost,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoBackSelectPostChain,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyEvent,The method has an empty catch block.
Empty Catch Block,OpenTween,TwitterUserstream,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,Start,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,LoadRegexAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,LoadRegexAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,LoadRegexAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,MetaThumbnailService,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\MetaThumbnailService.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Nicovideo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Nicovideo.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Nicovideo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Nicovideo.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Tinami,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Tinami.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Tumblr,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Tumblr.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,ViaMe,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ViaMe.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Vimeo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Vimeo.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.OpenTweenCustomControl,DetailsListView,C:\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The method has an empty catch block.
Empty Catch Block,OpenTween.OpenTweenCustomControl,DetailsListView,C:\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The method has an empty catch block.
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,UpdateEndpointLimit,The following statement contains a magic number: if (item != null)              {                  var apiLimit = MyCommon.TwitterApiInfo.AccessLimit[endpoint];                  item.SubItems[1].Text = apiLimit.AccessLimitRemain + "/" + apiLimit.AccessLimitCount;                  item.SubItems[2].Text = apiLimit.AccessLimitResetDate.ToString();              }
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Location = new System.Drawing.Point(537' 407);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Location = new System.Drawing.Point(537' 407);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Location = new System.Drawing.Point(13' 13);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Location = new System.Drawing.Point(13' 13);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Size = new System.Drawing.Size(599' 388);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Size = new System.Drawing.Size(599' 388);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 265;
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 120;
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader3.Width = 150;
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(624' 442);
Magic Number,OpenTween,ApiInfoDialog,C:\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(624' 442);
Magic Number,OpenTween,MyApplication,C:\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,CheckRuntimeVersion,The following statement contains a magic number: using (var lmKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine' RegistryView.Registry32))              using (var ndpKey = lmKey.OpenSubKey(@"SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\"))              {                  var releaseKey = (int)ndpKey.GetValue("Release");                  return releaseKey >= 378675;              }
Magic Number,OpenTween,MyApplication,C:\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,ParseArguments,The following statement contains a magic number: return arguments.Select(x => optionPattern.Match(x))                  .Where(x => x.Success)                  .GroupBy(x => x.Groups[1].Value)                  .ToDictionary(x => x.Key' x => x.Last().Groups[2].Value);
Magic Number,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,Setting_Shown,The following statement contains a magic number: do              {                  Thread.Sleep(10);                  if (this.Disposing || this.IsDisposed) return;              } while (!this.IsHandleCreated);
Magic Number,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The following statement contains a magic number: try              {                  if (!string.IsNullOrEmpty(path))                  {                      if (path.StartsWith("\""' StringComparison.Ordinal) && path.Length > 2 && path.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                      {                          int sep = path.IndexOf("\""' 2' StringComparison.Ordinal);                          string browserPath = path.Substring(1' sep - 1);                          string arg = "";                          if (sep < path.Length - 1)                          {                              arg = path.Substring(sep + 1);                          }                          myPath = arg + " " + myPath;                          System.Diagnostics.Process.Start(browserPath' myPath);                      }                      else                      {                          System.Diagnostics.Process.Start(path' myPath);                      }                  }                  else                  {                      System.Diagnostics.Process.Start(myPath);                  }              }              catch(Exception)              {              }
Magic Number,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The following statement contains a magic number: try              {                  if (!string.IsNullOrEmpty(path))                  {                      if (path.StartsWith("\""' StringComparison.Ordinal) && path.Length > 2 && path.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                      {                          int sep = path.IndexOf("\""' 2' StringComparison.Ordinal);                          string browserPath = path.Substring(1' sep - 1);                          string arg = "";                          if (sep < path.Length - 1)                          {                              arg = path.Substring(sep + 1);                          }                          myPath = arg + " " + myPath;                          System.Diagnostics.Process.Start(browserPath' myPath);                      }                      else                      {                          System.Diagnostics.Process.Start(path' myPath);                      }                  }                  else                  {                      System.Diagnostics.Process.Start(myPath);                  }              }              catch(Exception)              {              }
Magic Number,OpenTween,AppendSettingDialog,C:\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The following statement contains a magic number: try              {                  if (!string.IsNullOrEmpty(path))                  {                      if (path.StartsWith("\""' StringComparison.Ordinal) && path.Length > 2 && path.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                      {                          int sep = path.IndexOf("\""' 2' StringComparison.Ordinal);                          string browserPath = path.Substring(1' sep - 1);                          string arg = "";                          if (sep < path.Length - 1)                          {                              arg = path.Substring(sep + 1);                          }                          myPath = arg + " " + myPath;                          System.Diagnostics.Process.Start(browserPath' myPath);                      }                      else                      {                          System.Diagnostics.Process.Start(path' myPath);                      }                  }                  else                  {                      System.Diagnostics.Process.Start(myPath);                  }              }              catch(Exception)              {              }
Magic Number,OpenTween,EmojiFormatter,C:\repos\opentween_OpenTween\OpenTween\EmojiFormatter.cs,ReplaceEmojiEntity,The following statement contains a magic number: for (var i = 0; i < input.Length; i += char.IsSurrogatePair(input' i) ? 2 : 1)              {                  var codepoint = char.ConvertToUtf32(input' i);                    if (i > 0)                  {                      codes += "-";                  }                    codes += string.Format("{0:x}"' codepoint);              }
Magic Number,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,EventViewerDialog,The following statement contains a magic number: this.TabEventType.HandleCreated += (s' e) => NativeMethods.SetMinTabWidth((TabControl)s' 40);
Magic Number,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,CreateCache,The following statement contains a magic number: StartIndex -= 30;
Magic Number,OpenTween,EventViewerDialog,C:\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,CreateCache,The following statement contains a magic number: EndIndex += 30;
Magic Number,OpenTween,MouseWheelMessageFilter,C:\repos\opentween_OpenTween\OpenTween\MouseWheelMessageFilter.cs,ParseMessage,The following statement contains a magic number: var wheelDelta = (int)(m.WParam.ToInt64() & 0xffff0000) >> 16;
Magic Number,OpenTween,SendErrorReportForm,C:\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.buttonNotSend' 2' 0);
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ShowPostDetails,The following statement contains a magic number: if (this.DumpPostClass)              {                  StringBuilder sb = new StringBuilder(512);                    sb.Append("-----Start PostClass Dump<br>");                  sb.AppendFormat("TextFromApi           : {0}<br>"' post.TextFromApi);                  sb.AppendFormat("(PlainText)    : <xmp>{0}</xmp><br>"' post.TextFromApi);                  sb.AppendFormat("StatusId             : {0}<br>"' post.StatusId);                  //sb.AppendFormat("ImageIndex     : {0}<br>"' post.ImageIndex);                  sb.AppendFormat("ImageUrl       : {0}<br>"' post.ImageUrl);                  sb.AppendFormat("InReplyToStatusId    : {0}<br>"' post.InReplyToStatusId);                  sb.AppendFormat("InReplyToUser  : {0}<br>"' post.InReplyToUser);                  sb.AppendFormat("IsDM           : {0}<br>"' post.IsDm);                  sb.AppendFormat("IsFav          : {0}<br>"' post.IsFav);                  sb.AppendFormat("IsMark         : {0}<br>"' post.IsMark);                  sb.AppendFormat("IsMe           : {0}<br>"' post.IsMe);                  sb.AppendFormat("IsOwl          : {0}<br>"' post.IsOwl);                  sb.AppendFormat("IsProtect      : {0}<br>"' post.IsProtect);                  sb.AppendFormat("IsRead         : {0}<br>"' post.IsRead);                  sb.AppendFormat("IsReply        : {0}<br>"' post.IsReply);                    foreach (string nm in post.ReplyToList.Select(x => x.Item2))                  {                      sb.AppendFormat("ReplyToList    : {0}<br>"' nm);                  }                    sb.AppendFormat("ScreenName           : {0}<br>"' post.ScreenName);                  sb.AppendFormat("NickName       : {0}<br>"' post.Nickname);                  sb.AppendFormat("Text   : {0}<br>"' post.Text);                  sb.AppendFormat("(PlainText)    : <xmp>{0}</xmp><br>"' post.Text);                  sb.AppendFormat("CreatedAt          : {0}<br>"' post.CreatedAt);                  sb.AppendFormat("Source         : {0}<br>"' post.Source);                  sb.AppendFormat("UserId            : {0}<br>"' post.UserId);                  sb.AppendFormat("FilterHit      : {0}<br>"' post.FilterHit);                  sb.AppendFormat("RetweetedBy    : {0}<br>"' post.RetweetedBy);                  sb.AppendFormat("RetweetedId    : {0}<br>"' post.RetweetedId);                    sb.AppendFormat("Media.Count    : {0}<br>"' post.Media.Count);                  if (post.Media.Count > 0)                  {                      for (int i = 0; i < post.Media.Count; i++)                      {                          var info = post.Media[i];                          sb.AppendFormat("Media[{0}].Url         : {1}<br>"' i' info.Url);                          sb.AppendFormat("Media[{0}].VideoUrl    : {1}<br>"' i' info.VideoUrl ?? "---");                      }                  }                  sb.Append("-----End PostClass Dump<br>");                    PostBrowser.DocumentText = this.Owner.createDetailHtml(sb.ToString());                  return;              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,IconNameToolStripMenuItem_Click,The following statement contains a magic number: await this.Owner.OpenUriInBrowserAsync(imageUrl.Remove(imageUrl.LastIndexOf("_normal"' StringComparison.Ordinal)' 7));
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SelectionCopyContextMenuItem_Click,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(_selText' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SelectionCopyContextMenuItem_Click,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(_selText' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: try              {                  foreach (var link in this.PostBrowser.Document.Links.Cast<HtmlElement>())                  {                      if (link.GetAttribute("href") == this._postBrowserStatusText)                      {                          var linkStr = link.GetAttribute("title");                          if (string.IsNullOrEmpty(linkStr))                              linkStr = link.GetAttribute("href");                            Clipboard.SetDataObject(linkStr' false' 5' 100);                          return;                      }                  }                    Clipboard.SetDataObject(this._postBrowserStatusText' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: try              {                  foreach (var link in this.PostBrowser.Document.Links.Cast<HtmlElement>())                  {                      if (link.GetAttribute("href") == this._postBrowserStatusText)                      {                          var linkStr = link.GetAttribute("title");                          if (string.IsNullOrEmpty(linkStr))                              linkStr = link.GetAttribute("href");                            Clipboard.SetDataObject(linkStr' false' 5' 100);                          return;                      }                  }                    Clipboard.SetDataObject(this._postBrowserStatusText' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: try              {                  foreach (var link in this.PostBrowser.Document.Links.Cast<HtmlElement>())                  {                      if (link.GetAttribute("href") == this._postBrowserStatusText)                      {                          var linkStr = link.GetAttribute("title");                          if (string.IsNullOrEmpty(linkStr))                              linkStr = link.GetAttribute("href");                            Clipboard.SetDataObject(linkStr' false' 5' 100);                          return;                      }                  }                    Clipboard.SetDataObject(this._postBrowserStatusText' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: try              {                  foreach (var link in this.PostBrowser.Document.Links.Cast<HtmlElement>())                  {                      if (link.GetAttribute("href") == this._postBrowserStatusText)                      {                          var linkStr = link.GetAttribute("title");                          if (string.IsNullOrEmpty(linkStr))                              linkStr = link.GetAttribute("href");                            Clipboard.SetDataObject(linkStr' false' 5' 100);                          return;                      }                  }                    Clipboard.SetDataObject(this._postBrowserStatusText' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceCopyMenuItem_Click,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(this.CurrentPost.Source' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceCopyMenuItem_Click,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(this.CurrentPost.Source' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceUrlCopyMenuItem_Click,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(sourceUri.AbsoluteUri' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceUrlCopyMenuItem_Click,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(sourceUri.AbsoluteUri' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.Controls.Add(this.DateTimeLabel' 2' 0);
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.Controls.Add(this.SourceLinkLabel' 3' 0);
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.SetRowSpan(this.UserPicture' 2);
Magic Number,OpenTween,TweetDetailsView,C:\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.SetColumnSpan(this.PostBrowser' 3);
Magic Number,OpenTween,TweetExtractor,C:\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractMentionEntities,The following statement contains a magic number: foreach (var match in matchesAtList.Cast<Match>())              {                  var groupMention = match.Groups[2];                  var startPos = groupMention.Index;                  var endPos = startPos + groupMention.Length;                    yield return new TwitterEntityMention                  {                      Indices = new[] { startPos' endPos }'                      ScreenName = groupMention.Value.Substring(1)' // 先頭の「@」は取り除く                  };              }
Magic Number,OpenTween,TweetExtractor,C:\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractMentionEntities,The following statement contains a magic number: foreach (var match in matchesAtUser.Cast<Match>())              {                  var groupMention = match.Groups[2];                  var startPos = groupMention.Index;                  var endPos = startPos + groupMention.Length;                    yield return new TwitterEntityMention                  {                      Indices = new[] { startPos' endPos }'                      ScreenName = groupMention.Value.Substring(1)' // 先頭の「@」は取り除く                  };              }
Magic Number,OpenTween,TweetExtractor,C:\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractHashtagEntities,The following statement contains a magic number: foreach (var match in matches.Cast<Match>())              {                  var groupHashtagSharp = match.Groups[2];                  var groupHashtagText = match.Groups[3];                  var startPos = groupHashtagSharp.Index;                  var endPos = startPos + groupHashtagSharp.Length + groupHashtagText.Length;                    yield return new TwitterEntityHashtag                  {                      Indices = new[] { startPos' endPos }'                      Text = groupHashtagText.Value'                  };              }
Magic Number,OpenTween,TweetExtractor,C:\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractHashtagEntities,The following statement contains a magic number: foreach (var match in matches.Cast<Match>())              {                  var groupHashtagSharp = match.Groups[2];                  var groupHashtagText = match.Groups[3];                  var startPos = groupHashtagSharp.Index;                  var endPos = startPos + groupHashtagSharp.Length + groupHashtagText.Length;                    yield return new TwitterEntityHashtag                  {                      Indices = new[] { startPos' endPos }'                      Text = groupHashtagText.Value'                  };              }
Magic Number,OpenTween,WaitingDialog,C:\repos\opentween_OpenTween\OpenTween\WaitingDialog.cs,WaitingDialog,The following statement contains a magic number: this.Timeout = TimeSpan.FromMilliseconds(500);
Magic Number,OpenTween,ImageCache,C:\repos\opentween_OpenTween\OpenTween\ImageCache.cs,ImageCache,The following statement contains a magic number: this.innerDictionary = new LRUCacheDictionary<string' Task<MemoryImage>>(trimLimit: 300' autoTrimCount: 100);
Magic Number,OpenTween,ImageCache,C:\repos\opentween_OpenTween\OpenTween\ImageCache.cs,ImageCache,The following statement contains a magic number: this.innerDictionary = new LRUCacheDictionary<string' Task<MemoryImage>>(trimLimit: 300' autoTrimCount: 100);
Magic Number,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,DrawPlayableMark,The following statement contains a magic number: var overlaySize = Math.Min(this.Width' this.Height) / 4;
Magic Number,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,DrawPlayableMark,The following statement contains a magic number: var destRect = new Rectangle(                  (this.Width - overlaySize) / 2'                  (this.Height - overlaySize) / 2'                  overlaySize'                  overlaySize);
Magic Number,OpenTween,OTPictureBox,C:\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,DrawPlayableMark,The following statement contains a magic number: var destRect = new Rectangle(                  (this.Width - overlaySize) / 2'                  (this.Height - overlaySize) / 2'                  overlaySize'                  overlaySize);
Magic Number,OpenTween,TweetFormatter,C:\repos\opentween_OpenTween\OpenTween\TweetFormatter.cs,AutoLinkHtml,The following statement contains a magic number: var entitiesQuery = entities                  .Where(x => x != null)                  .Where(x => x.Indices != null && x.Indices.Length == 2);
Magic Number,OpenTween,TweetFormatter,C:\repos\opentween_OpenTween\OpenTween\TweetFormatter.cs,EscapeHtml,The following statement contains a magic number: var result = new StringBuilder(100);
Magic Number,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,IconToByteArray,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())              {                  using (Icon ic = new Icon(icondata' 48' 48))                  {                      ic.ToBitmap().Save(ms' ImageFormat.Png);                      return ms.ToArray();                  }              }
Magic Number,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,IconToByteArray,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())              {                  using (Icon ic = new Icon(icondata' 48' 48))                  {                      ic.ToBitmap().Save(ms' ImageFormat.Png);                      return ms.ToArray();                  }              }
Magic Number,OpenTween,InputTabName,C:\repos\opentween_OpenTween\OpenTween\InputTabName.cs,ComboUsage_SelectedIndexChanged,The following statement contains a magic number: switch (ComboUsage.SelectedIndex)              {                  case 0:                      this.Usage = MyCommon.TabUsageType.UserDefined;                      break;                  case 1:                      this.Usage = MyCommon.TabUsageType.Lists;                      break;                  case 2:                      this.Usage = MyCommon.TabUsageType.PublicSearch;                      break;                  default:                      this.Usage = MyCommon.TabUsageType.Undefined;                      break;              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,urlEncodeMultibyteChar,The following statement contains a magic number: var sb = new StringBuilder(256);
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,urlEncodeMultibyteChar,The following statement contains a magic number: foreach (var c in _input)              {                  c_ = c;                  if (Convert.ToInt32(c) > 127 || c == '%') break;              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,urlEncodeMultibyteChar,The following statement contains a magic number: if (Convert.ToInt32(c_) <= 127 && c_ != '%') return _input;
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,urlEncodeMultibyteChar,The following statement contains a magic number: retry:              foreach (char c in input)              {                  if (Convert.ToInt32(c) > 255)                  {                      // Unicodeの場合(1charが複数のバイトで構成されている）                      // Uriクラスをnewして再構成し、入力をPathAndQueryのみとしてやり直す                      foreach (var b in Encoding.UTF8.GetBytes(c.ToString()))                      {                          sb.AppendFormat("%{0:X2}"' b);                      }                  }                  else if (Convert.ToInt32(c) > 127 || c == '%')                  {                      // UTF-8の場合                      // Uriクラスをnewして再構成し、入力をinputからAuthority部分を除去してやり直す                      if (uri == null)                      {                          uri = new Uri(input);                          input = input.Remove(0' uri.GetLeftPart(UriPartial.Authority).Length);                          sb.Length = 0;                          goto retry;                      }                      else                      {                          sb.Append("%" + Convert.ToInt16(c).ToString("X2").ToUpperInvariant());                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,urlEncodeMultibyteChar,The following statement contains a magic number: retry:              foreach (char c in input)              {                  if (Convert.ToInt32(c) > 255)                  {                      // Unicodeの場合(1charが複数のバイトで構成されている）                      // Uriクラスをnewして再構成し、入力をPathAndQueryのみとしてやり直す                      foreach (var b in Encoding.UTF8.GetBytes(c.ToString()))                      {                          sb.AppendFormat("%{0:X2}"' b);                      }                  }                  else if (Convert.ToInt32(c) > 127 || c == '%')                  {                      // UTF-8の場合                      // Uriクラスをnewして再構成し、入力をinputからAuthority部分を除去してやり直す                      if (uri == null)                      {                          uri = new Uri(input);                          input = input.Remove(0' uri.GetLeftPart(UriPartial.Authority).Length);                          sb.Length = 0;                          goto retry;                      }                      else                      {                          sb.Append("%" + Convert.ToInt16(c).ToString("X2").ToUpperInvariant());                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: if (versionNum[3] == 0)              {                  return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);              }              else              {                  versionNum[2] = versionNum[2] + 1;                    // 10を越えたら桁上げ                  if (versionNum[2] >= 10)                  {                      versionNum[1] += versionNum[2] / 10;                      versionNum[2] %= 10;                        if (versionNum[1] >= 10)                      {                          versionNum[0] += versionNum[1] / 10;                          versionNum[1] %= 10;                      }                  }                    if (versionNum[3] == 1)                      return string.Format("{0}.{1}.{2}-dev"' versionNum[0]' versionNum[1]' versionNum[2]);                  else                      return string.Format("{0}.{1}.{2}-dev (Build {3})"' versionNum[0]' versionNum[1]' versionNum[2]' versionNum[3]);              }
Magic Number,OpenTween,MyCommon,C:\repos\opentween_OpenTween\OpenTween\MyCommon.cs,EscapeQueryString,The following statement contains a magic number: var sb = new StringBuilder(stringToEncode.Length * 2);
Magic Number,OpenTween,MyLists,C:\repos\opentween_OpenTween\OpenTween\MyLists.cs,FetchMembershipListIds,The following statement contains a magic number: var ownedListData = await TwitterLists.GetAllItemsAsync(x =>                  this.twitterApi.ListsOwnerships(this.twitterApi.CurrentScreenName' cursor: x' count: 1000))                      .ConfigureAwait(false);
Magic Number,OpenTween,MyLists,C:\repos\opentween_OpenTween\OpenTween\MyLists.cs,FetchMembershipListIds,The following statement contains a magic number: var listsUserAddedTo = await TwitterLists.GetAllItemsAsync(x =>                  this.twitterApi.ListsMemberships(this.contextScreenName' cursor: x' count: 1000' filterToOwnedLists: true))                      .ConfigureAwait(false);
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (url.Length > 7 && url.Length < 128 && url.StartsWith("http://"' StringComparison.OrdinalIgnoreCase))              {                  url = url.Substring(7);              }              else              {                  return url;              }
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (url.Length > 7 && url.Length < 128 && url.StartsWith("http://"' StringComparison.OrdinalIgnoreCase))              {                  url = url.Substring(7);              }              else              {                  return url;              }
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (url.Length > 7 && url.Length < 128 && url.StartsWith("http://"' StringComparison.OrdinalIgnoreCase))              {                  url = url.Substring(7);              }              else              {                  return url;              }
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (i == 0 || i == 4) return string.Format("{0}{1}"' "http://nico.ms/"' url.Substring(13 + i));
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (i == 0 || i == 4) return string.Format("{0}{1}"' "http://nico.ms/"' url.Substring(13 + i));
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (i == 0 || i == 4) return string.Format("{0}{1}"' "http://nico.ms/"' url.Substring(13 + i));
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (i == 0 || i == 4) return string.Format("{0}{1}"' "http://nico.ms/"' url.Substring(13 + i));
Magic Number,OpenTween,nicoms,C:\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: if (i == 0) return string.Format("{0}{1}"' "http://nico.ms/"' url.Substring(25));
Magic Number,OpenTween,SettingBase<T>,C:\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,SaveSettings,The following statement contains a magic number: const int SaveRetryMax = 3;
Magic Number,OpenTween,SettingBase<T>,C:\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,SaveSettings,The following statement contains a magic number: do              {                  var tmpfilePath = GetSettingFilePath("_" + Path.GetRandomFileName());                  try                  {                      lock (lockObj)                      {                          using (var stream = new FileStream(tmpfilePath' FileMode.Create' FileAccess.Write))                          {                              var serializer = new XmlSerializer(typeof(T));                              serializer.Serialize(stream' instance);                              stream.Flush();                          }                            var fileInfo = new FileInfo(tmpfilePath);                          if (fileInfo.Length != 0)                          {                              // 成功                              File.Copy(tmpfilePath' filePath' true);                              return;                          }                      }                  }                  catch (Exception e)                  {                      lastException = e;                  }                  finally                  {                      try                      {                          if (File.Exists(tmpfilePath))                              File.Delete(tmpfilePath);                      }                      catch (Exception) { }                  }                    // リトライ                  retryCount++;                  Thread.Sleep(1000);                } while (retryCount <= SaveRetryMax);
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ShortUrl,The following statement contains a magic number: this.PurgeCount = 500;
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrl,The following statement contains a magic number: try              {                  return this.ExpandUrlAsync(new Uri(uri)' 10).Result.AbsoluteUri;              }              catch (UriFormatException)              {                  return uri;              }
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,The following statement contains a magic number: return this.ExpandUrlAsync(uri' 10);
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,The following statement contains a magic number: return this.ExpandUrlAsync(uriStr' 10);
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtml,The following statement contains a magic number: return this.ExpandUrlHtmlAsync(html' 10).Result;
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtmlAsync,The following statement contains a magic number: return this.ExpandUrlHtmlAsync(html' 10);
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtmlAsync,The following statement contains a magic number: return HtmlLinkPattern.ReplaceAsync(html' async m =>                  m.Groups[1].Value + await this.ExpandUrlAsync(m.Groups[2].Value' redirectLimit).ConfigureAwait(false) + m.Groups[3].Value);
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtmlAsync,The following statement contains a magic number: return HtmlLinkPattern.ReplaceAsync(html' async m =>                  m.Groups[1].Value + await this.ExpandUrlAsync(m.Groups[2].Value' redirectLimit).ConfigureAwait(false) + m.Groups[3].Value);
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,GetRedirectTo,The following statement contains a magic number: using (var response = await this.http.SendAsync(request).ConfigureAwait(false))              {                  if (!response.IsSuccessStatusCode)                  {                      // ステータスコードが 3xx であれば例外を発生させない                      if ((int)response.StatusCode / 100 != 3)                          response.EnsureSuccessStatusCode();                  }                    var redirectedUrl = response.Headers.Location;                    if (redirectedUrl == null)                      return null;                    // サーバーが URL を適切にエンコードしていない場合、OriginalString に非 ASCII 文字が含まれる。                  // その場合、redirectedUrl は文字化けしている可能性があるため使用しない                  // 参照: http://stackoverflow.com/questions/1888933                  if (redirectedUrl.OriginalString.Any(x => x < ' ' || x > '~'))                      return null;                    if (redirectedUrl.IsAbsoluteUri)                      return redirectedUrl;                  else                      return new Uri(url' redirectedUrl);              }
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,GetRedirectTo,The following statement contains a magic number: using (var response = await this.http.SendAsync(request).ConfigureAwait(false))              {                  if (!response.IsSuccessStatusCode)                  {                      // ステータスコードが 3xx であれば例外を発生させない                      if ((int)response.StatusCode / 100 != 3)                          response.EnsureSuccessStatusCode();                  }                    var redirectedUrl = response.Headers.Location;                    if (redirectedUrl == null)                      return null;                    // サーバーが URL を適切にエンコードしていない場合、OriginalString に非 ASCII 文字が含まれる。                  // その場合、redirectedUrl は文字化けしている可能性があるため使用しない                  // 参照: http://stackoverflow.com/questions/1888933                  if (redirectedUrl.OriginalString.Any(x => x < ' ' || x > '~'))                      return null;                    if (redirectedUrl.IsAbsoluteUri)                      return redirectedUrl;                  else                      return new Uri(url' redirectedUrl);              }
Magic Number,OpenTween,ShortUrl,C:\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,CreateDefaultHttpClient,The following statement contains a magic number: http.Timeout = TimeSpan.FromSeconds(30);
Magic Number,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,SelectionCopyToolStripMenuItem_Click,The following statement contains a magic number: if (selectedText != null)              {                  try                  {                      Clipboard.SetDataObject(selectedText' false' 5' 100);                  }                  catch (Exception ex)                  {                      MessageBox.Show(ex.Message);                  }              }
Magic Number,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,SelectionCopyToolStripMenuItem_Click,The following statement contains a magic number: if (selectedText != null)              {                  try                  {                      Clipboard.SetDataObject(selectedText' false' 5' 100);                  }                  catch (Exception ex)                  {                      MessageBox.Show(ex.Message);                  }              }
Magic Number,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,UserPicture_Click,The following statement contains a magic number: imageUrl = imageUrl.Remove(imageUrl.LastIndexOf("_normal"' StringComparison.Ordinal)' 7);
Magic Number,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,IsValidIconFile,The following statement contains a magic number: return this.IsValidExtension(info.Extension) &&                  info.Length < 700 * 1024 &&                  !MyCommon.IsAnimatedGif(info.FullName);
Magic Number,OpenTween,UserInfoDialog,C:\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,IsValidIconFile,The following statement contains a magic number: return this.IsValidExtension(info.Extension) &&                  info.Length < 700 * 1024 &&                  !MyCommon.IsAnimatedGif(info.FullName);
Magic Number,OpenTween,ToolStripAPIGauge,C:\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: this.apiGaugeBounds = new Rectangle(                  0'                  (this.Height - this._GaugeHeight * 2) / 2'                  (int)(this.Width * apiGaugeValue)'                  this._GaugeHeight              );
Magic Number,OpenTween,ToolStripAPIGauge,C:\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: this.apiGaugeBounds = new Rectangle(                  0'                  (this.Height - this._GaugeHeight * 2) / 2'                  (int)(this.Width * apiGaugeValue)'                  this._GaugeHeight              );
Magic Number,OpenTween,ToolStripAPIGauge,C:\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: var timeGaugeValue = this.remainMinutes >= 15 ? 1.00 : this.remainMinutes / 15;
Magic Number,OpenTween,ToolStripAPIGauge,C:\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: var timeGaugeValue = this.remainMinutes >= 15 ? 1.00 : this.remainMinutes / 15;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: try              {                  if (this._iconCol)                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // 本文                      };                        columns[0].Text = this.ColumnText[0];                      columns[1].Text = this.ColumnText[2];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[0].DisplayIndex = 0;                          columns[1].DisplayIndex = 1;                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                  else                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // ニックネーム                          new ColumnHeader()' // 本文                          new ColumnHeader()' // 日付                          new ColumnHeader()' // ユーザID                          new ColumnHeader()' // 未読                          new ColumnHeader()' // マーク＆プロテクト                          new ColumnHeader()' // ソース                      };                        foreach (var i in Enumerable.Range(0' columns.Length))                          columns[i].Text = this.ColumnText[i];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width2);                          columns[2].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[3].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width4);                          columns[4].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width5);                          columns[5].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width6);                          columns[6].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width7);                          columns[7].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width8);                            var displayIndex = new[] {                              SettingManager.Local.DisplayIndex1' SettingManager.Local.DisplayIndex2'                              SettingManager.Local.DisplayIndex3' SettingManager.Local.DisplayIndex4'                              SettingManager.Local.DisplayIndex5' SettingManager.Local.DisplayIndex6'                              SettingManager.Local.DisplayIndex7' SettingManager.Local.DisplayIndex8                          };                            foreach (var i in Enumerable.Range(0' displayIndex.Length))                          {                              columns[i].DisplayIndex = displayIndex[i];                          }                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                    list.Columns.AddRange(columns);                    columns = null;              }              finally              {                  if (columns != null)                  {                      foreach (var column in columns)                          column?.Dispose();                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: try              {                  if (this._iconCol)                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // 本文                      };                        columns[0].Text = this.ColumnText[0];                      columns[1].Text = this.ColumnText[2];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[0].DisplayIndex = 0;                          columns[1].DisplayIndex = 1;                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                  else                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // ニックネーム                          new ColumnHeader()' // 本文                          new ColumnHeader()' // 日付                          new ColumnHeader()' // ユーザID                          new ColumnHeader()' // 未読                          new ColumnHeader()' // マーク＆プロテクト                          new ColumnHeader()' // ソース                      };                        foreach (var i in Enumerable.Range(0' columns.Length))                          columns[i].Text = this.ColumnText[i];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width2);                          columns[2].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[3].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width4);                          columns[4].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width5);                          columns[5].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width6);                          columns[6].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width7);                          columns[7].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width8);                            var displayIndex = new[] {                              SettingManager.Local.DisplayIndex1' SettingManager.Local.DisplayIndex2'                              SettingManager.Local.DisplayIndex3' SettingManager.Local.DisplayIndex4'                              SettingManager.Local.DisplayIndex5' SettingManager.Local.DisplayIndex6'                              SettingManager.Local.DisplayIndex7' SettingManager.Local.DisplayIndex8                          };                            foreach (var i in Enumerable.Range(0' displayIndex.Length))                          {                              columns[i].DisplayIndex = displayIndex[i];                          }                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                    list.Columns.AddRange(columns);                    columns = null;              }              finally              {                  if (columns != null)                  {                      foreach (var column in columns)                          column?.Dispose();                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: try              {                  if (this._iconCol)                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // 本文                      };                        columns[0].Text = this.ColumnText[0];                      columns[1].Text = this.ColumnText[2];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[0].DisplayIndex = 0;                          columns[1].DisplayIndex = 1;                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                  else                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // ニックネーム                          new ColumnHeader()' // 本文                          new ColumnHeader()' // 日付                          new ColumnHeader()' // ユーザID                          new ColumnHeader()' // 未読                          new ColumnHeader()' // マーク＆プロテクト                          new ColumnHeader()' // ソース                      };                        foreach (var i in Enumerable.Range(0' columns.Length))                          columns[i].Text = this.ColumnText[i];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width2);                          columns[2].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[3].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width4);                          columns[4].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width5);                          columns[5].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width6);                          columns[6].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width7);                          columns[7].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width8);                            var displayIndex = new[] {                              SettingManager.Local.DisplayIndex1' SettingManager.Local.DisplayIndex2'                              SettingManager.Local.DisplayIndex3' SettingManager.Local.DisplayIndex4'                              SettingManager.Local.DisplayIndex5' SettingManager.Local.DisplayIndex6'                              SettingManager.Local.DisplayIndex7' SettingManager.Local.DisplayIndex8                          };                            foreach (var i in Enumerable.Range(0' displayIndex.Length))                          {                              columns[i].DisplayIndex = displayIndex[i];                          }                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                    list.Columns.AddRange(columns);                    columns = null;              }              finally              {                  if (columns != null)                  {                      foreach (var column in columns)                          column?.Dispose();                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: try              {                  if (this._iconCol)                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // 本文                      };                        columns[0].Text = this.ColumnText[0];                      columns[1].Text = this.ColumnText[2];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[0].DisplayIndex = 0;                          columns[1].DisplayIndex = 1;                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                  else                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // ニックネーム                          new ColumnHeader()' // 本文                          new ColumnHeader()' // 日付                          new ColumnHeader()' // ユーザID                          new ColumnHeader()' // 未読                          new ColumnHeader()' // マーク＆プロテクト                          new ColumnHeader()' // ソース                      };                        foreach (var i in Enumerable.Range(0' columns.Length))                          columns[i].Text = this.ColumnText[i];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width2);                          columns[2].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[3].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width4);                          columns[4].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width5);                          columns[5].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width6);                          columns[6].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width7);                          columns[7].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width8);                            var displayIndex = new[] {                              SettingManager.Local.DisplayIndex1' SettingManager.Local.DisplayIndex2'                              SettingManager.Local.DisplayIndex3' SettingManager.Local.DisplayIndex4'                              SettingManager.Local.DisplayIndex5' SettingManager.Local.DisplayIndex6'                              SettingManager.Local.DisplayIndex7' SettingManager.Local.DisplayIndex8                          };                            foreach (var i in Enumerable.Range(0' displayIndex.Length))                          {                              columns[i].DisplayIndex = displayIndex[i];                          }                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                    list.Columns.AddRange(columns);                    columns = null;              }              finally              {                  if (columns != null)                  {                      foreach (var column in columns)                          column?.Dispose();                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: try              {                  if (this._iconCol)                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // 本文                      };                        columns[0].Text = this.ColumnText[0];                      columns[1].Text = this.ColumnText[2];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[0].DisplayIndex = 0;                          columns[1].DisplayIndex = 1;                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                  else                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // ニックネーム                          new ColumnHeader()' // 本文                          new ColumnHeader()' // 日付                          new ColumnHeader()' // ユーザID                          new ColumnHeader()' // 未読                          new ColumnHeader()' // マーク＆プロテクト                          new ColumnHeader()' // ソース                      };                        foreach (var i in Enumerable.Range(0' columns.Length))                          columns[i].Text = this.ColumnText[i];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width2);                          columns[2].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[3].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width4);                          columns[4].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width5);                          columns[5].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width6);                          columns[6].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width7);                          columns[7].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width8);                            var displayIndex = new[] {                              SettingManager.Local.DisplayIndex1' SettingManager.Local.DisplayIndex2'                              SettingManager.Local.DisplayIndex3' SettingManager.Local.DisplayIndex4'                              SettingManager.Local.DisplayIndex5' SettingManager.Local.DisplayIndex6'                              SettingManager.Local.DisplayIndex7' SettingManager.Local.DisplayIndex8                          };                            foreach (var i in Enumerable.Range(0' displayIndex.Length))                          {                              columns[i].DisplayIndex = displayIndex[i];                          }                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                    list.Columns.AddRange(columns);                    columns = null;              }              finally              {                  if (columns != null)                  {                      foreach (var column in columns)                          column?.Dispose();                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: try              {                  if (this._iconCol)                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // 本文                      };                        columns[0].Text = this.ColumnText[0];                      columns[1].Text = this.ColumnText[2];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[0].DisplayIndex = 0;                          columns[1].DisplayIndex = 1;                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                  else                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // ニックネーム                          new ColumnHeader()' // 本文                          new ColumnHeader()' // 日付                          new ColumnHeader()' // ユーザID                          new ColumnHeader()' // 未読                          new ColumnHeader()' // マーク＆プロテクト                          new ColumnHeader()' // ソース                      };                        foreach (var i in Enumerable.Range(0' columns.Length))                          columns[i].Text = this.ColumnText[i];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width2);                          columns[2].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[3].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width4);                          columns[4].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width5);                          columns[5].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width6);                          columns[6].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width7);                          columns[7].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width8);                            var displayIndex = new[] {                              SettingManager.Local.DisplayIndex1' SettingManager.Local.DisplayIndex2'                              SettingManager.Local.DisplayIndex3' SettingManager.Local.DisplayIndex4'                              SettingManager.Local.DisplayIndex5' SettingManager.Local.DisplayIndex6'                              SettingManager.Local.DisplayIndex7' SettingManager.Local.DisplayIndex8                          };                            foreach (var i in Enumerable.Range(0' displayIndex.Length))                          {                              columns[i].DisplayIndex = displayIndex[i];                          }                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                    list.Columns.AddRange(columns);                    columns = null;              }              finally              {                  if (columns != null)                  {                      foreach (var column in columns)                          column?.Dispose();                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: try              {                  if (this._iconCol)                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // 本文                      };                        columns[0].Text = this.ColumnText[0];                      columns[1].Text = this.ColumnText[2];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[0].DisplayIndex = 0;                          columns[1].DisplayIndex = 1;                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                  else                  {                      columns = new[]                      {                          new ColumnHeader()' // アイコン                          new ColumnHeader()' // ニックネーム                          new ColumnHeader()' // 本文                          new ColumnHeader()' // 日付                          new ColumnHeader()' // ユーザID                          new ColumnHeader()' // 未読                          new ColumnHeader()' // マーク＆プロテクト                          new ColumnHeader()' // ソース                      };                        foreach (var i in Enumerable.Range(0' columns.Length))                          columns[i].Text = this.ColumnText[i];                        if (startup)                      {                          var widthScaleFactor = this.CurrentAutoScaleDimensions.Width / SettingManager.Local.ScaleDimension.Width;                            columns[0].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width1);                          columns[1].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width2);                          columns[2].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width3);                          columns[3].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width4);                          columns[4].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width5);                          columns[5].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width6);                          columns[6].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width7);                          columns[7].Width = ScaleBy(widthScaleFactor' SettingManager.Local.Width8);                            var displayIndex = new[] {                              SettingManager.Local.DisplayIndex1' SettingManager.Local.DisplayIndex2'                              SettingManager.Local.DisplayIndex3' SettingManager.Local.DisplayIndex4'                              SettingManager.Local.DisplayIndex5' SettingManager.Local.DisplayIndex6'                              SettingManager.Local.DisplayIndex7' SettingManager.Local.DisplayIndex8                          };                            foreach (var i in Enumerable.Range(0' displayIndex.Length))                          {                              columns[i].DisplayIndex = displayIndex[i];                          }                      }                      else                      {                          var idx = 0;                          foreach (var curListColumn in this._curList.Columns.Cast<ColumnHeader>())                          {                              columns[idx].Width = curListColumn.Width;                              columns[idx].DisplayIndex = curListColumn.DisplayIndex;                              idx++;                          }                      }                  }                    list.Columns.AddRange(columns);                    columns = null;              }              finally              {                  if (columns != null)                  {                      foreach (var column in columns)                          column?.Dispose();                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[2] = Properties.Resources.AddNewTabText3;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[3] = Properties.Resources.AddNewTabText4_2;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[4] = Properties.Resources.AddNewTabText5;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[5] = "";
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[6] = "";
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[7] = "Source";
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[2] = Properties.Resources.AddNewTabText3;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[3] = Properties.Resources.AddNewTabText4_2;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[4] = Properties.Resources.AddNewTabText5;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[5] = "";
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[6] = "";
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[7] = "Source";
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: switch (_statuses.SortMode)              {                  case ComparerMode.Nickname:  //ニックネーム                      c = 1;                      break;                  case ComparerMode.Data:  //本文                      c = 2;                      break;                  case ComparerMode.Id:  //時刻=発言Id                      c = 3;                      break;                  case ComparerMode.Name:  //名前                      c = 4;                      break;                  case ComparerMode.Source:  //Source                      c = 7;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: switch (_statuses.SortMode)              {                  case ComparerMode.Nickname:  //ニックネーム                      c = 1;                      break;                  case ComparerMode.Data:  //本文                      c = 2;                      break;                  case ComparerMode.Id:  //時刻=発言Id                      c = 3;                      break;                  case ComparerMode.Name:  //名前                      c = 4;                      break;                  case ComparerMode.Source:  //Source                      c = 7;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: switch (_statuses.SortMode)              {                  case ComparerMode.Nickname:  //ニックネーム                      c = 1;                      break;                  case ComparerMode.Data:  //本文                      c = 2;                      break;                  case ComparerMode.Id:  //時刻=発言Id                      c = 3;                      break;                  case ComparerMode.Name:  //名前                      c = 4;                      break;                  case ComparerMode.Source:  //Source                      c = 7;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: switch (_statuses.SortMode)              {                  case ComparerMode.Nickname:  //ニックネーム                      c = 1;                      break;                  case ComparerMode.Data:  //本文                      c = 2;                      break;                  case ComparerMode.Id:  //時刻=発言Id                      c = 3;                      break;                  case ComparerMode.Name:  //名前                      c = 4;                      break;                  case ComparerMode.Source:  //Source                      c = 7;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: if (_iconCol)              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▴";                  }              }              else              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▴";                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: if (_iconCol)              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▴";                  }              }              else              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▴";                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: if (_iconCol)              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▴";                  }              }              else              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▴";                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: if (_iconCol)              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[2] = ColumnOrgText[2] + "▴";                  }              }              else              {                  if (_statuses.SortOrder == SortOrder.Descending)                  {                      // U+25BE BLACK DOWN-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▾";                  }                  else                  {                      // U+25B4 BLACK UP-POINTING SMALL TRIANGLE                      ColumnText[c] = ColumnOrgText[c] + "▴";                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: Regex.CacheSize = 100;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!MyApplication.StartupOptions.ContainsKey("nolimit"))              {                  if (SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0)                      SettingManager.Common.TimelinePeriod = 15;                    if (SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0)                      SettingManager.Common.ReplyPeriod = 15;                    if (SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0)                      SettingManager.Common.DMPeriod = 15;                    if (SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0)                      SettingManager.Common.PubSearchPeriod = 30;                    if (SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0)                      SettingManager.Common.UserTimelinePeriod = 15;                    if (SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0)                      SettingManager.Common.ListsPeriod = 15;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.Timeline' SettingManager.Common.CountApi))                  SettingManager.Common.CountApi = 60;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (!Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.Reply' SettingManager.Common.CountApiReply))                  SettingManager.Common.CountApiReply = 40;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Common.MoreCountApi != 0 && !Twitter.VerifyMoreApiResultCount(SettingManager.Common.MoreCountApi))                  SettingManager.Common.MoreCountApi = 200;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Common.FirstCountApi != 0 && !Twitter.VerifyFirstApiResultCount(SettingManager.Common.FirstCountApi))                  SettingManager.Common.FirstCountApi = 100;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Common.FavoritesCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.Favorites' SettingManager.Common.FavoritesCountApi))                  SettingManager.Common.FavoritesCountApi = 40;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Common.ListCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.List' SettingManager.Common.ListCountApi))                  SettingManager.Common.ListCountApi = 100;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Common.SearchCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.PublicSearch' SettingManager.Common.SearchCountApi))                  SettingManager.Common.SearchCountApi = 100;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Common.UserTimelineCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.UserTimeline' SettingManager.Common.UserTimelineCountApi))                  SettingManager.Common.UserTimelineCountApi = 20;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Local.PreviewDistance == -1)              {                  _mySpDis3 = _mySize.Width - ScaleBy(this.CurrentScaleFactor.Width' 150);                  if (_mySpDis3 < 1) _mySpDis3 = ScaleBy(this.CurrentScaleFactor.Width' 50);                  SettingManager.Local.PreviewDistance = _mySpDis3;              }              else              {                  _mySpDis3 = ScaleBy(configScaleFactor.Width' SettingManager.Local.PreviewDistance);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: if (SettingManager.Local.PreviewDistance == -1)              {                  _mySpDis3 = _mySize.Width - ScaleBy(this.CurrentScaleFactor.Width' 150);                  if (_mySpDis3 < 1) _mySpDis3 = ScaleBy(this.CurrentScaleFactor.Width' 50);                  SettingManager.Local.PreviewDistance = _mySpDis3;              }              else              {                  _mySpDis3 = ScaleBy(configScaleFactor.Width' SettingManager.Local.PreviewDistance);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: TimerTimeline.Interval = 1000;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: TimerRefreshIcon.Interval = 200;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TimerTimeline_Elapsed,The following statement contains a magic number: if (refreshFollowers > 6 * 3600)              {                  Interlocked.Exchange(ref refreshFollowers' 0);                  refreshTasks.AddRange(new[]                  {                      this.doGetFollowersMenu()'                      this.RefreshNoRetweetIdsAsync()'                      this.RefreshTwitterConfigurationAsync()'                  });              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TimerTimeline_Elapsed,The following statement contains a magic number: if (refreshFollowers > 6 * 3600)              {                  Interlocked.Exchange(ref refreshFollowers' 0);                  refreshTasks.AddRange(new[]                  {                      this.doGetFollowersMenu()'                      this.RefreshNoRetweetIdsAsync()'                      this.RefreshTwitterConfigurationAsync()'                  });              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TimerTimeline_Elapsed,The following statement contains a magic number: if (osResumed)              {                  Interlocked.Increment(ref ResumeWait);                  if (ResumeWait > 30)                  {                      osResumed = false;                      Interlocked.Exchange(ref ResumeWait' 0);                      refreshTasks.AddRange(new[]                      {                          this.GetHomeTimelineAsync()'                          this.GetReplyAsync()'                          this.GetDirectMessagesAsync()'                          this.GetPublicSearchAllAsync()'                          this.GetUserTimelineAllAsync()'                          this.GetListTimelineAllAsync()'                          this.doGetFollowersMenu()'                          this.RefreshTwitterConfigurationAsync()'                      });                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetSelectedStatusIds,The following statement contains a magic number: if (selectedIndices.Count > 0 && selectedIndices.Count < 61)                  return tab.GetStatusIdAt(selectedIndices.Cast<int>());              else                  return null;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following statement contains a magic number: if (BalloonRequired())              {                  if (notifyPosts != null && notifyPosts.Length > 0)                  {                      //Growlは一個ずつばらして通知。ただし、3ポスト以上あるときはまとめる                      if (SettingManager.Common.IsUseNotifyGrowl)                      {                          StringBuilder sb = new StringBuilder();                          bool reply = false;                          bool dm = false;                            foreach (PostClass post in notifyPosts)                          {                              if (!(notifyPosts.Length > 3))                              {                                  sb.Clear();                                  reply = false;                                  dm = false;                              }                              if (post.IsReply && !post.IsExcludeReply) reply = true;                              if (post.IsDm) dm = true;                              if (sb.Length > 0) sb.Append(System.Environment.NewLine);                              switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }                              sb.Append(post.TextFromApi);                              if (notifyPosts.Length > 3)                              {                                  if (notifyPosts.Last() != post) continue;                              }                                StringBuilder title = new StringBuilder();                              GrowlHelper.NotifyType nt;                              if (SettingManager.Common.DispUsername)                              {                                  title.Append(tw.Username);                                  title.Append(" - ");                              }                              else                              {                                  //title.Clear();                              }                              if (dm)                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2;                                  title.Append(Application.ProductName);                                  title.Append(" [DM] ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.DirectMessage;                              }                              else if (reply)                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                                  title.Append(Application.ProductName);                                  title.Append(" [Reply!] ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.Reply;                              }                              else                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                                  title.Append(Application.ProductName);                                  title.Append(" ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.Notify;                              }                              string bText = sb.ToString();                              if (string.IsNullOrEmpty(bText)) return;                                var image = this.IconCache.TryGetFromCache(post.ImageUrl);                              gh.Notify(nt' post.StatusId.ToString()' title.ToString()' bText' image == null ? null : image.Image' post.ImageUrl);                          }                      }                      else                      {                          StringBuilder sb = new StringBuilder();                          bool reply = false;                          bool dm = false;                          foreach (PostClass post in notifyPosts)                          {                              if (post.IsReply && !post.IsExcludeReply) reply = true;                              if (post.IsDm) dm = true;                              if (sb.Length > 0) sb.Append(System.Environment.NewLine);                              switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }                              sb.Append(post.TextFromApi);                            }                          //if (SettingDialog.DispUsername) { NotifyIcon1.BalloonTipTitle = tw.Username + " - "; } else { NotifyIcon1.BalloonTipTitle = ""; }                          StringBuilder title = new StringBuilder();                          ToolTipIcon ntIcon;                          if (SettingManager.Common.DispUsername)                          {                              title.Append(tw.Username);                              title.Append(" - ");                          }                          else                          {                              //title.Clear();                          }                          if (dm)                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2;                              ntIcon = ToolTipIcon.Warning;                              title.Append(Application.ProductName);                              title.Append(" [DM] ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          else if (reply)                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                              ntIcon = ToolTipIcon.Warning;                              title.Append(Application.ProductName);                              title.Append(" [Reply!] ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          else                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                              ntIcon = ToolTipIcon.Info;                              title.Append(Application.ProductName);                              title.Append(" ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          string bText = sb.ToString();                          if (string.IsNullOrEmpty(bText)) return;                          //NotifyIcon1.BalloonTipText = sb.ToString();                          //NotifyIcon1.ShowBalloonTip(500);                          NotifyIcon1.BalloonTipTitle = title.ToString();                          NotifyIcon1.BalloonTipText = bText;                          NotifyIcon1.BalloonTipIcon = ntIcon;                          NotifyIcon1.ShowBalloonTip(500);                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following statement contains a magic number: if (BalloonRequired())              {                  if (notifyPosts != null && notifyPosts.Length > 0)                  {                      //Growlは一個ずつばらして通知。ただし、3ポスト以上あるときはまとめる                      if (SettingManager.Common.IsUseNotifyGrowl)                      {                          StringBuilder sb = new StringBuilder();                          bool reply = false;                          bool dm = false;                            foreach (PostClass post in notifyPosts)                          {                              if (!(notifyPosts.Length > 3))                              {                                  sb.Clear();                                  reply = false;                                  dm = false;                              }                              if (post.IsReply && !post.IsExcludeReply) reply = true;                              if (post.IsDm) dm = true;                              if (sb.Length > 0) sb.Append(System.Environment.NewLine);                              switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }                              sb.Append(post.TextFromApi);                              if (notifyPosts.Length > 3)                              {                                  if (notifyPosts.Last() != post) continue;                              }                                StringBuilder title = new StringBuilder();                              GrowlHelper.NotifyType nt;                              if (SettingManager.Common.DispUsername)                              {                                  title.Append(tw.Username);                                  title.Append(" - ");                              }                              else                              {                                  //title.Clear();                              }                              if (dm)                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2;                                  title.Append(Application.ProductName);                                  title.Append(" [DM] ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.DirectMessage;                              }                              else if (reply)                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                                  title.Append(Application.ProductName);                                  title.Append(" [Reply!] ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.Reply;                              }                              else                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                                  title.Append(Application.ProductName);                                  title.Append(" ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.Notify;                              }                              string bText = sb.ToString();                              if (string.IsNullOrEmpty(bText)) return;                                var image = this.IconCache.TryGetFromCache(post.ImageUrl);                              gh.Notify(nt' post.StatusId.ToString()' title.ToString()' bText' image == null ? null : image.Image' post.ImageUrl);                          }                      }                      else                      {                          StringBuilder sb = new StringBuilder();                          bool reply = false;                          bool dm = false;                          foreach (PostClass post in notifyPosts)                          {                              if (post.IsReply && !post.IsExcludeReply) reply = true;                              if (post.IsDm) dm = true;                              if (sb.Length > 0) sb.Append(System.Environment.NewLine);                              switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }                              sb.Append(post.TextFromApi);                            }                          //if (SettingDialog.DispUsername) { NotifyIcon1.BalloonTipTitle = tw.Username + " - "; } else { NotifyIcon1.BalloonTipTitle = ""; }                          StringBuilder title = new StringBuilder();                          ToolTipIcon ntIcon;                          if (SettingManager.Common.DispUsername)                          {                              title.Append(tw.Username);                              title.Append(" - ");                          }                          else                          {                              //title.Clear();                          }                          if (dm)                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2;                              ntIcon = ToolTipIcon.Warning;                              title.Append(Application.ProductName);                              title.Append(" [DM] ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          else if (reply)                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                              ntIcon = ToolTipIcon.Warning;                              title.Append(Application.ProductName);                              title.Append(" [Reply!] ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          else                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                              ntIcon = ToolTipIcon.Info;                              title.Append(Application.ProductName);                              title.Append(" ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          string bText = sb.ToString();                          if (string.IsNullOrEmpty(bText)) return;                          //NotifyIcon1.BalloonTipText = sb.ToString();                          //NotifyIcon1.ShowBalloonTip(500);                          NotifyIcon1.BalloonTipTitle = title.ToString();                          NotifyIcon1.BalloonTipText = bText;                          NotifyIcon1.BalloonTipIcon = ntIcon;                          NotifyIcon1.ShowBalloonTip(500);                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following statement contains a magic number: if (BalloonRequired())              {                  if (notifyPosts != null && notifyPosts.Length > 0)                  {                      //Growlは一個ずつばらして通知。ただし、3ポスト以上あるときはまとめる                      if (SettingManager.Common.IsUseNotifyGrowl)                      {                          StringBuilder sb = new StringBuilder();                          bool reply = false;                          bool dm = false;                            foreach (PostClass post in notifyPosts)                          {                              if (!(notifyPosts.Length > 3))                              {                                  sb.Clear();                                  reply = false;                                  dm = false;                              }                              if (post.IsReply && !post.IsExcludeReply) reply = true;                              if (post.IsDm) dm = true;                              if (sb.Length > 0) sb.Append(System.Environment.NewLine);                              switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }                              sb.Append(post.TextFromApi);                              if (notifyPosts.Length > 3)                              {                                  if (notifyPosts.Last() != post) continue;                              }                                StringBuilder title = new StringBuilder();                              GrowlHelper.NotifyType nt;                              if (SettingManager.Common.DispUsername)                              {                                  title.Append(tw.Username);                                  title.Append(" - ");                              }                              else                              {                                  //title.Clear();                              }                              if (dm)                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2;                                  title.Append(Application.ProductName);                                  title.Append(" [DM] ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.DirectMessage;                              }                              else if (reply)                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                                  title.Append(Application.ProductName);                                  title.Append(" [Reply!] ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.Reply;                              }                              else                              {                                  //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                                  title.Append(Application.ProductName);                                  title.Append(" ");                                  title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                                  nt = GrowlHelper.NotifyType.Notify;                              }                              string bText = sb.ToString();                              if (string.IsNullOrEmpty(bText)) return;                                var image = this.IconCache.TryGetFromCache(post.ImageUrl);                              gh.Notify(nt' post.StatusId.ToString()' title.ToString()' bText' image == null ? null : image.Image' post.ImageUrl);                          }                      }                      else                      {                          StringBuilder sb = new StringBuilder();                          bool reply = false;                          bool dm = false;                          foreach (PostClass post in notifyPosts)                          {                              if (post.IsReply && !post.IsExcludeReply) reply = true;                              if (post.IsDm) dm = true;                              if (sb.Length > 0) sb.Append(System.Environment.NewLine);                              switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }                              sb.Append(post.TextFromApi);                            }                          //if (SettingDialog.DispUsername) { NotifyIcon1.BalloonTipTitle = tw.Username + " - "; } else { NotifyIcon1.BalloonTipTitle = ""; }                          StringBuilder title = new StringBuilder();                          ToolTipIcon ntIcon;                          if (SettingManager.Common.DispUsername)                          {                              title.Append(tw.Username);                              title.Append(" - ");                          }                          else                          {                              //title.Clear();                          }                          if (dm)                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [DM] " + Properties.Resources.RefreshDirectMessageText1 + " " + addCount.ToString() + Properties.Resources.RefreshDirectMessageText2;                              ntIcon = ToolTipIcon.Warning;                              title.Append(Application.ProductName);                              title.Append(" [DM] ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          else if (reply)                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Warning;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [Reply!] " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                              ntIcon = ToolTipIcon.Warning;                              title.Append(Application.ProductName);                              title.Append(" [Reply!] ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          else                          {                              //NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                              //NotifyIcon1.BalloonTipTitle += Application.ProductName + " " + Properties.Resources.RefreshTimelineText1 + " " + addCount.ToString() + Properties.Resources.RefreshTimelineText2;                              ntIcon = ToolTipIcon.Info;                              title.Append(Application.ProductName);                              title.Append(" ");                              title.AppendFormat(Properties.Resources.RefreshTimeline_NotifyText' addCount);                          }                          string bText = sb.ToString();                          if (string.IsNullOrEmpty(bText)) return;                          //NotifyIcon1.BalloonTipText = sb.ToString();                          //NotifyIcon1.ShowBalloonTip(500);                          NotifyIcon1.BalloonTipTitle = title.ToString();                          NotifyIcon1.BalloonTipText = bText;                          NotifyIcon1.BalloonTipIcon = ntIcon;                          NotifyIcon1.ShowBalloonTip(500);                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following statement contains a magic number: if (!_initial && SettingManager.Common.BlinkNewMentions && newMentions && Form.ActiveForm == null)              {                  NativeMethods.FlashMyWindow(this.Handle' NativeMethods.FlashSpecification.FlashTray' 3);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ChangeItemStyleRead,The following statement contains a magic number: if (Read)              {                  fnt = _fntReaded;                  Item.SubItems[5].Text = "";              }              else              {                  fnt = _fntUnread;                  Item.SubItems[5].Text = "★";              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ChangeItemStyleRead,The following statement contains a magic number: if (Read)              {                  fnt = _fntReaded;                  Item.SubItems[5].Text = "";              }              else              {                  fnt = _fntUnread;                  Item.SubItems[5].Text = "★";              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The following statement contains a magic number: if (StatusText.Text.StartsWith("Google:"' StringComparison.OrdinalIgnoreCase) && StatusText.Text.Trim().Length > 7)              {                  string tmp = string.Format(Properties.Resources.SearchItem2Url' Uri.EscapeDataString(StatusText.Text.Substring(7)));                  await this.OpenUriInBrowserAsync(tmp);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The following statement contains a magic number: if (StatusText.Text.StartsWith("Google:"' StringComparison.OrdinalIgnoreCase) && StatusText.Text.Trim().Length > 7)              {                  string tmp = string.Format(Properties.Resources.SearchItem2Url' Uri.EscapeDataString(StatusText.Text.Substring(7)));                  await this.OpenUriInBrowserAsync(tmp);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CheckAccountValid,The following statement contains a magic number: if (Twitter.AccountState != MyCommon.ACCOUNT_STATE.Valid)              {                  errorCount += 1;                  if (errorCount > 5)                  {                      errorCount = 0;                      Twitter.AccountState = MyCommon.ACCOUNT_STATE.Valid;                      return true;                  }                  return false;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      if (_curPost != null)                          await this.ShowUserStatus(_curPost.ScreenName' false);                      break;                  case 3:                      ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(null' null);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(null' null);                      break;                  case 6:                      StatusOpenMenuItem_Click(null' null);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      if (_curPost != null)                          await this.ShowUserStatus(_curPost.ScreenName' false);                      break;                  case 3:                      ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(null' null);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(null' null);                      break;                  case 6:                      StatusOpenMenuItem_Click(null' null);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      if (_curPost != null)                          await this.ShowUserStatus(_curPost.ScreenName' false);                      break;                  case 3:                      ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(null' null);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(null' null);                      break;                  case 6:                      StatusOpenMenuItem_Click(null' null);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      if (_curPost != null)                          await this.ShowUserStatus(_curPost.ScreenName' false);                      break;                  case 3:                      ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(null' null);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(null' null);                      break;                  case 6:                      StatusOpenMenuItem_Click(null' null);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      if (_curPost != null)                          await this.ShowUserStatus(_curPost.ScreenName' false);                      break;                  case 3:                      ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(null' null);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(null' null);                      break;                  case 6:                      StatusOpenMenuItem_Click(null' null);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      if (_curPost != null)                          await this.ShowUserStatus(_curPost.ScreenName' false);                      break;                  case 3:                      ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(null' null);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(null' null);                      break;                  case 6:                      StatusOpenMenuItem_Click(null' null);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: switch (columnIndex)              {                  case 1: // ニックネーム                      return ComparerMode.Nickname;                  case 2: // 本文                      return ComparerMode.Data;                  case 3: // 時刻=発言Id                      return ComparerMode.Id;                  case 4: // 名前                      return ComparerMode.Name;                  case 7: // Source                      return ComparerMode.Source;                  default:                      // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク                      return null;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: switch (columnIndex)              {                  case 1: // ニックネーム                      return ComparerMode.Nickname;                  case 2: // 本文                      return ComparerMode.Data;                  case 3: // 時刻=発言Id                      return ComparerMode.Id;                  case 4: // 名前                      return ComparerMode.Name;                  case 7: // Source                      return ComparerMode.Source;                  default:                      // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク                      return null;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: switch (columnIndex)              {                  case 1: // ニックネーム                      return ComparerMode.Nickname;                  case 2: // 本文                      return ComparerMode.Data;                  case 3: // 時刻=発言Id                      return ComparerMode.Id;                  case 4: // 名前                      return ComparerMode.Name;                  case 7: // Source                      return ComparerMode.Source;                  default:                      // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク                      return null;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: switch (columnIndex)              {                  case 1: // ニックネーム                      return ComparerMode.Nickname;                  case 2: // 本文                      return ComparerMode.Data;                  case 3: // 時刻=発言Id                      return ComparerMode.Id;                  case 4: // 名前                      return ComparerMode.Name;                  case 7: // Source                      return ComparerMode.Source;                  default:                      // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク                      return null;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetSortColumn,The following statement contains a magic number: if (_iconCol)              {                  list.Columns[0].Text = this.ColumnText[0];                  list.Columns[1].Text = this.ColumnText[2];              }              else              {                  for (var i = 0; i <= 7; i++)                  {                      list.Columns[i].Text = this.ColumnText[i];                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetSortColumn,The following statement contains a magic number: if (_iconCol)              {                  list.Columns[0].Text = this.ColumnText[0];                  list.Columns[1].Text = this.ColumnText[2];              }              else              {                  for (var i = 0; i <= 7; i++)                  {                      list.Columns[i].Text = this.ColumnText[i];                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: switch (iconSz)              {                  case MyCommon.IconSizes.IconNone:                      _iconSz = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      _iconSz = 16;                      break;                  case MyCommon.IconSizes.Icon24:                      _iconSz = 26;                      break;                  case MyCommon.IconSizes.Icon48:                      _iconSz = 48;                      break;                  case MyCommon.IconSizes.Icon48_2:                      _iconSz = 48;                      _iconCol = true;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: switch (iconSz)              {                  case MyCommon.IconSizes.IconNone:                      _iconSz = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      _iconSz = 16;                      break;                  case MyCommon.IconSizes.Icon24:                      _iconSz = 26;                      break;                  case MyCommon.IconSizes.Icon48:                      _iconSz = 48;                      break;                  case MyCommon.IconSizes.Icon48_2:                      _iconSz = 48;                      _iconCol = true;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: switch (iconSz)              {                  case MyCommon.IconSizes.IconNone:                      _iconSz = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      _iconSz = 16;                      break;                  case MyCommon.IconSizes.Icon24:                      _iconSz = 26;                      break;                  case MyCommon.IconSizes.Icon48:                      _iconSz = 48;                      break;                  case MyCommon.IconSizes.Icon48_2:                      _iconSz = 48;                      _iconCol = true;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: switch (iconSz)              {                  case MyCommon.IconSizes.IconNone:                      _iconSz = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      _iconSz = 16;                      break;                  case MyCommon.IconSizes.Icon24:                      _iconSz = 26;                      break;                  case MyCommon.IconSizes.Icon48:                      _iconSz = 48;                      break;                  case MyCommon.IconSizes.Icon48_2:                      _iconSz = 48;                      _iconCol = true;                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTabForSearch,The following statement contains a magic number: for (int i = 0; i <= 100; i++)              {                  if (_statuses.ContainsTab(tabName))                      tabName += "_";                  else                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: using (ControlTransaction.Update(_listCustom))              using (ControlTransaction.Layout(this.SplitContainer1.Panel1' false))              using (ControlTransaction.Layout(this.SplitContainer1.Panel2' false))              using (ControlTransaction.Layout(this.SplitContainer1' false))              using (ControlTransaction.Layout(this.ListTab' false))              using (ControlTransaction.Layout(this))              using (ControlTransaction.Layout(_tabPage' false))              {                  _tabPage.Controls.Add(_listCustom);                    /// UserTimeline関連                  var userTab = tab as UserTimelineTabModel;                  var listTab = tab as ListTimelineTabModel;                  var searchTab = tab as PublicSearchTabModel;                    if (userTab != null || listTab != null)                  {                      var label = new Label();                      label.Dock = DockStyle.Top;                      label.Name = "labelUser";                      label.TabIndex = 0;                        if (listTab != null)                      {                          label.Text = listTab.ListInfo.ToString();                      }                      else if (userTab != null)                      {                          label.Text = userTab.ScreenName + "'s Timeline";                      }                      label.TextAlign = ContentAlignment.MiddleLeft;                      using (ComboBox tmpComboBox = new ComboBox())                      {                          label.Height = tmpComboBox.Height;                      }                      _tabPage.Controls.Add(label);                  }                  /// 検索関連の準備                  else if (searchTab != null)                  {                      var pnl = new Panel();                        var lbl = new Label();                      var cmb = new ComboBox();                      var btn = new Button();                      var cmbLang = new ComboBox();                        using (ControlTransaction.Layout(pnl' false))                      {                          pnl.Controls.Add(cmb);                          pnl.Controls.Add(cmbLang);                          pnl.Controls.Add(btn);                          pnl.Controls.Add(lbl);                          pnl.Name = "panelSearch";                          pnl.TabIndex = 0;                          pnl.Dock = DockStyle.Top;                          pnl.Height = cmb.Height;                          pnl.Enter += SearchControls_Enter;                          pnl.Leave += SearchControls_Leave;                            cmb.Text = "";                          cmb.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmb.Dock = DockStyle.Fill;                          cmb.Name = "comboSearch";                          cmb.DropDownStyle = ComboBoxStyle.DropDown;                          cmb.ImeMode = ImeMode.NoControl;                          cmb.TabStop = false;                          cmb.TabIndex = 1;                          cmb.AutoCompleteMode = AutoCompleteMode.None;                          cmb.KeyDown += SearchComboBox_KeyDown;                            cmbLang.Text = "";                          cmbLang.Anchor = AnchorStyles.Left | AnchorStyles.Right;                          cmbLang.Dock = DockStyle.Right;                          cmbLang.Width = 50;                          cmbLang.Name = "comboLang";                          cmbLang.DropDownStyle = ComboBoxStyle.DropDownList;                          cmbLang.TabStop = false;                          cmbLang.TabIndex = 2;                          cmbLang.Items.Add("");                          cmbLang.Items.Add("ja");                          cmbLang.Items.Add("en");                          cmbLang.Items.Add("ar");                          cmbLang.Items.Add("da");                          cmbLang.Items.Add("nl");                          cmbLang.Items.Add("fa");                          cmbLang.Items.Add("fi");                          cmbLang.Items.Add("fr");                          cmbLang.Items.Add("de");                          cmbLang.Items.Add("hu");                          cmbLang.Items.Add("is");                          cmbLang.Items.Add("it");                          cmbLang.Items.Add("no");                          cmbLang.Items.Add("pl");                          cmbLang.Items.Add("pt");                          cmbLang.Items.Add("ru");                          cmbLang.Items.Add("es");                          cmbLang.Items.Add("sv");                          cmbLang.Items.Add("th");                            lbl.Text = "Search(C-S-f)";                          lbl.Name = "label1";                          lbl.Dock = DockStyle.Left;                          lbl.Width = 90;                          lbl.Height = cmb.Height;                          lbl.TextAlign = ContentAlignment.MiddleLeft;                          lbl.TabIndex = 0;                            btn.Text = "Search";                          btn.Name = "buttonSearch";                          btn.UseVisualStyleBackColor = true;                          btn.Dock = DockStyle.Right;                          btn.TabStop = false;                          btn.TabIndex = 3;                          btn.Click += SearchButton_Click;                            if (!string.IsNullOrEmpty(searchTab.SearchWords))                          {                              cmb.Items.Add(searchTab.SearchWords);                              cmb.Text = searchTab.SearchWords;                          }                            cmbLang.Text = searchTab.SearchLang;                            _tabPage.Controls.Add(pnl);                      }                  }                    _tabPage.Tag = _listCustom;                  this.ListTab.Controls.Add(_tabPage);                    _tabPage.Location = new Point(4' 4);                  _tabPage.Name = "CTab" + cnt;                  _tabPage.Size = new Size(380' 260);                  _tabPage.TabIndex = 2 + cnt;                  _tabPage.Text = tab.TabName;                  _tabPage.UseVisualStyleBackColor = true;                  _tabPage.AccessibleRole = AccessibleRole.PageTab;                    _listCustom.AccessibleName = Properties.Resources.AddNewTab_ListView_AccessibleName;                  _listCustom.TabIndex = 1;                  _listCustom.AllowColumnReorder = true;                  _listCustom.ContextMenuStrip = this.ContextMenuOperate;                  _listCustom.ColumnHeaderContextMenuStrip = this.ContextMenuColumnHeader;                  _listCustom.Dock = DockStyle.Fill;                  _listCustom.FullRowSelect = true;                  _listCustom.HideSelection = false;                  _listCustom.Location = new Point(0' 0);                  _listCustom.Margin = new Padding(0);                  _listCustom.Name = "CList" + Environment.TickCount;                  _listCustom.ShowItemToolTips = true;                  _listCustom.Size = new Size(380' 260);                  _listCustom.UseCompatibleStateImageBehavior = false;                  _listCustom.View = View.Details;                  _listCustom.OwnerDraw = true;                  _listCustom.VirtualMode = true;                  _listCustom.Font = _fntReaded;                  _listCustom.BackColor = _clListBackcolor;                    _listCustom.GridLines = SettingManager.Common.ShowGrid;                  _listCustom.AllowDrop = true;                    _listCustom.SmallImageList = _listViewImageList;                    InitColumns(_listCustom' startup);                    _listCustom.SelectedIndexChanged += MyList_SelectedIndexChanged;                  _listCustom.MouseDoubleClick += MyList_MouseDoubleClick;                  _listCustom.ColumnClick += MyList_ColumnClick;                  _listCustom.DrawColumnHeader += MyList_DrawColumnHeader;                  _listCustom.DragDrop += TweenMain_DragDrop;                  _listCustom.DragEnter += TweenMain_DragEnter;                  _listCustom.DragOver += TweenMain_DragOver;                  _listCustom.DrawItem += MyList_DrawItem;                  _listCustom.MouseClick += MyList_MouseClick;                  _listCustom.ColumnReordered += MyList_ColumnReordered;                  _listCustom.ColumnWidthChanged += MyList_ColumnWidthChanged;                  _listCustom.CacheVirtualItems += MyList_CacheVirtualItems;                  _listCustom.RetrieveVirtualItem += MyList_RetrieveVirtualItem;                  _listCustom.DrawSubItem += MyList_DrawSubItem;                  _listCustom.HScrolled += MyList_HScrolled;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_MouseMove,The following statement contains a magic number: if (!SettingManager.Common.TabMouseLock && e.Button == MouseButtons.Left && _tabDrag)              {                  string tn = "";                  Rectangle dragEnableRectangle = new Rectangle(_tabMouseDownPoint.X - (SystemInformation.DragSize.Width / 2)' _tabMouseDownPoint.Y - (SystemInformation.DragSize.Height / 2)' SystemInformation.DragSize.Width' SystemInformation.DragSize.Height);                  if (!dragEnableRectangle.Contains(e.Location))                  {                      //タブが多段の場合にはMouseDownの前の段階で選択されたタブの段が変わっているので、このタイミングでカーソルの位置からタブを判定出来ない。                      tn = ListTab.SelectedTab.Text;                  }                    if (string.IsNullOrEmpty(tn)) return;                    foreach (TabPage tb in ListTab.TabPages)                  {                      if (tb.Text == tn)                      {                          ListTab.DoDragDrop(tb' DragDropEffects.All);                          break;                      }                  }              }              else              {                  _tabDrag = false;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_MouseMove,The following statement contains a magic number: if (!SettingManager.Common.TabMouseLock && e.Button == MouseButtons.Left && _tabDrag)              {                  string tn = "";                  Rectangle dragEnableRectangle = new Rectangle(_tabMouseDownPoint.X - (SystemInformation.DragSize.Width / 2)' _tabMouseDownPoint.Y - (SystemInformation.DragSize.Height / 2)' SystemInformation.DragSize.Width' SystemInformation.DragSize.Height);                  if (!dragEnableRectangle.Contains(e.Location))                  {                      //タブが多段の場合にはMouseDownの前の段階で選択されたタブの段が変わっているので、このタイミングでカーソルの位置からタブを判定出来ない。                      tn = ListTab.SelectedTab.Text;                  }                    if (string.IsNullOrEmpty(tn)) return;                    foreach (TabPage tb in ListTab.TabPages)                  {                      if (tb.Text == tn)                      {                          ListTab.DoDragDrop(tb' DragDropEffects.All);                          break;                      }                  }              }              else              {                  _tabDrag = false;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveAutoPopuratedMentions,The following statement contains a magic number: if (replyToPost != null)              {                  if (statusText.StartsWith($"@{replyToPost.ScreenName} "' StringComparison.Ordinal))                  {                      statusText = statusText.Substring(replyToPost.ScreenName.Length + 2);                      _autoPopulatedUserIds.Add(replyToPost.UserId);                        foreach (var reply in replyToPost.ReplyToList)                      {                          if (statusText.StartsWith($"@{reply.Item2} "' StringComparison.Ordinal))                          {                              statusText = statusText.Substring(reply.Item2.Length + 2);                              _autoPopulatedUserIds.Add(reply.Item1);                          }                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveAutoPopuratedMentions,The following statement contains a magic number: if (replyToPost != null)              {                  if (statusText.StartsWith($"@{replyToPost.ScreenName} "' StringComparison.Ordinal))                  {                      statusText = statusText.Substring(replyToPost.ScreenName.Length + 2);                      _autoPopulatedUserIds.Add(replyToPost.UserId);                        foreach (var reply in replyToPost.ReplyToList)                      {                          if (statusText.StartsWith($"@{reply.Item2} "' StringComparison.Ordinal))                          {                              statusText = statusText.Substring(reply.Item2.Length + 2);                              _autoPopulatedUserIds.Add(reply.Item1);                          }                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CreateCache,The following statement contains a magic number: startIndex = FilterRange(startIndex - 30);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CreateCache,The following statement contains a magic number: endIndex = FilterRange(endIndex + 30);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: if (e.ColumnIndex > 0)              {                  //アイコン以外の列                  var post = (PostClass)e.Item.Tag;                    RectangleF rct = e.Bounds;                  rct.Width = e.Header.Width;                  int fontHeight = e.Item.Font.Height;                  if (_iconCol)                  {                      rct.Y += fontHeight;                      rct.Height -= fontHeight;                  }                    int drawLineCount = Math.Max(1' Math.DivRem((int)rct.Height' fontHeight' out var heightDiff));                    //if (heightDiff > fontHeight * 0.7)                  //{                  //    rct.Height += fontHeight;                  //    drawLineCount += 1;                  //}                    //フォントの高さの半分を足してるのは保険。無くてもいいかも。                  if (!_iconCol && drawLineCount <= 1)                  {                      //rct.Inflate(0' heightDiff / -2);                      //rct.Height += fontHeight / 2;                  }                  else if (heightDiff < fontHeight * 0.7)                  {                      //最終行が70%以上欠けていたら、最終行は表示しない                      //rct.Height = (float)((fontHeight * drawLineCount) + (fontHeight / 2));                      rct.Height = (fontHeight * drawLineCount) - 1;                  }                  else                  {                      drawLineCount += 1;                  }                    //if (!_iconCol && drawLineCount > 1)                  //{                  //    rct.Y += fontHeight * 0.2;                  //    if (heightDiff >= fontHeight * 0.8) rct.Height -= fontHeight * 0.2;                  //}                    if (rct.Width > 0)                  {                      Color color = (!e.Item.Selected) ? e.Item.ForeColor :   //選択されていない行                          (((Control)sender).Focused) ? _clHighLight :        //選択中の行                          _clUnread;                        if (_iconCol)                      {                          Rectangle rctB = e.Bounds;                          rctB.Width = e.Header.Width;                          rctB.Height = fontHeight;                            using (Font fnt = new Font(e.Item.Font' FontStyle.Bold))                          {                              TextRenderer.DrawText(e.Graphics'                                                      post.IsDeleted ? "(DELETED)" : post.TextSingleLine'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                              TextRenderer.DrawText(e.Graphics'                                                      e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                                                      fnt'                                                      rctB'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      else                      {                          string text;                          if (e.ColumnIndex != 2)                              text = e.SubItem.Text;                          else                              text = post.IsDeleted ? "(DELETED)" : post.TextSingleLine;                            if (drawLineCount == 1)                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix |                                                      TextFormatFlags.VerticalCenter);                          }                          else                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      //if (e.ColumnIndex == 6) this.DrawListViewItemStateIcon(e' rct);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: if (e.ColumnIndex > 0)              {                  //アイコン以外の列                  var post = (PostClass)e.Item.Tag;                    RectangleF rct = e.Bounds;                  rct.Width = e.Header.Width;                  int fontHeight = e.Item.Font.Height;                  if (_iconCol)                  {                      rct.Y += fontHeight;                      rct.Height -= fontHeight;                  }                    int drawLineCount = Math.Max(1' Math.DivRem((int)rct.Height' fontHeight' out var heightDiff));                    //if (heightDiff > fontHeight * 0.7)                  //{                  //    rct.Height += fontHeight;                  //    drawLineCount += 1;                  //}                    //フォントの高さの半分を足してるのは保険。無くてもいいかも。                  if (!_iconCol && drawLineCount <= 1)                  {                      //rct.Inflate(0' heightDiff / -2);                      //rct.Height += fontHeight / 2;                  }                  else if (heightDiff < fontHeight * 0.7)                  {                      //最終行が70%以上欠けていたら、最終行は表示しない                      //rct.Height = (float)((fontHeight * drawLineCount) + (fontHeight / 2));                      rct.Height = (fontHeight * drawLineCount) - 1;                  }                  else                  {                      drawLineCount += 1;                  }                    //if (!_iconCol && drawLineCount > 1)                  //{                  //    rct.Y += fontHeight * 0.2;                  //    if (heightDiff >= fontHeight * 0.8) rct.Height -= fontHeight * 0.2;                  //}                    if (rct.Width > 0)                  {                      Color color = (!e.Item.Selected) ? e.Item.ForeColor :   //選択されていない行                          (((Control)sender).Focused) ? _clHighLight :        //選択中の行                          _clUnread;                        if (_iconCol)                      {                          Rectangle rctB = e.Bounds;                          rctB.Width = e.Header.Width;                          rctB.Height = fontHeight;                            using (Font fnt = new Font(e.Item.Font' FontStyle.Bold))                          {                              TextRenderer.DrawText(e.Graphics'                                                      post.IsDeleted ? "(DELETED)" : post.TextSingleLine'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                              TextRenderer.DrawText(e.Graphics'                                                      e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                                                      fnt'                                                      rctB'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      else                      {                          string text;                          if (e.ColumnIndex != 2)                              text = e.SubItem.Text;                          else                              text = post.IsDeleted ? "(DELETED)" : post.TextSingleLine;                            if (drawLineCount == 1)                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix |                                                      TextFormatFlags.VerticalCenter);                          }                          else                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      //if (e.ColumnIndex == 6) this.DrawListViewItemStateIcon(e' rct);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: if (e.ColumnIndex > 0)              {                  //アイコン以外の列                  var post = (PostClass)e.Item.Tag;                    RectangleF rct = e.Bounds;                  rct.Width = e.Header.Width;                  int fontHeight = e.Item.Font.Height;                  if (_iconCol)                  {                      rct.Y += fontHeight;                      rct.Height -= fontHeight;                  }                    int drawLineCount = Math.Max(1' Math.DivRem((int)rct.Height' fontHeight' out var heightDiff));                    //if (heightDiff > fontHeight * 0.7)                  //{                  //    rct.Height += fontHeight;                  //    drawLineCount += 1;                  //}                    //フォントの高さの半分を足してるのは保険。無くてもいいかも。                  if (!_iconCol && drawLineCount <= 1)                  {                      //rct.Inflate(0' heightDiff / -2);                      //rct.Height += fontHeight / 2;                  }                  else if (heightDiff < fontHeight * 0.7)                  {                      //最終行が70%以上欠けていたら、最終行は表示しない                      //rct.Height = (float)((fontHeight * drawLineCount) + (fontHeight / 2));                      rct.Height = (fontHeight * drawLineCount) - 1;                  }                  else                  {                      drawLineCount += 1;                  }                    //if (!_iconCol && drawLineCount > 1)                  //{                  //    rct.Y += fontHeight * 0.2;                  //    if (heightDiff >= fontHeight * 0.8) rct.Height -= fontHeight * 0.2;                  //}                    if (rct.Width > 0)                  {                      Color color = (!e.Item.Selected) ? e.Item.ForeColor :   //選択されていない行                          (((Control)sender).Focused) ? _clHighLight :        //選択中の行                          _clUnread;                        if (_iconCol)                      {                          Rectangle rctB = e.Bounds;                          rctB.Width = e.Header.Width;                          rctB.Height = fontHeight;                            using (Font fnt = new Font(e.Item.Font' FontStyle.Bold))                          {                              TextRenderer.DrawText(e.Graphics'                                                      post.IsDeleted ? "(DELETED)" : post.TextSingleLine'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                              TextRenderer.DrawText(e.Graphics'                                                      e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                                                      fnt'                                                      rctB'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      else                      {                          string text;                          if (e.ColumnIndex != 2)                              text = e.SubItem.Text;                          else                              text = post.IsDeleted ? "(DELETED)" : post.TextSingleLine;                            if (drawLineCount == 1)                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix |                                                      TextFormatFlags.VerticalCenter);                          }                          else                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      //if (e.ColumnIndex == 6) this.DrawListViewItemStateIcon(e' rct);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: if (e.ColumnIndex > 0)              {                  //アイコン以外の列                  var post = (PostClass)e.Item.Tag;                    RectangleF rct = e.Bounds;                  rct.Width = e.Header.Width;                  int fontHeight = e.Item.Font.Height;                  if (_iconCol)                  {                      rct.Y += fontHeight;                      rct.Height -= fontHeight;                  }                    int drawLineCount = Math.Max(1' Math.DivRem((int)rct.Height' fontHeight' out var heightDiff));                    //if (heightDiff > fontHeight * 0.7)                  //{                  //    rct.Height += fontHeight;                  //    drawLineCount += 1;                  //}                    //フォントの高さの半分を足してるのは保険。無くてもいいかも。                  if (!_iconCol && drawLineCount <= 1)                  {                      //rct.Inflate(0' heightDiff / -2);                      //rct.Height += fontHeight / 2;                  }                  else if (heightDiff < fontHeight * 0.7)                  {                      //最終行が70%以上欠けていたら、最終行は表示しない                      //rct.Height = (float)((fontHeight * drawLineCount) + (fontHeight / 2));                      rct.Height = (fontHeight * drawLineCount) - 1;                  }                  else                  {                      drawLineCount += 1;                  }                    //if (!_iconCol && drawLineCount > 1)                  //{                  //    rct.Y += fontHeight * 0.2;                  //    if (heightDiff >= fontHeight * 0.8) rct.Height -= fontHeight * 0.2;                  //}                    if (rct.Width > 0)                  {                      Color color = (!e.Item.Selected) ? e.Item.ForeColor :   //選択されていない行                          (((Control)sender).Focused) ? _clHighLight :        //選択中の行                          _clUnread;                        if (_iconCol)                      {                          Rectangle rctB = e.Bounds;                          rctB.Width = e.Header.Width;                          rctB.Height = fontHeight;                            using (Font fnt = new Font(e.Item.Font' FontStyle.Bold))                          {                              TextRenderer.DrawText(e.Graphics'                                                      post.IsDeleted ? "(DELETED)" : post.TextSingleLine'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                              TextRenderer.DrawText(e.Graphics'                                                      e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                                                      fnt'                                                      rctB'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      else                      {                          string text;                          if (e.ColumnIndex != 2)                              text = e.SubItem.Text;                          else                              text = post.IsDeleted ? "(DELETED)" : post.TextSingleLine;                            if (drawLineCount == 1)                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix |                                                      TextFormatFlags.VerticalCenter);                          }                          else                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      //if (e.ColumnIndex == 6) this.DrawListViewItemStateIcon(e' rct);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: if (e.ColumnIndex > 0)              {                  //アイコン以外の列                  var post = (PostClass)e.Item.Tag;                    RectangleF rct = e.Bounds;                  rct.Width = e.Header.Width;                  int fontHeight = e.Item.Font.Height;                  if (_iconCol)                  {                      rct.Y += fontHeight;                      rct.Height -= fontHeight;                  }                    int drawLineCount = Math.Max(1' Math.DivRem((int)rct.Height' fontHeight' out var heightDiff));                    //if (heightDiff > fontHeight * 0.7)                  //{                  //    rct.Height += fontHeight;                  //    drawLineCount += 1;                  //}                    //フォントの高さの半分を足してるのは保険。無くてもいいかも。                  if (!_iconCol && drawLineCount <= 1)                  {                      //rct.Inflate(0' heightDiff / -2);                      //rct.Height += fontHeight / 2;                  }                  else if (heightDiff < fontHeight * 0.7)                  {                      //最終行が70%以上欠けていたら、最終行は表示しない                      //rct.Height = (float)((fontHeight * drawLineCount) + (fontHeight / 2));                      rct.Height = (fontHeight * drawLineCount) - 1;                  }                  else                  {                      drawLineCount += 1;                  }                    //if (!_iconCol && drawLineCount > 1)                  //{                  //    rct.Y += fontHeight * 0.2;                  //    if (heightDiff >= fontHeight * 0.8) rct.Height -= fontHeight * 0.2;                  //}                    if (rct.Width > 0)                  {                      Color color = (!e.Item.Selected) ? e.Item.ForeColor :   //選択されていない行                          (((Control)sender).Focused) ? _clHighLight :        //選択中の行                          _clUnread;                        if (_iconCol)                      {                          Rectangle rctB = e.Bounds;                          rctB.Width = e.Header.Width;                          rctB.Height = fontHeight;                            using (Font fnt = new Font(e.Item.Font' FontStyle.Bold))                          {                              TextRenderer.DrawText(e.Graphics'                                                      post.IsDeleted ? "(DELETED)" : post.TextSingleLine'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                              TextRenderer.DrawText(e.Graphics'                                                      e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                                                      fnt'                                                      rctB'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      else                      {                          string text;                          if (e.ColumnIndex != 2)                              text = e.SubItem.Text;                          else                              text = post.IsDeleted ? "(DELETED)" : post.TextSingleLine;                            if (drawLineCount == 1)                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix |                                                      TextFormatFlags.VerticalCenter);                          }                          else                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      //if (e.ColumnIndex == 6) this.DrawListViewItemStateIcon(e' rct);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: if (e.ColumnIndex > 0)              {                  //アイコン以外の列                  var post = (PostClass)e.Item.Tag;                    RectangleF rct = e.Bounds;                  rct.Width = e.Header.Width;                  int fontHeight = e.Item.Font.Height;                  if (_iconCol)                  {                      rct.Y += fontHeight;                      rct.Height -= fontHeight;                  }                    int drawLineCount = Math.Max(1' Math.DivRem((int)rct.Height' fontHeight' out var heightDiff));                    //if (heightDiff > fontHeight * 0.7)                  //{                  //    rct.Height += fontHeight;                  //    drawLineCount += 1;                  //}                    //フォントの高さの半分を足してるのは保険。無くてもいいかも。                  if (!_iconCol && drawLineCount <= 1)                  {                      //rct.Inflate(0' heightDiff / -2);                      //rct.Height += fontHeight / 2;                  }                  else if (heightDiff < fontHeight * 0.7)                  {                      //最終行が70%以上欠けていたら、最終行は表示しない                      //rct.Height = (float)((fontHeight * drawLineCount) + (fontHeight / 2));                      rct.Height = (fontHeight * drawLineCount) - 1;                  }                  else                  {                      drawLineCount += 1;                  }                    //if (!_iconCol && drawLineCount > 1)                  //{                  //    rct.Y += fontHeight * 0.2;                  //    if (heightDiff >= fontHeight * 0.8) rct.Height -= fontHeight * 0.2;                  //}                    if (rct.Width > 0)                  {                      Color color = (!e.Item.Selected) ? e.Item.ForeColor :   //選択されていない行                          (((Control)sender).Focused) ? _clHighLight :        //選択中の行                          _clUnread;                        if (_iconCol)                      {                          Rectangle rctB = e.Bounds;                          rctB.Width = e.Header.Width;                          rctB.Height = fontHeight;                            using (Font fnt = new Font(e.Item.Font' FontStyle.Bold))                          {                              TextRenderer.DrawText(e.Graphics'                                                      post.IsDeleted ? "(DELETED)" : post.TextSingleLine'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                              TextRenderer.DrawText(e.Graphics'                                                      e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                                                      fnt'                                                      rctB'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      else                      {                          string text;                          if (e.ColumnIndex != 2)                              text = e.SubItem.Text;                          else                              text = post.IsDeleted ? "(DELETED)" : post.TextSingleLine;                            if (drawLineCount == 1)                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix |                                                      TextFormatFlags.VerticalCenter);                          }                          else                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      //if (e.ColumnIndex == 6) this.DrawListViewItemStateIcon(e' rct);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: if (e.ColumnIndex > 0)              {                  //アイコン以外の列                  var post = (PostClass)e.Item.Tag;                    RectangleF rct = e.Bounds;                  rct.Width = e.Header.Width;                  int fontHeight = e.Item.Font.Height;                  if (_iconCol)                  {                      rct.Y += fontHeight;                      rct.Height -= fontHeight;                  }                    int drawLineCount = Math.Max(1' Math.DivRem((int)rct.Height' fontHeight' out var heightDiff));                    //if (heightDiff > fontHeight * 0.7)                  //{                  //    rct.Height += fontHeight;                  //    drawLineCount += 1;                  //}                    //フォントの高さの半分を足してるのは保険。無くてもいいかも。                  if (!_iconCol && drawLineCount <= 1)                  {                      //rct.Inflate(0' heightDiff / -2);                      //rct.Height += fontHeight / 2;                  }                  else if (heightDiff < fontHeight * 0.7)                  {                      //最終行が70%以上欠けていたら、最終行は表示しない                      //rct.Height = (float)((fontHeight * drawLineCount) + (fontHeight / 2));                      rct.Height = (fontHeight * drawLineCount) - 1;                  }                  else                  {                      drawLineCount += 1;                  }                    //if (!_iconCol && drawLineCount > 1)                  //{                  //    rct.Y += fontHeight * 0.2;                  //    if (heightDiff >= fontHeight * 0.8) rct.Height -= fontHeight * 0.2;                  //}                    if (rct.Width > 0)                  {                      Color color = (!e.Item.Selected) ? e.Item.ForeColor :   //選択されていない行                          (((Control)sender).Focused) ? _clHighLight :        //選択中の行                          _clUnread;                        if (_iconCol)                      {                          Rectangle rctB = e.Bounds;                          rctB.Width = e.Header.Width;                          rctB.Height = fontHeight;                            using (Font fnt = new Font(e.Item.Font' FontStyle.Bold))                          {                              TextRenderer.DrawText(e.Graphics'                                                      post.IsDeleted ? "(DELETED)" : post.TextSingleLine'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                              TextRenderer.DrawText(e.Graphics'                                                      e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                                                      fnt'                                                      rctB'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      else                      {                          string text;                          if (e.ColumnIndex != 2)                              text = e.SubItem.Text;                          else                              text = post.IsDeleted ? "(DELETED)" : post.TextSingleLine;                            if (drawLineCount == 1)                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.SingleLine |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix |                                                      TextFormatFlags.VerticalCenter);                          }                          else                          {                              TextRenderer.DrawText(e.Graphics'                                                      text'                                                      e.Item.Font'                                                      Rectangle.Round(rct)'                                                      color'                                                      TextFormatFlags.WordBreak |                                                      TextFormatFlags.EndEllipsis |                                                      TextFormatFlags.GlyphOverhangPadding |                                                      TextFormatFlags.NoPrefix);                          }                      }                      //if (e.ColumnIndex == 6) this.DrawListViewItemStateIcon(e' rct);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: var realStateSize = new SizeF(16 * this.CurrentScaleFactor.Width' 16 * this.CurrentScaleFactor.Height).ToSize();
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: var realStateSize = new SizeF(16 * this.CurrentScaleFactor.Width' 16 * this.CurrentScaleFactor.Height).ToSize();
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: if (img != null)              {                  iconRect = Rectangle.Intersect(new Rectangle(e.Item.GetBounds(ItemBoundsPortion.Icon).Location' realIconSize)' itemRect);                  iconRect.Offset(0' Math.Max(0' (itemRect.Height - realIconSize.Height) / 2));                    if (iconRect.Width > 0)                  {                      e.Graphics.FillRectangle(Brushes.White' iconRect);                      e.Graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.High;                      try                      {                          e.Graphics.DrawImage(img.Image' iconRect);                      }                      catch (ArgumentException)                      {                          item.RefreshImageAsync();                      }                  }              }              else              {                  iconRect = Rectangle.Intersect(new Rectangle(e.Item.GetBounds(ItemBoundsPortion.Icon).Location' new Size(1' 1))' itemRect);                  //iconRect.Offset(0' Math.Max(0' (itemRect.Height - realIconSize.Height) / 2));                    item.GetImageAsync();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: if (item.StateIndex > -1)              {                  Rectangle stateRect = Rectangle.Intersect(new Rectangle(new Point(iconRect.X + realIconSize.Width + 2' iconRect.Y)' realStateSize)' itemRect);                  if (stateRect.Width > 0)                  {                      //e.Graphics.FillRectangle(Brushes.White' stateRect);                      //e.Graphics.InterpolationMode = Drawing2D.InterpolationMode.High;                      e.Graphics.DrawImage(this.PostStateImageList.Images[item.StateIndex]' stateRect);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The following statement contains a magic number: if (_statuses.SortMode == ComparerMode.Id)              {                  if (_statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 ||                      _statuses.SortOrder == SortOrder.Descending && lst.Items[foundIndex].Position.Y < _iconSz + 10)                  {                      MoveTop();                  }                  else                  {                      lst.EnsureVisible(foundIndex);                  }              }              else              {                  lst.EnsureVisible(foundIndex);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The following statement contains a magic number: if (_statuses.SortMode == ComparerMode.Id)              {                  if (_statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 ||                      _statuses.SortOrder == SortOrder.Descending && lst.Items[foundIndex].Position.Y < _iconSz + 10)                  {                      MoveTop();                  }                  else                  {                      lst.EnsureVisible(foundIndex);                  }              }              else              {                  lst.EnsureVisible(foundIndex);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetVersionInfoAsync,The following statement contains a magic number: var msgPart = responseText.Split(new[] { "\n\n"' "\r\n\r\n" }' 2' StringSplitOptions.None);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetVersionInfoAsync,The following statement contains a magic number: var msgBody = msgPart.Length == 2 ? msgPart[1] : "";
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(null' null))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.GetReplyAsync())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.GetDirectMessagesAsync())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(null' null); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          if (ListTab.SelectedTab != null)                          {                              var tabtype = _statuses.Tabs[ListTab.SelectedTab.Text].TabType;                              if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                              {                                  var relTp = ListTab.SelectedTab;                                  RemoveSpecifiedTab(relTp.Text' false);                                  SaveConfigsTabs();                              }                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._colorize = true' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.ListTab.TabPages.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this.ListTab.TabPages.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx -= 1;                          if (_hisIdx < 0) _hisIdx = 0;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (!string.IsNullOrWhiteSpace(StatusText.Text))                          {                              var inReplyToStatusId = this.inReplyTo?.Item1;                              var inReplyToScreenName = this.inReplyTo?.Item2;                              _history[_hisIdx] = new StatusTextHistory(StatusText.Text' inReplyToStatusId' inReplyToScreenName);                          }                          _hisIdx += 1;                          if (_hisIdx > _history.Count - 1) _hisIdx = _history.Count - 1;                            var historyItem = this._history[this._hisIdx];                          if (historyItem.inReplyToId != null)                              this.inReplyTo = Tuple.Create(historyItem.inReplyToId.Value' historyItem.inReplyToName);                          else                              this.inReplyTo = null;                          StatusText.Text = historyItem.status;                          StatusText.SelectionStart = StatusText.Text.Length;                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(null' null))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.GetReplyAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.GetDirectMessagesAsync(loadMore: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this._curPost != null)                      .Do(() => this.doShowUserStatus(_curPost.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.ListTab.SelectedTab != null &&                          this._statuses.Tabs[this.ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.ListTab.SelectedTab.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.O)                      .Do(() => this.FavorareMenuItem_Click(null' null))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 &&                                      _curList.SelectedIndices.Count > 0 && _curList.SelectedIndices[0] > 0)                          {                              var idx = _curList.SelectedIndices[0] - 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (_curList != null && _curList.VirtualListSize != 0 && _curList.SelectedIndices.Count > 0                                      && _curList.SelectedIndices[0] < _curList.VirtualListSize - 1)                          {                              var idx = _curList.SelectedIndices[0] + 1;                              SelectListItem(_curList' idx);                              _curList.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              int endidx = StatusText.SelectionStart - 1;                              string startstr = "";                              for (int i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  char c = StatusText.Text[i];                                  if (Char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      int cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt) ModifySettingAtId = true;                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The following statement contains a magic number: if (sb.Length > 0)              {                  clstr = sb.ToString();                  try                  {                      Clipboard.SetDataObject(clstr' false' 5' 100);                  }                  catch (Exception ex)                  {                      MessageBox.Show(ex.Message);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The following statement contains a magic number: if (sb.Length > 0)              {                  clstr = sb.ToString();                  try                  {                      Clipboard.SetDataObject(clstr' false' 5' 100);                  }                  catch (Exception ex)                  {                      MessageBox.Show(ex.Message);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyIdUri,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(string.Join(Environment.NewLine' copyUrls)' false' 5' 100);              }              catch (ExternalException ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyIdUri,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(string.Join(Environment.NewLine' copyUrls)' false' 5' 100);              }              catch (ExternalException ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoTopEnd,The following statement contains a magic number: if (GoTop)              {                  _item = _curList.GetItemAt(0' 25);                  if (_item == null)                      idx = 0;                  else                      idx = _item.Index;              }              else              {                  _item = _curList.GetItemAt(0' _curList.ClientSize.Height - 1);                  if (_item == null)                      idx = _curList.VirtualListSize - 1;                  else                      idx = _item.Index;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GoMiddle,The following statement contains a magic number: idx3 = (idx1 + idx2) / 2;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PushSelectPostChain,The following statement contains a magic number: if (count >= 2500) TrimPostChain();
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: if (this.selectPostChains.Count <= 2000) return;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: var p = new Stack<ValueTuple<TabPage' PostClass>>(2000);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: for (int i = 0; i < 2000; i++)              {                  p.Push(this.selectPostChains.Pop());              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: for (int i = 0; i < 2000; i++)              {                  this.selectPostChains.Push(p.Pop());              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: lock (_syncObject)              {                  SettingManager.Common.UserName = tw.Username;                  SettingManager.Common.UserId = tw.UserId;                  SettingManager.Common.Token = tw.AccessToken;                  SettingManager.Common.TokenSecret = tw.AccessTokenSecret;                  SettingManager.Common.SortOrder = (int)_statuses.SortOrder;                  switch (_statuses.SortMode)                  {                      case ComparerMode.Nickname:  //ニックネーム                          SettingManager.Common.SortColumn = 1;                          break;                      case ComparerMode.Data:  //本文                          SettingManager.Common.SortColumn = 2;                          break;                      case ComparerMode.Id:  //時刻=発言Id                          SettingManager.Common.SortColumn = 3;                          break;                      case ComparerMode.Name:  //名前                          SettingManager.Common.SortColumn = 4;                          break;                      case ComparerMode.Source:  //Source                          SettingManager.Common.SortColumn = 7;                          break;                  }                    SettingManager.Common.HashTags = HashMgr.HashHistories;                  if (HashMgr.IsPermanent)                  {                      SettingManager.Common.HashSelected = HashMgr.UseHash;                  }                  else                  {                      SettingManager.Common.HashSelected = "";                  }                  SettingManager.Common.HashIsHead = HashMgr.IsHead;                  SettingManager.Common.HashIsPermanent = HashMgr.IsPermanent;                  SettingManager.Common.HashIsNotAddToAtReply = HashMgr.IsNotAddToAtReply;                  SettingManager.Common.TrackWord = tw.TrackWord;                  SettingManager.Common.AllAtReply = tw.AllAtReply;                  SettingManager.Common.UseImageService = ImageSelector.ServiceIndex;                  SettingManager.Common.UseImageServiceName = ImageSelector.ServiceName;                    SettingManager.SaveCommon();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: lock (_syncObject)              {                  SettingManager.Common.UserName = tw.Username;                  SettingManager.Common.UserId = tw.UserId;                  SettingManager.Common.Token = tw.AccessToken;                  SettingManager.Common.TokenSecret = tw.AccessTokenSecret;                  SettingManager.Common.SortOrder = (int)_statuses.SortOrder;                  switch (_statuses.SortMode)                  {                      case ComparerMode.Nickname:  //ニックネーム                          SettingManager.Common.SortColumn = 1;                          break;                      case ComparerMode.Data:  //本文                          SettingManager.Common.SortColumn = 2;                          break;                      case ComparerMode.Id:  //時刻=発言Id                          SettingManager.Common.SortColumn = 3;                          break;                      case ComparerMode.Name:  //名前                          SettingManager.Common.SortColumn = 4;                          break;                      case ComparerMode.Source:  //Source                          SettingManager.Common.SortColumn = 7;                          break;                  }                    SettingManager.Common.HashTags = HashMgr.HashHistories;                  if (HashMgr.IsPermanent)                  {                      SettingManager.Common.HashSelected = HashMgr.UseHash;                  }                  else                  {                      SettingManager.Common.HashSelected = "";                  }                  SettingManager.Common.HashIsHead = HashMgr.IsHead;                  SettingManager.Common.HashIsPermanent = HashMgr.IsPermanent;                  SettingManager.Common.HashIsNotAddToAtReply = HashMgr.IsNotAddToAtReply;                  SettingManager.Common.TrackWord = tw.TrackWord;                  SettingManager.Common.AllAtReply = tw.AllAtReply;                  SettingManager.Common.UseImageService = ImageSelector.ServiceIndex;                  SettingManager.Common.UseImageServiceName = ImageSelector.ServiceName;                    SettingManager.SaveCommon();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: lock (_syncObject)              {                  SettingManager.Common.UserName = tw.Username;                  SettingManager.Common.UserId = tw.UserId;                  SettingManager.Common.Token = tw.AccessToken;                  SettingManager.Common.TokenSecret = tw.AccessTokenSecret;                  SettingManager.Common.SortOrder = (int)_statuses.SortOrder;                  switch (_statuses.SortMode)                  {                      case ComparerMode.Nickname:  //ニックネーム                          SettingManager.Common.SortColumn = 1;                          break;                      case ComparerMode.Data:  //本文                          SettingManager.Common.SortColumn = 2;                          break;                      case ComparerMode.Id:  //時刻=発言Id                          SettingManager.Common.SortColumn = 3;                          break;                      case ComparerMode.Name:  //名前                          SettingManager.Common.SortColumn = 4;                          break;                      case ComparerMode.Source:  //Source                          SettingManager.Common.SortColumn = 7;                          break;                  }                    SettingManager.Common.HashTags = HashMgr.HashHistories;                  if (HashMgr.IsPermanent)                  {                      SettingManager.Common.HashSelected = HashMgr.UseHash;                  }                  else                  {                      SettingManager.Common.HashSelected = "";                  }                  SettingManager.Common.HashIsHead = HashMgr.IsHead;                  SettingManager.Common.HashIsPermanent = HashMgr.IsPermanent;                  SettingManager.Common.HashIsNotAddToAtReply = HashMgr.IsNotAddToAtReply;                  SettingManager.Common.TrackWord = tw.TrackWord;                  SettingManager.Common.AllAtReply = tw.AllAtReply;                  SettingManager.Common.UseImageService = ImageSelector.ServiceIndex;                  SettingManager.Common.UseImageServiceName = ImageSelector.ServiceName;                    SettingManager.SaveCommon();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: lock (_syncObject)              {                  SettingManager.Common.UserName = tw.Username;                  SettingManager.Common.UserId = tw.UserId;                  SettingManager.Common.Token = tw.AccessToken;                  SettingManager.Common.TokenSecret = tw.AccessTokenSecret;                  SettingManager.Common.SortOrder = (int)_statuses.SortOrder;                  switch (_statuses.SortMode)                  {                      case ComparerMode.Nickname:  //ニックネーム                          SettingManager.Common.SortColumn = 1;                          break;                      case ComparerMode.Data:  //本文                          SettingManager.Common.SortColumn = 2;                          break;                      case ComparerMode.Id:  //時刻=発言Id                          SettingManager.Common.SortColumn = 3;                          break;                      case ComparerMode.Name:  //名前                          SettingManager.Common.SortColumn = 4;                          break;                      case ComparerMode.Source:  //Source                          SettingManager.Common.SortColumn = 7;                          break;                  }                    SettingManager.Common.HashTags = HashMgr.HashHistories;                  if (HashMgr.IsPermanent)                  {                      SettingManager.Common.HashSelected = HashMgr.UseHash;                  }                  else                  {                      SettingManager.Common.HashSelected = "";                  }                  SettingManager.Common.HashIsHead = HashMgr.IsHead;                  SettingManager.Common.HashIsPermanent = HashMgr.IsPermanent;                  SettingManager.Common.HashIsNotAddToAtReply = HashMgr.IsNotAddToAtReply;                  SettingManager.Common.TrackWord = tw.TrackWord;                  SettingManager.Common.AllAtReply = tw.AllAtReply;                  SettingManager.Common.UseImageService = ImageSelector.ServiceIndex;                  SettingManager.Common.UseImageServiceName = ImageSelector.ServiceName;                    SettingManager.SaveCommon();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_DragDrop,The following statement contains a magic number: for (i = 0; i < ListTab.TabPages.Count; i++)              {                  Rectangle rect = ListTab.GetTabRect(i);                  if (rect.Left <= spos.X && spos.X <= rect.Right &&                      rect.Top <= spos.Y && spos.Y <= rect.Bottom)                  {                      tn = ListTab.TabPages[i].Text;                      if (spos.X <= (rect.Left + rect.Right) / 2)                          bef = true;                      else                          bef = false;                        break;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The following statement contains a magic number: if (_curList.SelectedIndices.Count > 0)              {                  // アイテムが1件以上選択されている                  if (_curList.SelectedIndices.Count == 1 && !isAll && this.ExistCurrentPost)                  {                      // 単独ユーザー宛リプライまたはDM                      if ((_statuses.Tabs[ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.DirectMessage && isAuto) || (!isAuto && !isReply))                      {                          // ダイレクトメッセージ                          this.inReplyTo = null;                          StatusText.Text = "D " + _curPost.ScreenName + " " + StatusText.Text;                          StatusText.SelectionStart = StatusText.Text.Length;                          StatusText.Focus();                          return;                      }                      if (string.IsNullOrEmpty(StatusText.Text))                      {                          //空の場合                          var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                          var inReplyToScreenName = this._curPost.ScreenName;                          this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                            // ステータステキストが入力されていない場合先頭に@ユーザー名を追加する                          StatusText.Text = "@" + _curPost.ScreenName + " ";                      }                      else                      {                          //何か入力済の場合                            if (isAuto)                          {                              //1件選んでEnter or DoubleClick                              if (StatusText.Text.Contains("@" + _curPost.ScreenName + " "))                              {                                  if (this.inReplyTo?.Item2 == _curPost.ScreenName)                                  {                                      //返信先書き換え                                      var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                      var inReplyToScreenName = this._curPost.ScreenName;                                      this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                  }                                  return;                              }                              if (!StatusText.Text.StartsWith("@"' StringComparison.Ordinal))                              {                                  //文頭＠以外                                  if (StatusText.Text.StartsWith(". "' StringComparison.Ordinal))                                  {                                      // 複数リプライ                                      this.inReplyTo = null;                                      StatusText.Text = StatusText.Text.Insert(2' "@" + _curPost.ScreenName + " ");                                  }                                  else                                  {                                      // 単独リプライ                                      var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                      var inReplyToScreenName = this._curPost.ScreenName;                                      this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                      StatusText.Text = "@" + _curPost.ScreenName + " " + StatusText.Text;                                  }                              }                              else                              {                                  //文頭＠                                  // 複数リプライ                                  this.inReplyTo = null;                                  StatusText.Text = ". @" + _curPost.ScreenName + " " + StatusText.Text;                                  //StatusText.Text = "@" + _curPost.ScreenName + " " + StatusText.Text;                              }                          }                          else                          {                              //1件選んでCtrl-Rの場合（返信先操作せず）                              int sidx = StatusText.SelectionStart;                              string id = "@" + _curPost.ScreenName + " ";                              if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      id = " " + id;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' id);                              sidx += id.Length;                              //if (StatusText.Text.StartsWith("@"))                              //{                              //    //複数リプライ                              //    StatusText.Text = ". " + StatusText.Text.Insert(sidx' " @" + _curPost.ScreenName + " ");                              //    sidx += 5 + _curPost.ScreenName.Length;                              //}                              //else                              //{                              //    // 複数リプライ                              //    StatusText.Text = StatusText.Text.Insert(sidx' " @" + _curPost.ScreenName + " ");                              //    sidx += 3 + _curPost.ScreenName.Length;                              //}                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              //_reply_to_id = 0;                              //_reply_to_name = null;                              return;                          }                      }                  }                  else                  {                      // 複数リプライ                      if (!isAuto && !isReply) return;                        //C-S-rか、複数の宛先を選択中にEnter/DoubleClick/C-r/C-S-r                        if (isAuto)                      {                          //Enter or DoubleClick                            string sTxt = StatusText.Text;                          if (!sTxt.StartsWith(". "' StringComparison.Ordinal))                          {                              sTxt = ". " + sTxt;                              this.inReplyTo = null;                          }                          for (int cnt = 0; cnt < _curList.SelectedIndices.Count; cnt++)                          {                              PostClass post = _statuses.Tabs[_curTab.Text][_curList.SelectedIndices[cnt]];                              if (!sTxt.Contains("@" + post.ScreenName + " "))                              {                                  sTxt = sTxt.Insert(2' "@" + post.ScreenName + " ");                                  //sTxt = "@" + post.ScreenName + " " + sTxt;                              }                          }                          StatusText.Text = sTxt;                      }                      else                      {                          //C-S-r or C-r                          if (_curList.SelectedIndices.Count > 1)                          {                              //複数ポスト選択                                string ids = "";                              int sidx = StatusText.SelectionStart;                              for (int cnt = 0; cnt < _curList.SelectedIndices.Count; cnt++)                              {                                  PostClass post = _statuses.Tabs[_curTab.Text][_curList.SelectedIndices[cnt]];                                  if (!ids.Contains("@" + post.ScreenName + " ") &&                                      !post.ScreenName.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      ids += "@" + post.ScreenName + " ";                                  }                                  if (isAll)                                  {                                      foreach (string nm in post.ReplyToList.Select(x => x.Item2))                                      {                                          if (!ids.Contains("@" + nm + " ") &&                                              !nm.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                          {                                              Match m = Regex.Match(post.TextFromApi' "[@＠](?<id>" + nm + ")([^a-zA-Z0-9]|$)"' RegexOptions.IgnoreCase);                                              if (m.Success)                                                  ids += "@" + m.Result("${id}") + " ";                                              else                                                  ids += "@" + nm + " ";                                          }                                      }                                  }                              }                              if (ids.Length == 0) return;                              if (!StatusText.Text.StartsWith(". "' StringComparison.Ordinal))                              {                                  this.inReplyTo = null;                                  StatusText.Text = ". " + StatusText.Text;                                  sidx += 2;                              }                              if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      ids = " " + ids;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' ids);                              sidx += ids.Length;                              //if (StatusText.Text.StartsWith("@"))                              //{                              //    StatusText.Text = ". " + StatusText.Text.Insert(sidx' ids);                              //    sidx += 2 + ids.Length;                              //}                              //else                              //{                              //    StatusText.Text = StatusText.Text.Insert(sidx' ids);                              //    sidx += 1 + ids.Length;                              //}                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              return;                          }                          else                          {                              //1件のみ選択のC-S-r（返信元付加する可能性あり）                                string ids = "";                              int sidx = StatusText.SelectionStart;                              PostClass post = _curPost;                              if (!ids.Contains("@" + post.ScreenName + " ") &&                                  !post.ScreenName.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                              {                                  ids += "@" + post.ScreenName + " ";                              }                              foreach (string nm in post.ReplyToList.Select(x => x.Item2))                              {                                  if (!ids.Contains("@" + nm + " ") &&                                      !nm.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      Match m = Regex.Match(post.TextFromApi' "[@＠](?<id>" + nm + ")([^a-zA-Z0-9]|$)"' RegexOptions.IgnoreCase);                                      if (m.Success)                                          ids += "@" + m.Result("${id}") + " ";                                      else                                          ids += "@" + nm + " ";                                  }                              }                              if (!string.IsNullOrEmpty(post.RetweetedBy))                              {                                  if (!ids.Contains("@" + post.RetweetedBy + " ") &&                                     !post.RetweetedBy.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      ids += "@" + post.RetweetedBy + " ";                                  }                              }                              if (ids.Length == 0) return;                              if (string.IsNullOrEmpty(StatusText.Text))                              {                                  //未入力の場合のみ返信先付加                                  var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                  var inReplyToScreenName = this._curPost.ScreenName;                                  this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                    StatusText.Text = ids;                                  StatusText.SelectionStart = ids.Length;                                  StatusText.Focus();                                  return;                              }                                if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      ids = " " + ids;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' ids);                              sidx += ids.Length;                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              return;                          }                      }                  }                  StatusText.SelectionStart = StatusText.Text.Length;                  StatusText.Focus();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The following statement contains a magic number: if (_curList.SelectedIndices.Count > 0)              {                  // アイテムが1件以上選択されている                  if (_curList.SelectedIndices.Count == 1 && !isAll && this.ExistCurrentPost)                  {                      // 単独ユーザー宛リプライまたはDM                      if ((_statuses.Tabs[ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.DirectMessage && isAuto) || (!isAuto && !isReply))                      {                          // ダイレクトメッセージ                          this.inReplyTo = null;                          StatusText.Text = "D " + _curPost.ScreenName + " " + StatusText.Text;                          StatusText.SelectionStart = StatusText.Text.Length;                          StatusText.Focus();                          return;                      }                      if (string.IsNullOrEmpty(StatusText.Text))                      {                          //空の場合                          var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                          var inReplyToScreenName = this._curPost.ScreenName;                          this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                            // ステータステキストが入力されていない場合先頭に@ユーザー名を追加する                          StatusText.Text = "@" + _curPost.ScreenName + " ";                      }                      else                      {                          //何か入力済の場合                            if (isAuto)                          {                              //1件選んでEnter or DoubleClick                              if (StatusText.Text.Contains("@" + _curPost.ScreenName + " "))                              {                                  if (this.inReplyTo?.Item2 == _curPost.ScreenName)                                  {                                      //返信先書き換え                                      var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                      var inReplyToScreenName = this._curPost.ScreenName;                                      this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                  }                                  return;                              }                              if (!StatusText.Text.StartsWith("@"' StringComparison.Ordinal))                              {                                  //文頭＠以外                                  if (StatusText.Text.StartsWith(". "' StringComparison.Ordinal))                                  {                                      // 複数リプライ                                      this.inReplyTo = null;                                      StatusText.Text = StatusText.Text.Insert(2' "@" + _curPost.ScreenName + " ");                                  }                                  else                                  {                                      // 単独リプライ                                      var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                      var inReplyToScreenName = this._curPost.ScreenName;                                      this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                      StatusText.Text = "@" + _curPost.ScreenName + " " + StatusText.Text;                                  }                              }                              else                              {                                  //文頭＠                                  // 複数リプライ                                  this.inReplyTo = null;                                  StatusText.Text = ". @" + _curPost.ScreenName + " " + StatusText.Text;                                  //StatusText.Text = "@" + _curPost.ScreenName + " " + StatusText.Text;                              }                          }                          else                          {                              //1件選んでCtrl-Rの場合（返信先操作せず）                              int sidx = StatusText.SelectionStart;                              string id = "@" + _curPost.ScreenName + " ";                              if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      id = " " + id;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' id);                              sidx += id.Length;                              //if (StatusText.Text.StartsWith("@"))                              //{                              //    //複数リプライ                              //    StatusText.Text = ". " + StatusText.Text.Insert(sidx' " @" + _curPost.ScreenName + " ");                              //    sidx += 5 + _curPost.ScreenName.Length;                              //}                              //else                              //{                              //    // 複数リプライ                              //    StatusText.Text = StatusText.Text.Insert(sidx' " @" + _curPost.ScreenName + " ");                              //    sidx += 3 + _curPost.ScreenName.Length;                              //}                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              //_reply_to_id = 0;                              //_reply_to_name = null;                              return;                          }                      }                  }                  else                  {                      // 複数リプライ                      if (!isAuto && !isReply) return;                        //C-S-rか、複数の宛先を選択中にEnter/DoubleClick/C-r/C-S-r                        if (isAuto)                      {                          //Enter or DoubleClick                            string sTxt = StatusText.Text;                          if (!sTxt.StartsWith(". "' StringComparison.Ordinal))                          {                              sTxt = ". " + sTxt;                              this.inReplyTo = null;                          }                          for (int cnt = 0; cnt < _curList.SelectedIndices.Count; cnt++)                          {                              PostClass post = _statuses.Tabs[_curTab.Text][_curList.SelectedIndices[cnt]];                              if (!sTxt.Contains("@" + post.ScreenName + " "))                              {                                  sTxt = sTxt.Insert(2' "@" + post.ScreenName + " ");                                  //sTxt = "@" + post.ScreenName + " " + sTxt;                              }                          }                          StatusText.Text = sTxt;                      }                      else                      {                          //C-S-r or C-r                          if (_curList.SelectedIndices.Count > 1)                          {                              //複数ポスト選択                                string ids = "";                              int sidx = StatusText.SelectionStart;                              for (int cnt = 0; cnt < _curList.SelectedIndices.Count; cnt++)                              {                                  PostClass post = _statuses.Tabs[_curTab.Text][_curList.SelectedIndices[cnt]];                                  if (!ids.Contains("@" + post.ScreenName + " ") &&                                      !post.ScreenName.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      ids += "@" + post.ScreenName + " ";                                  }                                  if (isAll)                                  {                                      foreach (string nm in post.ReplyToList.Select(x => x.Item2))                                      {                                          if (!ids.Contains("@" + nm + " ") &&                                              !nm.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                          {                                              Match m = Regex.Match(post.TextFromApi' "[@＠](?<id>" + nm + ")([^a-zA-Z0-9]|$)"' RegexOptions.IgnoreCase);                                              if (m.Success)                                                  ids += "@" + m.Result("${id}") + " ";                                              else                                                  ids += "@" + nm + " ";                                          }                                      }                                  }                              }                              if (ids.Length == 0) return;                              if (!StatusText.Text.StartsWith(". "' StringComparison.Ordinal))                              {                                  this.inReplyTo = null;                                  StatusText.Text = ". " + StatusText.Text;                                  sidx += 2;                              }                              if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      ids = " " + ids;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' ids);                              sidx += ids.Length;                              //if (StatusText.Text.StartsWith("@"))                              //{                              //    StatusText.Text = ". " + StatusText.Text.Insert(sidx' ids);                              //    sidx += 2 + ids.Length;                              //}                              //else                              //{                              //    StatusText.Text = StatusText.Text.Insert(sidx' ids);                              //    sidx += 1 + ids.Length;                              //}                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              return;                          }                          else                          {                              //1件のみ選択のC-S-r（返信元付加する可能性あり）                                string ids = "";                              int sidx = StatusText.SelectionStart;                              PostClass post = _curPost;                              if (!ids.Contains("@" + post.ScreenName + " ") &&                                  !post.ScreenName.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                              {                                  ids += "@" + post.ScreenName + " ";                              }                              foreach (string nm in post.ReplyToList.Select(x => x.Item2))                              {                                  if (!ids.Contains("@" + nm + " ") &&                                      !nm.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      Match m = Regex.Match(post.TextFromApi' "[@＠](?<id>" + nm + ")([^a-zA-Z0-9]|$)"' RegexOptions.IgnoreCase);                                      if (m.Success)                                          ids += "@" + m.Result("${id}") + " ";                                      else                                          ids += "@" + nm + " ";                                  }                              }                              if (!string.IsNullOrEmpty(post.RetweetedBy))                              {                                  if (!ids.Contains("@" + post.RetweetedBy + " ") &&                                     !post.RetweetedBy.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      ids += "@" + post.RetweetedBy + " ";                                  }                              }                              if (ids.Length == 0) return;                              if (string.IsNullOrEmpty(StatusText.Text))                              {                                  //未入力の場合のみ返信先付加                                  var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                  var inReplyToScreenName = this._curPost.ScreenName;                                  this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                    StatusText.Text = ids;                                  StatusText.SelectionStart = ids.Length;                                  StatusText.Focus();                                  return;                              }                                if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      ids = " " + ids;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' ids);                              sidx += ids.Length;                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              return;                          }                      }                  }                  StatusText.SelectionStart = StatusText.Text.Length;                  StatusText.Focus();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The following statement contains a magic number: if (_curList.SelectedIndices.Count > 0)              {                  // アイテムが1件以上選択されている                  if (_curList.SelectedIndices.Count == 1 && !isAll && this.ExistCurrentPost)                  {                      // 単独ユーザー宛リプライまたはDM                      if ((_statuses.Tabs[ListTab.SelectedTab.Text].TabType == MyCommon.TabUsageType.DirectMessage && isAuto) || (!isAuto && !isReply))                      {                          // ダイレクトメッセージ                          this.inReplyTo = null;                          StatusText.Text = "D " + _curPost.ScreenName + " " + StatusText.Text;                          StatusText.SelectionStart = StatusText.Text.Length;                          StatusText.Focus();                          return;                      }                      if (string.IsNullOrEmpty(StatusText.Text))                      {                          //空の場合                          var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                          var inReplyToScreenName = this._curPost.ScreenName;                          this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                            // ステータステキストが入力されていない場合先頭に@ユーザー名を追加する                          StatusText.Text = "@" + _curPost.ScreenName + " ";                      }                      else                      {                          //何か入力済の場合                            if (isAuto)                          {                              //1件選んでEnter or DoubleClick                              if (StatusText.Text.Contains("@" + _curPost.ScreenName + " "))                              {                                  if (this.inReplyTo?.Item2 == _curPost.ScreenName)                                  {                                      //返信先書き換え                                      var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                      var inReplyToScreenName = this._curPost.ScreenName;                                      this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                  }                                  return;                              }                              if (!StatusText.Text.StartsWith("@"' StringComparison.Ordinal))                              {                                  //文頭＠以外                                  if (StatusText.Text.StartsWith(". "' StringComparison.Ordinal))                                  {                                      // 複数リプライ                                      this.inReplyTo = null;                                      StatusText.Text = StatusText.Text.Insert(2' "@" + _curPost.ScreenName + " ");                                  }                                  else                                  {                                      // 単独リプライ                                      var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                      var inReplyToScreenName = this._curPost.ScreenName;                                      this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                      StatusText.Text = "@" + _curPost.ScreenName + " " + StatusText.Text;                                  }                              }                              else                              {                                  //文頭＠                                  // 複数リプライ                                  this.inReplyTo = null;                                  StatusText.Text = ". @" + _curPost.ScreenName + " " + StatusText.Text;                                  //StatusText.Text = "@" + _curPost.ScreenName + " " + StatusText.Text;                              }                          }                          else                          {                              //1件選んでCtrl-Rの場合（返信先操作せず）                              int sidx = StatusText.SelectionStart;                              string id = "@" + _curPost.ScreenName + " ";                              if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      id = " " + id;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' id);                              sidx += id.Length;                              //if (StatusText.Text.StartsWith("@"))                              //{                              //    //複数リプライ                              //    StatusText.Text = ". " + StatusText.Text.Insert(sidx' " @" + _curPost.ScreenName + " ");                              //    sidx += 5 + _curPost.ScreenName.Length;                              //}                              //else                              //{                              //    // 複数リプライ                              //    StatusText.Text = StatusText.Text.Insert(sidx' " @" + _curPost.ScreenName + " ");                              //    sidx += 3 + _curPost.ScreenName.Length;                              //}                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              //_reply_to_id = 0;                              //_reply_to_name = null;                              return;                          }                      }                  }                  else                  {                      // 複数リプライ                      if (!isAuto && !isReply) return;                        //C-S-rか、複数の宛先を選択中にEnter/DoubleClick/C-r/C-S-r                        if (isAuto)                      {                          //Enter or DoubleClick                            string sTxt = StatusText.Text;                          if (!sTxt.StartsWith(". "' StringComparison.Ordinal))                          {                              sTxt = ". " + sTxt;                              this.inReplyTo = null;                          }                          for (int cnt = 0; cnt < _curList.SelectedIndices.Count; cnt++)                          {                              PostClass post = _statuses.Tabs[_curTab.Text][_curList.SelectedIndices[cnt]];                              if (!sTxt.Contains("@" + post.ScreenName + " "))                              {                                  sTxt = sTxt.Insert(2' "@" + post.ScreenName + " ");                                  //sTxt = "@" + post.ScreenName + " " + sTxt;                              }                          }                          StatusText.Text = sTxt;                      }                      else                      {                          //C-S-r or C-r                          if (_curList.SelectedIndices.Count > 1)                          {                              //複数ポスト選択                                string ids = "";                              int sidx = StatusText.SelectionStart;                              for (int cnt = 0; cnt < _curList.SelectedIndices.Count; cnt++)                              {                                  PostClass post = _statuses.Tabs[_curTab.Text][_curList.SelectedIndices[cnt]];                                  if (!ids.Contains("@" + post.ScreenName + " ") &&                                      !post.ScreenName.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      ids += "@" + post.ScreenName + " ";                                  }                                  if (isAll)                                  {                                      foreach (string nm in post.ReplyToList.Select(x => x.Item2))                                      {                                          if (!ids.Contains("@" + nm + " ") &&                                              !nm.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                          {                                              Match m = Regex.Match(post.TextFromApi' "[@＠](?<id>" + nm + ")([^a-zA-Z0-9]|$)"' RegexOptions.IgnoreCase);                                              if (m.Success)                                                  ids += "@" + m.Result("${id}") + " ";                                              else                                                  ids += "@" + nm + " ";                                          }                                      }                                  }                              }                              if (ids.Length == 0) return;                              if (!StatusText.Text.StartsWith(". "' StringComparison.Ordinal))                              {                                  this.inReplyTo = null;                                  StatusText.Text = ". " + StatusText.Text;                                  sidx += 2;                              }                              if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      ids = " " + ids;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' ids);                              sidx += ids.Length;                              //if (StatusText.Text.StartsWith("@"))                              //{                              //    StatusText.Text = ". " + StatusText.Text.Insert(sidx' ids);                              //    sidx += 2 + ids.Length;                              //}                              //else                              //{                              //    StatusText.Text = StatusText.Text.Insert(sidx' ids);                              //    sidx += 1 + ids.Length;                              //}                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              return;                          }                          else                          {                              //1件のみ選択のC-S-r（返信元付加する可能性あり）                                string ids = "";                              int sidx = StatusText.SelectionStart;                              PostClass post = _curPost;                              if (!ids.Contains("@" + post.ScreenName + " ") &&                                  !post.ScreenName.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                              {                                  ids += "@" + post.ScreenName + " ";                              }                              foreach (string nm in post.ReplyToList.Select(x => x.Item2))                              {                                  if (!ids.Contains("@" + nm + " ") &&                                      !nm.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      Match m = Regex.Match(post.TextFromApi' "[@＠](?<id>" + nm + ")([^a-zA-Z0-9]|$)"' RegexOptions.IgnoreCase);                                      if (m.Success)                                          ids += "@" + m.Result("${id}") + " ";                                      else                                          ids += "@" + nm + " ";                                  }                              }                              if (!string.IsNullOrEmpty(post.RetweetedBy))                              {                                  if (!ids.Contains("@" + post.RetweetedBy + " ") &&                                     !post.RetweetedBy.Equals(tw.Username' StringComparison.CurrentCultureIgnoreCase))                                  {                                      ids += "@" + post.RetweetedBy + " ";                                  }                              }                              if (ids.Length == 0) return;                              if (string.IsNullOrEmpty(StatusText.Text))                              {                                  //未入力の場合のみ返信先付加                                  var inReplyToStatusId = this._curPost.RetweetedId ?? this._curPost.StatusId;                                  var inReplyToScreenName = this._curPost.ScreenName;                                  this.inReplyTo = Tuple.Create(inReplyToStatusId' inReplyToScreenName);                                    StatusText.Text = ids;                                  StatusText.SelectionStart = ids.Length;                                  StatusText.Focus();                                  return;                              }                                if (sidx > 0)                              {                                  if (StatusText.Text.Substring(sidx - 1' 1) != " ")                                  {                                      ids = " " + ids;                                  }                              }                              StatusText.Text = StatusText.Text.Insert(sidx' ids);                              sidx += ids.Length;                              StatusText.SelectionStart = sidx;                              StatusText.Focus();                              return;                          }                      }                  }                  StatusText.SelectionStart = StatusText.Text.Length;                  StatusText.Focus();              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTasktrayIcon,The following statement contains a magic number: if (blinkCnt > 10)              {                  blinkCnt = 0;                  //未保存の変更を保存                  SaveConfigsAll(true);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveMiddle,The following statement contains a magic number: _item = _curList.GetItemAt(0' 25);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveMiddle,The following statement contains a magic number: idx -= Math.Abs(idx1 - idx2) / 2;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The following statement contains a magic number: StringBuilder ttl = new StringBuilder(256);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The following statement contains a magic number: switch (SettingManager.Common.DispLatestPost)              {                  case MyCommon.DispTitleEnum.Ver:                      ttl.Append("Ver:").Append(MyCommon.GetReadableVersion());                      break;                  case MyCommon.DispTitleEnum.Post:                      if (_history != null && _history.Count > 1)                          ttl.Append(_history[_history.Count - 2].status.Replace("\r\n"' " "));                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText1' _statuses.GetTabByType(MyCommon.TabUsageType.Mentions).UnreadCount + _statuses.GetTabByType(MyCommon.TabUsageType.DirectMessage).UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText2' ur);                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText3' ur' _statuses.GetTabByType(MyCommon.TabUsageType.Mentions).UnreadCount + _statuses.GetTabByType(MyCommon.TabUsageType.DirectMessage).UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText4' ur' al);                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      if (followers == 0 && tw.FollowersCount > 0) followers = tw.FollowersCount;                      ttl.AppendFormat(Properties.Resources.OwnStatusTitle' tw.StatusesCount' tw.FriendsCount' tw.FollowersCount' tw.FollowersCount - followers);                      break;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetStatusLabelText,The following statement contains a magic number: StringBuilder slbl = new StringBuilder(256);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetNotifyIconText,The following statement contains a magic number: var ur = new StringBuilder(64);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer2_Panel2_Resize,The following statement contains a magic number: var multiline = this.SplitContainer2.Panel2.Height > this.SplitContainer2.Panel2MinSize + 2;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAsync,The following statement contains a magic number: if (StatusText.SelectionLength > 0)              {                  string tmp = StatusText.SelectedText;                  // httpから始まらない場合、ExcludeStringで指定された文字列で始まる場合は対象としない                  if (tmp.StartsWith("http"' StringComparison.OrdinalIgnoreCase))                  {                      // 文字列が選択されている場合はその文字列について処理                        //nico.ms使用、nicovideoにマッチしたら変換                      if (SettingManager.Common.Nicoms && Regex.IsMatch(tmp' nico))                      {                          result = nicoms.Shorten(tmp);                      }                      else if (Converter_Type != MyCommon.UrlConverter.Nicoms)                      {                          //短縮URL変換 日本語を含むかもしれないのでURLエンコードする                          try                          {                              var srcUri = new Uri(MyCommon.urlEncodeMultibyteChar(tmp));                              var resultUri = await ShortUrl.Instance.ShortenUrlAsync(Converter_Type' srcUri);                              result = resultUri.AbsoluteUri;                          }                          catch (WebApiException e)                          {                              this.StatusLabel.Text = Converter_Type + ":" + e.Message;                              return false;                          }                          catch (UriFormatException e)                          {                              this.StatusLabel.Text = Converter_Type + ":" + e.Message;                              return false;                          }                      }                      else                      {                          return true;                      }                        if (!string.IsNullOrEmpty(result))                      {                          urlUndo undotmp = new urlUndo();                            // 短縮 URL が生成されるまでの間に投稿欄から元の URL が削除されていたら中断する                          var origUrlIndex = this.StatusText.Text.IndexOf(tmp' StringComparison.Ordinal);                          if (origUrlIndex == -1)                              return false;                            StatusText.Select(origUrlIndex' tmp.Length);                          StatusText.SelectedText = result;                            //undoバッファにセット                          undotmp.Before = tmp;                          undotmp.After = result;                            if (urlUndoBuffer == null)                          {                              urlUndoBuffer = new List<urlUndo>();                              UrlUndoToolStripMenuItem.Enabled = true;                          }                            urlUndoBuffer.Add(undotmp);                      }                  }              }              else              {                  const string url = @"(?<before>(?:[^\""':!=]|^|\:))" +                                     @"(?<url>(?<protocol>https?://)" +                                     @"(?<domain>(?:[\.-]|[^\p{P}\s])+\.[a-z]{2'}(?::[0-9]+)?)" +                                     @"(?<path>/[a-z0-9!*//();:&=+$/%#\-_.'~@]*[a-z0-9)=#/]?)?" +                                     @"(?<query>\?[a-z0-9!*//();:&=+$/%#\-_.'~@?]*[a-z0-9_&=#/])?)";                  // 正規表現にマッチしたURL文字列をtinyurl化                  foreach (Match mt in Regex.Matches(StatusText.Text' url' RegexOptions.IgnoreCase))                  {                      if (StatusText.Text.IndexOf(mt.Result("${url}")' StringComparison.Ordinal) == -1) continue;                      string tmp = mt.Result("${url}");                      if (tmp.StartsWith("w"' StringComparison.OrdinalIgnoreCase)) tmp = "http://" + tmp;                      urlUndo undotmp = new urlUndo();                        //選んだURLを選択（？）                      StatusText.Select(StatusText.Text.IndexOf(mt.Result("${url}")' StringComparison.Ordinal)' mt.Result("${url}").Length);                        //nico.ms使用、nicovideoにマッチしたら変換                      if (SettingManager.Common.Nicoms && Regex.IsMatch(tmp' nico))                      {                          result = nicoms.Shorten(tmp);                      }                      else if (Converter_Type != MyCommon.UrlConverter.Nicoms)                      {                          //短縮URL変換 日本語を含むかもしれないのでURLエンコードする                          try                          {                              var srcUri = new Uri(MyCommon.urlEncodeMultibyteChar(tmp));                              var resultUri = await ShortUrl.Instance.ShortenUrlAsync(Converter_Type' srcUri);                              result = resultUri.AbsoluteUri;                          }                          catch (HttpRequestException e)                          {                              // 例外のメッセージが「Response status code does not indicate success: 500 (Internal Server Error).」                              // のように長いので「:」が含まれていればそれ以降のみを抽出する                              var message = e.Message.Split(new[] { ':' }' count: 2).Last();                                this.StatusLabel.Text = Converter_Type + ":" + message;                              continue;                          }                          catch (WebApiException e)                          {                              this.StatusLabel.Text = Converter_Type + ":" + e.Message;                              continue;                          }                          catch (UriFormatException e)                          {                              this.StatusLabel.Text = Converter_Type + ":" + e.Message;                              continue;                          }                      }                      else                      {                          continue;                      }                        if (!string.IsNullOrEmpty(result))                      {                          // 短縮 URL が生成されるまでの間に投稿欄から元の URL が削除されていたら中断する                          var origUrlIndex = this.StatusText.Text.IndexOf(mt.Result("${url}")' StringComparison.Ordinal);                          if (origUrlIndex == -1)                              return false;                            StatusText.Select(origUrlIndex' mt.Result("${url}").Length);                          StatusText.SelectedText = result;                          //undoバッファにセット                          undotmp.Before = mt.Result("${url}");                          undotmp.After = result;                            if (urlUndoBuffer == null)                          {                              urlUndoBuffer = new List<urlUndo>();                              UrlUndoToolStripMenuItem.Enabled = true;                          }                            urlUndoBuffer.Add(undotmp);                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following statement contains a magic number: if (_iconCol)              {                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width3 = lst.Columns[1].Width;              }              else              {                  int[] darr = new int[lst.Columns.Count];                  for (int i = 0; i < lst.Columns.Count; i++)                  {                      darr[lst.Columns[i].DisplayIndex] = i;                  }                  MyCommon.MoveArrayItem(darr' e.OldDisplayIndex' e.NewDisplayIndex);                    for (int i = 0; i < lst.Columns.Count; i++)                  {                      switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }                  }                  SettingManager.Local.Width1 = lst.Columns[0].Width;                  SettingManager.Local.Width2 = lst.Columns[1].Width;                  SettingManager.Local.Width3 = lst.Columns[2].Width;                  SettingManager.Local.Width4 = lst.Columns[3].Width;                  SettingManager.Local.Width5 = lst.Columns[4].Width;                  SettingManager.Local.Width6 = lst.Columns[5].Width;                  SettingManager.Local.Width7 = lst.Columns[6].Width;                  SettingManager.Local.Width8 = lst.Columns[7].Width;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,The following statement contains a magic number: if (_iconCol)              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }              else              {                  if (SettingManager.Local.Width1 != lst.Columns[0].Width)                  {                      SettingManager.Local.Width1 = lst.Columns[0].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width2 != lst.Columns[1].Width)                  {                      SettingManager.Local.Width2 = lst.Columns[1].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width3 != lst.Columns[2].Width)                  {                      SettingManager.Local.Width3 = lst.Columns[2].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width4 != lst.Columns[3].Width)                  {                      SettingManager.Local.Width4 = lst.Columns[3].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width5 != lst.Columns[4].Width)                  {                      SettingManager.Local.Width5 = lst.Columns[4].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width6 != lst.Columns[5].Width)                  {                      SettingManager.Local.Width6 = lst.Columns[5].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width7 != lst.Columns[6].Width)                  {                      SettingManager.Local.Width7 = lst.Columns[6].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }                  if (SettingManager.Local.Width8 != lst.Columns[7].Width)                  {                      SettingManager.Local.Width8 = lst.Columns[7].Width;                      ModifySettingLocal = true;                      _isColumnChanged = true;                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetUrlFromDataObject,The following statement contains a magic number: if (data.GetDataPresent("text/x-moz-url"))              {                  // Firefox' Google Chrome で利用可能                  // 参照: https://developer.mozilla.org/ja/docs/DragDrop/Recommended_Drag_Types                    using (var stream = (MemoryStream)data.GetData("text/x-moz-url"))                  {                      var lines = Encoding.Unicode.GetString(stream.ToArray()).TrimEnd('\0').Split('\n');                      if (lines.Length < 2)                          throw new ArgumentException("不正な text/x-moz-url フォーマットです"' nameof(data));                        return (lines[0]' lines[1]);                  }              }              else if (data.GetDataPresent("IESiteModeToUrl"))              {                  // Internet Exproler 用                  // 保護モードが有効なデフォルトの IE では DragDrop イベントが発火しないため使えない                    using (var stream = (MemoryStream)data.GetData("IESiteModeToUrl"))                  {                      var lines = Encoding.Unicode.GetString(stream.ToArray()).TrimEnd('\0').Split('\0');                      if (lines.Length < 2)                          throw new ArgumentException("不正な IESiteModeToUrl フォーマットです"' nameof(data));                        return (lines[0]' lines[1]);                  }              }              else if (data.GetDataPresent("UniformResourceLocatorW"))              {                  // それ以外のブラウザ向け                    using (var stream = (MemoryStream)data.GetData("UniformResourceLocatorW"))                  {                      var url = Encoding.Unicode.GetString(stream.ToArray()).TrimEnd('\0');                      return (url' null);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,GetUrlFromDataObject,The following statement contains a magic number: if (data.GetDataPresent("text/x-moz-url"))              {                  // Firefox' Google Chrome で利用可能                  // 参照: https://developer.mozilla.org/ja/docs/DragDrop/Recommended_Drag_Types                    using (var stream = (MemoryStream)data.GetData("text/x-moz-url"))                  {                      var lines = Encoding.Unicode.GetString(stream.ToArray()).TrimEnd('\0').Split('\n');                      if (lines.Length < 2)                          throw new ArgumentException("不正な text/x-moz-url フォーマットです"' nameof(data));                        return (lines[0]' lines[1]);                  }              }              else if (data.GetDataPresent("IESiteModeToUrl"))              {                  // Internet Exproler 用                  // 保護モードが有効なデフォルトの IE では DragDrop イベントが発火しないため使えない                    using (var stream = (MemoryStream)data.GetData("IESiteModeToUrl"))                  {                      var lines = Encoding.Unicode.GetString(stream.ToArray()).TrimEnd('\0').Split('\0');                      if (lines.Length < 2)                          throw new ArgumentException("不正な IESiteModeToUrl フォーマットです"' nameof(data));                        return (lines[0]' lines[1]);                  }              }              else if (data.GetDataPresent("UniformResourceLocatorW"))              {                  // それ以外のブラウザ向け                    using (var stream = (MemoryStream)data.GetData("UniformResourceLocatorW"))                  {                      var url = Encoding.Unicode.GetString(stream.ToArray()).TrimEnd('\0');                      return (url' null);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The following statement contains a magic number: return Task.Run(() =>              {                  string myPath = UriString;                    try                  {                      var configBrowserPath = SettingManager.Local.BrowserPath;                      if (!string.IsNullOrEmpty(configBrowserPath))                      {                          if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                          {                              int sep = configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal);                              string browserPath = configBrowserPath.Substring(1' sep - 1);                              string arg = "";                              if (sep < configBrowserPath.Length - 1)                              {                                  arg = configBrowserPath.Substring(sep + 1);                              }                              myPath = arg + " " + myPath;                              System.Diagnostics.Process.Start(browserPath' myPath);                          }                          else                          {                              System.Diagnostics.Process.Start(configBrowserPath' myPath);                          }                      }                      else                      {                          System.Diagnostics.Process.Start(myPath);                      }                  }                  catch (Exception)                  {                      //MessageBox.Show("ブラウザの起動に失敗、またはタイムアウトしました。" + ex.ToString());                  }              });
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The following statement contains a magic number: return Task.Run(() =>              {                  string myPath = UriString;                    try                  {                      var configBrowserPath = SettingManager.Local.BrowserPath;                      if (!string.IsNullOrEmpty(configBrowserPath))                      {                          if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                          {                              int sep = configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal);                              string browserPath = configBrowserPath.Substring(1' sep - 1);                              string arg = "";                              if (sep < configBrowserPath.Length - 1)                              {                                  arg = configBrowserPath.Substring(sep + 1);                              }                              myPath = arg + " " + myPath;                              System.Diagnostics.Process.Start(browserPath' myPath);                          }                          else                          {                              System.Diagnostics.Process.Start(configBrowserPath' myPath);                          }                      }                      else                      {                          System.Diagnostics.Process.Start(myPath);                      }                  }                  catch (Exception)                  {                      //MessageBox.Show("ブラウザの起動に失敗、またはタイムアウトしました。" + ex.ToString());                  }              });
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The following statement contains a magic number: return Task.Run(() =>              {                  string myPath = UriString;                    try                  {                      var configBrowserPath = SettingManager.Local.BrowserPath;                      if (!string.IsNullOrEmpty(configBrowserPath))                      {                          if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                          {                              int sep = configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal);                              string browserPath = configBrowserPath.Substring(1' sep - 1);                              string arg = "";                              if (sep < configBrowserPath.Length - 1)                              {                                  arg = configBrowserPath.Substring(sep + 1);                              }                              myPath = arg + " " + myPath;                              System.Diagnostics.Process.Start(browserPath' myPath);                          }                          else                          {                              System.Diagnostics.Process.Start(configBrowserPath' myPath);                          }                      }                      else                      {                          System.Diagnostics.Process.Start(myPath);                      }                  }                  catch (Exception)                  {                      //MessageBox.Show("ブラウザの起動に失敗、またはタイムアウトしました。" + ex.ToString());                  }              });
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTabSelect,The following statement contains a magic number: if (_iconCol)              {                  ((DetailsListView)_tab.Tag).Columns[1].Text = ColumnText[2];              }              else              {                  for (int i = 0; i < _curList.Columns.Count; i++)                  {                      ((DetailsListView)_tab.Tag).Columns[i].Text = ColumnText[i];                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Shown,The following statement contains a magic number: if (this.IsNetworkAvailable())              {                  StartUserStream();                    var loadTasks = new List<Task>                  {                      this.RefreshMuteUserIdsAsync()'                      this.RefreshBlockIdsAsync()'                      this.RefreshNoRetweetIdsAsync()'                      this.RefreshTwitterConfigurationAsync()'                      this.GetHomeTimelineAsync()'                      this.GetReplyAsync()'                      this.GetDirectMessagesAsync()'                      this.GetPublicSearchAllAsync()'                      this.GetUserTimelineAllAsync()'                      this.GetListTimelineAllAsync()'                  };                    if (SettingManager.Common.StartupFollowers)                      loadTasks.Add(this.RefreshFollowerIdsAsync());                    if (SettingManager.Common.GetFav)                      loadTasks.Add(this.GetFavoritesAsync());                    var allTasks = Task.WhenAll(loadTasks);                    var i = 0;                  while (true)                  {                      var timeout = Task.Delay(5000);                      if (await Task.WhenAny(allTasks' timeout) != timeout)                          break;                        i += 1;                      if (i > 24) break; // 120秒間初期処理が終了しなかったら強制的に打ち切る                        if (MyCommon._endingFlag)                          return;                  }                    if (MyCommon._endingFlag) return;                    if (ApplicationSettings.VersionInfoUrl != null)                  {                      //バージョンチェック（引数：起動時チェックの場合はtrue･･･チェック結果のメッセージを表示しない）                      if (SettingManager.Common.StartupVersion)                          await this.CheckNewVersion(true);                  }                  else                  {                      // ApplicationSetting.cs の設定により更新チェックが無効化されている場合                      this.VerUpMenuItem.Enabled = false;                      this.VerUpMenuItem.Available = false;                      this.ToolStripSeparator16.Available = false; // VerUpMenuItem の一つ上にあるセパレータ                  }                    // 権限チェック read/write権限(xAuthで取得したトークン)の場合は再認証を促す                  if (MyCommon.TwitterApiInfo.AccessLevel == TwitterApiAccessLevel.ReadWrite)                  {                      MessageBox.Show(Properties.Resources.ReAuthorizeText);                      SettingStripMenuItem_Click(null' null);                  }                    // 取得失敗の場合は再試行する                  var reloadTasks = new List<Task>();                    if (!tw.GetFollowersSuccess && SettingManager.Common.StartupFollowers)                      reloadTasks.Add(this.RefreshFollowerIdsAsync());                    if (!tw.GetNoRetweetSuccess)                      reloadTasks.Add(this.RefreshNoRetweetIdsAsync());                    if (this.tw.Configuration.PhotoSizeLimit == 0)                      reloadTasks.Add(this.RefreshTwitterConfigurationAsync());                    await Task.WhenAll(reloadTasks);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Shown,The following statement contains a magic number: if (this.IsNetworkAvailable())              {                  StartUserStream();                    var loadTasks = new List<Task>                  {                      this.RefreshMuteUserIdsAsync()'                      this.RefreshBlockIdsAsync()'                      this.RefreshNoRetweetIdsAsync()'                      this.RefreshTwitterConfigurationAsync()'                      this.GetHomeTimelineAsync()'                      this.GetReplyAsync()'                      this.GetDirectMessagesAsync()'                      this.GetPublicSearchAllAsync()'                      this.GetUserTimelineAllAsync()'                      this.GetListTimelineAllAsync()'                  };                    if (SettingManager.Common.StartupFollowers)                      loadTasks.Add(this.RefreshFollowerIdsAsync());                    if (SettingManager.Common.GetFav)                      loadTasks.Add(this.GetFavoritesAsync());                    var allTasks = Task.WhenAll(loadTasks);                    var i = 0;                  while (true)                  {                      var timeout = Task.Delay(5000);                      if (await Task.WhenAny(allTasks' timeout) != timeout)                          break;                        i += 1;                      if (i > 24) break; // 120秒間初期処理が終了しなかったら強制的に打ち切る                        if (MyCommon._endingFlag)                          return;                  }                    if (MyCommon._endingFlag) return;                    if (ApplicationSettings.VersionInfoUrl != null)                  {                      //バージョンチェック（引数：起動時チェックの場合はtrue･･･チェック結果のメッセージを表示しない）                      if (SettingManager.Common.StartupVersion)                          await this.CheckNewVersion(true);                  }                  else                  {                      // ApplicationSetting.cs の設定により更新チェックが無効化されている場合                      this.VerUpMenuItem.Enabled = false;                      this.VerUpMenuItem.Available = false;                      this.ToolStripSeparator16.Available = false; // VerUpMenuItem の一つ上にあるセパレータ                  }                    // 権限チェック read/write権限(xAuthで取得したトークン)の場合は再認証を促す                  if (MyCommon.TwitterApiInfo.AccessLevel == TwitterApiAccessLevel.ReadWrite)                  {                      MessageBox.Show(Properties.Resources.ReAuthorizeText);                      SettingStripMenuItem_Click(null' null);                  }                    // 取得失敗の場合は再試行する                  var reloadTasks = new List<Task>();                    if (!tw.GetFollowersSuccess && SettingManager.Common.StartupFollowers)                      reloadTasks.Add(this.RefreshFollowerIdsAsync());                    if (!tw.GetNoRetweetSuccess)                      reloadTasks.Add(this.RefreshNoRetweetIdsAsync());                    if (this.tw.Configuration.PhotoSizeLimit == 0)                      reloadTasks.Add(this.RefreshTwitterConfigurationAsync());                    await Task.WhenAll(reloadTasks);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,doReTweetOfficial,The following statement contains a magic number: if (this.ExistCurrentPost)              {                  if (!_curPost.CanRetweetBy(this.twitterApi.CurrentUserId))                  {                      if (this._curPost.IsProtect)                          MessageBox.Show("Protected.");                        _DoFavRetweetFlags = false;                      return;                  }                  if (_curList.SelectedIndices.Count > 15)                  {                      MessageBox.Show(Properties.Resources.RetweetLimitText);                      _DoFavRetweetFlags = false;                      return;                  }                  else if (_curList.SelectedIndices.Count > 1)                  {                      string QuestionText = Properties.Resources.RetweetQuestion2;                      if (_DoFavRetweetFlags) QuestionText = Properties.Resources.FavoriteRetweetQuestionText1;                      switch (MessageBox.Show(QuestionText' "Retweet"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question))                      {                          case DialogResult.Cancel:                          case DialogResult.No:                              _DoFavRetweetFlags = false;                              return;                      }                  }                  else                  {                      if (!SettingManager.Common.RetweetNoConfirm)                      {                          string Questiontext = Properties.Resources.RetweetQuestion1;                          if (_DoFavRetweetFlags) Questiontext = Properties.Resources.FavoritesRetweetQuestionText2;                          if (isConfirm && MessageBox.Show(Questiontext' "Retweet"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel)                          {                              _DoFavRetweetFlags = false;                              return;                          }                      }                  }                    var statusIds = new List<long>();                  foreach (int idx in _curList.SelectedIndices)                  {                      PostClass post = GetCurTabPost(idx);                      if (post.CanRetweetBy(this.twitterApi.CurrentUserId))                          statusIds.Add(post.StatusId);                  }                    await this.RetweetAsync(statusIds);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SearchButton_Click,The following statement contains a magic number: for (int cnt = 0; cnt < cmb.Text.Length; cnt++)              {                  if (cnt > cmb.Text.Length - 4)                  {                      buf.Append(cmb.Text.Substring(cnt));                      break;                  }                  if (c[cnt] == '"')                  {                      Quote = !Quote;                  }                  else                  {                      if (!Quote && cmb.Text.Substring(cnt' 4).Equals(" or "' StringComparison.OrdinalIgnoreCase))                      {                          buf.Append(" OR ");                          cnt += 3;                          continue;                      }                  }                  buf.Append(c[cnt]);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SearchButton_Click,The following statement contains a magic number: for (int cnt = 0; cnt < cmb.Text.Length; cnt++)              {                  if (cnt > cmb.Text.Length - 4)                  {                      buf.Append(cmb.Text.Substring(cnt));                      break;                  }                  if (c[cnt] == '"')                  {                      Quote = !Quote;                  }                  else                  {                      if (!Quote && cmb.Text.Substring(cnt' 4).Equals(" or "' StringComparison.OrdinalIgnoreCase))                      {                          buf.Append(" OR ");                          cnt += 3;                          continue;                      }                  }                  buf.Append(c[cnt]);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SearchButton_Click,The following statement contains a magic number: for (int cnt = 0; cnt < cmb.Text.Length; cnt++)              {                  if (cnt > cmb.Text.Length - 4)                  {                      buf.Append(cmb.Text.Substring(cnt));                      break;                  }                  if (c[cnt] == '"')                  {                      Quote = !Quote;                  }                  else                  {                      if (!Quote && cmb.Text.Substring(cnt' 4).Equals(" or "' StringComparison.OrdinalIgnoreCase))                      {                          buf.Append(" OR ");                          cnt += 3;                          continue;                      }                  }                  buf.Append(c[cnt]);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,UndoRemoveTabMenuItem_Click,The following statement contains a magic number: if (_statuses.RemovedTab.Count == 0)              {                  MessageBox.Show("There isn't removed tab."' "Undo"' MessageBoxButtons.OK' MessageBoxIcon.Information);                  return;              }              else              {                  DetailsListView listView = null;                    TabModel tb = _statuses.RemovedTab.Pop();                  if (tb.TabType == MyCommon.TabUsageType.Related)                  {                      var relatedTab = _statuses.GetTabByType(MyCommon.TabUsageType.Related);                      if (relatedTab != null)                      {                          // 関連発言なら既存のタブを置き換える                          tb.TabName = relatedTab.TabName;                          this.ClearTab(tb.TabName' false);                          _statuses.Tabs[tb.TabName] = tb;                            for (int i = 0; i < ListTab.TabPages.Count; i++)                          {                              var tabPage = ListTab.TabPages[i];                              if (tb.TabName == tabPage.Text)                              {                                  listView = (DetailsListView)tabPage.Tag;                                  ListTab.SelectedIndex = i;                                  break;                              }                          }                      }                      else                      {                          const string TabName = "Related Tweets";                          string renamed = TabName;                          for (int i = 2; i <= 100; i++)                          {                              if (!_statuses.ContainsTab(renamed)) break;                              renamed = TabName + i;                          }                          tb.TabName = renamed;                            _statuses.AddTab(tb);                          AddNewTab(tb' startup: false);                            var tabPage = ListTab.TabPages[ListTab.TabPages.Count - 1];                          listView = (DetailsListView)tabPage.Tag;                          ListTab.SelectedIndex = ListTab.TabPages.Count - 1;                      }                  }                  else                  {                      string renamed = tb.TabName;                      for (int i = 1; i < int.MaxValue; i++)                      {                          if (!_statuses.ContainsTab(renamed)) break;                          renamed = tb.TabName + "(" + i + ")";                      }                      tb.TabName = renamed;                        _statuses.AddTab(tb);                      AddNewTab(tb' startup: false);                        var tabPage = ListTab.TabPages[ListTab.TabPages.Count - 1];                      listView = (DetailsListView)tabPage.Tag;                      ListTab.SelectedIndex = ListTab.TabPages.Count - 1;                  }                  SaveConfigsTabs();                    if (listView != null)                  {                      using (ControlTransaction.Update(listView))                      {                          listView.VirtualListSize = tb.AllCount;                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,UndoRemoveTabMenuItem_Click,The following statement contains a magic number: if (_statuses.RemovedTab.Count == 0)              {                  MessageBox.Show("There isn't removed tab."' "Undo"' MessageBoxButtons.OK' MessageBoxIcon.Information);                  return;              }              else              {                  DetailsListView listView = null;                    TabModel tb = _statuses.RemovedTab.Pop();                  if (tb.TabType == MyCommon.TabUsageType.Related)                  {                      var relatedTab = _statuses.GetTabByType(MyCommon.TabUsageType.Related);                      if (relatedTab != null)                      {                          // 関連発言なら既存のタブを置き換える                          tb.TabName = relatedTab.TabName;                          this.ClearTab(tb.TabName' false);                          _statuses.Tabs[tb.TabName] = tb;                            for (int i = 0; i < ListTab.TabPages.Count; i++)                          {                              var tabPage = ListTab.TabPages[i];                              if (tb.TabName == tabPage.Text)                              {                                  listView = (DetailsListView)tabPage.Tag;                                  ListTab.SelectedIndex = i;                                  break;                              }                          }                      }                      else                      {                          const string TabName = "Related Tweets";                          string renamed = TabName;                          for (int i = 2; i <= 100; i++)                          {                              if (!_statuses.ContainsTab(renamed)) break;                              renamed = TabName + i;                          }                          tb.TabName = renamed;                            _statuses.AddTab(tb);                          AddNewTab(tb' startup: false);                            var tabPage = ListTab.TabPages[ListTab.TabPages.Count - 1];                          listView = (DetailsListView)tabPage.Tag;                          ListTab.SelectedIndex = ListTab.TabPages.Count - 1;                      }                  }                  else                  {                      string renamed = tb.TabName;                      for (int i = 1; i < int.MaxValue; i++)                      {                          if (!_statuses.ContainsTab(renamed)) break;                          renamed = tb.TabName + "(" + i + ")";                      }                      tb.TabName = renamed;                        _statuses.AddTab(tb);                      AddNewTab(tb' startup: false);                        var tabPage = ListTab.TabPages[ListTab.TabPages.Count - 1];                      listView = (DetailsListView)tabPage.Tag;                      ListTab.SelectedIndex = ListTab.TabPages.Count - 1;                  }                  SaveConfigsTabs();                    if (listView != null)                  {                      using (ControlTransaction.Update(listView))                      {                          listView.VirtualListSize = tb.AllCount;                      }                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer3_SplitterMoved,The following statement contains a magic number: switch (this.WindowState)              {                  case FormWindowState.Normal:                      splitterDistance = this.SplitContainer3.SplitterDistance;                      break;                  case FormWindowState.Maximized:                      // 最大化時は、通常時のウィンドウサイズに換算した SplitterDistance を算出する                      var normalContainerWidth = this._mySize.Width - SystemInformation.Border3DSize.Width * 2;                      splitterDistance = this.SplitContainer3.SplitterDistance - (this.SplitContainer3.Width - normalContainerWidth);                      splitterDistance = Math.Min(splitterDistance' normalContainerWidth - this.SplitContainer3.SplitterWidth - this.SplitContainer3.Panel2MinSize);                      break;                  default:                      return;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain,The following statement contains a magic number: this.ListTab.HandleCreated += (s' e) => NativeMethods.SetMinTabWidth((TabControl)s' 40);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyUserId,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(clstr' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyUserId,The following statement contains a magic number: try              {                  Clipboard.SetDataObject(clstr' false' 5' 100);              }              catch (Exception ex)              {                  MessageBox.Show(ex.Message);              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyEvent,The following statement contains a magic number: if (BalloonRequired(ev))              {                  NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                  //if (SettingDialog.DispUsername) NotifyIcon1.BalloonTipTitle = tw.Username + " - "; else NotifyIcon1.BalloonTipTitle = "";                  //NotifyIcon1.BalloonTipTitle += Application.ProductName + " [" + ev.Event.ToUpper() + "] by " + ((string)(!string.IsNullOrEmpty(ev.Username) ? ev.Username : "")' string);                  StringBuilder title = new StringBuilder();                  if (SettingManager.Common.DispUsername)                  {                      title.Append(tw.Username);                      title.Append(" - ");                  }                  else                  {                      //title.Clear();                  }                  title.Append(Application.ProductName);                  title.Append(" [");                  title.Append(ev.Event.ToUpper(CultureInfo.CurrentCulture));                  title.Append("] by ");                  if (!string.IsNullOrEmpty(ev.Username))                  {                      title.Append(ev.Username);                  }                  else                  {                      //title.Append("");                  }                  string text;                  if (!string.IsNullOrEmpty(ev.Target))                  {                      //NotifyIcon1.BalloonTipText = ev.Target;                      text = ev.Target;                  }                  else                  {                      //NotifyIcon1.BalloonTipText = " ";                      text = " ";                  }                  //NotifyIcon1.ShowBalloonTip(500);                  if (SettingManager.Common.IsUseNotifyGrowl)                  {                      gh.Notify(GrowlHelper.NotifyType.UserStreamEvent'                                ev.Id.ToString()' title.ToString()' text);                  }                  else                  {                      NotifyIcon1.BalloonTipIcon = ToolTipIcon.Info;                      NotifyIcon1.BalloonTipTitle = title.ToString();                      NotifyIcon1.BalloonTipText = text;                      NotifyIcon1.ShowBalloonTip(500);                  }              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: if (evtDialog == null || evtDialog.IsDisposed)              {                  evtDialog = null;                  evtDialog = new EventViewerDialog();                  evtDialog.Owner = this;                  //親の中央に表示                  Point pos = evtDialog.Location;                  pos.X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2);                  pos.Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2);                  evtDialog.Location = pos;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: if (evtDialog == null || evtDialog.IsDisposed)              {                  evtDialog = null;                  evtDialog = new EventViewerDialog();                  evtDialog.Owner = this;                  //親の中央に表示                  Point pos = evtDialog.Location;                  pos.X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2);                  pos.Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2);                  evtDialog.Location = pos;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: if (evtDialog == null || evtDialog.IsDisposed)              {                  evtDialog = null;                  evtDialog = new EventViewerDialog();                  evtDialog.Owner = this;                  //親の中央に表示                  Point pos = evtDialog.Location;                  pos.X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2);                  pos.Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2);                  evtDialog.Location = pos;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: if (evtDialog == null || evtDialog.IsDisposed)              {                  evtDialog = null;                  evtDialog = new EventViewerDialog();                  evtDialog.Owner = this;                  //親の中央に表示                  Point pos = evtDialog.Location;                  pos.X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2);                  pos.Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2);                  evtDialog.Location = pos;              }
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.HashStripSplitButton.DropDownButtonWidth = 13;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel2.Controls.Add(this.PostButton' 2' 0);
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.TimerRefreshIcon.Interval = 50;
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(2' "S2.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(3' "S3.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(4' "S4.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(5' "S5.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(6' "S6.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(7' "S7.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(8' "S8.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(9' "S9.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(10' "S10.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(11' "S11.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(12' "S12.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(13' "S13.ico");
Magic Number,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(14' "S14.ico");
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.SetRowSpan(this.LogoPictureBox' 5);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.LabelCopyright' 1' 2);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.LabelCompanyName' 1' 3);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.TextBoxDescription' 1' 4);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.OKButton' 1' 6);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.ChangeLog' 0' 5);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelProductName.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelVersion.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelCopyright.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelCompanyName.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.SetColumnSpan(this.ChangeLog' 2);
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,AddAlphaChannelIfNeeded,The following statement contains a magic number: using (var bitmap = new Bitmap(origImage))              {                  // アルファ値が 255 以外のピクセルが含まれていた場合は何もしない                  foreach (var x in Enumerable.Range(0' bitmap.Width))                  {                      foreach (var y in Enumerable.Range(0' bitmap.Height))                      {                          if (bitmap.GetPixel(x' y).A != 255)                              return false;                      }                  }                    // 左上の 1px だけアルファ値を 254 にする                  var pixel = bitmap.GetPixel(0' 0);                  var newPixel = Color.FromArgb(pixel.A - 1' pixel.R' pixel.G' pixel.B);                  bitmap.SetPixel(0' 0' newPixel);                    // MemoryImage 作成時に画像はコピーされるため、この後 bitmap は破棄しても問題ない                  newImage = MemoryImage.CopyFromImage(bitmap);                    return true;              }
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,VerifyApiResultCount,The following statement contains a magic number: return count >= 20 && count <= GetMaxApiResultCount(type);
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,VerifyMoreApiResultCount,The following statement contains a magic number: return count >= 20 && count <= 200;
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,VerifyMoreApiResultCount,The following statement contains a magic number: return count >= 20 && count <= 200;
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,VerifyFirstApiResultCount,The following statement contains a magic number: return count >= 20 && count <= 200;
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,VerifyFirstApiResultCount,The following statement contains a magic number: return count >= 20 && count <= 200;
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: switch (type)              {                  case MyCommon.WORKERTYPE.Timeline:                  case MyCommon.WORKERTYPE.Reply:                  case MyCommon.WORKERTYPE.UserTimeline:                  case MyCommon.WORKERTYPE.Favorites:                  case MyCommon.WORKERTYPE.DirectMessegeRcv:                  case MyCommon.WORKERTYPE.DirectMessegeSnt:                  case MyCommon.WORKERTYPE.List:  // 不明                      return 200;                    case MyCommon.WORKERTYPE.PublicSearch:                      return 100;                    default:                      throw new InvalidOperationException("Invalid type: " + type);              }
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: switch (type)              {                  case MyCommon.WORKERTYPE.Timeline:                  case MyCommon.WORKERTYPE.Reply:                  case MyCommon.WORKERTYPE.UserTimeline:                  case MyCommon.WORKERTYPE.Favorites:                  case MyCommon.WORKERTYPE.DirectMessegeRcv:                  case MyCommon.WORKERTYPE.DirectMessegeSnt:                  case MyCommon.WORKERTYPE.List:  // 不明                      return 200;                    case MyCommon.WORKERTYPE.PublicSearch:                      return 100;                    default:                      throw new InvalidOperationException("Invalid type: " + type);              }
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetApiResultCount,The following statement contains a magic number: if (type == MyCommon.WORKERTYPE.DirectMessegeRcv ||                  type == MyCommon.WORKERTYPE.DirectMessegeSnt)              {                  return 20;              }
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetRelatedResult,The following statement contains a magic number: while (nextPost.InReplyToStatusId != null && loopCount++ <= 20)              {                  var inReplyToId = nextPost.InReplyToStatusId.Value;                    var inReplyToPost = TabInformations.GetInstance()[inReplyToId];                  if (inReplyToPost == null)                  {                      try                      {                          inReplyToPost = await this.GetStatusApi(read' inReplyToId)                              .ConfigureAwait(false);                      }                      catch (WebApiException ex)                      {                          lastException = ex;                          break;                      }                  }                    relPosts.Add(inReplyToPost.StatusId' inReplyToPost);                    nextPost = FindTopOfReplyChain(relPosts' nextPost.StatusId);              }
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetListsApi,The following statement contains a magic number: var ownedLists = await TwitterLists.GetAllItemsAsync(x =>                  this.Api.ListsOwnerships(this.Username' cursor: x' count: 1000))                      .ConfigureAwait(false);
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetListsApi,The following statement contains a magic number: var subscribedLists = await TwitterLists.GetAllItemsAsync(x =>                  this.Api.ListsSubscriptions(this.Username' cursor: x' count: 1000))                      .ConfigureAwait(false);
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetTextLengthRemainDM,The following statement contains a magic number: while (pos < postText.Length)              {                  textLength++;                    if (char.IsSurrogatePair(postText' pos))                      pos += 2; // サロゲートペアの場合は2文字分進める                  else                      pos++;              }
Magic Number,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetTextLengthRemainWeighted,The following statement contains a magic number: while (pos < postText.Length)              {                  var urlEntity = urls.FirstOrDefault(x => x.Indices[0] == pos);                  if (urlEntity != null)                  {                      totalWeight += config.TransformedURLLength * config.Scale;                        var urlLength = urlEntity.Indices[1] - urlEntity.Indices[0];                      pos += urlLength;                        continue;                  }                    var codepoint = postText.GetCodepointAtSafe(pos);                  var weight = config.DefaultWeight;                    foreach (var weightRange in config.Ranges)                  {                      if (codepoint >= weightRange.Start && codepoint <= weightRange.End)                      {                          weight = weightRange.Weight;                          break;                      }                  }                    totalWeight += weight;                    var isSurrogatePair = codepoint > 0xffff;                  if (isSurrogatePair)                      pos += 2; // サロゲートペアの場合は2文字分進める                  else                      pos++;              }
Magic Number,OpenTween,TwitterUserstream,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,UserStreamLoop,The following statement contains a magic number: for (;;)                  {                      if (sleep != TimeSpan.Zero)                      {                          await Task.Delay(sleep' cancellationToken)                              .ConfigureAwait(false);                          sleep = TimeSpan.Zero;                      }                        if (!MyCommon.IsNetworkAvailable())                      {                          sleep = TimeSpan.FromSeconds(30);                          continue;                      }                        this.IsStreamActive = true;                      this.Started?.Invoke();                        try                      {                          var replies = this.AllAtReplies ? "all" : null;                            using (var stream = await this.twitterApi.UserStreams(replies' this.TrackWords)                              .ConfigureAwait(false))                          using (var reader = new StreamReader(stream))                          {                              while (!reader.EndOfStream)                              {                                  var line = await reader.ReadLineAsync()                                      .ConfigureAwait(false);                                    cancellationToken.ThrowIfCancellationRequested();                                    this.StatusArrived?.Invoke(line);                              }                          }                            // キャンセルされていないのにストリームが終了した場合                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (TwitterApiException) { sleep = TimeSpan.FromSeconds(30); }                      catch (IOException) { sleep = TimeSpan.FromSeconds(30); }                      catch (OperationCanceledException)                      {                          if (cancellationToken.IsCancellationRequested)                              throw;                            // cancellationToken によるキャンセルではない（＝タイムアウトエラー）                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (Exception ex)                      {                          MyCommon.ExceptionOut(ex);                          sleep = TimeSpan.FromSeconds(30);                      }                      finally                      {                          this.IsStreamActive = false;                          this.Stopped?.Invoke();                      }                  }
Magic Number,OpenTween,TwitterUserstream,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,UserStreamLoop,The following statement contains a magic number: for (;;)                  {                      if (sleep != TimeSpan.Zero)                      {                          await Task.Delay(sleep' cancellationToken)                              .ConfigureAwait(false);                          sleep = TimeSpan.Zero;                      }                        if (!MyCommon.IsNetworkAvailable())                      {                          sleep = TimeSpan.FromSeconds(30);                          continue;                      }                        this.IsStreamActive = true;                      this.Started?.Invoke();                        try                      {                          var replies = this.AllAtReplies ? "all" : null;                            using (var stream = await this.twitterApi.UserStreams(replies' this.TrackWords)                              .ConfigureAwait(false))                          using (var reader = new StreamReader(stream))                          {                              while (!reader.EndOfStream)                              {                                  var line = await reader.ReadLineAsync()                                      .ConfigureAwait(false);                                    cancellationToken.ThrowIfCancellationRequested();                                    this.StatusArrived?.Invoke(line);                              }                          }                            // キャンセルされていないのにストリームが終了した場合                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (TwitterApiException) { sleep = TimeSpan.FromSeconds(30); }                      catch (IOException) { sleep = TimeSpan.FromSeconds(30); }                      catch (OperationCanceledException)                      {                          if (cancellationToken.IsCancellationRequested)                              throw;                            // cancellationToken によるキャンセルではない（＝タイムアウトエラー）                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (Exception ex)                      {                          MyCommon.ExceptionOut(ex);                          sleep = TimeSpan.FromSeconds(30);                      }                      finally                      {                          this.IsStreamActive = false;                          this.Stopped?.Invoke();                      }                  }
Magic Number,OpenTween,TwitterUserstream,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,UserStreamLoop,The following statement contains a magic number: for (;;)                  {                      if (sleep != TimeSpan.Zero)                      {                          await Task.Delay(sleep' cancellationToken)                              .ConfigureAwait(false);                          sleep = TimeSpan.Zero;                      }                        if (!MyCommon.IsNetworkAvailable())                      {                          sleep = TimeSpan.FromSeconds(30);                          continue;                      }                        this.IsStreamActive = true;                      this.Started?.Invoke();                        try                      {                          var replies = this.AllAtReplies ? "all" : null;                            using (var stream = await this.twitterApi.UserStreams(replies' this.TrackWords)                              .ConfigureAwait(false))                          using (var reader = new StreamReader(stream))                          {                              while (!reader.EndOfStream)                              {                                  var line = await reader.ReadLineAsync()                                      .ConfigureAwait(false);                                    cancellationToken.ThrowIfCancellationRequested();                                    this.StatusArrived?.Invoke(line);                              }                          }                            // キャンセルされていないのにストリームが終了した場合                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (TwitterApiException) { sleep = TimeSpan.FromSeconds(30); }                      catch (IOException) { sleep = TimeSpan.FromSeconds(30); }                      catch (OperationCanceledException)                      {                          if (cancellationToken.IsCancellationRequested)                              throw;                            // cancellationToken によるキャンセルではない（＝タイムアウトエラー）                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (Exception ex)                      {                          MyCommon.ExceptionOut(ex);                          sleep = TimeSpan.FromSeconds(30);                      }                      finally                      {                          this.IsStreamActive = false;                          this.Stopped?.Invoke();                      }                  }
Magic Number,OpenTween,TwitterUserstream,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,UserStreamLoop,The following statement contains a magic number: for (;;)                  {                      if (sleep != TimeSpan.Zero)                      {                          await Task.Delay(sleep' cancellationToken)                              .ConfigureAwait(false);                          sleep = TimeSpan.Zero;                      }                        if (!MyCommon.IsNetworkAvailable())                      {                          sleep = TimeSpan.FromSeconds(30);                          continue;                      }                        this.IsStreamActive = true;                      this.Started?.Invoke();                        try                      {                          var replies = this.AllAtReplies ? "all" : null;                            using (var stream = await this.twitterApi.UserStreams(replies' this.TrackWords)                              .ConfigureAwait(false))                          using (var reader = new StreamReader(stream))                          {                              while (!reader.EndOfStream)                              {                                  var line = await reader.ReadLineAsync()                                      .ConfigureAwait(false);                                    cancellationToken.ThrowIfCancellationRequested();                                    this.StatusArrived?.Invoke(line);                              }                          }                            // キャンセルされていないのにストリームが終了した場合                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (TwitterApiException) { sleep = TimeSpan.FromSeconds(30); }                      catch (IOException) { sleep = TimeSpan.FromSeconds(30); }                      catch (OperationCanceledException)                      {                          if (cancellationToken.IsCancellationRequested)                              throw;                            // cancellationToken によるキャンセルではない（＝タイムアウトエラー）                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (Exception ex)                      {                          MyCommon.ExceptionOut(ex);                          sleep = TimeSpan.FromSeconds(30);                      }                      finally                      {                          this.IsStreamActive = false;                          this.Stopped?.Invoke();                      }                  }
Magic Number,OpenTween,TwitterUserstream,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,UserStreamLoop,The following statement contains a magic number: for (;;)                  {                      if (sleep != TimeSpan.Zero)                      {                          await Task.Delay(sleep' cancellationToken)                              .ConfigureAwait(false);                          sleep = TimeSpan.Zero;                      }                        if (!MyCommon.IsNetworkAvailable())                      {                          sleep = TimeSpan.FromSeconds(30);                          continue;                      }                        this.IsStreamActive = true;                      this.Started?.Invoke();                        try                      {                          var replies = this.AllAtReplies ? "all" : null;                            using (var stream = await this.twitterApi.UserStreams(replies' this.TrackWords)                              .ConfigureAwait(false))                          using (var reader = new StreamReader(stream))                          {                              while (!reader.EndOfStream)                              {                                  var line = await reader.ReadLineAsync()                                      .ConfigureAwait(false);                                    cancellationToken.ThrowIfCancellationRequested();                                    this.StatusArrived?.Invoke(line);                              }                          }                            // キャンセルされていないのにストリームが終了した場合                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (TwitterApiException) { sleep = TimeSpan.FromSeconds(30); }                      catch (IOException) { sleep = TimeSpan.FromSeconds(30); }                      catch (OperationCanceledException)                      {                          if (cancellationToken.IsCancellationRequested)                              throw;                            // cancellationToken によるキャンセルではない（＝タイムアウトエラー）                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (Exception ex)                      {                          MyCommon.ExceptionOut(ex);                          sleep = TimeSpan.FromSeconds(30);                      }                      finally                      {                          this.IsStreamActive = false;                          this.Stopped?.Invoke();                      }                  }
Magic Number,OpenTween,TwitterUserstream,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,UserStreamLoop,The following statement contains a magic number: for (;;)                  {                      if (sleep != TimeSpan.Zero)                      {                          await Task.Delay(sleep' cancellationToken)                              .ConfigureAwait(false);                          sleep = TimeSpan.Zero;                      }                        if (!MyCommon.IsNetworkAvailable())                      {                          sleep = TimeSpan.FromSeconds(30);                          continue;                      }                        this.IsStreamActive = true;                      this.Started?.Invoke();                        try                      {                          var replies = this.AllAtReplies ? "all" : null;                            using (var stream = await this.twitterApi.UserStreams(replies' this.TrackWords)                              .ConfigureAwait(false))                          using (var reader = new StreamReader(stream))                          {                              while (!reader.EndOfStream)                              {                                  var line = await reader.ReadLineAsync()                                      .ConfigureAwait(false);                                    cancellationToken.ThrowIfCancellationRequested();                                    this.StatusArrived?.Invoke(line);                              }                          }                            // キャンセルされていないのにストリームが終了した場合                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (TwitterApiException) { sleep = TimeSpan.FromSeconds(30); }                      catch (IOException) { sleep = TimeSpan.FromSeconds(30); }                      catch (OperationCanceledException)                      {                          if (cancellationToken.IsCancellationRequested)                              throw;                            // cancellationToken によるキャンセルではない（＝タイムアウトエラー）                          sleep = TimeSpan.FromSeconds(30);                      }                      catch (Exception ex)                      {                          MyCommon.ExceptionOut(ex);                          sleep = TimeSpan.FromSeconds(30);                      }                      finally                      {                          this.IsStreamActive = false;                          this.Stopped?.Invoke();                      }                  }
Magic Number,OpenTween,InternetSecurityManager,C:\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,InternetSecurityManager,The following statement contains a magic number: do              {                  Thread.Sleep(100);                  Application.DoEvents();              } while (_WebBrowser.ReadyState != WebBrowserReadyState.Complete);
Magic Number,OpenTween.Api,MicrosoftTranslatorApi,C:\repos\opentween_OpenTween\OpenTween\Api\MicrosoftTranslatorApi.cs,UpdateAccessTokenIfExpired,The following statement contains a magic number: this.RefreshAccessTokenAt = DateTime.Now + expiresIn - TimeSpan.FromSeconds(30);
Magic Number,OpenTween.Api,MicrosoftTranslatorApi,C:\repos\opentween_OpenTween\OpenTween\Api\MicrosoftTranslatorApi.cs,GetAccessTokenAsync,The following statement contains a magic number: using (var request = new HttpRequestMessage(HttpMethod.Post' IssueTokenEndpoint))              {                  request.Headers.Add("Ocp-Apim-Subscription-Key"' ApplicationSettings.TranslatorSubscriptionKey);                    using (var response = await this.Http.SendAsync(request).ConfigureAwait(false))                  {                      var accessToken = await response.Content.ReadAsStringAsync()                          .ConfigureAwait(false);                        return (accessToken' TimeSpan.FromMinutes(10));                  }              }
Magic Number,OpenTween.Api,TwitterApi,C:\repos\opentween_OpenTween\OpenTween\Api\TwitterApi.cs,EscapeJsonString,The following statement contains a magic number: var builder = new StringBuilder(rawText.Length + 20);
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = "2"'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Connection,Networking,C:\repos\opentween_OpenTween\OpenTween\Connection\Networking.cs,Networking,The following statement contains a magic number: DefaultTimeout = TimeSpan.FromSeconds(20);
Magic Number,OpenTween.Connection,Networking,C:\repos\opentween_OpenTween\OpenTween\Connection\Networking.cs,Networking,The following statement contains a magic number: UploadImageTimeout = TimeSpan.FromSeconds(60);
Magic Number,OpenTween.Connection,OAuthUtility,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,GetOAuthParameter,The following statement contains a magic number: parameter.Add("oauth_nonce"' NonceRandom.Next(123400' 9999999).ToString());
Magic Number,OpenTween.Connection,OAuthUtility,C:\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,GetOAuthParameter,The following statement contains a magic number: parameter.Add("oauth_nonce"' NonceRandom.Next(123400' 9999999).ToString());
Magic Number,OpenTween.Models,TabInformations,C:\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,MakeTabName,The following statement contains a magic number: return this.MakeTabName(baseTabName' 100);
Magic Number,OpenTween.Models,TabInformations,C:\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,MakeTabName,The following statement contains a magic number: foreach (var i in Enumerable.Range(2' retryCount - 1))              {                  var tabName = baseTabName + i;                  if (!this.ContainsTab(tabName))                  {                      return tabName;                  }              }
Magic Number,OpenTween.Models,TabInformations,C:\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,UpdateRetweetCount,The following statement contains a magic number: return this.retweetsCount.AddOrUpdate(retweetedId' 1' (k' v) => v >= 10 ? 1 : v + 1);
Magic Number,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,StartAutoUpdate,The following statement contains a magic number: this.UpdateTimer.Change(0' 30 * 60 * 1000);
Magic Number,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,StartAutoUpdate,The following statement contains a magic number: this.UpdateTimer.Change(0' 30 * 60 * 1000);
Magic Number,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,StartAutoUpdate,The following statement contains a magic number: this.UpdateTimer.Change(0' 30 * 60 * 1000);
Magic Number,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,FetchRegexAsync,The following statement contains a magic number: using (var cts = new CancellationTokenSource(millisecondsDelay: 1000))              using (var response = await this.http.GetAsync(apiBase + "regex.json"' cts.Token)                  .ConfigureAwait(false))              {                  response.EnsureSuccessStatusCode();                    return await response.Content.ReadAsByteArrayAsync()                      .ConfigureAwait(false);              }
Magic Number,OpenTween.Thumbnail.Services,Nicovideo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Nicovideo.cs,BuildTooltip,The following statement contains a magic number: var tooltip = new StringBuilder(200);
Magic Number,OpenTween.Thumbnail.Services,Vimeo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Vimeo.cs,GetThumbnailInfoAsync,The following statement contains a magic number: try              {                  var apiUrl = "http://vimeo.com/api/oembed.xml?url=" + Uri.EscapeDataString(url);                    var xmlStr = await this.http.GetStringAsync(apiUrl)                      .ConfigureAwait(false);                    var xdoc = XDocument.Parse(xmlStr);                    var thumbUrlElm = xdoc.XPathSelectElement("/oembed/thumbnail_url");                  if (thumbUrlElm == null)                      return null;                    var titleElm = xdoc.XPathSelectElement("/oembed/title");                  var durationElm = xdoc.XPathSelectElement("/oembed/duration");                    var tooltipText = "";                  if (titleElm != null && durationElm != null)                  {                      var duration = int.Parse(durationElm.Value);                      var minute = duration / 60;                      var second = duration % 60;                      tooltipText = string.Format("{0} ({1:00}:{2:00})"' titleElm.Value' minute' second);                  }                    return new ThumbnailInfo                  {                      MediaPageUrl = url'                      ThumbnailImageUrl = thumbUrlElm.Value'                      TooltipText = tooltipText'                      IsPlayable = true'                  };              }              catch (HttpRequestException) { }
Magic Number,OpenTween.Thumbnail.Services,Vimeo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Vimeo.cs,GetThumbnailInfoAsync,The following statement contains a magic number: try              {                  var apiUrl = "http://vimeo.com/api/oembed.xml?url=" + Uri.EscapeDataString(url);                    var xmlStr = await this.http.GetStringAsync(apiUrl)                      .ConfigureAwait(false);                    var xdoc = XDocument.Parse(xmlStr);                    var thumbUrlElm = xdoc.XPathSelectElement("/oembed/thumbnail_url");                  if (thumbUrlElm == null)                      return null;                    var titleElm = xdoc.XPathSelectElement("/oembed/title");                  var durationElm = xdoc.XPathSelectElement("/oembed/duration");                    var tooltipText = "";                  if (titleElm != null && durationElm != null)                  {                      var duration = int.Parse(durationElm.Value);                      var minute = duration / 60;                      var second = duration % 60;                      tooltipText = string.Format("{0} ({1:00}:{2:00})"' titleElm.Value' minute' second);                  }                    return new ThumbnailInfo                  {                      MediaPageUrl = url'                      ThumbnailImageUrl = thumbUrlElm.Value'                      TooltipText = tooltipText'                      IsPlayable = true'                  };              }              catch (HttpRequestException) { }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,UserstreamPeriod_Validating,The following statement contains a magic number: if (prd < 0 || prd > 60)              {                  MessageBox.Show(Properties.Resources.UserstreamPeriod_ValidatingText1);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,TimelinePeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.TimelinePeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,TimelinePeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.TimelinePeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ReplyPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.TimelinePeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ReplyPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.TimelinePeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,DMPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.DMPeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,DMPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.DMPeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,PubSearchPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 30 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.PubSearchPeriod_ValidatingText2);                  e.Cancel = true;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,PubSearchPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 30 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.PubSearchPeriod_ValidatingText2);                  e.Cancel = true;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ListsPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.DMPeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ListsPeriod_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.DMPeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,UserTimeline_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.DMPeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,UserTimeline_Validating,The following statement contains a magic number: if (prd != 0 && (prd < 15 || prd > 6000))              {                  MessageBox.Show(Properties.Resources.DMPeriod_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.NameBalloon)              {                  case MyCommon.NameBalloonEnum.None:                      this.cmbNameBalloon.SelectedIndex = 0;                      break;                  case MyCommon.NameBalloonEnum.UserID:                      this.cmbNameBalloon.SelectedIndex = 1;                      break;                  case MyCommon.NameBalloonEnum.NickName:                      this.cmbNameBalloon.SelectedIndex = 2;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.DispLatestPost)              {                  case MyCommon.DispTitleEnum.None:                      this.ComboDispTitle.SelectedIndex = 0;                      break;                  case MyCommon.DispTitleEnum.Ver:                      this.ComboDispTitle.SelectedIndex = 1;                      break;                  case MyCommon.DispTitleEnum.Post:                      this.ComboDispTitle.SelectedIndex = 2;                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      this.ComboDispTitle.SelectedIndex = 3;                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      this.ComboDispTitle.SelectedIndex = 4;                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      this.ComboDispTitle.SelectedIndex = 5;                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      this.ComboDispTitle.SelectedIndex = 6;                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      this.ComboDispTitle.SelectedIndex = 7;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.DispLatestPost)              {                  case MyCommon.DispTitleEnum.None:                      this.ComboDispTitle.SelectedIndex = 0;                      break;                  case MyCommon.DispTitleEnum.Ver:                      this.ComboDispTitle.SelectedIndex = 1;                      break;                  case MyCommon.DispTitleEnum.Post:                      this.ComboDispTitle.SelectedIndex = 2;                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      this.ComboDispTitle.SelectedIndex = 3;                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      this.ComboDispTitle.SelectedIndex = 4;                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      this.ComboDispTitle.SelectedIndex = 5;                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      this.ComboDispTitle.SelectedIndex = 6;                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      this.ComboDispTitle.SelectedIndex = 7;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.DispLatestPost)              {                  case MyCommon.DispTitleEnum.None:                      this.ComboDispTitle.SelectedIndex = 0;                      break;                  case MyCommon.DispTitleEnum.Ver:                      this.ComboDispTitle.SelectedIndex = 1;                      break;                  case MyCommon.DispTitleEnum.Post:                      this.ComboDispTitle.SelectedIndex = 2;                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      this.ComboDispTitle.SelectedIndex = 3;                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      this.ComboDispTitle.SelectedIndex = 4;                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      this.ComboDispTitle.SelectedIndex = 5;                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      this.ComboDispTitle.SelectedIndex = 6;                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      this.ComboDispTitle.SelectedIndex = 7;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.DispLatestPost)              {                  case MyCommon.DispTitleEnum.None:                      this.ComboDispTitle.SelectedIndex = 0;                      break;                  case MyCommon.DispTitleEnum.Ver:                      this.ComboDispTitle.SelectedIndex = 1;                      break;                  case MyCommon.DispTitleEnum.Post:                      this.ComboDispTitle.SelectedIndex = 2;                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      this.ComboDispTitle.SelectedIndex = 3;                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      this.ComboDispTitle.SelectedIndex = 4;                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      this.ComboDispTitle.SelectedIndex = 5;                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      this.ComboDispTitle.SelectedIndex = 6;                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      this.ComboDispTitle.SelectedIndex = 7;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.DispLatestPost)              {                  case MyCommon.DispTitleEnum.None:                      this.ComboDispTitle.SelectedIndex = 0;                      break;                  case MyCommon.DispTitleEnum.Ver:                      this.ComboDispTitle.SelectedIndex = 1;                      break;                  case MyCommon.DispTitleEnum.Post:                      this.ComboDispTitle.SelectedIndex = 2;                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      this.ComboDispTitle.SelectedIndex = 3;                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      this.ComboDispTitle.SelectedIndex = 4;                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      this.ComboDispTitle.SelectedIndex = 5;                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      this.ComboDispTitle.SelectedIndex = 6;                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      this.ComboDispTitle.SelectedIndex = 7;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.DispLatestPost)              {                  case MyCommon.DispTitleEnum.None:                      this.ComboDispTitle.SelectedIndex = 0;                      break;                  case MyCommon.DispTitleEnum.Ver:                      this.ComboDispTitle.SelectedIndex = 1;                      break;                  case MyCommon.DispTitleEnum.Post:                      this.ComboDispTitle.SelectedIndex = 2;                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      this.ComboDispTitle.SelectedIndex = 3;                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      this.ComboDispTitle.SelectedIndex = 4;                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      this.ComboDispTitle.SelectedIndex = 5;                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      this.ComboDispTitle.SelectedIndex = 6;                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      this.ComboDispTitle.SelectedIndex = 7;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.ReplyIconState)              {                  case MyCommon.REPLY_ICONSTATE.None:                      this.ReplyIconStateCombo.SelectedIndex = 0;                      break;                  case MyCommon.REPLY_ICONSTATE.StaticIcon:                      this.ReplyIconStateCombo.SelectedIndex = 1;                      break;                  case MyCommon.REPLY_ICONSTATE.BlinkIcon:                      this.ReplyIconStateCombo.SelectedIndex = 2;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.Language)              {                  case "OS":                      this.LanguageCombo.SelectedIndex = 0;                      break;                  case "ja":                      this.LanguageCombo.SelectedIndex = 1;                      break;                  case "en":                      this.LanguageCombo.SelectedIndex = 2;                      break;                  default:                      this.LanguageCombo.SelectedIndex = 0;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.cmbNameBalloon.SelectedIndex)              {                  case 0:                      settingCommon.NameBalloon = MyCommon.NameBalloonEnum.None;                      break;                  case 1:                      settingCommon.NameBalloon = MyCommon.NameBalloonEnum.UserID;                      break;                  case 2:                      settingCommon.NameBalloon = MyCommon.NameBalloonEnum.NickName;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboDispTitle.SelectedIndex)              {                  case 0: // None                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.None;                      break;                  case 1: // Ver                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Ver;                      break;                  case 2: // Post                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Post;                      break;                  case 3: // RepCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadRepCount;                      break;                  case 4: // AllCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllCount;                      break;                  case 5: // Rep+All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllRepCount;                      break;                  case 6: // Unread/All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadCountAllCount;                      break;                  case 7: // Count of Status/Follow/Follower                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.OwnStatus;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboDispTitle.SelectedIndex)              {                  case 0: // None                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.None;                      break;                  case 1: // Ver                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Ver;                      break;                  case 2: // Post                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Post;                      break;                  case 3: // RepCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadRepCount;                      break;                  case 4: // AllCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllCount;                      break;                  case 5: // Rep+All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllRepCount;                      break;                  case 6: // Unread/All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadCountAllCount;                      break;                  case 7: // Count of Status/Follow/Follower                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.OwnStatus;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboDispTitle.SelectedIndex)              {                  case 0: // None                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.None;                      break;                  case 1: // Ver                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Ver;                      break;                  case 2: // Post                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Post;                      break;                  case 3: // RepCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadRepCount;                      break;                  case 4: // AllCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllCount;                      break;                  case 5: // Rep+All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllRepCount;                      break;                  case 6: // Unread/All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadCountAllCount;                      break;                  case 7: // Count of Status/Follow/Follower                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.OwnStatus;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboDispTitle.SelectedIndex)              {                  case 0: // None                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.None;                      break;                  case 1: // Ver                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Ver;                      break;                  case 2: // Post                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Post;                      break;                  case 3: // RepCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadRepCount;                      break;                  case 4: // AllCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllCount;                      break;                  case 5: // Rep+All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllRepCount;                      break;                  case 6: // Unread/All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadCountAllCount;                      break;                  case 7: // Count of Status/Follow/Follower                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.OwnStatus;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboDispTitle.SelectedIndex)              {                  case 0: // None                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.None;                      break;                  case 1: // Ver                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Ver;                      break;                  case 2: // Post                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Post;                      break;                  case 3: // RepCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadRepCount;                      break;                  case 4: // AllCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllCount;                      break;                  case 5: // Rep+All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllRepCount;                      break;                  case 6: // Unread/All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadCountAllCount;                      break;                  case 7: // Count of Status/Follow/Follower                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.OwnStatus;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboDispTitle.SelectedIndex)              {                  case 0: // None                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.None;                      break;                  case 1: // Ver                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Ver;                      break;                  case 2: // Post                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Post;                      break;                  case 3: // RepCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadRepCount;                      break;                  case 4: // AllCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllCount;                      break;                  case 5: // Rep+All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllRepCount;                      break;                  case 6: // Unread/All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadCountAllCount;                      break;                  case 7: // Count of Status/Follow/Follower                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.OwnStatus;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ReplyIconStateCombo.SelectedIndex)              {                  case 0:                      settingCommon.ReplyIconState = MyCommon.REPLY_ICONSTATE.None;                      break;                  case 1:                      settingCommon.ReplyIconState = MyCommon.REPLY_ICONSTATE.StaticIcon;                      break;                  case 2:                      settingCommon.ReplyIconState = MyCommon.REPLY_ICONSTATE.BlinkIcon;                      break;              }
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.LanguageCombo.SelectedIndex)              {                  case 0:                      settingCommon.Language = "OS";                      break;                  case 1:                      settingCommon.Language = "ja";                      break;                  case 2:                      settingCommon.Language = "en";                      break;                  default:                      settingCommon.Language = "en";                      break;              }
Magic Number,OpenTween.Setting.Panel,ProxyPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\ProxyPanel.cs,TextProxyPort_Validating,The following statement contains a magic number: if (port < 0 || port > 65535)              {                  MessageBox.Show(Properties.Resources.TextProxyPort_ValidatingText2);                  e.Cancel = true;                  return;              }
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(20);
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(519' 368);
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(519' 368);
Magic Number,OpenTween.Setting.Panel,TweetActPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetActPanel.cs,LoadConfig,The following statement contains a magic number: if (settingCommon.PostCtrlEnter)              {                  this.ComboBoxPostKeySelect.SelectedIndex = 1;              }              else if (settingCommon.PostShiftEnter)              {                  this.ComboBoxPostKeySelect.SelectedIndex = 2;              }              else              {                  this.ComboBoxPostKeySelect.SelectedIndex = 0;              }
Magic Number,OpenTween.Setting.Panel,TweetActPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetActPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboBoxPostKeySelect.SelectedIndex)              {                  case 2:                      settingCommon.PostShiftEnter = true;                      settingCommon.PostCtrlEnter = false;                      break;                  case 1:                      settingCommon.PostCtrlEnter = true;                      settingCommon.PostShiftEnter = false;                      break;                  case 0:                      settingCommon.PostCtrlEnter = false;                      settingCommon.PostShiftEnter = false;                      break;              }
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.IconSize)              {                  case MyCommon.IconSizes.IconNone:                      this.IconSize.SelectedIndex = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      this.IconSize.SelectedIndex = 1;                      break;                  case MyCommon.IconSizes.Icon24:                      this.IconSize.SelectedIndex = 2;                      break;                  case MyCommon.IconSizes.Icon48:                      this.IconSize.SelectedIndex = 3;                      break;                  case MyCommon.IconSizes.Icon48_2:                      this.IconSize.SelectedIndex = 4;                      break;              }
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.IconSize)              {                  case MyCommon.IconSizes.IconNone:                      this.IconSize.SelectedIndex = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      this.IconSize.SelectedIndex = 1;                      break;                  case MyCommon.IconSizes.Icon24:                      this.IconSize.SelectedIndex = 2;                      break;                  case MyCommon.IconSizes.Icon48:                      this.IconSize.SelectedIndex = 3;                      break;                  case MyCommon.IconSizes.Icon48_2:                      this.IconSize.SelectedIndex = 4;                      break;              }
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,LoadConfig,The following statement contains a magic number: switch (settingCommon.IconSize)              {                  case MyCommon.IconSizes.IconNone:                      this.IconSize.SelectedIndex = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      this.IconSize.SelectedIndex = 1;                      break;                  case MyCommon.IconSizes.Icon24:                      this.IconSize.SelectedIndex = 2;                      break;                  case MyCommon.IconSizes.Icon48:                      this.IconSize.SelectedIndex = 3;                      break;                  case MyCommon.IconSizes.Icon48_2:                      this.IconSize.SelectedIndex = 4;                      break;              }
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.IconSize.SelectedIndex)              {                  case 0:                      settingCommon.IconSize = MyCommon.IconSizes.IconNone;                      break;                  case 1:                      settingCommon.IconSize = MyCommon.IconSizes.Icon16;                      break;                  case 2:                      settingCommon.IconSize = MyCommon.IconSizes.Icon24;                      break;                  case 3:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48;                      break;                  case 4:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48_2;                      break;              }
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.IconSize.SelectedIndex)              {                  case 0:                      settingCommon.IconSize = MyCommon.IconSizes.IconNone;                      break;                  case 1:                      settingCommon.IconSize = MyCommon.IconSizes.Icon16;                      break;                  case 2:                      settingCommon.IconSize = MyCommon.IconSizes.Icon24;                      break;                  case 3:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48;                      break;                  case 4:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48_2;                      break;              }
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.IconSize.SelectedIndex)              {                  case 0:                      settingCommon.IconSize = MyCommon.IconSizes.IconNone;                      break;                  case 1:                      settingCommon.IconSize = MyCommon.IconSizes.Icon16;                      break;                  case 2:                      settingCommon.IconSize = MyCommon.IconSizes.Icon24;                      break;                  case 3:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48;                      break;                  case 4:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48_2;                      break;              }
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The following statement contains a magic number: if (tileCountX * tileCountY > 10)                  throw new OperationCanceledException();
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Missing Default,OpenTween,NativeMethods,C:\repos\opentween_OpenTween\OpenTween\NativeMethods.cs,SetProxy,The following switch statement is missing a default case: switch (pType)              {              case ProxyType.IE:                  proxy = null;                  break;              case ProxyType.None:                  proxy = "";                  break;              case ProxyType.Specified:                  proxy = host + (port > 0 ? ":" + port : "");                  break;              }
Missing Default,OpenTween,GrowlHelper,C:\repos\opentween_OpenTween\OpenTween\Growl.cs,Notify,The following switch statement is missing a default case: switch (notificationType)              {                  case NotifyType.Reply:                      notificationName = "REPLY";                      break;                  case NotifyType.DirectMessage:                      notificationName = "DIRECT_MESSAGE";                      break;                  case NotifyType.Notify:                      notificationName = "NOTIFY";                      break;                  case NotifyType.UserStreamEvent:                      notificationName = "USERSTREAM_EVENT";                      break;              }
Missing Default,OpenTween,MyLists,C:\repos\opentween_OpenTween\OpenTween\MyLists.cs,ListsCheckedListBox_MouseDown,The following switch statement is missing a default case: switch (e.Button)              {                  case MouseButtons.Left:                      //項目が無い部分をクリックしても、選択されている項目のチェック状態が変更されてしまうので、その対策                      for (int index = 0; index < this.ListsCheckedListBox.Items.Count; index++)                      {                          if (this.ListsCheckedListBox.GetItemRectangle(index).Contains(e.Location))                              return;                      }                      this.ListsCheckedListBox.SelectedItem = null;                      break;                  case MouseButtons.Right:                      //コンテキストメニューの項目実行時にSelectedItemプロパティを利用出来るように                      for (int index = 0; index < this.ListsCheckedListBox.Items.Count; index++)                      {                          if (this.ListsCheckedListBox.GetItemRectangle(index).Contains(e.Location))                          {                              this.ListsCheckedListBox.SetSelected(index' true);                              return;                          }                      }                      this.ListsCheckedListBox.SelectedItem = null;                      break;              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following switch statement is missing a default case: switch (_statuses.SortMode)              {                  case ComparerMode.Nickname:  //ニックネーム                      c = 1;                      break;                  case ComparerMode.Data:  //本文                      c = 2;                      break;                  case ComparerMode.Id:  //時刻=発言Id                      c = 3;                      break;                  case ComparerMode.Name:  //名前                      c = 4;                      break;                  case ComparerMode.Source:  //Source                      c = 7;                      break;              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following switch statement is missing a default case: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following switch statement is missing a default case: switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following switch statement is missing a default case: switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The following switch statement is missing a default case: switch (rtResult)                  {                      case DialogResult.Yes:                          StatusText.Text = "";                          await this.doReTweetOfficial(false);                          return;                      case DialogResult.Cancel:                          return;                  }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following switch statement is missing a default case: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      if (_curPost != null)                          await this.ShowUserStatus(_curPost.ScreenName' false);                      break;                  case 3:                      ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(null' null);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(null' null);                      break;                  case 6:                      StatusOpenMenuItem_Click(null' null);                      break;                  case 7:                      //動作なし                      break;              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following switch statement is missing a default case: switch (iconSz)              {                  case MyCommon.IconSizes.IconNone:                      _iconSz = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      _iconSz = 16;                      break;                  case MyCommon.IconSizes.Icon24:                      _iconSz = 26;                      break;                  case MyCommon.IconSizes.Icon48:                      _iconSz = 48;                      break;                  case MyCommon.IconSizes.Icon48_2:                      _iconSz = 48;                      _iconCol = true;                      break;              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following switch statement is missing a default case: switch (_statuses.SortMode)                  {                      case ComparerMode.Nickname:  //ニックネーム                          SettingManager.Common.SortColumn = 1;                          break;                      case ComparerMode.Data:  //本文                          SettingManager.Common.SortColumn = 2;                          break;                      case ComparerMode.Id:  //時刻=発言Id                          SettingManager.Common.SortColumn = 3;                          break;                      case ComparerMode.Name:  //名前                          SettingManager.Common.SortColumn = 4;                          break;                      case ComparerMode.Source:  //Source                          SettingManager.Common.SortColumn = 7;                          break;                  }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsTabs,The following switch statement is missing a default case: switch (tab)                  {                      case FilterTabModel filterTab:                          tabSetting.FilterArray = filterTab.FilterArray;                          break;                      case UserTimelineTabModel userTab:                          tabSetting.User = userTab.ScreenName;                          break;                      case PublicSearchTabModel searchTab:                          tabSetting.SearchWords = searchTab.SearchWords;                          tabSetting.SearchLang = searchTab.SearchLang;                          break;                      case ListTimelineTabModel listTab:                          tabSetting.ListInfo = listTab.ListInfo;                          break;                  }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The following switch statement is missing a default case: switch (SettingManager.Common.DispLatestPost)              {                  case MyCommon.DispTitleEnum.Ver:                      ttl.Append("Ver:").Append(MyCommon.GetReadableVersion());                      break;                  case MyCommon.DispTitleEnum.Post:                      if (_history != null && _history.Count > 1)                          ttl.Append(_history[_history.Count - 2].status.Replace("\r\n"' " "));                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText1' _statuses.GetTabByType(MyCommon.TabUsageType.Mentions).UnreadCount + _statuses.GetTabByType(MyCommon.TabUsageType.DirectMessage).UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText2' ur);                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText3' ur' _statuses.GetTabByType(MyCommon.TabUsageType.Mentions).UnreadCount + _statuses.GetTabByType(MyCommon.TabUsageType.DirectMessage).UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText4' ur' al);                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      if (followers == 0 && tw.FollowersCount > 0) followers = tw.FollowersCount;                      ttl.AppendFormat(Properties.Resources.OwnStatusTitle' tw.StatusesCount' tw.FriendsCount' tw.FollowersCount' tw.FollowersCount - followers);                      break;              }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following switch statement is missing a default case: switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }
Missing Default,OpenTween,TweenMain,C:\repos\opentween_OpenTween\OpenTween\Tween.cs,doReTweetOfficial,The following switch statement is missing a default case: switch (MessageBox.Show(QuestionText' "Retweet"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question))                      {                          case DialogResult.Cancel:                          case DialogResult.No:                              _DoFavRetweetFlags = false;                              return;                      }
Missing Default,OpenTween,Twitter,C:\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetApiResultCount,The following switch statement is missing a default case: switch (type)                  {                      case MyCommon.WORKERTYPE.Favorites:                          if (SettingManager.Common.FavoritesCountApi != 0)                              return SettingManager.Common.FavoritesCountApi;                          break;                      case MyCommon.WORKERTYPE.List:                          if (SettingManager.Common.ListCountApi != 0)                              return SettingManager.Common.ListCountApi;                          break;                      case MyCommon.WORKERTYPE.PublicSearch:                          if (SettingManager.Common.SearchCountApi != 0)                              return SettingManager.Common.SearchCountApi;                          break;                      case MyCommon.WORKERTYPE.UserTimeline:                          if (SettingManager.Common.UserTimelineCountApi != 0)                              return SettingManager.Common.UserTimelineCountApi;                          break;                  }
Missing Default,OpenTween.Models,FilterTabModel,C:\repos\opentween_OpenTween\OpenTween\Models\FilterTabModel.cs,AddFiltered,The following switch statement is missing a default case: switch (ft.ExecFilter(post))   //フィルタクラスでヒット判定                          {                              case MyCommon.HITRESULT.None:                                  break;                              case MyCommon.HITRESULT.Copy:                                  if (rslt != MyCommon.HITRESULT.CopyAndMark) rslt = MyCommon.HITRESULT.Copy;                                  break;                              case MyCommon.HITRESULT.CopyAndMark:                                  rslt = MyCommon.HITRESULT.CopyAndMark;                                  break;                              case MyCommon.HITRESULT.Move:                                  rslt = MyCommon.HITRESULT.Move;                                  break;                              case MyCommon.HITRESULT.Exclude:                                  rslt = MyCommon.HITRESULT.Exclude;                                  goto exit_for;                          }
Missing Default,OpenTween.Models,TabInformations,C:\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,DistributePosts,The following switch statement is missing a default case: switch (tab.AddFiltered(post))                          {                              case MyCommon.HITRESULT.Copy:                                  filterHit = true;                                  break;                              case MyCommon.HITRESULT.CopyAndMark:                                  filterHit = true;                                  mark = true;                                  break;                              case MyCommon.HITRESULT.Move:                                  filterHit = true;                                  moved = true;                                  break;                              case MyCommon.HITRESULT.None:                                  break;                              case MyCommon.HITRESULT.Exclude:                                  if (tab.TabType == MyCommon.TabUsageType.Mentions)                                      excludedReply = true;                                  break;                          }
Missing Default,OpenTween.Models,TabInformations,C:\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,FilterAll,The following switch statement is missing a default case: switch (tab.AddFiltered(post' immediately: true))                          {                              case MyCommon.HITRESULT.Copy:                                  filterHit = true;                                  break;                              case MyCommon.HITRESULT.CopyAndMark:                                  filterHit = true;                                  mark = true;                                  break;                              case MyCommon.HITRESULT.Move:                                  filterHit = true;                                  moved = true;                                  break;                              case MyCommon.HITRESULT.None:                                  break;                              case MyCommon.HITRESULT.Exclude:                                  excluded = true;                                  break;                          }
Missing Default,OpenTween.OpenTweenCustomControl,DetailsListView,C:\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case WM_ERASEBKGND:                      if (this.changeBounds != Rectangle.Empty)                          m.Msg = 0;                      break;                  case WM_PAINT:                      if (this.changeBounds != Rectangle.Empty)                      {                          NativeMethods.ValidateRect(this.Handle' IntPtr.Zero);                          this.Invalidate(this.changeBounds);                          this.changeBounds = Rectangle.Empty;                      }                      break;                  case WM_HSCROLL:                      HScrolled?.Invoke(this' EventArgs.Empty);                      break;                  case WM_VSCROLL:                      VScrolled?.Invoke(this' EventArgs.Empty);                      break;                  case WM_MOUSEWHEEL:                  case WM_MOUSEHWHEEL:                  case WM_KEYDOWN:                      vPos = NativeMethods.GetScrollPosition(this' NativeMethods.ScrollBarDirection.SB_VERT);                      hPos = NativeMethods.GetScrollPosition(this' NativeMethods.ScrollBarDirection.SB_HORZ);                      break;                  case WM_CONTEXTMENU:                      if (m.WParam != this.Handle)                      {                          //カラムヘッダメニューを表示                          this.ColumnHeaderContextMenuStrip?.Show(new Point(m.LParam.ToInt32()));                          return;                      }                      break;                  case LVM_SETITEMCOUNT:                      m.LParam = new IntPtr(LVSICF_NOSCROLL | LVSICF_NOINVALIDATEALL);                      break;              }
Missing Default,OpenTween.Setting.Panel,NotifyPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,GetEventNotifyFlag,The following switch statement is missing a default case: switch (tbl.CheckBox.CheckState)                  {                      case CheckState.Checked:                          evt = evt | tbl.Type;                          myevt = myevt | tbl.Type;                          break;                      case CheckState.Indeterminate:                          evt = evt | tbl.Type;                          break;                      case CheckState.Unchecked:                          break;                  }
Missing Default,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following switch statement is missing a default case: switch (settingCommon.NameBalloon)              {                  case MyCommon.NameBalloonEnum.None:                      this.cmbNameBalloon.SelectedIndex = 0;                      break;                  case MyCommon.NameBalloonEnum.UserID:                      this.cmbNameBalloon.SelectedIndex = 1;                      break;                  case MyCommon.NameBalloonEnum.NickName:                      this.cmbNameBalloon.SelectedIndex = 2;                      break;              }
Missing Default,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following switch statement is missing a default case: switch (settingCommon.DispLatestPost)              {                  case MyCommon.DispTitleEnum.None:                      this.ComboDispTitle.SelectedIndex = 0;                      break;                  case MyCommon.DispTitleEnum.Ver:                      this.ComboDispTitle.SelectedIndex = 1;                      break;                  case MyCommon.DispTitleEnum.Post:                      this.ComboDispTitle.SelectedIndex = 2;                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      this.ComboDispTitle.SelectedIndex = 3;                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      this.ComboDispTitle.SelectedIndex = 4;                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      this.ComboDispTitle.SelectedIndex = 5;                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      this.ComboDispTitle.SelectedIndex = 6;                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      this.ComboDispTitle.SelectedIndex = 7;                      break;              }
Missing Default,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following switch statement is missing a default case: switch (settingCommon.ReplyIconState)              {                  case MyCommon.REPLY_ICONSTATE.None:                      this.ReplyIconStateCombo.SelectedIndex = 0;                      break;                  case MyCommon.REPLY_ICONSTATE.StaticIcon:                      this.ReplyIconStateCombo.SelectedIndex = 1;                      break;                  case MyCommon.REPLY_ICONSTATE.BlinkIcon:                      this.ReplyIconStateCombo.SelectedIndex = 2;                      break;              }
Missing Default,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following switch statement is missing a default case: switch (this.cmbNameBalloon.SelectedIndex)              {                  case 0:                      settingCommon.NameBalloon = MyCommon.NameBalloonEnum.None;                      break;                  case 1:                      settingCommon.NameBalloon = MyCommon.NameBalloonEnum.UserID;                      break;                  case 2:                      settingCommon.NameBalloon = MyCommon.NameBalloonEnum.NickName;                      break;              }
Missing Default,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following switch statement is missing a default case: switch (this.ComboDispTitle.SelectedIndex)              {                  case 0: // None                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.None;                      break;                  case 1: // Ver                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Ver;                      break;                  case 2: // Post                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.Post;                      break;                  case 3: // RepCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadRepCount;                      break;                  case 4: // AllCount                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllCount;                      break;                  case 5: // Rep+All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadAllRepCount;                      break;                  case 6: // Unread/All                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.UnreadCountAllCount;                      break;                  case 7: // Count of Status/Follow/Follower                      settingCommon.DispLatestPost = MyCommon.DispTitleEnum.OwnStatus;                      break;              }
Missing Default,OpenTween.Setting.Panel,PreviewPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following switch statement is missing a default case: switch (this.ReplyIconStateCombo.SelectedIndex)              {                  case 0:                      settingCommon.ReplyIconState = MyCommon.REPLY_ICONSTATE.None;                      break;                  case 1:                      settingCommon.ReplyIconState = MyCommon.REPLY_ICONSTATE.StaticIcon;                      break;                  case 2:                      settingCommon.ReplyIconState = MyCommon.REPLY_ICONSTATE.BlinkIcon;                      break;              }
Missing Default,OpenTween.Setting.Panel,TweetActPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetActPanel.cs,SaveConfig,The following switch statement is missing a default case: switch (this.ComboBoxPostKeySelect.SelectedIndex)              {                  case 2:                      settingCommon.PostShiftEnter = true;                      settingCommon.PostCtrlEnter = false;                      break;                  case 1:                      settingCommon.PostCtrlEnter = true;                      settingCommon.PostShiftEnter = false;                      break;                  case 0:                      settingCommon.PostCtrlEnter = false;                      settingCommon.PostShiftEnter = false;                      break;              }
Missing Default,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,LoadConfig,The following switch statement is missing a default case: switch (settingCommon.IconSize)              {                  case MyCommon.IconSizes.IconNone:                      this.IconSize.SelectedIndex = 0;                      break;                  case MyCommon.IconSizes.Icon16:                      this.IconSize.SelectedIndex = 1;                      break;                  case MyCommon.IconSizes.Icon24:                      this.IconSize.SelectedIndex = 2;                      break;                  case MyCommon.IconSizes.Icon48:                      this.IconSize.SelectedIndex = 3;                      break;                  case MyCommon.IconSizes.Icon48_2:                      this.IconSize.SelectedIndex = 4;                      break;              }
Missing Default,OpenTween.Setting.Panel,TweetPrvPanel,C:\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,SaveConfig,The following switch statement is missing a default case: switch (this.IconSize.SelectedIndex)              {                  case 0:                      settingCommon.IconSize = MyCommon.IconSizes.IconNone;                      break;                  case 1:                      settingCommon.IconSize = MyCommon.IconSizes.Icon16;                      break;                  case 2:                      settingCommon.IconSize = MyCommon.IconSizes.Icon24;                      break;                  case 3:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48;                      break;                  case 4:                      settingCommon.IconSize = MyCommon.IconSizes.Icon48_2;                      break;              }
