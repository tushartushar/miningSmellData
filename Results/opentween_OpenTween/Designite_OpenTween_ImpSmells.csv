Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The method has 224 lines of code.
Long Method,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The method has 162 lines of code.
Long Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,SetFilters,The method has 111 lines of code.
Long Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ShowDetail,The method has 125 lines of code.
Long Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,The method has 114 lines of code.
Long Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,InitializeComponent,The method has 608 lines of code.
Long Method,OpenTween,SendErrorReportForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The method has 113 lines of code.
Long Method,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The method has 422 lines of code.
Long Method,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The method has 124 lines of code.
Long Method,OpenTween,HashtagManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,InitializeComponent,The method has 201 lines of code.
Long Method,OpenTween,ListAvailable,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListAvailable.cs,InitializeComponent,The method has 153 lines of code.
Long Method,OpenTween,ListManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListManage.cs,InitializeComponent,The method has 399 lines of code.
Long Method,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The method has 107 lines of code.
Long Method,OpenTween,SearchWordDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,InitializeComponent,The method has 150 lines of code.
Long Method,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The method has 437 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The method has 378 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The method has 157 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostMessageAsyncInternal,The method has 105 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doStatusDelete,The method has 100 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SettingStripMenuItem_Click,The method has 218 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The method has 177 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The method has 418 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoBackInReplyToPostTree,The method has 112 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The method has 230 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAsync,The method has 151 lines of code.
Long Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The method has 2147 lines of code.
Long Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreatePostsFromStatusData,The method has 147 lines of code.
Long Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateDirectMessagesFromJson,The method has 104 lines of code.
Long Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The method has 134 lines of code.
Long Method,OpenTween.Models,PostFilterRule,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeSummary,The method has 150 lines of code.
Long Method,OpenTween.Setting.Panel,ActionPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ActionPanel.cs,InitializeComponent,The method has 219 lines of code.
Long Method,OpenTween.Setting.Panel,CooperatePanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,InitializeComponent,The method has 269 lines of code.
Long Method,OpenTween.Setting.Panel,FontPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel.cs,InitializeComponent,The method has 233 lines of code.
Long Method,OpenTween.Setting.Panel,FontPanel2,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel2.cs,InitializeComponent,The method has 247 lines of code.
Long Method,OpenTween.Setting.Panel,GetCountPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The method has 141 lines of code.
Long Method,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,InitializeComponent,The method has 146 lines of code.
Long Method,OpenTween.Setting.Panel,NotifyPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,InitializeComponent,The method has 176 lines of code.
Long Method,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,InitializeComponent,The method has 188 lines of code.
Long Method,OpenTween.Setting.Panel,ProxyPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ProxyPanel.cs,InitializeComponent,The method has 106 lines of code.
Long Method,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,InitializeComponent,The method has 143 lines of code.
Complex Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,SetFilters,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,Cyclomatic complexity of the method is 14
Complex Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckMatchRule,Cyclomatic complexity of the method is 13
Complex Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckExcludeRule,Cyclomatic complexity of the method is 13
Complex Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonAddTab_Click,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonRuleCopy_Click,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonRuleMove_Click,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,TimelineScheduler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TimelineScheduler.cs,TimerCallback_Normal,Cyclomatic complexity of the method is 15
Complex Method,OpenTween,TimelineScheduler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TimelineScheduler.cs,RunUpdateTasks,Cyclomatic complexity of the method is 15
Complex Method,OpenTween,TimelineScheduler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TimelineScheduler.cs,NextTimerDelay,Cyclomatic complexity of the method is 16
Complex Method,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ShowPostDetails,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ContextMenuUserPicture_Opening,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ContextMenuPostBrowser_Opening,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweetExtractor,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractUrlEntities,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,ImageFromSelectedFile,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,ImageServiceCombo_SelectedIndexChanged,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,HashtagManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,AddHashToHistory,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,HashtagManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,AdjustHashtags,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweetFormatter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetFormatter.cs,AutoLinkHtmlInternal,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,MyCommon,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyCommon.cs,ExceptionOutMessage,Cyclomatic complexity of the method is 13
Complex Method,OpenTween,nicoms,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,Cyclomatic complexity of the method is 55
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,LoadConfig,Cyclomatic complexity of the method is 15
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,Cyclomatic complexity of the method is 30
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ChangeItemStyleRead,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,Cyclomatic complexity of the method is 16
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FavAddAsyncInternal,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FavRemoveAsyncInternal,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostMessageAsyncInternal,Cyclomatic complexity of the method is 13
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RetweetAsyncInternal,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FavoriteChange,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ContextMenuOperate_Opening,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doStatusDelete,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SettingStripMenuItem_Click,Cyclomatic complexity of the method is 18
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveSpecifiedTab,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetListProperty,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ShowSuplDialog,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FormatStatusText,Cyclomatic complexity of the method is 17
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawItem,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DoTabSearch,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoFav,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoSamePostToAnotherTab,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoPost,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoRelPost,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoInReplyToPostTree,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoBackInReplyToPostTree,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveLogMenuItem_Click,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,Cyclomatic complexity of the method is 34
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTasktrayIcon,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ContextMenuTabProperty_Opening,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddTabMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ProcessDialogKey,Cyclomatic complexity of the method is 22
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CheckReplyTo,Cyclomatic complexity of the method is 14
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAsync,Cyclomatic complexity of the method is 18
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnWidthChanged,Cyclomatic complexity of the method is 14
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_DragDrop,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Shown,Cyclomatic complexity of the method is 15
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doReTweetOfficial,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SearchButton_Click,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,UndoRemoveTabMenuItem_Click,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MenuItemOperate_DropDownOpening,Cyclomatic complexity of the method is 8
Complex Method,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyEvent,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetApiResultCount,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreatePostsFromStatusData,Cyclomatic complexity of the method is 14
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreatePostsFromJson,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetRelatedResult,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateDirectMessagesFromJson,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateDirectMessagesEventFromJson,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,ReplaceTextFromApi,Cyclomatic complexity of the method is 9
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateAccessibleText,Cyclomatic complexity of the method is 12
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,ExtractEntities,Cyclomatic complexity of the method is 10
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,userStream_MessageReceived,Cyclomatic complexity of the method is 11
Complex Method,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,Cyclomatic complexity of the method is 31
Complex Method,OpenTween.Api,TwitterStreamObservable,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\TwitterStreamObservable.cs,ParseLine,Cyclomatic complexity of the method is 8
Complex Method,OpenTween.Models,FilterTabModel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\FilterTabModel.cs,AddFiltered,Cyclomatic complexity of the method is 10
Complex Method,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,RemoveTab,Cyclomatic complexity of the method is 9
Complex Method,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,SubmitUpdate,Cyclomatic complexity of the method is 16
Complex Method,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,DistributePosts,Cyclomatic complexity of the method is 12
Complex Method,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,AddPost,Cyclomatic complexity of the method is 10
Complex Method,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,FilterAll,Cyclomatic complexity of the method is 17
Complex Method,OpenTween.Models,PostFilterRule,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeFiltersExpr,Cyclomatic complexity of the method is 12
Complex Method,OpenTween.Models,PostFilterRule,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeSummary,Cyclomatic complexity of the method is 29
Complex Method,OpenTween.OpenTweenCustomControl,DetailsListView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,Cyclomatic complexity of the method is 17
Complex Method,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,SaveConfig,Cyclomatic complexity of the method is 9
Long Parameter List,OpenTween,DateTimeUtc,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DateTimeUtc.cs,DateTimeUtc,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Parameter List,OpenTween,DateTimeUtc,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DateTimeUtc.cs,DateTimeUtc,The method has 7 parameters. Parameters: year' month' day' hour' minute' second' millisecond
Long Parameter List,OpenTween,ThrottlingTimer,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ThrottlingTimer.cs,ThrottlingTimer,The method has 5 parameters. Parameters: timerCallback' interval' maxWait' leading' trailing
Long Parameter List,OpenTween,HashtagManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,HashtagManage,The method has 6 parameters. Parameters: hashSuplForm' history' permanentHash' IsPermanent' IsHead' IsNotAddToAtReply
Long Parameter List,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,Notify,The method has 6 parameters. Parameters: notificationType' id' title' text' icon' url
Long Parameter List,OpenTween,SearchOptions,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,SearchOptions,The method has 5 parameters. Parameters: type' query' newTab' caseSensitive' useRegex
Long Parameter List,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostMessageAsyncInternal,The method has 5 parameters. Parameters: p' ct' postParams' uploadService' uploadItems
Long Parameter List,OpenTween,IInternetSecurityManager,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,ProcessUrlAction,The method has 8 parameters. Parameters: pwszUrl' dwAction' pPolicy' cbPolicy' pContext' cbContext' dwFlags' dwReserved
Long Parameter List,OpenTween,IInternetSecurityManager,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,QueryCustomPolicy,The method has 7 parameters. Parameters: pwszUrl' guidKey' ppPolicy' pcbPolicy' pContext' cbContext' dwReserved
Long Parameter List,OpenTween,InternetSecurityManager,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,ProcessUrlAction,The method has 8 parameters. Parameters: pwszUrl' dwAction' pPolicy' cbPolicy' pContext' cbContext' dwFlags' dwReserved
Long Parameter List,OpenTween,InternetSecurityManager,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,QueryCustomPolicy,The method has 7 parameters. Parameters: pwszUrl' guidKey' ppPolicy' pcbPolicy' pContext' cbContext' dwReserved
Long Parameter List,OpenTween.Api,TwitterApi,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\TwitterApi.cs,StatusesUpdate,The method has 6 parameters. Parameters: status' replyToId' mediaIds' autoPopulateReplyMetadata' excludeReplyUserIds' attachmentUrl
Long Parameter List,OpenTween.Api,TwitterApi,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\TwitterApi.cs,SearchTweets,The method has 5 parameters. Parameters: query' lang' count' maxId' sinceId
Long Parameter List,OpenTween.Api,TwitterApi,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\TwitterApi.cs,ListsStatuses,The method has 5 parameters. Parameters: listId' count' maxId' sinceId' includeRTs
Long Parameter List,OpenTween.Connection,Networking,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\Networking.cs,SetWebProxy,The method has 5 parameters. Parameters: proxyType' proxyAddress' proxyPort' proxyUser' proxyPassword
Long Parameter List,OpenTween.Connection,OAuthEchoHandler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthEchoHandler.cs,CreateHandler,The method has 7 parameters. Parameters: innerHandler' authServiceProvider' consumerKey' consumerSecret' accessToken' accessSecret' realm
Long Parameter List,OpenTween.Connection,OAuthHandler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthHandler.cs,OAuthHandler,The method has 5 parameters. Parameters: innerHandler' consumerKey' consumerSecret' accessToken' accessSecret
Long Parameter List,OpenTween.Connection,OAuthUtility,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,CreateAuthorization,The method has 8 parameters. Parameters: httpMethod' requestUri' query' consumerKey' consumerSecret' token' tokenSecret' realm
Long Parameter List,OpenTween.Connection,OAuthUtility,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,CreateSignature,The method has 5 parameters. Parameters: consumerSecret' tokenSecret' method' uri' parameter
Long Parameter List,OpenTween.Models,PostFilterRule,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeFiltersExpr,The method has 10 parameters. Parameters: postParam' filterName' filterBody' filterSource' filterRt' useRegex' caseSensitive' useNameField' useLambda' filterByUrl
Long Parameter List,OpenTween.Models,PostFilterRule,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,MakeGenericFilter,The method has 6 parameters. Parameters: postParam' targetFieldName' pattern' useRegex' caseSensitive' exactMatch
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SelectionSearchContextMenuItem is 30.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchWikipediaContextMenuItem is 30.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchPublicSearchContextMenuItem is 33.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchPostsDetailToolStripMenuItem is 34.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchAtPostsDetailToolStripMenuItem is 36.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ListManageUserContextToolStripMenuItem is 38.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SelectionTranslationToolStripMenuItem is 37.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ShowFriendShipToolStripMenuItem is 31.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ListManageUserContextToolStripMenuItem3 is 39.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter ShowUserStatusToolStripMenuItem is 31.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchPostsDetailNameToolStripMenuItem is 38.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SearchAtPostsDetailNameToolStripMenuItem is 40.
Long Identifier,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,,The length of the parameter SaveIconPictureToolStripMenuItem is 32.
Long Identifier,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,,The length of the parameter SelectionCopyToolStripMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FavoriteChange,The length of the parameter multiFavoriteChangeDialogEnable is 31.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter UrlMultibyteSplitPullDownMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter PreventSmsCommandPullDownMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter UrlAutoShortenPullDownMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter IdeographicSpaceToSpacePullDownMenuItem is 39.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter FavoriteRetweetUnofficialMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ShowUserTimelineToolStripMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter TinyUrlConvertToolStripMenuItem is 31.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter UrlConvertAutoToolStripMenuItem is 31.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter DumpPostClassToolStripMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ListManageUserContextToolStripMenuItem2 is 39.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ReTweetUnofficialStripMenuItem is 30.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter FavoriteRetweetUnofficialContextMenu is 36.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter ShowUserTimelineContextMenuItem is 31.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter TwitterApiStatusToolStripMenuItem is 33.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter LockListSortOrderToolStripMenuItem is 34.
Long Identifier,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,,The length of the parameter IdeographicSpaceToSpaceMenuItem is 31.
Long Identifier,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,,The length of the parameter url_invalid_without_protocol_preceding_chars is 44.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_DOWNLOAD_SIGNED_ACTIVEX is 33.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_SCRIPT_OVERRIDE_SAFETY is 32.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_TREATASUNTRUSTED is 34.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_ACTIVEX_NO_WEBOC_SCRIPT is 33.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_HTML_SUBMIT_FORMS_FROM is 32.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_HTML_SUBMIT_FORMS_TO is 30.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_HTML_SUBFRAME_NAVIGATE is 32.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_SHELL_INSTALL_DTITEMS is 31.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_SILENT_LOGON_OK is 37.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_MUST_PROMPT_USER is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT is 40.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY is 36.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_AUTHENTICATE_CLEARTEXT_OK is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE is 41.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_AUTHENTICATE_MUTUAL_ONLY is 34.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_COOKIES_SESSION_THIRD_PARTY is 37.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_ADDING_CHANNELS is 41.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_EDITING_CHANNELS is 42.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS is 43.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS is 46.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS is 47.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS is 48.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING is 41.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_INFODELIVERY_CURR_MAX is 31.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_CHANNEL_SOFTDIST_MIN is 30.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_CHANNEL_SOFTDIST_PERMISSIONS is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CHANNEL_SOFTDIST_PRECACHE is 35.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL is 38.
Long Identifier,OpenTween,WebBrowserAPI,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,,The length of the parameter URLACTION_CHANNEL_SOFTDIST_MAX is 30.
Long Identifier,OpenTween.Setting.Panel,CooperatePanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,,The length of the parameter ImgAzyobuziNetDisabledInDMCheckBox is 34.
Long Statement,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.ListViewGroup listViewGroup1 = new System.Windows.Forms.ListViewGroup("Timeline"' System.Windows.Forms.HorizontalAlignment.Left); " is 150.
Long Statement,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.ListViewGroup listViewGroup2 = new System.Windows.Forms.ListViewGroup("Others"' System.Windows.Forms.HorizontalAlignment.Left); " is 148.
Long Statement,OpenTween,MyApplication,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,Main,The length of the statement  "                    MessageBox.Show(text' MyCommon.ReplaceAppName(Properties.Resources.StartupText2)' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 132.
Long Statement,OpenTween,MyApplication,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,WarnIfRunAsAdministrator,The length of the statement  "                var message = string.Format(Properties.Resources.WarnIfRunAsAdministrator_Message' ApplicationSettings.ApplicationName); " is 120.
Long Statement,OpenTween,MyApplication,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,GetPreviousProcess,The length of the statement  "                    .FirstOrDefault(p => p.MainModule.FileName.Equals(currentProcess.MainModule.FileName' StringComparison.OrdinalIgnoreCase)); " is 123.
Long Statement,OpenTween,MyApplication,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,SetConfigDirectoryPath,The length of the statement  "                            var message = string.Format(Properties.Resources.SettingPath_Relocation' Application.StartupPath' MyCommon.settingPath); " is 120.
Long Statement,OpenTween,AtIdSupplement,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AtIdSupplement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AtIdSupplement)); " is 134.
Long Statement,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,Setting_FormClosing,The length of the statement  "                if (MessageBox.Show(Properties.Resources.Setting_FormClosing1' "Confirm"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel) " is 150.
Long Statement,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The length of the statement  "                    if (path.StartsWith("\""' StringComparison.Ordinal) && path.Length > 2 && path.IndexOf("\""' 2' StringComparison.Ordinal) > -1) " is 127.
Long Statement,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AppendSettingDialog)); " is 139.
Long Statement,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The length of the statement  "            this.TreeViewSetting.BeforeSelect += new System.Windows.Forms.TreeViewCancelEventHandler(this.TreeViewSetting_BeforeSelect); " is 124.
Long Statement,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,InitializeComponent,The length of the statement  "            this.GetPeriodPanel.IntervalChanged += new System.EventHandler<OpenTween.IntervalChangedEventArgs>(this.GetPeriodPanel_IntervalChanged); " is 136.
Long Statement,OpenTween,AuthDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AuthDialog.cs,AuthLinkLabel_LinkClicked,The length of the statement  "                MessageBox.Show(this' string.Format(Properties.Resources.BrowserStartFailed' ex.ErrorCode)' this.Text' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 149.
Long Statement,OpenTween,AuthDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AuthDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AuthDialog)); " is 130.
Long Statement,OpenTween,AuthDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AuthDialog.cs,InitializeComponent,The length of the statement  "            this.AuthLinkLabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.AuthLinkLabel_LinkClicked); " is 124.
Long Statement,OpenTween,DateTimeUtc,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DateTimeUtc.cs,TryParseExact,The length of the statement  "            if (DateTimeOffset.TryParseExact(input' formats' formatProvider' DateTimeStyles.AssumeUniversal' out var datetimeOffset)) " is 121.
Long Statement,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,CreateListViewItem,The length of the statement  "            string[] s = { source.CreatedAt.ToLocalTimeString()' source.Event.ToUpper(CultureInfo.CurrentCulture)' source.Username' source.Target }; " is 136.
Long Statement,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,IsFilterMatch,The length of the statement  "                        MessageBox.Show(Properties.Resources.ButtonOK_ClickText3 + ex.Message' ""' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 125.
Long Statement,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,SaveLogButton_Click,The length of the statement  "                    SaveFileDialog1.FileName = $"{ApplicationSettings.AssemblyName}Events{_curTab.Tag}{DateTimeUtc.Now.ToLocalTime():yyMMdd-HHmmss}.tsv"; " is 133.
Long Statement,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,SaveLogButton_Click,The length of the statement  "                    SaveFileDialog1.FileName = $"{ApplicationSettings.AssemblyName}Events{DateTimeUtc.Now.ToLocalTime():yyMMdd-HHmmss}.tsv"; " is 120.
Long Statement,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventViewerDialog)); " is 137.
Long Statement,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The length of the statement  "            this.EventList.CacheVirtualItems += new System.Windows.Forms.CacheVirtualItemsEventHandler(this.EventList_CacheVirtualItems); " is 125.
Long Statement,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,InitializeComponent,The length of the statement  "            this.EventList.RetrieveVirtualItem += new System.Windows.Forms.RetrieveVirtualItemEventHandler(this.EventList_RetrieveVirtualItem); " is 131.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonDelete_Click,The length of the statement  "            var rslt = MessageBox.Show(tmp' Properties.Resources.ButtonDelete_ClickText2' MessageBoxButtons.OKCancel' MessageBoxIcon.Question); " is 131.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,The length of the statement  "                MessageBox.Show(Properties.Resources.ButtonOK_ClickText1' Properties.Resources.ButtonOK_ClickText2' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 150.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,ButtonOK_Click,The length of the statement  "                    MessageBox.Show(Properties.Resources.ButtonOK_ClickText4' Properties.Resources.ButtonOK_ClickText2' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 144.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,IsValidRegexp,The length of the statement  "                MessageBox.Show(Properties.Resources.ButtonOK_ClickText3 + ex.Message' Properties.Resources.ButtonOK_ClickText2' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 163.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckMatchRule,The length of the statement  "                if (MyCommon.IsNullOrEmpty(UID.Text) && MyCommon.IsNullOrEmpty(MSG1.Text) && MyCommon.IsNullOrEmpty(TextSource.Text) && CheckRetweet.Checked == false) " is 150.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckExcludeRule,The length of the statement  "                if (MyCommon.IsNullOrEmpty(ExUID.Text) && MyCommon.IsNullOrEmpty(ExMSG1.Text) && MyCommon.IsNullOrEmpty(TextExSource.Text) && CheckExRetweet.Checked == false) " is 158.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckExcludeRule,The length of the statement  "                if (MyCommon.IsNullOrEmpty(ExMSG2.Text) && MyCommon.IsNullOrEmpty(TextExSource.Text) && CheckExRetweet.Checked == false) " is 120.
Long Statement,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FilterDialog)); " is 132.
Long Statement,OpenTween,IndexedSortedSet<T>,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\IndexedSortedSet.cs,CopyTo,The length of the statement  "                throw new ArgumentException($"{nameof(arrayIndex)} is equal to or greater than {nameof(array)}.Length."' nameof(arrayIndex)); " is 125.
Long Statement,OpenTween,LoginDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\LoginDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoginDialog)); " is 131.
Long Statement,OpenTween,SendErrorReportForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,buttonSendByDM_Click,The length of the statement  "                MessageBox.Show(Properties.Resources.SendErrorReport_DmSendCompleted' this.Text' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 131.
Long Statement,OpenTween,SendErrorReportForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SendErrorReportForm)); " is 139.
Long Statement,OpenTween,SendErrorReportForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            this.buttonSendByDM.DataBindings.Add(new System.Windows.Forms.Binding("Enabled"' this.bindingSource' "CanSendByDM"' true)); " is 123.
Long Statement,OpenTween,SendErrorReportForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            this.textBoxErrorReport.DataBindings.Add(new System.Windows.Forms.Binding("Text"' this.bindingSource' "ReportText"' true)); " is 123.
Long Statement,OpenTween,SendErrorReportForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxAnonymouns.DataBindings.Add(new System.Windows.Forms.Binding("Checked"' this.bindingSource' "AnonymousReport"' true)); " is 131.
Long Statement,OpenTween,ErrorReport,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,SendByMailAsync,The length of the statement  "            var mailto = $"mailto:{Uri.EscapeDataString(toAddress)}?subject={Uri.EscapeDataString(subject)}&body={Uri.EscapeDataString(body)}"; " is 131.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,AppendQuoteTweetAsync,The length of the statement  "            var loadingQuoteHtml = quoteStatusIds.Select(x => FormatQuoteTweetHtml(x' Properties.Resources.LoadingText' isReply: false)); " is 125.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,GetUserId,The length of the statement  "            var m = Regex.Match(this._postBrowserStatusText' @"^https?://twitter.com/(#!/)?(?<ScreenName>[a-zA-Z0-9_]+)(/status(es)?/[0-9]+)?$"); " is 133.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,IconNameToolStripMenuItem_Click,The length of the statement  "            await this.Owner.OpenUriInBrowserAsync(imageUrl.Remove(imageUrl.LastIndexOf("_normal"' StringComparison.Ordinal)' 7)); // "_normal".Length " is 138.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ContextMenuPostBrowser_Opening,The length of the statement  "            var ma = Regex.Matches(this.PostBrowser.DocumentText' @"href=""https?://twitter.com/(#!/)?(?<ScreenName>[a-zA-Z0-9_]+)(/status(es)?/[0-9]+)?"""); " is 145.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ContextMenuPostBrowser_Opening,The length of the statement  "                if (!mu.Result("${ScreenName}").Equals(this.Owner.TwitterInstance.Username' StringComparison.InvariantCultureIgnoreCase)) " is 121.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,FriendshipAllMenuItem_Click,The length of the statement  "            var ma = Regex.Matches(this.PostBrowser.DocumentText' @"href=""https?://twitter.com/(#!/)?(?<ScreenName>[a-zA-Z0-9_]+)(/status(es)?/[0-9]+)?"""); " is 145.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,FriendshipAllMenuItem_Click,The length of the statement  "                if (!mu.Result("${ScreenName}").Equals(this.Owner.TwitterInstance.Username' StringComparison.InvariantCultureIgnoreCase)) " is 121.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetDetailsView)); " is 136.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ContextMenuUserPicture.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuUserPicture_Opening); " is 121.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ListManageUserContextToolStripMenuItem3.Click += new System.EventHandler(this.ListManageUserContextToolStripMenuItem_Click); " is 129.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchPostsDetailNameToolStripMenuItem.Click += new System.EventHandler(this.SearchPostsDetailNameToolStripMenuItem_Click); " is 128.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchAtPostsDetailNameToolStripMenuItem.Click += new System.EventHandler(this.SearchAtPostsDetailNameToolStripMenuItem_Click); " is 132.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.PostBrowser.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.PostBrowser_PreviewKeyDown); " is 120.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ContextMenuPostBrowser.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuPostBrowser_Opening); " is 121.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchPostsDetailToolStripMenuItem.Click += new System.EventHandler(this.SearchPostsDetailToolStripMenuItem_Click); " is 120.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SearchAtPostsDetailToolStripMenuItem.Click += new System.EventHandler(this.SearchAtPostsDetailToolStripMenuItem_Click); " is 124.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.ListManageUserContextToolStripMenuItem.Click += new System.EventHandler(this.ListManageUserContextToolStripMenuItem_Click); " is 128.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SelectionTranslationToolStripMenuItem.Click += new System.EventHandler(this.SelectionTranslationToolStripMenuItem_Click); " is 126.
Long Statement,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The length of the statement  "            this.SourceLinkLabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.SourceLinkLabel_LinkClicked); " is 128.
Long Statement,OpenTween,TweetExtractor,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractMentionEntities,The length of the statement  "            var matchesAtList = Regex.Matches(text' @"(?<=^|[^a-zA-Z0-9_/])([@＠][a-zA-Z0-9_]{1'20}/[a-zA-Z][a-zA-Z0-9\p{IsLatin-1Supplement}\-]{0'79})"); " is 141.
Long Statement,OpenTween,TweetExtractor,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractHashtagEntities,The length of the statement  "                var endPos = startPos + text.GetCodepointCount(groupHashtagSharp.Index' groupHashtagSharp.Index + groupHashtagSharp.Length + groupHashtagText.Length); " is 150.
Long Statement,OpenTween,WaitingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WaitingDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WaitingDialog)); " is 133.
Long Statement,OpenTween,InputDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\InputDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InputDialog)); " is 131.
Long Statement,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,ImageFromSelectedFile,The length of the statement  "                                string.Format(Properties.Resources.PostPictureWarn3' this.ServiceName' MakeAvailableServiceText(ext' size)' ext' item.Name)' " is 124.
Long Statement,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MediaSelector)); " is 133.
Long Statement,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.ImagefilePathText.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 129.
Long Statement,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.ImagePageCombo.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 126.
Long Statement,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.FilePickButton.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 126.
Long Statement,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,InitializeComponent,The length of the statement  "            this.ImageServiceCombo.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.ImageSelection_PreviewKeyDown); " is 129.
Long Statement,OpenTween,HashtagManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,AdjustHashtags,The length of the statement  "                        if (isShowWarn) MessageBox.Show("Invalid hashtag. -> " + hash' "Hashtag warning"' MessageBoxButtons.OK' MessageBoxIcon.Asterisk); " is 129.
Long Statement,OpenTween,HashtagManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\HashtagManage.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(HashtagManage)); " is 133.
Long Statement,OpenTween,ListAvailable,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListAvailable.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListAvailable)); " is 133.
Long Statement,OpenTween,ListManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListManage.cs,ListsList_SelectedIndexChanged,The length of the statement  "            this.GetMoreUsersButton.Text = this.UserList.Items.Count > 0 ? Properties.Resources.ListManageGetMoreUsers2 : Properties.Resources.ListManageGetMoreUsers1; " is 155.
Long Statement,OpenTween,ListManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListManage.cs,DeleteUserButton_Click,The length of the statement  "                if (MessageBox.Show(Properties.Resources.ListManageDeleteUser1' ApplicationSettings.ApplicationName' MessageBoxButtons.OKCancel) == DialogResult.OK) " is 148.
Long Statement,OpenTween,ListManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListManage.cs,DeleteListButton_Click,The length of the statement  "                if (MessageBox.Show(Properties.Resources.ListManageDeleteLists1' ApplicationSettings.ApplicationName' MessageBoxButtons.OKCancel) == DialogResult.OK) " is 149.
Long Statement,OpenTween,ListManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListManage.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListManage)); " is 130.
Long Statement,OpenTween,TabsDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TabsDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TabsDialog)); " is 130.
Long Statement,OpenTween,TweetThumbnail,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetThumbnail.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetThumbnail)); " is 134.
Long Statement,OpenTween,UpdateDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UpdateDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UpdateDialog)); " is 132.
Long Statement,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                    BindingFlags.CreateInstance' null' null' new object[] { "DIRECT_MESSAGE"' "DirectMessage" }' CultureInfo.InvariantCulture); " is 123.
Long Statement,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                    BindingFlags.CreateInstance' null' null' new object[] { "USERSTREAM_EVENT"' "UserStream Event" }' CultureInfo.InvariantCulture); " is 128.
Long Statement,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                _targetConnector.GetType().InvokeMember("EncryptionAlgorithm"' BindingFlags.SetProperty' null' _targetConnector' new object[] { encryptType }' CultureInfo.InvariantCulture); " is 173.
Long Statement,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,RegisterGrowl,The length of the statement  "                var mi = _targetConnector.GetType().GetMethod("Register"' new Type[] { _growlApp.GetType()' _connector.GetType("Growl.Connector.NotificationType[]") }); " is 152.
Long Statement,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,Notify,The length of the statement  "            _targetConnector!.GetType().InvokeMember("Notify"' BindingFlags.InvokeMethod' null' _targetConnector' new object[] { n' cc }' CultureInfo.InvariantCulture); " is 156.
Long Statement,OpenTween,InputTabName,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\InputTabName.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InputTabName)); " is 132.
Long Statement,OpenTween,MyLists,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyLists.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MyLists)); " is 127.
Long Statement,OpenTween,MyLists,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyLists.cs,InitializeComponent,The length of the statement  "            this.ListsCheckedListBox.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.ListsCheckedListBox_ItemCheck); " is 121.
Long Statement,OpenTween,OpenURL,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OpenURL.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(OpenURL)); " is 127.
Long Statement,OpenTween,SearchWordDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SearchWordDialog)); " is 136.
Long Statement,OpenTween,SearchWordDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SearchWordDialog.cs,InitializeComponent,The length of the statement  "            this.linkLabelSearchHelp.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabelSearchHelp_LinkClicked); " is 136.
Long Statement,OpenTween,SettingBase<T>,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,LoadSettings,The length of the statement  "                            MessageBox.Show("File: " + GetSettingFilePath(FileId) + Environment.NewLine + "Use old setting file' because application can't read this setting file."); " is 153.
Long Statement,OpenTween,SettingBase<T>,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,LoadSettings,The length of the statement  "                MessageBox.Show("File: " + GetSettingFilePath(FileId) + Environment.NewLine + "Use default setting' because application can't read this setting file."); " is 152.
Long Statement,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtmlAsync,The length of the statement  "                m.Groups[1].Value + await this.ExpandUrlAsync(m.Groups[2].Value' redirectLimit).ConfigureAwait(false) + m.Groups[3].Value); " is 123.
Long Statement,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ShortenByBitlyAsync,The length of the statement  "            if (MyCommon.IsNullOrEmpty(this.BitlyAccessToken) && (MyCommon.IsNullOrEmpty(this.BitlyId) || MyCommon.IsNullOrEmpty(this.BitlyKey))) " is 133.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,DoChangeIcon,The length of the statement  "                MessageBox.Show("Err:" + ex.Message + Environment.NewLine + Properties.Resources.ChangeIconToolStripMenuItem_ClickText4); " is 121.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UserInfoDialog)); " is 134.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.ContextMenuRecentPostBrowser.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuRecentPostBrowser_Opening); " is 133.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.RecentPostBrowser.Navigating += new System.Windows.Forms.WebBrowserNavigatingEventHandler(this.WebBrowser_Navigating); " is 123.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.DescriptionBrowser.Navigating += new System.Windows.Forms.WebBrowserNavigatingEventHandler(this.WebBrowser_Navigating); " is 124.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.LinkLabelTweet.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked); " is 121.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.LinkLabelFollowers.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked); " is 125.
Long Statement,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,InitializeComponent,The length of the statement  "            this.LinkLabelFollowing.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked); " is 125.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.FirstCountApi != 0 && !Twitter.VerifyFirstApiResultCount(SettingManager.Common.FirstCountApi)) " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.FavoritesCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.Favorites' SettingManager.Common.FavoritesCountApi)) " is 154.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.ListCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.List' SettingManager.Common.ListCountApi)) " is 139.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.SearchCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.PublicSearch' SettingManager.Common.SearchCountApi)) " is 151.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            if (SettingManager.Common.UserTimelineCountApi != 0 && !Twitter.VerifyApiResultCount(MyCommon.WORKERTYPE.UserTimeline' SettingManager.Common.UserTimelineCountApi)) " is 163.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            tw.Initialize(SettingManager.Common.Token' SettingManager.Common.TokenSecret' SettingManager.Common.UserName' SettingManager.Common.UserId); " is 140.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            ImageSelector.Initialize(tw' this.tw.Configuration' SettingManager.Common.UseImageServiceName' SettingManager.Common.UseImageService); " is 134.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            this.RefreshThrottlingTimer = ThrottlingTimer.Throttle(() => this.InvokeAsync(() => this.RefreshTimeline())' streamingRefreshInterval); " is 135.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            this.selectionDebouncer = ThrottlingTimer.Debounce(() => this.InvokeAsync(() => this.UpdateSelectedPost())' TimeSpan.FromMilliseconds(100)' leading: true); " is 155.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The length of the statement  "            this.saveConfigDebouncer = ThrottlingTimer.Debounce(() => this.InvokeAsync(() => this.SaveConfigsAll(ifModified: true))' TimeSpan.FromSeconds(1)); " is 146.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The length of the statement  "            if (this.ExistCurrentPost && currentPost != null && StatusText.Text.Trim() == string.Format("RT @{0}: {1}"' currentPost.ScreenName' currentPost.TextFromApi)) " is 157.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The length of the statement  "                var ret = MessageBox.Show(message' ApplicationSettings.ApplicationName' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button2); " is 157.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The length of the statement  "                var ret = MessageBox.Show(Properties.Resources.PostLengthOverMessage1' Properties.Resources.PostLengthOverMessage2' MessageBoxButtons.OKCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2); " is 202.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FavRemoveAsyncInternal,The length of the statement  "                    p.Report(string.Format(Properties.Resources.GetTimelineWorker_RunWorkerCompletedText17' allCount' statusIds.Count' failedCount)); " is 129.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveSpecifiedTab,The length of the statement  "                    this.ListTab.SelectTab((this._beforeSelectedTab != null && this.ListTab.TabPages.Contains(this._beforeSelectedTab)) ? this._beforeSelectedTab : this.ListTab.TabPages[0]); " is 170.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_MouseMove,The length of the statement  "                var dragEnableRectangle = new Rectangle(_tabMouseDownPoint.X - (SystemInformation.DragSize.Width / 2)' _tabMouseDownPoint.Y - (SystemInformation.DragSize.Height / 2)' SystemInformation.DragSize.Width' SystemInformation.DragSize.Height); " is 236.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FormatStatusText,The length of the statement  "                if (Regex.IsMatch(statusText' @"^[+\-\[\]\s\\.'*/(){}^~|='&%$#""<>?]*(d|dm|m)([+\-\[\]\s\\.'*/(){}^~|='&%$#""<>?]+|$)"' RegexOptions.IgnoreCase) " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The length of the statement  "                            e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"' " is 189.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "            var realIconSize = new SizeF(this._iconSz * this.CurrentScaleFactor.Width' this._iconSz * this.CurrentScaleFactor.Height).ToSize(); " is 131.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "                iconRect = Rectangle.Intersect(new Rectangle(e.Item.GetBounds(ItemBoundsPortion.Icon).Location' realIconSize)' itemRect); " is 121.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "                iconRect = Rectangle.Intersect(new Rectangle(e.Item.GetBounds(ItemBoundsPortion.Icon).Location' new Size(1' 1))' itemRect); " is 123.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The length of the statement  "                var stateRect = Rectangle.Intersect(new Rectangle(new Point(iconRect.X + realIconSize.Width + 2' iconRect.Y)' realStateSize)' itemRect); " is 136.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DoTabSearch,The length of the statement  "                MessageBox.Show(Properties.Resources.DoTabSearchText2' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DoTabSearch,The length of the statement  "                MessageBox.Show(Properties.Resources.DoTabSearchText1' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 138.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DoTabSearch,The length of the statement  "                MessageBox.Show(Properties.Resources.DoTabSearchText2' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ShowSearchDialog,The length of the statement  "                        MessageBox.Show(Properties.Resources.DoTabSearchText1' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 138.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ShowSearchDialog,The length of the statement  "                        MessageBox.Show(Properties.Resources.DoTabSearchText2' Properties.Resources.DoTabSearchText3' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The length of the statement  "                if (_statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 || " is 124.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The length of the statement  "                    .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })' " is 132.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The length of the statement  "                        if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults) " is 193.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The length of the statement  "                        sb.AppendFormat("{0}:{1} [https://twitter.com/{0}/status/{2}]{3}"' post.ScreenName' post.TextSingleLine' post.RetweetedId' Environment.NewLine); " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The length of the statement  "                        sb.AppendFormat("{0}:{1} [https://twitter.com/{0}/status/{2}]{3}"' post.ScreenName' post.TextSingleLine' post.StatusId' Environment.NewLine); " is 141.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoInReplyToPostTree,The length of the statement  "            if (curTabClass.TabType == MyCommon.TabUsageType.PublicSearch && currentPost.InReplyToStatusId == null && currentPost.TextFromApi.Contains("@")) " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoBackInReplyToPostTree,The length of the statement  "                        var post = postList.FirstOrDefault(pst => pst.Tab == curTabClass && isForward ? pst.Index > currentIndex : pst.Index < currentIndex); " is 133.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenURLFileMenuItem_Click,The length of the statement  "            var ret = InputDialog.Show(this' Properties.Resources.OpenURL_InputText' Properties.Resources.OpenURL_Caption' out var inputText); " is 130.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveOrCopy,The length of the statement  "                if (MessageBox.Show(_tmp' Properties.Resources.IDRuleMenuItem_ClickText5' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveOrCopy,The length of the statement  "                if (MessageBox.Show(_tmp' Properties.Resources.IDRuleMenuItem_ClickText7' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 144.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ClearTab,The length of the statement  "                if (MessageBox.Show(tmp' tabName + " " + Properties.Resources.ClearTabMenuItem_ClickText2' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel) " is 167.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The length of the statement  "                    ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText1' _statuses.MentionTab.UnreadCount + _statuses.DirectMessageTab.UnreadCount); " is 138.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The length of the statement  "                    ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText3' ur' _statuses.MentionTab.UnreadCount + _statuses.DirectMessageTab.UnreadCount); " is 142.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The length of the statement  "                    ttl.AppendFormat(Properties.Resources.OwnStatusTitle' tw.StatusesCount' tw.FriendsCount' tw.FollowersCount' tw.FollowersCount - followers); " is 139.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetStatusLabelText,The length of the statement  "            slbl.AppendFormat(Properties.Resources.SetStatusLabelText1' tur' tal' ur' al' urat' _postTimestamps.Count' _favTimestamps.Count' homeTab.TweetsPerHour); " is 152.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                    splitterDistance < this.SplitContainer1.Height - this.SplitContainer1.Panel2MinSize - this.SplitContainer1.SplitterWidth) " is 121.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                    if (dis > SplitContainer2.Panel1MinSize && dis < SplitContainer2.Height - SplitContainer2.Panel2MinSize - SplitContainer2.SplitterWidth) " is 136.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                        SplitContainer2.SplitterDistance = SplitContainer2.Height - SplitContainer2.Panel2MinSize - SplitContainer2.SplitterWidth; " is 122.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The length of the statement  "                if (previewDistance > this.SplitContainer3.Panel1MinSize && previewDistance < this.SplitContainer3.Width - this.SplitContainer3.Panel2MinSize - this.SplitContainer3.SplitterWidth) " is 179.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer1_SplitterMoved,The length of the statement  "                    var normalContainerHeight = this._mySize.Height - this.ToolStripContainer1.TopToolStripPanel.Height - this.ToolStripContainer1.BottomToolStripPanel.Height; " is 155.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer1_SplitterMoved,The length of the statement  "                    splitterDistance = Math.Min(splitterDistance' normalContainerHeight - this.SplitContainer1.SplitterWidth - this.SplitContainer1.Panel2MinSize); " is 143.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The length of the statement  "            if (this.ExistCurrentPost && currentPost != null && currentPost.InReplyToUser != null && currentPost.InReplyToStatusId != null) " is 127.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The length of the statement  "                    await this.OpenUriInBrowserAsync(MyCommon.GetStatusUrl(currentPost.InReplyToUser' currentPost.InReplyToStatusId.Value)); " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The length of the statement  "                    MessageBox.Show($"{repPost.ScreenName} / {repPost.Nickname}   ({repPost.CreatedAt.ToLocalTimeString()})" + Environment.NewLine + repPost.TextFromApi); " is 150.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The length of the statement  "                        MessageBox.Show($"{repPost.ScreenName} / {repPost.Nickname}   ({repPost.CreatedAt.ToLocalTimeString()})" + Environment.NewLine + repPost.TextFromApi); " is 150.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The length of the statement  "                    await this.OpenUriInBrowserAsync(MyCommon.GetStatusUrl(currentPost.InReplyToUser' currentPost.InReplyToStatusId.Value)); " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MultiLineMenuItem_Click,The length of the statement  "                SplitContainer2.SplitterDistance = SplitContainer2.Height - SplitContainer2.Panel2MinSize - SplitContainer2.SplitterWidth; " is 122.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAsync,The length of the statement  "                    MessageBox.Show(this' Properties.Resources.UrlConvert_BitlyAuthRequired' ApplicationSettings.ApplicationName' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 156.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,UrlConvertAutoToolStripMenuItem_Click,The length of the statement  "                while (svc == SettingManager.Common.AutoShortUrlFirst || svc == MyCommon.UrlConverter.Nicoms || svc == MyCommon.UrlConverter.Unu); " is 130.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The length of the statement  "                        if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1) " is 166.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doReTweetOfficial,The length of the statement  "                        if (isConfirm && MessageBox.Show(Questiontext' "Retweet"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == DialogResult.Cancel) " is 134.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CreateRetweetUnofficial,The length of the statement  "            statusHtml = Regex.Replace(statusHtml' "<a href=\"(?<href>.+?)\" title=\"(?<title>.+?)\">(?<text>.+?)</a>"' "${title}"); " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ApiUsageInfoMenuItem_Click,The length of the statement  "                    MessageBox.Show(Properties.Resources.ApiInfo5' Properties.Resources.ApiInfo4' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 128.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,IsTwitterId,The length of the statement  "                return !Regex.Match(name' @"^(about|jobs|tos|privacy|who_to_follow|download|messages)$"' RegexOptions.IgnoreCase).Success; " is 122.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer3_SplitterMoved,The length of the statement  "                    splitterDistance = Math.Min(splitterDistance' normalContainerWidth - this.SplitContainer3.SplitterWidth - this.SplitContainer3.Panel2MinSize); " is 142.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,_hookGlobalHotkey_HotkeyPressed,The length of the statement  "            if ((this.WindowState == FormWindowState.Normal || this.WindowState == FormWindowState.Maximized) && this.Visible && Form.ActiveForm == this) " is 141.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweenMain)); " is 129.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.UrlMultibyteSplitPullDownMenuItem.CheckedChanged += new System.EventHandler(this.UrlMultibyteSplitMenuItem_CheckedChanged); " is 128.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.PreventSmsCommandPullDownMenuItem.CheckedChanged += new System.EventHandler(this.PreventSmsCommandMenuItem_CheckedChanged); " is 128.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.UrlAutoShortenPullDownMenuItem.CheckedChanged += new System.EventHandler(this.UrlAutoShortenMenuItem_CheckedChanged); " is 122.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.IdeographicSpaceToSpacePullDownMenuItem.Click += new System.EventHandler(this.IdeographicSpaceToSpaceMenuItem_Click); " is 122.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer1.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.SplitContainer1_SplitterMoved); " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ContextMenuTabProperty.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuTabProperty_Opening); " is 121.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ImageSelector.FilePickDialogOpening += new System.EventHandler<System.EventArgs>(this.ImageSelector_FilePickDialogOpening); " is 128.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ImageSelector.FilePickDialogClosed += new System.EventHandler<System.EventArgs>(this.ImageSelector_FilePickDialogClosed); " is 126.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ImageSelector.SelectedServiceChanged += new System.EventHandler<System.EventArgs>(this.ImageSelector_SelectedServiceChanged); " is 130.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer3.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.SplitContainer3_SplitterMoved); " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer2.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.SplitContainer2_SplitterMoved); " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.SplitContainer2.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.SplitContainer2_MouseDoubleClick); " is 123.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetDetailsView.StatusChanged += new System.EventHandler<OpenTween.TweetDetailsViewStatusChengedEventArgs>(this.tweetDetailsView_StatusChanged); " is 150.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetThumbnail1.ThumbnailLoading += new System.EventHandler<System.EventArgs>(this.tweetThumbnail1_ThumbnailLoading); " is 122.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetThumbnail1.ThumbnailDoubleClick += new System.EventHandler<OpenTween.ThumbnailDoubleClickEventArgs>(this.tweetThumbnail1_ThumbnailDoubleClick); " is 153.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.tweetThumbnail1.ThumbnailImageSearchClick += new System.EventHandler<OpenTween.ThumbnailImageSearchEventArgs>(this.tweetThumbnail1_ThumbnailImageSearchClick); " is 163.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.UrlMultibyteSplitMenuItem.CheckedChanged += new System.EventHandler(this.UrlMultibyteSplitMenuItem_CheckedChanged); " is 120.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ListManageUserContextToolStripMenuItem2.Click += new System.EventHandler(this.ListManageUserContextToolStripMenuItem_Click); " is 129.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.FavoriteRetweetUnofficialContextMenu.Click += new System.EventHandler(this.FavoriteRetweetUnofficialMenuItem_Click); " is 121.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.PostStateImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("PostStateImageList.ImageStream"))); " is 136.
Long Statement,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The length of the statement  "            this.ContextMenuColumnHeader.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenuColumnHeader_Opening); " is 123.
Long Statement,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,TweenAboutBox_Load,The length of the statement  "            this.TextBoxDescription.Text = string.Format(Properties.Resources.Description' ApplicationSettings.FeedbackTwitterName' ApplicationSettings.FeedbackEmailAddress) + Environment.NewLine + Environment.NewLine " is 205.
Long Statement,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweenAboutBox)); " is 133.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreatePostsFromStatusData,The length of the statement  "            post.AccessibleText = CreateAccessibleText(textFromApi' entities' (status.RetweetedStatus ?? status).QuotedStatus' quotedStatusLink); " is 133.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetListStatus,The length of the statement  "                statuses = await this.Api.ListsStatuses(tab.ListInfo.Id' count' maxId: tab.OldestId' includeRTs: SettingManager.Common.IsListsIncludeRts) " is 137.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateAccessibleText,The length of the statement  "                            var quotedText = CreateAccessibleText(quotedStatus.FullText' quotedStatus.MergedEntities' quotedStatus: null' quotedStatusLink: null); " is 134.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateAccessibleText,The length of the statement  "                            text = text.Replace(entity.Url' string.Format(Properties.Resources.QuoteStatus_AccessibleText' quotedStatus.User.ScreenName' quotedText)); " is 138.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateAccessibleText,The length of the statement  "                var quoteText = CreateAccessibleText(quotedStatus.FullText' quotedStatus.MergedEntities' quotedStatus: null' quotedStatusLink: null); " is 133.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateHtmlAnchor,The length of the statement  "            text = Regex.Replace(text' "(^|[^a-zA-Z0-9_/&#＃@＠>=.~])(sm|nm)([0-9]{1'10})"' "$1<a href=\"https://www.nicovideo.jp/watch/$2$3\">$2$3</a>"); " is 140.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                        if (this.StoredEvent.Any(ev => ev.Username == evt.Username && ev.Eventtype == evt.Eventtype && ev.Target == evt.Target)) " is 120.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                        if (this.StoredEvent.Any(ev => ev.Username == evt.Username && ev.Eventtype == evt.Eventtype && ev.Target == evt.Target)) " is 120.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                    if (!TabInformations.GetInstance().BlockIds.Contains(eventData.Target.Id)) TabInformations.GetInstance().BlockIds.Add(eventData.Target.Id); " is 139.
Long Statement,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateEventFromJson,The length of the statement  "                    if (TabInformations.GetInstance().BlockIds.Contains(eventData.Target.Id)) TabInformations.GetInstance().BlockIds.Remove(eventData.Target.Id); " is 141.
Long Statement,OpenTween,InternetSecurityManager,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,ProcessUrlAction,The length of the statement  "                if (Regex.IsMatch(pwszUrl' @"^https?://((api\.)?twitter\.com/|([a-zA-Z0-9]+\.)?twimg\.com/)")) pPolicy = WebBrowserAPI.URLPOLICY_ALLOW; " is 135.
Long Statement,OpenTween.Api,BitlyApi,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\BitlyApi.cs,GetAccessTokenAsync,The length of the statement  "            request.Headers.Authorization = new AuthenticationHeaderValue("Basic"' Convert.ToBase64String(Encoding.UTF8.GetBytes(authzParam))); " is 131.
Long Statement,OpenTween.Connection,OAuthHandler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthHandler.cs,SendAsync,The length of the statement  "            var credential = OAuthUtility.CreateAuthorization(request.Method.ToString().ToUpperInvariant()' request.RequestUri' query' " is 122.
Long Statement,OpenTween.Connection,OAuthHandler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthHandler.cs,SendAsync,The length of the statement  "                request.Content = new StringContent(MyCommon.BuildQueryString(query)' Encoding.UTF8' "application/x-www-form-urlencoded"); " is 122.
Long Statement,OpenTween.Connection,TwitterApiConnection,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\TwitterApiConnection.cs,GetRequestTokenAsync,The length of the statement  "            var response = await GetOAuthTokenAsync(new Uri("https://api.twitter.com/oauth/request_token")' param' oauthToken: null) " is 120.
Long Statement,OpenTween.Thumbnail.Services,Nicovideo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Nicovideo.cs,BuildTooltip,The length of the statement  "            if (firstRetrieveElement != null && DateTimeUtc.TryParse(firstRetrieveElement.Value' DateTimeFormatInfo.InvariantInfo' out var firstRetrieveDate)) " is 146.
Long Statement,OpenTween.Setting.Panel,ActionPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ActionPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ActionPanel)); " is 131.
Long Statement,OpenTween.Setting.Panel,BasedPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\BasedPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BasedPanel)); " is 130.
Long Statement,OpenTween.Setting.Panel,ConnectionPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ConnectionPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConnectionPanel)); " is 135.
Long Statement,OpenTween.Setting.Panel,CooperatePanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,UserAppointUrlText_Validating,The length of the statement  "            if (!UserAppointUrlText.Text.StartsWith("http"' StringComparison.Ordinal) && !MyCommon.IsNullOrEmpty(UserAppointUrlText.Text)) " is 126.
Long Statement,OpenTween.Setting.Panel,CooperatePanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CooperatePanel)); " is 134.
Long Statement,OpenTween.Setting.Panel,CooperatePanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\CooperatePanel.cs,InitializeComponent,The length of the statement  "            this.EnableImgAzyobuziNetCheckBox.CheckedChanged += new System.EventHandler(this.EnableImgAzyobuziNetCheckBox_CheckedChanged); " is 126.
Long Statement,OpenTween.Setting.Panel,FontPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FontPanel)); " is 129.
Long Statement,OpenTween.Setting.Panel,FontPanel2,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\FontPanel2.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FontPanel2)); " is 130.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GetCountPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            this.UserTimelineTextCountApi.Validating += new System.ComponentModel.CancelEventHandler(this.UserTimelineTextCountApi_Validating); " is 131.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            this.FavoritesTextCountApi.Validating += new System.ComponentModel.CancelEventHandler(this.FavoritesTextCountApi_Validating); " is 125.
Long Statement,OpenTween.Setting.Panel,GetCountPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetCountPanel.cs,InitializeComponent,The length of the statement  "            this.GetMoreTextCountApi.Validating += new System.ComponentModel.CancelEventHandler(this.GetMoreTextCountApi_Validating); " is 121.
Long Statement,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GetPeriodPanel)); " is 134.
Long Statement,OpenTween.Setting.Panel,NotifyPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,LoadConfig,The length of the statement  "            this.ApplyEventNotifyFlag(settingCommon.EventNotifyEnabled' settingCommon.EventNotifyFlag' settingCommon.IsMyEventNotifyFlag); " is 126.
Long Statement,OpenTween.Setting.Panel,NotifyPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NotifyPanel)); " is 131.
Long Statement,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PreviewPanel)); " is 132.
Long Statement,OpenTween.Setting.Panel,ProxyPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ProxyPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProxyPanel)); " is 130.
Long Statement,OpenTween.Setting.Panel,ShortUrlPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ShortUrlPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ShortUrlPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,ShortUrlPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ShortUrlPanel.cs,InitializeComponent,The length of the statement  "            this.ComboBoxAutoShortUrlFirst.SelectedIndexChanged += new System.EventHandler(this.ComboBoxAutoShortUrlFirst_SelectedIndexChanged); " is 132.
Long Statement,OpenTween.Setting.Panel,StartupPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\StartupPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StartupPanel)); " is 132.
Long Statement,OpenTween.Setting.Panel,TweetActPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetActPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetActPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TweetPrvPanel)); " is 133.
Long Statement,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,InitializeComponent,The length of the statement  "            this.LabelDateTimeFormatApplied.VisibleChanged += new System.EventHandler(this.LabelDateTimeFormatApplied_VisibleChanged); " is 122.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://www\.(mypix\.jp|shamoji\.info)/app\.php/picture/(?<contentId>[0-9a-z]+)"' "${0}/thumb.jpg")' " is 131.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://tuna\.be/t/(?<entryId>[a-zA-Z0-9\.\-_]+)$"' "https://tuna.be/show/thumb/${entryId}")' " is 124.
Long Statement,OpenTween.Thumbnail,ThumbnailGenerator,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\ThumbnailGenerator.cs,InitializeGenerator,The length of the statement  "                new SimpleThumbnailService(@"^https?://gifmagazine\.net/post_images/(\d+)"' "https://img.gifmagazine.net/gifmagazine/images/${1}/original.gif")' " is 144.
Long Statement,OpenTween.Thumbnail,MapThumbGoogle,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbGoogle.cs,CreateStaticMapUrl,The length of the statement  "            return baseUrl + "?center=" + location + "&size=" + width + "x" + height + "&zoom=" + zoom + "&markers=" + location + "&sensor=false"; " is 134.
Long Statement,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The length of the statement  "            var topLeftTileNum = PointF.Add(centerTileNum' new SizeF(-this.ThumbnailSize.Width / 2.0f / TileSize.Width' -this.ThumbnailSize.Height / 2.0f / TileSize.Height)); " is 162.
Long Statement,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The length of the statement  "            var tileOffset = Size.Round(new SizeF(-TileSize.Width * (topLeftTileNum.X - (int)topLeftTileNum.X)' -TileSize.Height * (topLeftTileNum.Y - (int)topLeftTileNum.Y))); " is 164.
Long Statement,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The length of the statement  "            var tileCountY = (int)Math.Ceiling((double)(this.ThumbnailSize.Height + Math.Abs(tileOffset.Height)) / TileSize.Height); " is 120.
Complex Conditional,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckMatchRule,The conditional expression  "MyCommon.IsNullOrEmpty(UID.Text) && MyCommon.IsNullOrEmpty(MSG1.Text) && MyCommon.IsNullOrEmpty(TextSource.Text) && CheckRetweet.Checked == false"  is complex.
Complex Conditional,OpenTween,FilterDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\FilterDialog.cs,CheckExcludeRule,The conditional expression  "MyCommon.IsNullOrEmpty(ExUID.Text) && MyCommon.IsNullOrEmpty(ExMSG1.Text) && MyCommon.IsNullOrEmpty(TextExSource.Text) && CheckExRetweet.Checked == false"  is complex.
Complex Conditional,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,ButtonEdit_Click,The conditional expression  "TextBoxName.Modified ||                          TextBoxLocation.Modified ||                          TextBoxWeb.Modified ||                          TextBoxDescription.Modified"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The conditional expression  "!_initial && SettingManager.Common.BlinkNewMentions && newMentions && Form.ActiveForm == null"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ContextMenuOperate_Opening,The conditional expression  "tab.TabType == MyCommon.TabUsageType.DirectMessage || !this.ExistCurrentPost || post == null || post.IsDm"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The conditional expression  "_statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 ||                      _statuses.SortOrder == SortOrder.Descending && lst.Items[foundIndex].Position.Y < _iconSz + 10"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,UpdateSelectedPost,The conditional expression  "SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.None &&                 SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Post &&                 SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Ver &&                 SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.OwnStatus"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The conditional expression  "tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoRelPost,The conditional expression  "post.ScreenName == _anchorPost.ScreenName ||                      post.RetweetedBy == _anchorPost.ScreenName ||                      post.ScreenName == _anchorPost.RetweetedBy ||                      (!MyCommon.IsNullOrEmpty(post.RetweetedBy) && post.RetweetedBy == _anchorPost.RetweetedBy) ||                      _anchorPost.ReplyToList.Any(x => x.UserId == post.UserId) ||                      _anchorPost.ReplyToList.Any(x => x.UserId == post.RetweetedByUserId) ||                      post.ReplyToList.Any(x => x.UserId == _anchorPost.UserId) ||                      post.ReplyToList.Any(x => x.UserId == _anchorPost.RetweetedByUserId)"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MakeReplyOrDirectStatus,The conditional expression  "(tab.TabType == MyCommon.TabUsageType.DirectMessage && isAuto) || (!isAuto && !isReply)"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ProcessDialogKey,The conditional expression  "((keyData & Keys.Control) != Keys.Control && (keyData & Keys.Shift) != Keys.Shift) ||                                  ((keyData & Keys.Control) == Keys.Control && (keyData & Keys.Shift) == Keys.Shift)"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The conditional expression  "SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.None &&                  SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Post &&                  SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.Ver &&                  SettingManager.Common.DispLatestPost != MyCommon.DispTitleEnum.OwnStatus"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Resize,The conditional expression  "_initialLayout && SettingManager.Local != null && this.WindowState == FormWindowState.Normal && this.Visible"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doRepliedStatusOpen,The conditional expression  "this.ExistCurrentPost && currentPost != null && currentPost.InReplyToUser != null && currentPost.InReplyToStatusId != null"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriAsync,The conditional expression  "SettingManager.Common.OpenUserTimeline && !isReverseSettings ||                  !SettingManager.Common.OpenUserTimeline && isReverseSettings"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MenuItemOperate_DropDownOpening,The conditional expression  "tab.TabType == MyCommon.TabUsageType.DirectMessage || !this.ExistCurrentPost || post == null || post.IsDm"  is complex.
Complex Conditional,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,_hookGlobalHotkey_HotkeyPressed,The conditional expression  "(this.WindowState == FormWindowState.Normal || this.WindowState == FormWindowState.Maximized) && this.Visible && Form.ActiveForm == this"  is complex.
Complex Conditional,OpenTween.Models,PostFilterRule,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,Equals,The conditional expression  "other.FilterName != this.FilterName ||                      !other.FilterBody.SequenceEqual(this.FilterBody) ||                      other.FilterSource != this.FilterSource ||                      other.FilterRt != this.FilterRt ||                      other.FilterByUrl != this.FilterByUrl ||                      other.CaseSensitive != this.CaseSensitive ||                      other.UseNameField != this.UseNameField ||                      other.UseLambda != this.UseLambda ||                      other.UseRegex != this.UseRegex"  is complex.
Complex Conditional,OpenTween.Models,PostFilterRule,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostFilterRule.cs,Equals,The conditional expression  "other.ExFilterName != this.ExFilterName ||                      !other.ExFilterBody.SequenceEqual(this.ExFilterBody) ||                      other.ExFilterSource != this.ExFilterSource ||                      other.ExFilterRt != this.ExFilterRt ||                      other.ExFilterByUrl != this.ExFilterByUrl ||                      other.ExCaseSensitive != this.ExCaseSensitive ||                      other.ExUseNameField != this.ExUseNameField ||                      other.ExUseLambda != this.ExUseLambda ||                      other.ExUseRegex != this.ExUseRegex"  is complex.
Virtual Method Call from Constructor,OpenTween,ToolStripAPIGauge,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,ToolStripAPIGauge,The constructor "ToolStripAPIGauge" calls a virtual method "UpdateText".
Virtual Method Call from Constructor,OpenTween.Models,ExpandedUrlInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\PostClass.cs,ExpandedUrlInfo,The constructor "ExpandedUrlInfo" calls a virtual method "DeepExpandAsync".
Empty Catch Block,OpenTween,MyApplication,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,InitCulture,The method has an empty catch block.
Empty Catch Block,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The method has an empty catch block.
Empty Catch Block,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,PostBrowser_StatusTextChanged,The method has an empty catch block.
Empty Catch Block,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SaveIconPictureToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,MediaSelector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MediaSelector.cs,ImageServiceCombo_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,OpenTween,ListAvailable,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListAvailable.cs,RefreshButton_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,ListManage,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ListManage.cs,RefreshListsButton_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,SetImageFromTask,The method has an empty catch block.
Empty Catch Block,OpenTween,ImageListViewItem,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ImageListViewItem.cs,GetImageAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,ImageListViewItem,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ImageListViewItem.cs,GetImageAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,ImageListViewItem,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ImageListViewItem.cs,GetImageAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,MyLists,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyLists.cs,MenuItemReload_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,MyLists,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyLists.cs,ListRefreshButton_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,SettingBase<T>,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,LoadSettings,The method has an empty catch block.
Empty Catch Block,OpenTween,SettingBase<T>,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,The method has an empty catch block.
Empty Catch Block,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlAsync,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,FavAddAsyncInternal,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SettingStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DispSelectedPost,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoBackSelectPostChain,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The method has an empty catch block.
Empty Catch Block,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyEvent,The method has an empty catch block.
Empty Catch Block,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,CreateDirectMessagesEventFromJson,The method has an empty catch block.
Empty Catch Block,OpenTween,StreamAutoConnector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,Start,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,LoadRegexAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,LoadRegexAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,LoadRegexAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,MetaThumbnailService,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\MetaThumbnailService.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Nicovideo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Nicovideo.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Nicovideo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Nicovideo.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Tinami,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Tinami.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Tumblr,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Tumblr.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Tumblr,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Tumblr.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.Thumbnail.Services,Vimeo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Vimeo.cs,GetThumbnailInfoAsync,The method has an empty catch block.
Empty Catch Block,OpenTween.OpenTweenCustomControl,DetailsListView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The method has an empty catch block.
Empty Catch Block,OpenTween.OpenTweenCustomControl,DetailsListView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The method has an empty catch block.
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,UpdateEndpointLimit,The following statement contains a magic number: item.SubItems[2].Text = apiLimit.AccessLimitResetDate.ToLocalTimeString();
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Location = new System.Drawing.Point(537' 407);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Location = new System.Drawing.Point(537' 407);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ButtonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Location = new System.Drawing.Point(13' 13);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Location = new System.Drawing.Point(13' 13);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Size = new System.Drawing.Size(599' 388);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ListViewApi.Size = new System.Drawing.Size(599' 388);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 265;
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 120;
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader3.Width = 150;
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(624' 442);
Magic Number,OpenTween,ApiInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApiInfoDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(624' 442);
Magic Number,OpenTween,MyApplication,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,CheckRuntimeVersion,The following statement contains a magic number: return releaseKey >= 461808;
Magic Number,OpenTween,MyApplication,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ApplicationEvents.cs,ParseArguments,The following statement contains a magic number: return arguments.Select(x => optionPattern.Match(x))                  .Where(x => x.Success)                  .GroupBy(x => x.Groups[1].Value)                  .ToDictionary(x => x.Key' x => x.Last().Groups[2].Value);
Magic Number,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,Setting_Shown,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The following statement contains a magic number: var sep = path.IndexOf("\""' 2' StringComparison.Ordinal);
Magic Number,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The following statement contains a magic number: path.StartsWith("\""' StringComparison.Ordinal) && path.Length > 2 && path.IndexOf("\""' 2' StringComparison.Ordinal) > -1
Magic Number,OpenTween,AppendSettingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\AppendSettingDialog.cs,OpenUrl,The following statement contains a magic number: path.StartsWith("\""' StringComparison.Ordinal) && path.Length > 2 && path.IndexOf("\""' 2' StringComparison.Ordinal) > -1
Magic Number,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,EventViewerDialog,The following statement contains a magic number: this.TabEventType.HandleCreated += (s' e) => NativeMethods.SetMinTabWidth((TabControl)s' 40);
Magic Number,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,CreateCache,The following statement contains a magic number: StartIndex -= 30;
Magic Number,OpenTween,EventViewerDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\EventViewerDialog.cs,CreateCache,The following statement contains a magic number: EndIndex += 30;
Magic Number,OpenTween,Extensions,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Extensions.cs,ToCodepoints,The following statement contains a magic number: i += 2;
Magic Number,OpenTween,MouseWheelMessageFilter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MouseWheelMessageFilter.cs,ParseMessage,The following statement contains a magic number: var wheelDelta = (int)(m.WParam.ToInt64() & 0xffff0000) >> 16;
Magic Number,OpenTween,SendErrorReportForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\SendErrorReportForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.buttonNotSend' 2' 0);
Magic Number,OpenTween,TimelineScheduler,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TimelineScheduler.cs,RunUpdateTasks,The following statement contains a magic number: var updateTasks = new List<Func<Task>>(capacity: 7);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,ShowPostDetails,The following statement contains a magic number: var sb = new StringBuilder(512);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,IconNameToolStripMenuItem_Click,The following statement contains a magic number: await this.Owner.OpenUriInBrowserAsync(imageUrl.Remove(imageUrl.LastIndexOf("_normal"' StringComparison.Ordinal)' 7));
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SelectionCopyContextMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(_selText' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SelectionCopyContextMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(_selText' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(linkStr' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(linkStr' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(this._postBrowserStatusText' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,UrlCopyContextMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(this._postBrowserStatusText' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceCopyMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(this.CurrentPost.Source' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceCopyMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(this.CurrentPost.Source' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceUrlCopyMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(sourceUri.AbsoluteUri' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,SourceUrlCopyMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(sourceUri.AbsoluteUri' false' 5' 100);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.Controls.Add(this.DateTimeLabel' 2' 0);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.Controls.Add(this.SourceLinkLabel' 3' 0);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.SetRowSpan(this.UserPicture' 2);
Magic Number,OpenTween,TweetDetailsView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetDetailsView.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel1.SetColumnSpan(this.PostBrowser' 3);
Magic Number,OpenTween,TweetExtractor,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractHashtagEntities,The following statement contains a magic number: var groupHashtagSharp = match.Groups[2];
Magic Number,OpenTween,TweetExtractor,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetExtractor.cs,ExtractHashtagEntities,The following statement contains a magic number: var groupHashtagText = match.Groups[3];
Magic Number,OpenTween,WaitingDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WaitingDialog.cs,WaitingDialog,The following statement contains a magic number: this.Timeout = TimeSpan.FromMilliseconds(500);
Magic Number,OpenTween,OTBaseForm,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTBaseForm.cs,ScaleControl,The following statement contains a magic number: const float baseDpi = 96.0f;
Magic Number,OpenTween,ImageCache,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ImageCache.cs,ImageCache,The following statement contains a magic number: this.innerDictionary = new LRUCacheDictionary<string' Task<MemoryImage>>(trimLimit: 300' autoTrimCount: 100);
Magic Number,OpenTween,ImageCache,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ImageCache.cs,ImageCache,The following statement contains a magic number: this.innerDictionary = new LRUCacheDictionary<string' Task<MemoryImage>>(trimLimit: 300' autoTrimCount: 100);
Magic Number,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,DrawPlayableMark,The following statement contains a magic number: var overlaySize = Math.Min(this.Width' this.Height) / 4;
Magic Number,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,DrawPlayableMark,The following statement contains a magic number: var destRect = new Rectangle(                  (this.Width - overlaySize) / 2'                  (this.Height - overlaySize) / 2'                  overlaySize'                  overlaySize);
Magic Number,OpenTween,OTPictureBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\OTPictureBox.cs,DrawPlayableMark,The following statement contains a magic number: var destRect = new Rectangle(                  (this.Width - overlaySize) / 2'                  (this.Height - overlaySize) / 2'                  overlaySize'                  overlaySize);
Magic Number,OpenTween,TweetFormatter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetFormatter.cs,AutoLinkHtml,The following statement contains a magic number: var entitiesQuery = entities                  .Where(x => x != null)                  .Where(x => x.Indices != null && x.Indices.Length == 2);
Magic Number,OpenTween,TweetFormatter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweetFormatter.cs,EscapeHtml,The following statement contains a magic number: var result = new StringBuilder(100);
Magic Number,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,IconToByteArray,The following statement contains a magic number: using var ic = new Icon(icondata' 48' 48);
Magic Number,OpenTween,GrowlHelper,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Growl.cs,IconToByteArray,The following statement contains a magic number: using var ic = new Icon(icondata' 48' 48);
Magic Number,OpenTween,InputTabName,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\InputTabName.cs,ComboUsage_SelectedIndexChanged,The following statement contains a magic number: this.Usage = ComboUsage.SelectedIndex switch              {                  0 => MyCommon.TabUsageType.UserDefined'                  1 => MyCommon.TabUsageType.Lists'                  2 => MyCommon.TabUsageType.PublicSearch'                  _ => MyCommon.TabUsageType.Undefined'              };
Magic Number,OpenTween,MyCommon,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: return string.Format("{0}.{1}.{2}"' versionNum[0]' versionNum[1]' versionNum[2]);
Magic Number,OpenTween,MyCommon,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyCommon.cs,GetReadableVersion,The following statement contains a magic number: versionNum[3] == 0
Magic Number,OpenTween,MyCommon,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyCommon.cs,EscapeQueryString,The following statement contains a magic number: var sb = new StringBuilder(stringToEncode.Length * 2);
Magic Number,OpenTween,MyLists,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyLists.cs,FetchMembershipListIds,The following statement contains a magic number: var ownedListData = await TwitterLists.GetAllItemsAsync(x =>                  this.twitterApi.ListsOwnerships(this.twitterApi.CurrentScreenName' cursor: x' count: 1000))                      .ConfigureAwait(false);
Magic Number,OpenTween,MyLists,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyLists.cs,FetchMembershipListIds,The following statement contains a magic number: var listsUserAddedTo = await TwitterLists.GetAllItemsAsync(x =>                  this.twitterApi.ListsMemberships(this.contextScreenName' cursor: x' count: 1000' filterToOwnedLists: true))                      .ConfigureAwait(false);
Magic Number,OpenTween,nicoms,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: url = url.Substring(7);
Magic Number,OpenTween,nicoms,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: return string.Format("{0}{1}"' "https://nico.ms/"' url.Substring(13 + i));
Magic Number,OpenTween,nicoms,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: i == 0 || i == 4
Magic Number,OpenTween,nicoms,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: return string.Format("{0}{1}"' "https://nico.ms/"' url.Substring(13 + i));
Magic Number,OpenTween,nicoms,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: i == 0 || i == 4
Magic Number,OpenTween,nicoms,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\nicoms.cs,Shorten,The following statement contains a magic number: return string.Format("{0}{1}"' "https://nico.ms/"' url.Substring(25));
Magic Number,OpenTween,SettingBase<T>,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,SaveSettings,The following statement contains a magic number: const int SaveRetryMax = 3;
Magic Number,OpenTween,SettingBase<T>,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\SettingBase.cs,SaveSettings,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ShortUrl,The following statement contains a magic number: this.PurgeCount = 500;
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrl,The following statement contains a magic number: return this.ExpandUrlAsync(new Uri(uri)' 10).Result.AbsoluteUri;
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtmlAsync,The following statement contains a magic number: return HtmlLinkPattern.ReplaceAsync(html' async m =>                  m.Groups[1].Value + await this.ExpandUrlAsync(m.Groups[2].Value' redirectLimit).ConfigureAwait(false) + m.Groups[3].Value);
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,ExpandUrlHtmlAsync,The following statement contains a magic number: return HtmlLinkPattern.ReplaceAsync(html' async m =>                  m.Groups[1].Value + await this.ExpandUrlAsync(m.Groups[2].Value' redirectLimit).ConfigureAwait(false) + m.Groups[3].Value);
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,GetRedirectTo,The following statement contains a magic number: (int)response.StatusCode / 100 != 3
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,GetRedirectTo,The following statement contains a magic number: (int)response.StatusCode / 100 != 3
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,UpgradeToHttpsIfAvailable,The following statement contains a magic number: builder.Port = 443;
Magic Number,OpenTween,ShortUrl,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ShortUrl.cs,CreateDefaultHttpClient,The following statement contains a magic number: http.Timeout = TimeSpan.FromSeconds(30);
Magic Number,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,SelectionCopyToolStripMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(selectedText' false' 5' 100);
Magic Number,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,SelectionCopyToolStripMenuItem_Click,The following statement contains a magic number: Clipboard.SetDataObject(selectedText' false' 5' 100);
Magic Number,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,UserPicture_Click,The following statement contains a magic number: imageUrl = imageUrl.Remove(imageUrl.LastIndexOf("_normal"' StringComparison.Ordinal)' 7);
Magic Number,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,IsValidIconFile,The following statement contains a magic number: return this.IsValidExtension(info.Extension) &&                  info.Length < 700 * 1024 &&                  !MyCommon.IsAnimatedGif(info.FullName);
Magic Number,OpenTween,UserInfoDialog,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\UserInfoDialog.cs,IsValidIconFile,The following statement contains a magic number: return this.IsValidExtension(info.Extension) &&                  info.Length < 700 * 1024 &&                  !MyCommon.IsAnimatedGif(info.FullName);
Magic Number,OpenTween,ToolStripAPIGauge,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: this.apiGaugeBounds = new Rectangle(                  0'                  (this.Height - this._GaugeHeight * 2) / 2'                  (int)(this.Width * apiGaugeValue)'                  this._GaugeHeight              );
Magic Number,OpenTween,ToolStripAPIGauge,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: this.apiGaugeBounds = new Rectangle(                  0'                  (this.Height - this._GaugeHeight * 2) / 2'                  (int)(this.Width * apiGaugeValue)'                  this._GaugeHeight              );
Magic Number,OpenTween,ToolStripAPIGauge,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: var timeGaugeValue = this.remainMinutes >= 15 ? 1.00 : this.remainMinutes / 15;
Magic Number,OpenTween,ToolStripAPIGauge,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\ToolStripAPIGauge.cs,UpdateGaugeBounds,The following statement contains a magic number: var timeGaugeValue = this.remainMinutes >= 15 ? 1.00 : this.remainMinutes / 15;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumns,The following statement contains a magic number: columns[1].Text = this.ColumnText[2];
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[2] = Properties.Resources.AddNewTabText3;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[3] = Properties.Resources.AddNewTabText4_2;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[4] = Properties.Resources.AddNewTabText5;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[5] = "";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[6] = "";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[7] = "Source";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[2] = Properties.Resources.AddNewTabText3;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[3] = Properties.Resources.AddNewTabText4_2;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[4] = Properties.Resources.AddNewTabText5;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[5] = "";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[6] = "";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnOrgText[7] = "Source";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: var c = this._statuses.SortMode switch              {                  ComparerMode.Nickname => 1' // ニックネーム                  ComparerMode.Data => 2' // 本文                  ComparerMode.Id => 3' // 時刻=発言Id                  ComparerMode.Name => 4' // 名前                  ComparerMode.Source => 7' // Source                  _ => 0'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: var c = this._statuses.SortMode switch              {                  ComparerMode.Nickname => 1' // ニックネーム                  ComparerMode.Data => 2' // 本文                  ComparerMode.Id => 3' // 時刻=発言Id                  ComparerMode.Name => 4' // 名前                  ComparerMode.Source => 7' // Source                  _ => 0'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: var c = this._statuses.SortMode switch              {                  ComparerMode.Nickname => 1' // ニックネーム                  ComparerMode.Data => 2' // 本文                  ComparerMode.Id => 3' // 時刻=発言Id                  ComparerMode.Name => 4' // 名前                  ComparerMode.Source => 7' // Source                  _ => 0'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: var c = this._statuses.SortMode switch              {                  ComparerMode.Nickname => 1' // ニックネーム                  ComparerMode.Data => 2' // 本文                  ComparerMode.Id => 3' // 時刻=発言Id                  ComparerMode.Name => 4' // 名前                  ComparerMode.Source => 7' // Source                  _ => 0'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[2] = ColumnOrgText[2] + "▾";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitColumnText,The following statement contains a magic number: ColumnText[2] = ColumnOrgText[2] + "▾";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: Regex.CacheSize = 100;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.TimelinePeriod = 15;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.TimelinePeriod < 15 && SettingManager.Common.TimelinePeriod > 0
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.ReplyPeriod = 15;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.ReplyPeriod < 15 && SettingManager.Common.ReplyPeriod > 0
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.DMPeriod = 15;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.DMPeriod < 15 && SettingManager.Common.DMPeriod > 0
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.PubSearchPeriod = 30;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.PubSearchPeriod < 30 && SettingManager.Common.PubSearchPeriod > 0
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.UserTimelinePeriod = 15;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.UserTimelinePeriod < 15 && SettingManager.Common.UserTimelinePeriod > 0
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.ListsPeriod = 15;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.ListsPeriod < 15 && SettingManager.Common.ListsPeriod > 0
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.CountApi = 60;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.CountApiReply = 40;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.MoreCountApi = 200;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.FirstCountApi = 100;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.FavoritesCountApi = 40;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.ListCountApi = 100;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.SearchCountApi = 100;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: SettingManager.Common.UserTimelineCountApi = 20;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: _mySpDis3 = _mySize.Width - ScaleBy(this.CurrentScaleFactor.Width' 150);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: _mySpDis3 = ScaleBy(this.CurrentScaleFactor.Width' 50);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: this.selectionDebouncer = ThrottlingTimer.Debounce(() => this.InvokeAsync(() => this.UpdateSelectedPost())' TimeSpan.FromMilliseconds(100)' leading: true);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following statement contains a magic number: TimerRefreshIcon.Interval = 200;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTimelineScheduler,The following statement contains a magic number: this.timelineScheduler.UpdateIntervalConfig = TimeSpan.FromHours(6);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTimelineScheduler,The following statement contains a magic number: this.timelineScheduler.UpdateAfterSystemResume = TimeSpan.FromSeconds(30);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following statement contains a magic number: !(notifyPosts.Length > 3)
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following statement contains a magic number: notifyPosts.Length > 3
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following statement contains a magic number: NativeMethods.FlashMyWindow(this.Handle' 3);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ChangeItemStyleRead,The following statement contains a magic number: Item.SubItems[5].Text = star;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ChangeItemStyleRead,The following statement contains a magic number: Item.SubItems[5].Text != star
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The following statement contains a magic number: var tmp = string.Format(Properties.Resources.SearchItem2Url' Uri.EscapeDataString(StatusText.Text.Substring(7)));
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The following statement contains a magic number: StatusText.Text.StartsWith("Google:"' StringComparison.OrdinalIgnoreCase) && StatusText.Text.Trim().Length > 7
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CheckAccountValid,The following statement contains a magic number: errorCount > 5
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      var post = this.CurrentPost;                      if (post != null)                          await this.ShowUserStatus(post.ScreenName' false);                      break;                  case 3:                      await ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty);                      break;                  case 6:                      StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      var post = this.CurrentPost;                      if (post != null)                          await this.ShowUserStatus(post.ScreenName' false);                      break;                  case 3:                      await ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty);                      break;                  case 6:                      StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      var post = this.CurrentPost;                      if (post != null)                          await this.ShowUserStatus(post.ScreenName' false);                      break;                  case 3:                      await ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty);                      break;                  case 6:                      StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      var post = this.CurrentPost;                      if (post != null)                          await this.ShowUserStatus(post.ScreenName' false);                      break;                  case 3:                      await ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty);                      break;                  case 6:                      StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      var post = this.CurrentPost;                      if (post != null)                          await this.ShowUserStatus(post.ScreenName' false);                      break;                  case 3:                      await ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty);                      break;                  case 6:                      StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following statement contains a magic number: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      var post = this.CurrentPost;                      if (post != null)                          await this.ShowUserStatus(post.ScreenName' false);                      break;                  case 3:                      await ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty);                      break;                  case 6:                      StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty);                      break;                  case 7:                      //動作なし                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: return columnIndex switch              {                  1 => ComparerMode.Nickname' // ニックネーム                  2 => ComparerMode.Data' // 本文                  3 => ComparerMode.Id' // 時刻=発言Id                  4 => ComparerMode.Name' // 名前                  7 => ComparerMode.Source' // Source                  _ => (ComparerMode?)null' // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: return columnIndex switch              {                  1 => ComparerMode.Nickname' // ニックネーム                  2 => ComparerMode.Data' // 本文                  3 => ComparerMode.Id' // 時刻=発言Id                  4 => ComparerMode.Name' // 名前                  7 => ComparerMode.Source' // Source                  _ => (ComparerMode?)null' // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: return columnIndex switch              {                  1 => ComparerMode.Nickname' // ニックネーム                  2 => ComparerMode.Data' // 本文                  3 => ComparerMode.Id' // 時刻=発言Id                  4 => ComparerMode.Name' // 名前                  7 => ComparerMode.Source' // Source                  _ => (ComparerMode?)null' // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetComparerModeByColumnIndex,The following statement contains a magic number: return columnIndex switch              {                  1 => ComparerMode.Nickname' // ニックネーム                  2 => ComparerMode.Data' // 本文                  3 => ComparerMode.Id' // 時刻=発言Id                  4 => ComparerMode.Name' // 名前                  7 => ComparerMode.Source' // Source                  _ => (ComparerMode?)null' // 0:アイコン' 5:未読マーク' 6:プロテクト・フィルターマーク              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetSortColumn,The following statement contains a magic number: list.Columns[1].Text = this.ColumnText[2];
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: this._iconSz = iconSz switch              {                  MyCommon.IconSizes.IconNone => 0'                  MyCommon.IconSizes.Icon16 => 16'                  MyCommon.IconSizes.Icon24 => 26'                  MyCommon.IconSizes.Icon48 => 48'                  MyCommon.IconSizes.Icon48_2 => 48'                  _ => throw new InvalidEnumArgumentException(nameof(iconSz)' (int)iconSz' typeof(MyCommon.IconSizes))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: this._iconSz = iconSz switch              {                  MyCommon.IconSizes.IconNone => 0'                  MyCommon.IconSizes.Icon16 => 16'                  MyCommon.IconSizes.Icon24 => 26'                  MyCommon.IconSizes.Icon48 => 48'                  MyCommon.IconSizes.Icon48_2 => 48'                  _ => throw new InvalidEnumArgumentException(nameof(iconSz)' (int)iconSz' typeof(MyCommon.IconSizes))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: this._iconSz = iconSz switch              {                  MyCommon.IconSizes.IconNone => 0'                  MyCommon.IconSizes.Icon16 => 16'                  MyCommon.IconSizes.Icon24 => 26'                  MyCommon.IconSizes.Icon48 => 48'                  MyCommon.IconSizes.Icon48_2 => 48'                  _ => throw new InvalidEnumArgumentException(nameof(iconSz)' (int)iconSz' typeof(MyCommon.IconSizes))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ApplyListViewIconSize,The following statement contains a magic number: this._iconSz = iconSz switch              {                  MyCommon.IconSizes.IconNone => 0'                  MyCommon.IconSizes.Icon16 => 16'                  MyCommon.IconSizes.Icon24 => 26'                  MyCommon.IconSizes.Icon48 => 48'                  MyCommon.IconSizes.Icon48_2 => 48'                  _ => throw new InvalidEnumArgumentException(nameof(iconSz)' (int)iconSz' typeof(MyCommon.IconSizes))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTabForSearch,The following statement contains a magic number: i <= 100
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: _tabPage.Location = new Point(4' 4);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: _tabPage.Location = new Point(4' 4);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: _tabPage.Size = new Size(380' 260);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: _tabPage.Size = new Size(380' 260);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: _tabPage.TabIndex = 2 + cnt;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: _listCustom.Size = new Size(380' 260);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,AddNewTab,The following statement contains a magic number: _listCustom.Size = new Size(380' 260);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_MouseMove,The following statement contains a magic number: var dragEnableRectangle = new Rectangle(_tabMouseDownPoint.X - (SystemInformation.DragSize.Width / 2)' _tabMouseDownPoint.Y - (SystemInformation.DragSize.Height / 2)' SystemInformation.DragSize.Width' SystemInformation.DragSize.Height);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_MouseMove,The following statement contains a magic number: var dragEnableRectangle = new Rectangle(_tabMouseDownPoint.X - (SystemInformation.DragSize.Width / 2)' _tabMouseDownPoint.Y - (SystemInformation.DragSize.Height / 2)' SystemInformation.DragSize.Width' SystemInformation.DragSize.Height);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveAutoPopuratedMentions,The following statement contains a magic number: statusText = statusText.Substring(replyToPost.ScreenName.Length + 2);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RemoveAutoPopuratedMentions,The following statement contains a magic number: statusText = statusText.Substring(screenName.Length + 2);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CreateCache,The following statement contains a magic number: startIndex = FilterRange(startIndex - 30);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CreateCache,The following statement contains a magic number: endIndex = FilterRange(endIndex + 30);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: heightDiff < fontHeight * 0.7
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: TextRenderer.DrawText(e.Graphics'                              e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                              fnt'                              rctB'                              color'                              TextFormatFlags.SingleLine |                              TextFormatFlags.EndEllipsis |                              TextFormatFlags.GlyphOverhangPadding |                              TextFormatFlags.NoPrefix);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: TextRenderer.DrawText(e.Graphics'                              e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                              fnt'                              rctB'                              color'                              TextFormatFlags.SingleLine |                              TextFormatFlags.EndEllipsis |                              TextFormatFlags.GlyphOverhangPadding |                              TextFormatFlags.NoPrefix);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: TextRenderer.DrawText(e.Graphics'                              e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                              fnt'                              rctB'                              color'                              TextFormatFlags.SingleLine |                              TextFormatFlags.EndEllipsis |                              TextFormatFlags.GlyphOverhangPadding |                              TextFormatFlags.NoPrefix);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: TextRenderer.DrawText(e.Graphics'                              e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                              fnt'                              rctB'                              color'                              TextFormatFlags.SingleLine |                              TextFormatFlags.EndEllipsis |                              TextFormatFlags.GlyphOverhangPadding |                              TextFormatFlags.NoPrefix);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_DrawSubItem,The following statement contains a magic number: TextRenderer.DrawText(e.Graphics'                              e.Item.SubItems[4].Text + " / " + e.Item.SubItems[1].Text + " (" + e.Item.SubItems[3].Text + ") " + e.Item.SubItems[5].Text + e.Item.SubItems[6].Text + " [" + e.Item.SubItems[7].Text + "]"'                              fnt'                              rctB'                              color'                              TextFormatFlags.SingleLine |                              TextFormatFlags.EndEllipsis |                              TextFormatFlags.GlyphOverhangPadding |                              TextFormatFlags.NoPrefix);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: var realStateSize = new SizeF(16 * this.CurrentScaleFactor.Width' 16 * this.CurrentScaleFactor.Height).ToSize();
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: var realStateSize = new SizeF(16 * this.CurrentScaleFactor.Width' 16 * this.CurrentScaleFactor.Height).ToSize();
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: iconRect.Offset(0' Math.Max(0' (itemRect.Height - realIconSize.Height) / 2));
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,DrawListViewItemIcon,The following statement contains a magic number: var stateRect = Rectangle.Intersect(new Rectangle(new Point(iconRect.X + realIconSize.Width + 2' iconRect.Y)' realStateSize)' itemRect);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The following statement contains a magic number: _statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 ||                      _statuses.SortOrder == SortOrder.Descending && lst.Items[foundIndex].Position.Y < _iconSz + 10
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,JumpUnreadMenuItem_Click,The following statement contains a magic number: _statuses.SortOrder == SortOrder.Ascending && lst.Items[foundIndex].Position.Y > lst.ClientSize.Height - _iconSz - 10 ||                      _statuses.SortOrder == SortOrder.Descending && lst.Items[foundIndex].Position.Y < _iconSz + 10
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetVersionInfoAsync,The following statement contains a magic number: var msgPart = responseText.Split(new[] { "\n\n"' "\r\n\r\n" }' 2' StringSplitOptions.None);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetVersionInfoAsync,The following statement contains a magic number: var msgBody = msgPart.Length == 2 ? msgPart[1] : "";
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeShortcuts,The following statement contains a magic number: this.shortcutCommands = new[]              {                  // リストのカーソル移動関係（上下キー、PageUp/Downに該当）                  ShortcutCommand.Create(Keys.J' Keys.Control | Keys.J' Keys.Shift | Keys.J' Keys.Control | Keys.Shift | Keys.J)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{DOWN}"))'                    ShortcutCommand.Create(Keys.K' Keys.Control | Keys.K' Keys.Shift | Keys.K' Keys.Control | Keys.Shift | Keys.K)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{UP}"))'                    ShortcutCommand.Create(Keys.F' Keys.Shift | Keys.F)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGDN}"))'                    ShortcutCommand.Create(Keys.B' Keys.Shift | Keys.B)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => SendKeys.Send("{PGUP}"))'                    ShortcutCommand.Create(Keys.F1)                      .Do(() => this.OpenApplicationWebsite())'                    ShortcutCommand.Create(Keys.F3)                      .Do(() => this.MenuItemSearchNext_Click(this.MenuItemSearchNext' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.F5)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>())'                    ShortcutCommand.Create(Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>())'                    ShortcutCommand.Create(Keys.Space' Keys.ProcessKey)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.JumpUnreadMenuItem_Click(this.JumpUnreadMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.G)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => { this._anchorFlag = false; this.ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty); })'                    ShortcutCommand.Create(Keys.Right' Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: true))'                    ShortcutCommand.Create(Keys.Left' Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoRelPost(forward: false))'                    ShortcutCommand.Create(Keys.OemPeriod)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoAnchor())'                    ShortcutCommand.Create(Keys.I)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this.StatusText.Enabled)                      .Do(() => this.StatusText.Focus())'                    ShortcutCommand.Create(Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MakeReplyOrDirectStatus())'                    ShortcutCommand.Create(Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.DoRefresh())'                    ShortcutCommand.Create(Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: true); })'                    ShortcutCommand.Create(Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoPost(forward: false); })'                    ShortcutCommand.Create(Keys.Z' Keys.Oemcomma)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.MoveTop(); })'                    ShortcutCommand.Create(Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: true); })'                    ShortcutCommand.Create(Keys.A)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoNextTab(forward: false); })'                    // ] in_reply_to参照元へ戻る                  ShortcutCommand.Create(Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; return this.GoInReplyToPostTree(); })'                    // [ in_reply_toへジャンプ                  ShortcutCommand.Create(Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => { this._anchorFlag = false; this.GoBackInReplyToPostTree(); })'                    ShortcutCommand.Create(Keys.Escape)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => {                          this._anchorFlag = false;                          var tab = this.CurrentTab;                          var tabtype = tab.TabType;                          if (tabtype == MyCommon.TabUsageType.Related || tabtype == MyCommon.TabUsageType.UserTimeline || tabtype == MyCommon.TabUsageType.PublicSearch || tabtype == MyCommon.TabUsageType.SearchResults)                          {                              RemoveSpecifiedTab(tab.TabName' false);                              SaveConfigsTabs();                          }                      })'                    // 上下キー' PageUp/Downキー' Home/Endキー は既定の動作を残しつつアンカー初期化                  ShortcutCommand.Create(Keys.Up' Keys.Down' Keys.PageUp' Keys.PageDown' Keys.Home' Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this._anchorFlag = false' preventDefault: false)'                    // PreviewKeyDownEventArgs.IsInputKey を true にしてスクロールを発生させる                  ShortcutCommand.Create(Keys.Up' Keys.Down)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => { })'                    ShortcutCommand.Create(Keys.Control | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true))'                    ShortcutCommand.Create(Keys.Control | Keys.D)                      .Do(() => this.doStatusDelete())'                    ShortcutCommand.Create(Keys.Control | Keys.M)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: false))'                    ShortcutCommand.Create(Keys.Control | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: true))'                    ShortcutCommand.Create(Keys.Control | Keys.I)                      .Do(() => this.doRepliedStatusOpen())'                    ShortcutCommand.Create(Keys.Control | Keys.Q)                      .Do(() => this.doQuoteOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.B)                      .Do(() => this.ReadedStripMenuItem_Click(this.ReadedStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.T)                      .Do(() => this.HashManageMenuItem_Click(this.HashManageMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.L)                      .Do(() => this.UrlConvertAutoToolStripMenuItem_Click(this.UrlConvertAutoToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .NotFocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.F)                      .Do(() => this.MenuItemSubSearch_Click(this.MenuItemSubSearch' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.U)                      .Do(() => this.ShowUserTimeline())'                    ShortcutCommand.Create(Keys.Control | Keys.H)                      .Do(() => this.MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.G)                      .Do(() => this.MoveToFavToolStripMenuItem_Click(this.MoveToFavToolStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.O)                      .Do(() => this.StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.E)                      .Do(() => this.OpenURLMenuItem_Click(this.OpenURLMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Home' Keys.Control | Keys.End)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.selectionDebouncer.Call()' preventDefault: false)'                    ShortcutCommand.Create(Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: true))'                    ShortcutCommand.Create(Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoNextTab(forward: false))'                    ShortcutCommand.Create(Keys.Control | Keys.C' Keys.Control | Keys.Insert)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.CopyStot())'                    // タブダイレクト選択(Ctrl+1～8'Ctrl+9)                  ShortcutCommand.Create(Keys.Control | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 1)                      .Do(() => this.ListTab.SelectedIndex = 0)'                    ShortcutCommand.Create(Keys.Control | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 2)                      .Do(() => this.ListTab.SelectedIndex = 1)'                    ShortcutCommand.Create(Keys.Control | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 3)                      .Do(() => this.ListTab.SelectedIndex = 2)'                    ShortcutCommand.Create(Keys.Control | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 4)                      .Do(() => this.ListTab.SelectedIndex = 3)'                    ShortcutCommand.Create(Keys.Control | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 5)                      .Do(() => this.ListTab.SelectedIndex = 4)'                    ShortcutCommand.Create(Keys.Control | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 6)                      .Do(() => this.ListTab.SelectedIndex = 5)'                    ShortcutCommand.Create(Keys.Control | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 7)                      .Do(() => this.ListTab.SelectedIndex = 6)'                    ShortcutCommand.Create(Keys.Control | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => this._statuses.Tabs.Count >= 8)                      .Do(() => this.ListTab.SelectedIndex = 7)'                    ShortcutCommand.Create(Keys.Control | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.ListTab.SelectedIndex = this._statuses.Tabs.Count - 1)'                    ShortcutCommand.Create(Keys.Control | Keys.A)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusText.SelectAll())'                    ShortcutCommand.Create(Keys.Control | Keys.V)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.ProcClipboardFromStatusTextWhenCtrlPlusV())'                    ShortcutCommand.Create(Keys.Control | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryBack())'                    ShortcutCommand.Create(Keys.Control | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => this.StatusTextHistoryForward())'                    ShortcutCommand.Create(Keys.Control | Keys.PageUp' Keys.Control | Keys.P)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == 0)                          {                              ListTab.SelectedIndex = ListTab.TabCount - 1;                          }                          else                          {                              ListTab.SelectedIndex -= 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.PageDown' Keys.Control | Keys.N)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (ListTab.SelectedIndex == ListTab.TabCount - 1)                          {                              ListTab.SelectedIndex = 0;                          }                          else                          {                              ListTab.SelectedIndex += 1;                          }                          StatusText.Focus();                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Y)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => {                          var multiline = !SettingManager.Local.StatusMultiline;                          SettingManager.Local.StatusMultiline = multiline;                          MultiLineMenuItem.Checked = multiline;                          MultiLineMenuItem_Click(this.MultiLineMenuItem' EventArgs.Empty);                      })'                    ShortcutCommand.Create(Keys.Shift | Keys.F3)                      .Do(() => this.MenuItemSearchPrev_Click(this.MenuItemSearchPrev' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Shift | Keys.F5)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.F6)                      .Do(() => this.RefreshTabAsync<MentionsTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.F7)                      .Do(() => this.RefreshTabAsync<DirectMessagesTabModel>(backward: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.R)                      .NotFocusedOn(FocusedControl.StatusText)                      .Do(() => this.DoRefreshMore())'                    ShortcutCommand.Create(Keys.Shift | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: true))'                    ShortcutCommand.Create(Keys.Shift | Keys.L)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoTopEnd(GoTop: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.M)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.G)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoLast())'                    ShortcutCommand.Create(Keys.Shift | Keys.Z)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.MoveMiddle())'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Oem6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackInReplyToPostTree(parallel: true' isForward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Right' Keys.Shift | Keys.N)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: true))'                    // お気に入り前後ジャンプ(SHIFT+N←/P→)                  ShortcutCommand.Create(Keys.Shift | Keys.Left' Keys.Shift | Keys.P)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoFav(forward: false))'                    ShortcutCommand.Create(Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoBackSelectPostChain())'                    ShortcutCommand.Create(Keys.Alt | Keys.R)                      .Do(() => this.doReTweetOfficial(isConfirm: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.P)                      .OnlyWhen(() => this.CurrentPost != null)                      .Do(() => this.doShowUserStatus(this.CurrentPost!.ScreenName' ShowInputDialog: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Up)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Down)                      .Do(() => this.tweetDetailsView.ScrollDownPostBrowser(forward: true))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageUp)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.PageDown)                      .Do(() => this.tweetDetailsView.PageDownPostBrowser(forward: true))'                    // 別タブの同じ書き込みへ(ALT+←/→)                  ShortcutCommand.Create(Keys.Alt | Keys.Right)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: false))'                    ShortcutCommand.Create(Keys.Alt | Keys.Left)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.GoSamePostToAnotherTab(left: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.R)                      .Do(() => this.MakeReplyOrDirectStatus(isAuto: false' isReply: true' isAll: true))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.C' Keys.Control | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyIdUri())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.F)                      .OnlyWhen(() => this.CurrentTab.TabType == MyCommon.TabUsageType.PublicSearch)                      .Do(() => this.CurrentTabPage.Controls["panelSearch"].Controls["comboSearch"].Focus())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.S)                      .Do(() => this.FavoriteChange(FavAdd: false))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.B)                      .Do(() => this.UnreadStripMenuItem_Click(this.UnreadStripMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.T)                      .Do(() => this.HashToggleMenuItem_Click(this.HashToggleMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.P)                      .Do(() => this.ImageSelectMenuItem_Click(this.ImageSelectMenuItem' EventArgs.Empty))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.H)                      .Do(() => this.doMoveToRTHome())'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Up)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex > 0)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex - 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Down)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          var tab = this.CurrentTab;                          var selectedIndex = tab.SelectedIndex;                          if (selectedIndex != -1 && selectedIndex < tab.AllCount - 1)                          {                              var listView = this.CurrentListView;                              var idx = selectedIndex + 1;                              SelectListItem(listView' idx);                              listView.EnsureVisible(idx);                          }                      })'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.Space)                      .FocusedOn(FocusedControl.StatusText)                      .Do(() => {                          if (StatusText.SelectionStart > 0)                          {                              var endidx = StatusText.SelectionStart - 1;                              var startstr = "";                              for (var i = StatusText.SelectionStart - 1; i >= 0; i--)                              {                                  var c = StatusText.Text[i];                                  if (char.IsLetterOrDigit(c) || c == '_')                                  {                                      continue;                                  }                                  if (c == '@')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      var cnt = AtIdSupl.ItemCount;                                      ShowSuplDialog(StatusText' AtIdSupl' startstr.Length + 1' startstr);                                      if (AtIdSupl.ItemCount != cnt)                                          this.MarkSettingAtIdModified();                                  }                                  else if (c == '#')                                  {                                      startstr = StatusText.Text.Substring(i + 1' endidx - i);                                      ShowSuplDialog(StatusText' HashSupl' startstr.Length + 1' startstr);                                  }                                  else                                  {                                      break;                                  }                              }                          }                      })'                    // ソートダイレクト選択(Ctrl+Shift+1～8'Ctrl+Shift+9)                  ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D1)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(0))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D2)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(1))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D3)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(2))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D4)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(3))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D5)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(4))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D6)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(5))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D7)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(6))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D8)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortColumnByDisplayIndex(7))'                    ShortcutCommand.Create(Keys.Control | Keys.Shift | Keys.D9)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.SetSortLastColumn())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.S)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetOfficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.R)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.FavoritesRetweetUnofficial())'                    ShortcutCommand.Create(Keys.Control | Keys.Alt | Keys.H)                      .FocusedOn(FocusedControl.ListTab)                      .Do(() => this.OpenUserAppointUrl())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .FocusedOn(FocusedControl.PostBrowser)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.T)                      .OnlyWhen(() => this.ExistCurrentPost)                      .Do(() => this.tweetDetailsView.DoTranslation())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.R)                      .Do(() => this.doReTweetUnofficial())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.C' Keys.Alt | Keys.Shift | Keys.Insert)                      .Do(() => this.CopyUserId())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Up)                      .Do(() => this.tweetThumbnail1.ScrollUp())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Down)                      .Do(() => this.tweetThumbnail1.ScrollDown())'                    ShortcutCommand.Create(Keys.Alt | Keys.Shift | Keys.Enter)                      .FocusedOn(FocusedControl.ListTab)                      .OnlyWhen(() => !this.SplitContainer3.Panel2Collapsed)                      .Do(() => this.OpenThumbnailPicture(this.tweetThumbnail1.Thumbnail))'              };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The following statement contains a magic number: Clipboard.SetDataObject(clstr' false' 5' 100);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyStot,The following statement contains a magic number: Clipboard.SetDataObject(clstr' false' 5' 100);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyIdUri,The following statement contains a magic number: Clipboard.SetDataObject(string.Join(Environment.NewLine' copyUrls)' false' 5' 100);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyIdUri,The following statement contains a magic number: Clipboard.SetDataObject(string.Join(Environment.NewLine' copyUrls)' false' 5' 100);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoTopEnd,The following statement contains a magic number: _item = listView.GetItemAt(0' 25);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GoMiddle,The following statement contains a magic number: idx3 = (idx1 + idx2) / 2;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PushSelectPostChain,The following statement contains a magic number: count >= 2500
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: this.selectPostChains.Count <= 2000
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: var p = new Stack<(TabModel' PostClass?)>(2000);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: i < 2000
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TrimPostChain,The following statement contains a magic number: i < 2000
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: SettingManager.Common.SortColumn = this._statuses.SortMode switch                  {                      ComparerMode.Nickname => 1' // ニックネーム                      ComparerMode.Data => 2' // 本文                      ComparerMode.Id => 3' // 時刻=発言Id                      ComparerMode.Name => 4' // 名前                      ComparerMode.Source => 7' // Source                      _ => throw new InvalidOperationException($"Invalid sort mode: {this._statuses.SortMode}")'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: SettingManager.Common.SortColumn = this._statuses.SortMode switch                  {                      ComparerMode.Nickname => 1' // ニックネーム                      ComparerMode.Data => 2' // 本文                      ComparerMode.Id => 3' // 時刻=発言Id                      ComparerMode.Name => 4' // 名前                      ComparerMode.Source => 7' // Source                      _ => throw new InvalidOperationException($"Invalid sort mode: {this._statuses.SortMode}")'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: SettingManager.Common.SortColumn = this._statuses.SortMode switch                  {                      ComparerMode.Nickname => 1' // ニックネーム                      ComparerMode.Data => 2' // 本文                      ComparerMode.Id => 3' // 時刻=発言Id                      ComparerMode.Name => 4' // 名前                      ComparerMode.Source => 7' // Source                      _ => throw new InvalidOperationException($"Invalid sort mode: {this._statuses.SortMode}")'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsCommon,The following statement contains a magic number: SettingManager.Common.SortColumn = this._statuses.SortMode switch                  {                      ComparerMode.Nickname => 1' // ニックネーム                      ComparerMode.Data => 2' // 本文                      ComparerMode.Id => 3' // 時刻=発言Id                      ComparerMode.Name => 4' // 名前                      ComparerMode.Source => 7' // Source                      _ => throw new InvalidOperationException($"Invalid sort mode: {this._statuses.SortMode}")'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTab_DragDrop,The following statement contains a magic number: spos.X <= (rect.Left + rect.Right) / 2
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,RefreshTasktrayIcon,The following statement contains a magic number: blinkCnt > 10
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveMiddle,The following statement contains a magic number: _item = listView.GetItemAt(0' 25);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MoveMiddle,The following statement contains a magic number: idx -= Math.Abs(idx1 - idx2) / 2;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The following statement contains a magic number: var ttl = new StringBuilder(256);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The following statement contains a magic number: switch (SettingManager.Common.DispLatestPost)              {                  case MyCommon.DispTitleEnum.Ver:                      ttl.Append("Ver:").Append(MyCommon.GetReadableVersion());                      break;                  case MyCommon.DispTitleEnum.Post:                      if (_history != null && _history.Count > 1)                          ttl.Append(_history[_history.Count - 2].status.Replace("\r\n"' " "));                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText1' _statuses.MentionTab.UnreadCount + _statuses.DirectMessageTab.UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText2' ur);                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText3' ur' _statuses.MentionTab.UnreadCount + _statuses.DirectMessageTab.UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText4' ur' al);                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      if (followers == 0 && tw.FollowersCount > 0) followers = tw.FollowersCount;                      ttl.AppendFormat(Properties.Resources.OwnStatusTitle' tw.StatusesCount' tw.FriendsCount' tw.FollowersCount' tw.FollowersCount - followers);                      break;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetStatusLabelText,The following statement contains a magic number: var slbl = new StringBuilder(256);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetNotifyIconText,The following statement contains a magic number: var ur = new StringBuilder(64);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer2_Panel2_Resize,The following statement contains a magic number: var multiline = this.SplitContainer2.Panel2.Height > this.SplitContainer2.Panel2MinSize + 2;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,GetUrlFromDataObject,The following statement contains a magic number: lines.Length < 2
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The following statement contains a magic number: return Task.Run(() =>              {                  var myPath = UriString;                    try                  {                      var configBrowserPath = SettingManager.Local.BrowserPath;                      if (!MyCommon.IsNullOrEmpty(configBrowserPath))                      {                          if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                          {                              var sep = configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal);                              var browserPath = configBrowserPath.Substring(1' sep - 1);                              var arg = "";                              if (sep < configBrowserPath.Length - 1)                              {                                  arg = configBrowserPath.Substring(sep + 1);                              }                              myPath = arg + " " + myPath;                              System.Diagnostics.Process.Start(browserPath' myPath);                          }                          else                          {                              System.Diagnostics.Process.Start(configBrowserPath' myPath);                          }                      }                      else                      {                          System.Diagnostics.Process.Start(myPath);                      }                  }                  catch (Exception)                  {                  }              });
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The following statement contains a magic number: return Task.Run(() =>              {                  var myPath = UriString;                    try                  {                      var configBrowserPath = SettingManager.Local.BrowserPath;                      if (!MyCommon.IsNullOrEmpty(configBrowserPath))                      {                          if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                          {                              var sep = configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal);                              var browserPath = configBrowserPath.Substring(1' sep - 1);                              var arg = "";                              if (sep < configBrowserPath.Length - 1)                              {                                  arg = configBrowserPath.Substring(sep + 1);                              }                              myPath = arg + " " + myPath;                              System.Diagnostics.Process.Start(browserPath' myPath);                          }                          else                          {                              System.Diagnostics.Process.Start(configBrowserPath' myPath);                          }                      }                      else                      {                          System.Diagnostics.Process.Start(myPath);                      }                  }                  catch (Exception)                  {                  }              });
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,OpenUriInBrowserAsync,The following statement contains a magic number: return Task.Run(() =>              {                  var myPath = UriString;                    try                  {                      var configBrowserPath = SettingManager.Local.BrowserPath;                      if (!MyCommon.IsNullOrEmpty(configBrowserPath))                      {                          if (configBrowserPath.StartsWith("\""' StringComparison.Ordinal) && configBrowserPath.Length > 2 && configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal) > -1)                          {                              var sep = configBrowserPath.IndexOf("\""' 2' StringComparison.Ordinal);                              var browserPath = configBrowserPath.Substring(1' sep - 1);                              var arg = "";                              if (sep < configBrowserPath.Length - 1)                              {                                  arg = configBrowserPath.Substring(sep + 1);                              }                              myPath = arg + " " + myPath;                              System.Diagnostics.Process.Start(browserPath' myPath);                          }                          else                          {                              System.Diagnostics.Process.Start(configBrowserPath' myPath);                          }                      }                      else                      {                          System.Diagnostics.Process.Start(myPath);                      }                  }                  catch (Exception)                  {                  }              });
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,ListTabSelect,The following statement contains a magic number: listView.Columns[1].Text = ColumnText[2];
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Shown,The following statement contains a magic number: var timeout = Task.Delay(5000);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Shown,The following statement contains a magic number: i > 24
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doReTweetOfficial,The following statement contains a magic number: selectedPosts.Length > 15
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SearchButton_Click,The following statement contains a magic number: cnt > cmb.Text.Length - 4
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SplitContainer3_SplitterMoved,The following statement contains a magic number: switch (this.WindowState)              {                  case FormWindowState.Normal:                      splitterDistance = this.SplitContainer3.SplitterDistance;                      break;                  case FormWindowState.Maximized:                      // 最大化時は、通常時のウィンドウサイズに換算した SplitterDistance を算出する                      var normalContainerWidth = this._mySize.Width - SystemInformation.Border3DSize.Width * 2;                      splitterDistance = this.SplitContainer3.SplitterDistance - (this.SplitContainer3.Width - normalContainerWidth);                      splitterDistance = Math.Min(splitterDistance' normalContainerWidth - this.SplitContainer3.SplitterWidth - this.SplitContainer3.Panel2MinSize);                      break;                  default:                      return;              }
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain,The following statement contains a magic number: this.ListTab.HandleCreated += (s' e) => NativeMethods.SetMinTabWidth((TabControl)s' 40);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyUserId,The following statement contains a magic number: Clipboard.SetDataObject(clstr' false' 5' 100);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,CopyUserId,The following statement contains a magic number: Clipboard.SetDataObject(clstr' false' 5' 100);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: this.evtDialog.Location = new Point                  {                      X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2)'                      Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2)'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: this.evtDialog.Location = new Point                  {                      X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2)'                      Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2)'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: this.evtDialog.Location = new Point                  {                      X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2)'                      Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2)'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,EventViewerMenuItem_Click,The following statement contains a magic number: this.evtDialog.Location = new Point                  {                      X = Convert.ToInt32(this.Location.X + this.Size.Width / 2 - evtDialog.Size.Width / 2)'                      Y = Convert.ToInt32(this.Location.Y + this.Size.Height / 2 - evtDialog.Size.Height / 2)'                  };
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.HashStripSplitButton.DropDownButtonWidth = 13;
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel2.Controls.Add(this.PostButton' 2' 0);
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(2' "S2.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(3' "S3.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(4' "S4.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(5' "S5.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(6' "S6.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(7' "S7.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(8' "S8.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(9' "S9.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(10' "S10.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(11' "S11.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(12' "S12.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(13' "S13.ico");
Magic Number,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,InitializeComponent,The following statement contains a magic number: this.PostStateImageList.Images.SetKeyName(14' "S14.ico");
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.SetRowSpan(this.LogoPictureBox' 5);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.LabelCopyright' 1' 2);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.LabelCompanyName' 1' 3);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.TextBoxDescription' 1' 4);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.OKButton' 1' 6);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.Controls.Add(this.ChangeLog' 0' 5);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelProductName.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelVersion.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelCopyright.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.LabelCompanyName.MaximumSize = new System.Drawing.Size(0' 16);
Magic Number,OpenTween,TweenAboutBox,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\TweenAboutBox.cs,InitializeComponent,The following statement contains a magic number: this.TableLayoutPanel.SetColumnSpan(this.ChangeLog' 2);
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,UploadMedia,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(processingInfo.CheckAfterSecs ?? 5))                      .ConfigureAwait(false);
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: return type switch              {                  MyCommon.WORKERTYPE.Timeline => 200'                  MyCommon.WORKERTYPE.Reply => 200'                  MyCommon.WORKERTYPE.UserTimeline => 200'                  MyCommon.WORKERTYPE.Favorites => 200'                  MyCommon.WORKERTYPE.List => 200' // 不明                  MyCommon.WORKERTYPE.PublicSearch => 100'                  _ => throw new InvalidOperationException("Invalid type: " + type)'              };
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: return type switch              {                  MyCommon.WORKERTYPE.Timeline => 200'                  MyCommon.WORKERTYPE.Reply => 200'                  MyCommon.WORKERTYPE.UserTimeline => 200'                  MyCommon.WORKERTYPE.Favorites => 200'                  MyCommon.WORKERTYPE.List => 200' // 不明                  MyCommon.WORKERTYPE.PublicSearch => 100'                  _ => throw new InvalidOperationException("Invalid type: " + type)'              };
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: return type switch              {                  MyCommon.WORKERTYPE.Timeline => 200'                  MyCommon.WORKERTYPE.Reply => 200'                  MyCommon.WORKERTYPE.UserTimeline => 200'                  MyCommon.WORKERTYPE.Favorites => 200'                  MyCommon.WORKERTYPE.List => 200' // 不明                  MyCommon.WORKERTYPE.PublicSearch => 100'                  _ => throw new InvalidOperationException("Invalid type: " + type)'              };
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: return type switch              {                  MyCommon.WORKERTYPE.Timeline => 200'                  MyCommon.WORKERTYPE.Reply => 200'                  MyCommon.WORKERTYPE.UserTimeline => 200'                  MyCommon.WORKERTYPE.Favorites => 200'                  MyCommon.WORKERTYPE.List => 200' // 不明                  MyCommon.WORKERTYPE.PublicSearch => 100'                  _ => throw new InvalidOperationException("Invalid type: " + type)'              };
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: return type switch              {                  MyCommon.WORKERTYPE.Timeline => 200'                  MyCommon.WORKERTYPE.Reply => 200'                  MyCommon.WORKERTYPE.UserTimeline => 200'                  MyCommon.WORKERTYPE.Favorites => 200'                  MyCommon.WORKERTYPE.List => 200' // 不明                  MyCommon.WORKERTYPE.PublicSearch => 100'                  _ => throw new InvalidOperationException("Invalid type: " + type)'              };
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetMaxApiResultCount,The following statement contains a magic number: return type switch              {                  MyCommon.WORKERTYPE.Timeline => 200'                  MyCommon.WORKERTYPE.Reply => 200'                  MyCommon.WORKERTYPE.UserTimeline => 200'                  MyCommon.WORKERTYPE.Favorites => 200'                  MyCommon.WORKERTYPE.List => 200' // 不明                  MyCommon.WORKERTYPE.PublicSearch => 100'                  _ => throw new InvalidOperationException("Invalid type: " + type)'              };
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetRelatedResult,The following statement contains a magic number: nextPost.InReplyToStatusId != null && loopCount++ <= 20
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetDirectMessageEvents,The following statement contains a magic number: var count = 50;
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetListsApi,The following statement contains a magic number: var ownedLists = await TwitterLists.GetAllItemsAsync(x =>                  this.Api.ListsOwnerships(this.Username' cursor: x' count: 1000))                      .ConfigureAwait(false);
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetListsApi,The following statement contains a magic number: var subscribedLists = await TwitterLists.GetAllItemsAsync(x =>                  this.Api.ListsSubscriptions(this.Username' cursor: x' count: 1000))                      .ConfigureAwait(false);
Magic Number,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetTextLengthRemainDM,The following statement contains a magic number: pos += 2;
Magic Number,OpenTween,StreamAutoConnector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,StreamLoop,The following statement contains a magic number: sleep = TimeSpan.FromSeconds(30);
Magic Number,OpenTween,StreamAutoConnector,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,StreamLoop,The following statement contains a magic number: sleep = TimeSpan.FromSeconds(30);
Magic Number,OpenTween,InternetSecurityManager,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\WebBrowserController.cs,InternetSecurityManager,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,OpenTween.Api,JsonUtils,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\JsonUtils.cs,EscapeJsonString,The following statement contains a magic number: var builder = new StringBuilder(rawText.Length + 20);
Magic Number,OpenTween.Api,MicrosoftTranslatorApi,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\MicrosoftTranslatorApi.cs,UpdateAccessTokenIfExpired,The following statement contains a magic number: this.RefreshAccessTokenAt = DateTimeUtc.Now + expiresIn - TimeSpan.FromSeconds(30);
Magic Number,OpenTween.Api,MicrosoftTranslatorApi,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\MicrosoftTranslatorApi.cs,GetAccessTokenAsync,The following statement contains a magic number: return (accessToken' TimeSpan.FromMinutes(10));
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterConfiguration              {                  CharactersReservedPerMedia = 24'                  ShortUrlLength = 23'                  ShortUrlLengthHttps = 23'                  PhotoSizeLimit = 3145728L'                  DmTextCharacterLimit = 10000'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Api.DataModel,TwitterTextConfiguration,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Api\DataModel\TwitterTextConfiguration.cs,DefaultConfiguration,The following statement contains a magic number: return new TwitterTextConfiguration              {                  Version = 3'                  MaxWeightedTweetLength = 280'                  Scale = 100'                  DefaultWeight = 200'                  EmojiParsingEnabled = true'                  TransformedURLLength = 23'                  Ranges = new[]                  {                      new CodepointRange { Start = 0' End = 4351' Weight = 100 }'                      new CodepointRange { Start = 8192' End = 8205' Weight = 100 }'                      new CodepointRange { Start = 8208' End = 8223' Weight = 100 }'                      new CodepointRange { Start = 8242' End = 8247' Weight = 100 }'                  }'              };
Magic Number,OpenTween.Connection,Networking,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\Networking.cs,Networking,The following statement contains a magic number: DefaultTimeout = TimeSpan.FromSeconds(20);
Magic Number,OpenTween.Connection,Networking,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\Networking.cs,Networking,The following statement contains a magic number: UploadImageTimeout = TimeSpan.FromSeconds(60);
Magic Number,OpenTween.Connection,OAuthUtility,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,GetOAuthParameter,The following statement contains a magic number: var parameter = new Dictionary<string' string>              {                  ["oauth_consumer_key"] = consumerKey'                  ["oauth_signature_method"] = "HMAC-SHA1"'                  ["oauth_timestamp"] = DateTimeUtc.Now.ToUnixTime().ToString()' // epoch秒                  ["oauth_nonce"] = NonceRandom.Next(123400' 9999999).ToString()'                  ["oauth_version"] = "1.0"'              };
Magic Number,OpenTween.Connection,OAuthUtility,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\OAuthUtility.cs,GetOAuthParameter,The following statement contains a magic number: var parameter = new Dictionary<string' string>              {                  ["oauth_consumer_key"] = consumerKey'                  ["oauth_signature_method"] = "HMAC-SHA1"'                  ["oauth_timestamp"] = DateTimeUtc.Now.ToUnixTime().ToString()' // epoch秒                  ["oauth_nonce"] = NonceRandom.Next(123400' 9999999).ToString()'                  ["oauth_version"] = "1.0"'              };
Magic Number,OpenTween.Connection,TwitterApiConnection,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\TwitterApiConnection.cs,CheckStatusCode,The following statement contains a magic number: (int)statusCode >= 200 && (int)statusCode <= 299
Magic Number,OpenTween.Connection,TwitterApiConnection,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\TwitterApiConnection.cs,CheckStatusCode,The following statement contains a magic number: (int)statusCode >= 200 && (int)statusCode <= 299
Magic Number,OpenTween.Connection,TwitterPhoto,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Connection\TwitterPhoto.cs,AddAlphaChannelIfNeeded,The following statement contains a magic number: bitmap.GetPixel(x' y).A != 255
Magic Number,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,MakeTabName,The following statement contains a magic number: Enumerable.Range(2' retryCount - 1)
Magic Number,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,UpdateRetweetCount,The following statement contains a magic number: return this.retweetsCount.AddOrUpdate(retweetedId' 1' (k' v) => v >= 10 ? 1 : v + 1);
Magic Number,OpenTween.Thumbnail.Services,ImgAzyobuziNet,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\ImgAzyobuziNet.cs,FetchRegexAsync,The following statement contains a magic number: using var cts = new CancellationTokenSource(millisecondsDelay: 1000);
Magic Number,OpenTween.Thumbnail.Services,Nicovideo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Nicovideo.cs,BuildTooltip,The following statement contains a magic number: var tooltip = new StringBuilder(200);
Magic Number,OpenTween.Thumbnail.Services,Vimeo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Vimeo.cs,GetThumbnailInfoAsync,The following statement contains a magic number: var minute = duration / 60;
Magic Number,OpenTween.Thumbnail.Services,Vimeo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\Services\Vimeo.cs,GetThumbnailInfoAsync,The following statement contains a magic number: var second = duration % 60;
Magic Number,OpenTween.OpenTweenCustomControl,DetailsListView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The following statement contains a magic number: const int LVN_ODSTATECHANGED = ((0 - 100) - 15);
Magic Number,OpenTween.OpenTweenCustomControl,DetailsListView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The following statement contains a magic number: const int LVN_ODSTATECHANGED = ((0 - 100) - 15);
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,UserstreamPeriod_Validating,The following statement contains a magic number: prd < 0 || prd > 60
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,TimelinePeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,TimelinePeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ReplyPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ReplyPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,DMPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,DMPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,PubSearchPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 30 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,PubSearchPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 30 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ListsPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,ListsPeriod_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,UserTimeline_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,GetPeriodPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\GetPeriodPanel.cs,UserTimeline_Validating,The following statement contains a magic number: prd != 0 && (prd < 15 || prd > 6000)
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.cmbNameBalloon.SelectedIndex = settingCommon.NameBalloon switch              {                  MyCommon.NameBalloonEnum.None => 0'                  MyCommon.NameBalloonEnum.UserID => 1'                  MyCommon.NameBalloonEnum.NickName => 2'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.cmbNameBalloon.SelectedIndex = settingCommon.NameBalloon switch              {                  MyCommon.NameBalloonEnum.None => 0'                  MyCommon.NameBalloonEnum.UserID => 1'                  MyCommon.NameBalloonEnum.NickName => 2'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ComboDispTitle.SelectedIndex = settingCommon.DispLatestPost switch              {                  MyCommon.DispTitleEnum.None => 0'                  MyCommon.DispTitleEnum.Ver => 1'                  MyCommon.DispTitleEnum.Post => 2'                  MyCommon.DispTitleEnum.UnreadRepCount => 3'                  MyCommon.DispTitleEnum.UnreadAllCount => 4'                  MyCommon.DispTitleEnum.UnreadAllRepCount => 5'                  MyCommon.DispTitleEnum.UnreadCountAllCount => 6'                  MyCommon.DispTitleEnum.OwnStatus => 7'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ComboDispTitle.SelectedIndex = settingCommon.DispLatestPost switch              {                  MyCommon.DispTitleEnum.None => 0'                  MyCommon.DispTitleEnum.Ver => 1'                  MyCommon.DispTitleEnum.Post => 2'                  MyCommon.DispTitleEnum.UnreadRepCount => 3'                  MyCommon.DispTitleEnum.UnreadAllCount => 4'                  MyCommon.DispTitleEnum.UnreadAllRepCount => 5'                  MyCommon.DispTitleEnum.UnreadCountAllCount => 6'                  MyCommon.DispTitleEnum.OwnStatus => 7'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ComboDispTitle.SelectedIndex = settingCommon.DispLatestPost switch              {                  MyCommon.DispTitleEnum.None => 0'                  MyCommon.DispTitleEnum.Ver => 1'                  MyCommon.DispTitleEnum.Post => 2'                  MyCommon.DispTitleEnum.UnreadRepCount => 3'                  MyCommon.DispTitleEnum.UnreadAllCount => 4'                  MyCommon.DispTitleEnum.UnreadAllRepCount => 5'                  MyCommon.DispTitleEnum.UnreadCountAllCount => 6'                  MyCommon.DispTitleEnum.OwnStatus => 7'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ComboDispTitle.SelectedIndex = settingCommon.DispLatestPost switch              {                  MyCommon.DispTitleEnum.None => 0'                  MyCommon.DispTitleEnum.Ver => 1'                  MyCommon.DispTitleEnum.Post => 2'                  MyCommon.DispTitleEnum.UnreadRepCount => 3'                  MyCommon.DispTitleEnum.UnreadAllCount => 4'                  MyCommon.DispTitleEnum.UnreadAllRepCount => 5'                  MyCommon.DispTitleEnum.UnreadCountAllCount => 6'                  MyCommon.DispTitleEnum.OwnStatus => 7'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ComboDispTitle.SelectedIndex = settingCommon.DispLatestPost switch              {                  MyCommon.DispTitleEnum.None => 0'                  MyCommon.DispTitleEnum.Ver => 1'                  MyCommon.DispTitleEnum.Post => 2'                  MyCommon.DispTitleEnum.UnreadRepCount => 3'                  MyCommon.DispTitleEnum.UnreadAllCount => 4'                  MyCommon.DispTitleEnum.UnreadAllRepCount => 5'                  MyCommon.DispTitleEnum.UnreadCountAllCount => 6'                  MyCommon.DispTitleEnum.OwnStatus => 7'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ComboDispTitle.SelectedIndex = settingCommon.DispLatestPost switch              {                  MyCommon.DispTitleEnum.None => 0'                  MyCommon.DispTitleEnum.Ver => 1'                  MyCommon.DispTitleEnum.Post => 2'                  MyCommon.DispTitleEnum.UnreadRepCount => 3'                  MyCommon.DispTitleEnum.UnreadAllCount => 4'                  MyCommon.DispTitleEnum.UnreadAllRepCount => 5'                  MyCommon.DispTitleEnum.UnreadCountAllCount => 6'                  MyCommon.DispTitleEnum.OwnStatus => 7'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ComboDispTitle.SelectedIndex = settingCommon.DispLatestPost switch              {                  MyCommon.DispTitleEnum.None => 0'                  MyCommon.DispTitleEnum.Ver => 1'                  MyCommon.DispTitleEnum.Post => 2'                  MyCommon.DispTitleEnum.UnreadRepCount => 3'                  MyCommon.DispTitleEnum.UnreadAllCount => 4'                  MyCommon.DispTitleEnum.UnreadAllRepCount => 5'                  MyCommon.DispTitleEnum.UnreadCountAllCount => 6'                  MyCommon.DispTitleEnum.OwnStatus => 7'                  _ => 2'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.ReplyIconStateCombo.SelectedIndex = settingCommon.ReplyIconState switch              {                  MyCommon.REPLY_ICONSTATE.None => 0'                  MyCommon.REPLY_ICONSTATE.StaticIcon => 1'                  MyCommon.REPLY_ICONSTATE.BlinkIcon => 2'                  _ => 1'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,LoadConfig,The following statement contains a magic number: this.LanguageCombo.SelectedIndex = settingCommon.Language switch              {                  "OS" => 0'                  "ja" => 1'                  "en" => 2'                  _ => 0'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.NameBalloon = this.cmbNameBalloon.SelectedIndex switch              {                  0 => MyCommon.NameBalloonEnum.None'                  1 => MyCommon.NameBalloonEnum.UserID'                  2 => MyCommon.NameBalloonEnum.NickName'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.DispLatestPost = this.ComboDispTitle.SelectedIndex switch              {                  0 => MyCommon.DispTitleEnum.None'                  1 => MyCommon.DispTitleEnum.Ver'                  2 => MyCommon.DispTitleEnum.Post'                  3 => MyCommon.DispTitleEnum.UnreadRepCount'                  4 => MyCommon.DispTitleEnum.UnreadAllCount'                  5 => MyCommon.DispTitleEnum.UnreadAllRepCount'                  6 => MyCommon.DispTitleEnum.UnreadCountAllCount'                  7 => MyCommon.DispTitleEnum.OwnStatus'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.DispLatestPost = this.ComboDispTitle.SelectedIndex switch              {                  0 => MyCommon.DispTitleEnum.None'                  1 => MyCommon.DispTitleEnum.Ver'                  2 => MyCommon.DispTitleEnum.Post'                  3 => MyCommon.DispTitleEnum.UnreadRepCount'                  4 => MyCommon.DispTitleEnum.UnreadAllCount'                  5 => MyCommon.DispTitleEnum.UnreadAllRepCount'                  6 => MyCommon.DispTitleEnum.UnreadCountAllCount'                  7 => MyCommon.DispTitleEnum.OwnStatus'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.DispLatestPost = this.ComboDispTitle.SelectedIndex switch              {                  0 => MyCommon.DispTitleEnum.None'                  1 => MyCommon.DispTitleEnum.Ver'                  2 => MyCommon.DispTitleEnum.Post'                  3 => MyCommon.DispTitleEnum.UnreadRepCount'                  4 => MyCommon.DispTitleEnum.UnreadAllCount'                  5 => MyCommon.DispTitleEnum.UnreadAllRepCount'                  6 => MyCommon.DispTitleEnum.UnreadCountAllCount'                  7 => MyCommon.DispTitleEnum.OwnStatus'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.DispLatestPost = this.ComboDispTitle.SelectedIndex switch              {                  0 => MyCommon.DispTitleEnum.None'                  1 => MyCommon.DispTitleEnum.Ver'                  2 => MyCommon.DispTitleEnum.Post'                  3 => MyCommon.DispTitleEnum.UnreadRepCount'                  4 => MyCommon.DispTitleEnum.UnreadAllCount'                  5 => MyCommon.DispTitleEnum.UnreadAllRepCount'                  6 => MyCommon.DispTitleEnum.UnreadCountAllCount'                  7 => MyCommon.DispTitleEnum.OwnStatus'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.DispLatestPost = this.ComboDispTitle.SelectedIndex switch              {                  0 => MyCommon.DispTitleEnum.None'                  1 => MyCommon.DispTitleEnum.Ver'                  2 => MyCommon.DispTitleEnum.Post'                  3 => MyCommon.DispTitleEnum.UnreadRepCount'                  4 => MyCommon.DispTitleEnum.UnreadAllCount'                  5 => MyCommon.DispTitleEnum.UnreadAllRepCount'                  6 => MyCommon.DispTitleEnum.UnreadCountAllCount'                  7 => MyCommon.DispTitleEnum.OwnStatus'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.DispLatestPost = this.ComboDispTitle.SelectedIndex switch              {                  0 => MyCommon.DispTitleEnum.None'                  1 => MyCommon.DispTitleEnum.Ver'                  2 => MyCommon.DispTitleEnum.Post'                  3 => MyCommon.DispTitleEnum.UnreadRepCount'                  4 => MyCommon.DispTitleEnum.UnreadAllCount'                  5 => MyCommon.DispTitleEnum.UnreadAllRepCount'                  6 => MyCommon.DispTitleEnum.UnreadCountAllCount'                  7 => MyCommon.DispTitleEnum.OwnStatus'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.ReplyIconState = this.ReplyIconStateCombo.SelectedIndex switch              {                  0 => MyCommon.REPLY_ICONSTATE.None'                  1 => MyCommon.REPLY_ICONSTATE.StaticIcon'                  2 => MyCommon.REPLY_ICONSTATE.BlinkIcon'                  _ => throw new IndexOutOfRangeException()'              };
Magic Number,OpenTween.Setting.Panel,PreviewPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\PreviewPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.Language = this.LanguageCombo.SelectedIndex switch              {                  0 => "OS"'                  1 => "ja"'                  2 => "en"'                  _ => "en"'              };
Magic Number,OpenTween.Setting.Panel,ProxyPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\ProxyPanel.cs,TextProxyPort_Validating,The following statement contains a magic number: port < 0 || port > 65535
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(96F' 96F);
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(20);
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(519' 368);
Magic Number,OpenTween.Setting.Panel,SettingPanelBase,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\SettingPanelBase.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(519' 368);
Magic Number,OpenTween.Setting.Panel,TweetActPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetActPanel.cs,SaveConfig,The following statement contains a magic number: switch (this.ComboBoxPostKeySelect.SelectedIndex)              {                  case 2:                      settingCommon.PostShiftEnter = true;                      settingCommon.PostCtrlEnter = false;                      break;                  case 1:                      settingCommon.PostCtrlEnter = true;                      settingCommon.PostShiftEnter = false;                      break;                  case 0:                      settingCommon.PostCtrlEnter = false;                      settingCommon.PostShiftEnter = false;                      break;              }
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,LoadConfig,The following statement contains a magic number: this.IconSize.SelectedIndex = settingCommon.IconSize switch              {                  MyCommon.IconSizes.IconNone => 0'                  MyCommon.IconSizes.Icon16 => 1'                  MyCommon.IconSizes.Icon24 => 2'                  MyCommon.IconSizes.Icon48 => 3'                  MyCommon.IconSizes.Icon48_2 => 4'                  _ => 1'              };
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,LoadConfig,The following statement contains a magic number: this.IconSize.SelectedIndex = settingCommon.IconSize switch              {                  MyCommon.IconSizes.IconNone => 0'                  MyCommon.IconSizes.Icon16 => 1'                  MyCommon.IconSizes.Icon24 => 2'                  MyCommon.IconSizes.Icon48 => 3'                  MyCommon.IconSizes.Icon48_2 => 4'                  _ => 1'              };
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,LoadConfig,The following statement contains a magic number: this.IconSize.SelectedIndex = settingCommon.IconSize switch              {                  MyCommon.IconSizes.IconNone => 0'                  MyCommon.IconSizes.Icon16 => 1'                  MyCommon.IconSizes.Icon24 => 2'                  MyCommon.IconSizes.Icon48 => 3'                  MyCommon.IconSizes.Icon48_2 => 4'                  _ => 1'              };
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.IconSize = this.IconSize.SelectedIndex switch              {                  0 => MyCommon.IconSizes.IconNone'                  1 => MyCommon.IconSizes.Icon16'                  2 => MyCommon.IconSizes.Icon24'                  3 => MyCommon.IconSizes.Icon48'                  4 => MyCommon.IconSizes.Icon48_2'                  _ => throw new IndexOutOfRangeException($"Invalid {nameof(IconSize)} index: {this.IconSize.SelectedIndex}")'              };
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.IconSize = this.IconSize.SelectedIndex switch              {                  0 => MyCommon.IconSizes.IconNone'                  1 => MyCommon.IconSizes.Icon16'                  2 => MyCommon.IconSizes.Icon24'                  3 => MyCommon.IconSizes.Icon48'                  4 => MyCommon.IconSizes.Icon48_2'                  _ => throw new IndexOutOfRangeException($"Invalid {nameof(IconSize)} index: {this.IconSize.SelectedIndex}")'              };
Magic Number,OpenTween.Setting.Panel,TweetPrvPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetPrvPanel.cs,SaveConfig,The following statement contains a magic number: settingCommon.IconSize = this.IconSize.SelectedIndex switch              {                  0 => MyCommon.IconSizes.IconNone'                  1 => MyCommon.IconSizes.Icon16'                  2 => MyCommon.IconSizes.Icon24'                  3 => MyCommon.IconSizes.Icon48'                  4 => MyCommon.IconSizes.Icon48_2'                  _ => throw new IndexOutOfRangeException($"Invalid {nameof(IconSize)} index: {this.IconSize.SelectedIndex}")'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The following statement contains a magic number: var topLeftTileNum = PointF.Add(centerTileNum' new SizeF(-this.ThumbnailSize.Width / 2.0f / TileSize.Width' -this.ThumbnailSize.Height / 2.0f / TileSize.Height));
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The following statement contains a magic number: var topLeftTileNum = PointF.Add(centerTileNum' new SizeF(-this.ThumbnailSize.Width / 2.0f / TileSize.Width' -this.ThumbnailSize.Height / 2.0f / TileSize.Height));
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,LoadThumbnailImageAsync,The following statement contains a magic number: tileCountX * tileCountY > 10
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Magic Number,OpenTween.Thumbnail,OSMThumbnailInfo,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Thumbnail\MapThumbOSM.cs,WorldToTilePos,The following statement contains a magic number: return new PointF              {                  X = (float)((lon + 180.0) / 360.0 * (1 << zoom))'                  Y = (float)((1.0 - Math.Log(Math.Tan(lat * Math.PI / 180.0) +                      1.0 / Math.Cos(lat * Math.PI / 180.0)) / Math.PI) / 2.0 * (1 << zoom))'              };
Missing Default,OpenTween,MyLists,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\MyLists.cs,ListsCheckedListBox_MouseDown,The following switch statement is missing a default case: switch (e.Button)              {                  case MouseButtons.Left:                      //項目が無い部分をクリックしても、選択されている項目のチェック状態が変更されてしまうので、その対策                      for (var index = 0; index < this.ListsCheckedListBox.Items.Count; index++)                      {                          if (this.ListsCheckedListBox.GetItemRectangle(index).Contains(e.Location))                              return;                      }                      this.ListsCheckedListBox.SelectedItem = null;                      break;                  case MouseButtons.Right:                      //コンテキストメニューの項目実行時にSelectedItemプロパティを利用出来るように                      for (var index = 0; index < this.ListsCheckedListBox.Items.Count; index++)                      {                          if (this.ListsCheckedListBox.GetItemRectangle(index).Contains(e.Location))                          {                              this.ListsCheckedListBox.SetSelected(index' true);                              return;                          }                      }                      this.ListsCheckedListBox.SelectedItem = null;                      break;              }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,TweenMain_Load,The following switch statement is missing a default case: switch (SettingManager.Common.SortColumn)              {                  case 0:    //0:アイコン'5:未読マーク'6:プロテクト・フィルターマーク                  case 5:                  case 6:                      //ソートしない                      mode = ComparerMode.Id;  //Idソートに読み替え                      break;                  case 1:  //ニックネーム                      mode = ComparerMode.Nickname;                      break;                  case 2:  //本文                      mode = ComparerMode.Data;                      break;                  case 3:  //時刻=発言Id                      mode = ComparerMode.Id;                      break;                  case 4:  //名前                      mode = ComparerMode.Name;                      break;                  case 7:  //Source                      mode = ComparerMode.Source;                      break;              }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following switch statement is missing a default case: switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,NotifyNewPosts,The following switch statement is missing a default case: switch (SettingManager.Common.NameBalloon)                              {                                  case MyCommon.NameBalloonEnum.UserID:                                      sb.Append(post.ScreenName).Append(" : ");                                      break;                                  case MyCommon.NameBalloonEnum.NickName:                                      sb.Append(post.Nickname).Append(" : ");                                      break;                              }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,PostButton_Click,The following switch statement is missing a default case: switch (rtResult)                  {                      case DialogResult.Yes:                          StatusText.Text = "";                          await this.doReTweetOfficial(false);                          return;                      case DialogResult.Cancel:                          return;                  }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_MouseDoubleClick,The following switch statement is missing a default case: switch (SettingManager.Common.ListDoubleClickAction)              {                  case 0:                      MakeReplyOrDirectStatus();                      break;                  case 1:                      await this.FavoriteChange(true);                      break;                  case 2:                      var post = this.CurrentPost;                      if (post != null)                          await this.ShowUserStatus(post.ScreenName' false);                      break;                  case 3:                      await ShowUserTimeline();                      break;                  case 4:                      ShowRelatedStatusesMenuItem_Click(this.ShowRelatedStatusesMenuItem' EventArgs.Empty);                      break;                  case 5:                      MoveToHomeToolStripMenuItem_Click(this.MoveToHomeToolStripMenuItem' EventArgs.Empty);                      break;                  case 6:                      StatusOpenMenuItem_Click(this.StatusOpenMenuItem' EventArgs.Empty);                      break;                  case 7:                      //動作なし                      break;              }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SaveConfigsTabs,The following switch statement is missing a default case: switch (tab)                  {                      case FilterTabModel filterTab:                          tabSetting.FilterArray = filterTab.FilterArray;                          break;                      case UserTimelineTabModel userTab:                          tabSetting.User = userTab.ScreenName;                          break;                      case PublicSearchTabModel searchTab:                          tabSetting.SearchWords = searchTab.SearchWords;                          tabSetting.SearchLang = searchTab.SearchLang;                          break;                      case ListTimelineTabModel listTab:                          tabSetting.ListInfo = listTab.ListInfo;                          break;                  }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,SetMainWindowTitle,The following switch statement is missing a default case: switch (SettingManager.Common.DispLatestPost)              {                  case MyCommon.DispTitleEnum.Ver:                      ttl.Append("Ver:").Append(MyCommon.GetReadableVersion());                      break;                  case MyCommon.DispTitleEnum.Post:                      if (_history != null && _history.Count > 1)                          ttl.Append(_history[_history.Count - 2].status.Replace("\r\n"' " "));                      break;                  case MyCommon.DispTitleEnum.UnreadRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText1' _statuses.MentionTab.UnreadCount + _statuses.DirectMessageTab.UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText2' ur);                      break;                  case MyCommon.DispTitleEnum.UnreadAllRepCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText3' ur' _statuses.MentionTab.UnreadCount + _statuses.DirectMessageTab.UnreadCount);                      break;                  case MyCommon.DispTitleEnum.UnreadCountAllCount:                      ttl.AppendFormat(Properties.Resources.SetMainWindowTitleText4' ur' al);                      break;                  case MyCommon.DispTitleEnum.OwnStatus:                      if (followers == 0 && tw.FollowersCount > 0) followers = tw.FollowersCount;                      ttl.AppendFormat(Properties.Resources.OwnStatusTitle' tw.StatusesCount' tw.FriendsCount' tw.FollowersCount' tw.FollowersCount - followers);                      break;              }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,MyList_ColumnReordered,The following switch statement is missing a default case: switch (darr[i])                      {                          case 0:                              SettingManager.Local.DisplayIndex1 = i;                              break;                          case 1:                              SettingManager.Local.DisplayIndex2 = i;                              break;                          case 2:                              SettingManager.Local.DisplayIndex3 = i;                              break;                          case 3:                              SettingManager.Local.DisplayIndex4 = i;                              break;                          case 4:                              SettingManager.Local.DisplayIndex5 = i;                              break;                          case 5:                              SettingManager.Local.DisplayIndex6 = i;                              break;                          case 6:                              SettingManager.Local.DisplayIndex7 = i;                              break;                          case 7:                              SettingManager.Local.DisplayIndex8 = i;                              break;                      }
Missing Default,OpenTween,TweenMain,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Tween.cs,doReTweetOfficial,The following switch statement is missing a default case: switch (MessageBox.Show(QuestionText' "Retweet"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question))                      {                          case DialogResult.Cancel:                          case DialogResult.No:                              _DoFavRetweetFlags = false;                              return;                      }
Missing Default,OpenTween,Twitter,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Twitter.cs,GetApiResultCount,The following switch statement is missing a default case: switch (type)                  {                      case MyCommon.WORKERTYPE.Favorites:                          if (SettingManager.Common.FavoritesCountApi != 0)                              return SettingManager.Common.FavoritesCountApi;                          break;                      case MyCommon.WORKERTYPE.List:                          if (SettingManager.Common.ListCountApi != 0)                              return SettingManager.Common.ListCountApi;                          break;                      case MyCommon.WORKERTYPE.PublicSearch:                          if (SettingManager.Common.SearchCountApi != 0)                              return SettingManager.Common.SearchCountApi;                          break;                      case MyCommon.WORKERTYPE.UserTimeline:                          if (SettingManager.Common.UserTimelineCountApi != 0)                              return SettingManager.Common.UserTimelineCountApi;                          break;                  }
Missing Default,OpenTween.Models,FilterTabModel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\FilterTabModel.cs,AddFiltered,The following switch statement is missing a default case: switch (ft.ExecFilter(post))   //フィルタクラスでヒット判定                          {                              case MyCommon.HITRESULT.None:                                  break;                              case MyCommon.HITRESULT.Copy:                                  if (rslt != MyCommon.HITRESULT.CopyAndMark) rslt = MyCommon.HITRESULT.Copy;                                  break;                              case MyCommon.HITRESULT.CopyAndMark:                                  rslt = MyCommon.HITRESULT.CopyAndMark;                                  break;                              case MyCommon.HITRESULT.Move:                                  rslt = MyCommon.HITRESULT.Move;                                  break;                              case MyCommon.HITRESULT.Exclude:                                  rslt = MyCommon.HITRESULT.Exclude;                                  goto exit_for;                          }
Missing Default,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,DistributePosts,The following switch statement is missing a default case: switch (tab.AddFiltered(post))                          {                              case MyCommon.HITRESULT.Copy:                                  filterHit = true;                                  break;                              case MyCommon.HITRESULT.CopyAndMark:                                  filterHit = true;                                  mark = true;                                  break;                              case MyCommon.HITRESULT.Move:                                  filterHit = true;                                  moved = true;                                  break;                              case MyCommon.HITRESULT.None:                                  break;                              case MyCommon.HITRESULT.Exclude:                                  if (tab.TabType == MyCommon.TabUsageType.Mentions)                                      excludedReply = true;                                  break;                          }
Missing Default,OpenTween.Models,TabInformations,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Models\TabInformations.cs,FilterAll,The following switch statement is missing a default case: switch (tab.AddFiltered(post' immediately: true))                          {                              case MyCommon.HITRESULT.Copy:                                  filterHit = true;                                  break;                              case MyCommon.HITRESULT.CopyAndMark:                                  filterHit = true;                                  mark = true;                                  break;                              case MyCommon.HITRESULT.Move:                                  filterHit = true;                                  moved = true;                                  break;                              case MyCommon.HITRESULT.None:                                  break;                              case MyCommon.HITRESULT.Exclude:                                  excluded = true;                                  break;                          }
Missing Default,OpenTween.OpenTweenCustomControl,DetailsListView,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\DetailsListView.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case WM_ERASEBKGND:                      if (this.changeBounds != Rectangle.Empty)                          m.Msg = 0;                      break;                  case WM_PAINT:                      if (this.changeBounds != Rectangle.Empty)                      {                          NativeMethods.ValidateRect(this.Handle' IntPtr.Zero);                          this.Invalidate(this.changeBounds);                          this.changeBounds = Rectangle.Empty;                      }                      break;                  case WM_HSCROLL:                      HScrolled?.Invoke(this' EventArgs.Empty);                      break;                  case WM_VSCROLL:                      VScrolled?.Invoke(this' EventArgs.Empty);                      break;                  case WM_MOUSEWHEEL:                  case WM_MOUSEHWHEEL:                  case WM_KEYDOWN:                      vPos = NativeMethods.GetScrollPosition(this' NativeMethods.ScrollBarDirection.SB_VERT);                      hPos = NativeMethods.GetScrollPosition(this' NativeMethods.ScrollBarDirection.SB_HORZ);                      break;                  case WM_CONTEXTMENU:                      if (m.WParam != this.Handle)                      {                          //カラムヘッダメニューを表示                          this.ColumnHeaderContextMenuStrip?.Show(new Point(m.LParam.ToInt32()));                          return;                      }                      break;                  case LVM_SETITEMCOUNT:                      m.LParam = new IntPtr(LVSICF_NOSCROLL | LVSICF_NOINVALIDATEALL);                      break;                  case WM_REFLECT + WM_NOTIFY:                      var nmhdr = Marshal.PtrToStructure<NMHDR>(m.LParam);                        // Ctrl+クリックで選択状態を変更した場合にイベントが発生しない問題への対処                      if (nmhdr.code == LVN_ODSTATECHANGED)                          this.OnSelectedIndexChanged(EventArgs.Empty);                      break;              }
Missing Default,OpenTween.Setting.Panel,NotifyPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\NotifyPanel.cs,GetEventNotifyFlag,The following switch statement is missing a default case: switch (tbl.CheckBox.CheckState)                  {                      case CheckState.Checked:                          evt |= tbl.Type;                          myevt |= tbl.Type;                          break;                      case CheckState.Indeterminate:                          evt |= tbl.Type;                          break;                      case CheckState.Unchecked:                          break;                  }
Missing Default,OpenTween.Setting.Panel,TweetActPanel,C:\research\architectureSmells\repos\opentween_OpenTween\OpenTween\Setting\Panel\TweetActPanel.cs,SaveConfig,The following switch statement is missing a default case: switch (this.ComboBoxPostKeySelect.SelectedIndex)              {                  case 2:                      settingCommon.PostShiftEnter = true;                      settingCommon.PostCtrlEnter = false;                      break;                  case 1:                      settingCommon.PostCtrlEnter = true;                      settingCommon.PostShiftEnter = false;                      break;                  case 0:                      settingCommon.PostCtrlEnter = false;                      settingCommon.PostShiftEnter = false;                      break;              }
