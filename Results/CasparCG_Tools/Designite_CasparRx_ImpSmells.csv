Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The length of the statement  "		this.reconnectSubscription = Observable.Interval (TimeSpan.FromSeconds (1)).ObserveOn (scheduler).Subscribe (x => this.Connect ()); " is 131.
Long Statement,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The length of the statement  "			return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value); " is 188.
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: try {  	if (this.IsConnected)  		return true;  	this.Reset ();  	this.client = new TcpClient (this.host' this.port) {  		ReceiveTimeout = 3000'  		SendTimeout = 3000  	};  	this.connectedSubject.OnNext (true);  	this.AsyncSend ("VERSION").Select (x => {  		var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  		var match = exp.Match (x);  		if (!match.Success)  			throw new Exception ("Invalid VERSION response.");  		return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  	}).Subscribe (x => this.versionSubject.OnNext (x));  } catch {  	this.Reset ();  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: try {  	if (this.IsConnected)  		return true;  	this.Reset ();  	this.client = new TcpClient (this.host' this.port) {  		ReceiveTimeout = 3000'  		SendTimeout = 3000  	};  	this.connectedSubject.OnNext (true);  	this.AsyncSend ("VERSION").Select (x => {  		var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  		var match = exp.Match (x);  		if (!match.Success)  			throw new Exception ("Invalid VERSION response.");  		return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  	}).Subscribe (x => this.versionSubject.OnNext (x));  } catch {  	this.Reset ();  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: try {  	if (this.IsConnected)  		return true;  	this.Reset ();  	this.client = new TcpClient (this.host' this.port) {  		ReceiveTimeout = 3000'  		SendTimeout = 3000  	};  	this.connectedSubject.OnNext (true);  	this.AsyncSend ("VERSION").Select (x => {  		var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  		var match = exp.Match (x);  		if (!match.Success)  			throw new Exception ("Invalid VERSION response.");  		return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  	}).Subscribe (x => this.versionSubject.OnNext (x));  } catch {  	this.Reset ();  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: try {  	if (this.IsConnected)  		return true;  	this.Reset ();  	this.client = new TcpClient (this.host' this.port) {  		ReceiveTimeout = 3000'  		SendTimeout = 3000  	};  	this.connectedSubject.OnNext (true);  	this.AsyncSend ("VERSION").Select (x => {  		var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  		var match = exp.Match (x);  		if (!match.Success)  			throw new Exception ("Invalid VERSION response.");  		return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  	}).Subscribe (x => this.versionSubject.OnNext (x));  } catch {  	this.Reset ();  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: try {  	if (this.IsConnected)  		return true;  	this.Reset ();  	this.client = new TcpClient (this.host' this.port) {  		ReceiveTimeout = 3000'  		SendTimeout = 3000  	};  	this.connectedSubject.OnNext (true);  	this.AsyncSend ("VERSION").Select (x => {  		var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  		var match = exp.Match (x);  		if (!match.Success)  			throw new Exception ("Invalid VERSION response.");  		return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  	}).Subscribe (x => this.versionSubject.OnNext (x));  } catch {  	this.Reset ();  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: try {  	if (this.IsConnected)  		return true;  	this.Reset ();  	this.client = new TcpClient (this.host' this.port) {  		ReceiveTimeout = 3000'  		SendTimeout = 3000  	};  	this.connectedSubject.OnNext (true);  	this.AsyncSend ("VERSION").Select (x => {  		var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  		var match = exp.Match (x);  		if (!match.Success)  			throw new Exception ("Invalid VERSION response.");  		return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  	}).Subscribe (x => this.versionSubject.OnNext (x));  } catch {  	this.Reset ();  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: this.client = new TcpClient (this.host' this.port) {  	ReceiveTimeout = 3000'  	SendTimeout = 3000  };  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: this.client = new TcpClient (this.host' this.port) {  	ReceiveTimeout = 3000'  	SendTimeout = 3000  };  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: this.AsyncSend ("VERSION").Select (x => {  	var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  	var match = exp.Match (x);  	if (!match.Success)  		throw new Exception ("Invalid VERSION response.");  	return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  }).Subscribe (x => this.versionSubject.OnNext (x));  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: this.AsyncSend ("VERSION").Select (x => {  	var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  	var match = exp.Match (x);  	if (!match.Success)  		throw new Exception ("Invalid VERSION response.");  	return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  }).Subscribe (x => this.versionSubject.OnNext (x));  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: this.AsyncSend ("VERSION").Select (x => {  	var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  	var match = exp.Match (x);  	if (!match.Success)  		throw new Exception ("Invalid VERSION response.");  	return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  }).Subscribe (x => this.versionSubject.OnNext (x));  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: this.AsyncSend ("VERSION").Select (x => {  	var exp = new Regex (@"(\d+)\.(\d+)\.(\d+)\.(\d+)\s+(.*)");  	var match = exp.Match (x);  	if (!match.Success)  		throw new Exception ("Invalid VERSION response.");  	return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  }).Subscribe (x => this.versionSubject.OnNext (x));  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,Connect,The following statement contains a magic number: return new Version (int.Parse (match.Groups [1].Value)' int.Parse (match.Groups [2].Value)' int.Parse (match.Groups [3].Value)' int.Parse (match.Groups [4].Value)' match.Groups [5].Value);  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,ReadLine,The following statement contains a magic number: while (true) {  	var c = reader.Read ();  	if (c == -1)  		throw new IOException ();  	str.Append ((char)c);  	if (str.Length >= 2 && str [str.Length - 2] == '\r' && str [str.Length - 1] == '\n')  		break;  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,ReadLine,The following statement contains a magic number: while (true) {  	var c = reader.Read ();  	if (c == -1)  		throw new IOException ();  	str.Append ((char)c);  	if (str.Length >= 2 && str [str.Length - 2] == '\r' && str [str.Length - 1] == '\n')  		break;  }  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,ReadLine,The following statement contains a magic number: if (str.Length >= 2 && str [str.Length - 2] == '\r' && str [str.Length - 1] == '\n')  	break;  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,ReadLine,The following statement contains a magic number: if (str.Length >= 2 && str [str.Length - 2] == '\r' && str [str.Length - 1] == '\n')  	break;  
Magic Number,CasparRx,Connection,F:\newReposMay17\CasparCG_Tools\csharp\CasparRx\trunk\CasparRx\Connection.cs,ReadLine,The following statement contains a magic number: return str.ToString (0' str.Length - 2);  
