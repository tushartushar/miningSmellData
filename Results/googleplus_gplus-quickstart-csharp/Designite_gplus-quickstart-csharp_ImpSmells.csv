Implementation smell,Namespace,Class,File,Method,Description
Long Method,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,The method has 149 lines of code.
Complex Method,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,Cyclomatic complexity of the method is 10
Magic Number,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,The following statement contains a magic number: if (context.Request.Path.EndsWith("/signin.ashx"))              {                  String state = (String)context.Session["state"];                    // Store a random string in the session for verifying                  // the responses in our OAuth2 flow.                  if (state == null)                  {                      Random random = new Random((int)DateTime.Now.Ticks);                      StringBuilder builder = new StringBuilder();                      for (int i = 0; i < 13; i++)                      {                          builder.Append(Convert.ToChar(                                  Convert.ToInt32(Math.Floor(                                          26 * random.NextDouble() + 65))));                      }                      state = builder.ToString();                      context.Session["state"] = state;                  }                    // Render the templated HTML.                  String templatedHTML = File.ReadAllText(                       context.Server.MapPath("index.html"));                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*APPLICATION_NAME\\s*[}]{2}"' APP_NAME);                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*CLIENT_ID\\s*[}]{2}"' secrets.ClientId);                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*STATE\\s*[}]{2}"' state);                    context.Response.ContentType = "text/html";                  context.Response.Write(templatedHTML);                  return;              }
Magic Number,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,The following statement contains a magic number: if (context.Request.Path.EndsWith("/signin.ashx"))              {                  String state = (String)context.Session["state"];                    // Store a random string in the session for verifying                  // the responses in our OAuth2 flow.                  if (state == null)                  {                      Random random = new Random((int)DateTime.Now.Ticks);                      StringBuilder builder = new StringBuilder();                      for (int i = 0; i < 13; i++)                      {                          builder.Append(Convert.ToChar(                                  Convert.ToInt32(Math.Floor(                                          26 * random.NextDouble() + 65))));                      }                      state = builder.ToString();                      context.Session["state"] = state;                  }                    // Render the templated HTML.                  String templatedHTML = File.ReadAllText(                       context.Server.MapPath("index.html"));                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*APPLICATION_NAME\\s*[}]{2}"' APP_NAME);                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*CLIENT_ID\\s*[}]{2}"' secrets.ClientId);                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*STATE\\s*[}]{2}"' state);                    context.Response.ContentType = "text/html";                  context.Response.Write(templatedHTML);                  return;              }
Magic Number,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,The following statement contains a magic number: if (context.Request.Path.EndsWith("/signin.ashx"))              {                  String state = (String)context.Session["state"];                    // Store a random string in the session for verifying                  // the responses in our OAuth2 flow.                  if (state == null)                  {                      Random random = new Random((int)DateTime.Now.Ticks);                      StringBuilder builder = new StringBuilder();                      for (int i = 0; i < 13; i++)                      {                          builder.Append(Convert.ToChar(                                  Convert.ToInt32(Math.Floor(                                          26 * random.NextDouble() + 65))));                      }                      state = builder.ToString();                      context.Session["state"] = state;                  }                    // Render the templated HTML.                  String templatedHTML = File.ReadAllText(                       context.Server.MapPath("index.html"));                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*APPLICATION_NAME\\s*[}]{2}"' APP_NAME);                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*CLIENT_ID\\s*[}]{2}"' secrets.ClientId);                  templatedHTML = Regex.Replace(templatedHTML'                      "[{]{2}\\s*STATE\\s*[}]{2}"' state);                    context.Response.ContentType = "text/html";                  context.Response.Write(templatedHTML);                  return;              }
Magic Number,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,The following statement contains a magic number: if (context.Session["authState"] == null)              {                  // The connect action exchanges a code from the sign-in button'                  // verifies it' and creates OAuth2 credentials.                  if (context.Request.Path.Contains("/connect"))                  {                      // Get the code from the request POST body.                      StreamReader sr = new StreamReader(                          context.Request.InputStream);                      string code = sr.ReadToEnd();                        string state = context.Request["state"];                        // Test that the request state matches the session state.                      if (!state.Equals(context.Session["state"]))                      {                          context.Response.StatusCode = 401;                          return;                      }                        // Use the code exchange flow to get an access and refresh token.                      IAuthorizationCodeFlow flow =                          new GoogleAuthorizationCodeFlow(new GoogleAuthorizationCodeFlow.Initializer                          {                              ClientSecrets = secrets'                              Scopes = SCOPES                          });                        token = flow.ExchangeCodeForTokenAsync(""' code' "postmessage"'                              CancellationToken.None).Result;                        // Create an authorization state from the returned token.                      context.Session["authState"] = token;                        // Get tokeninfo for the access token if you want to verify.                      Oauth2Service service = new Oauth2Service(                          new Google.Apis.Services.BaseClientService.Initializer());                      Oauth2Service.TokeninfoRequest request = service.Tokeninfo();                      request.AccessToken = token.AccessToken;                        Tokeninfo info = request.Execute();                        string gplus_id = info.UserId;                  }                  else                  {                      // No cached state and we are not connecting.                      context.Response.StatusCode = 400;                      return;                  }              }              else if (context.Request.Path.Contains("/connect"))              {                  // The user is already connected and credentials are cached.                  context.Response.ContentType = "application/json";                  context.Response.StatusCode = 200;                  context.Response.Write(JsonConvert.SerializeObject("Current user is already connected."));                  return;              }              else              {                  // Register the authenticator and construct the Plus service                  // for performing API calls on behalf of the user.                  token = (TokenResponse)context.Session["authState"];                  IAuthorizationCodeFlow flow =                      new GoogleAuthorizationCodeFlow(new GoogleAuthorizationCodeFlow.Initializer                      {                          ClientSecrets = secrets'                          Scopes = SCOPES                      });                    UserCredential credential = new UserCredential(flow' "me"' token);                  bool success = credential.RefreshTokenAsync(CancellationToken.None).Result;                    token = credential.Token;                  ps = new PlusService(                      new Google.Apis.Services.BaseClientService.Initializer()                      {                          ApplicationName = ".NET Quickstart"'                          HttpClientInitializer = credential                      });              }
Magic Number,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,The following statement contains a magic number: if (context.Session["authState"] == null)              {                  // The connect action exchanges a code from the sign-in button'                  // verifies it' and creates OAuth2 credentials.                  if (context.Request.Path.Contains("/connect"))                  {                      // Get the code from the request POST body.                      StreamReader sr = new StreamReader(                          context.Request.InputStream);                      string code = sr.ReadToEnd();                        string state = context.Request["state"];                        // Test that the request state matches the session state.                      if (!state.Equals(context.Session["state"]))                      {                          context.Response.StatusCode = 401;                          return;                      }                        // Use the code exchange flow to get an access and refresh token.                      IAuthorizationCodeFlow flow =                          new GoogleAuthorizationCodeFlow(new GoogleAuthorizationCodeFlow.Initializer                          {                              ClientSecrets = secrets'                              Scopes = SCOPES                          });                        token = flow.ExchangeCodeForTokenAsync(""' code' "postmessage"'                              CancellationToken.None).Result;                        // Create an authorization state from the returned token.                      context.Session["authState"] = token;                        // Get tokeninfo for the access token if you want to verify.                      Oauth2Service service = new Oauth2Service(                          new Google.Apis.Services.BaseClientService.Initializer());                      Oauth2Service.TokeninfoRequest request = service.Tokeninfo();                      request.AccessToken = token.AccessToken;                        Tokeninfo info = request.Execute();                        string gplus_id = info.UserId;                  }                  else                  {                      // No cached state and we are not connecting.                      context.Response.StatusCode = 400;                      return;                  }              }              else if (context.Request.Path.Contains("/connect"))              {                  // The user is already connected and credentials are cached.                  context.Response.ContentType = "application/json";                  context.Response.StatusCode = 200;                  context.Response.Write(JsonConvert.SerializeObject("Current user is already connected."));                  return;              }              else              {                  // Register the authenticator and construct the Plus service                  // for performing API calls on behalf of the user.                  token = (TokenResponse)context.Session["authState"];                  IAuthorizationCodeFlow flow =                      new GoogleAuthorizationCodeFlow(new GoogleAuthorizationCodeFlow.Initializer                      {                          ClientSecrets = secrets'                          Scopes = SCOPES                      });                    UserCredential credential = new UserCredential(flow' "me"' token);                  bool success = credential.RefreshTokenAsync(CancellationToken.None).Result;                    token = credential.Token;                  ps = new PlusService(                      new Google.Apis.Services.BaseClientService.Initializer()                      {                          ApplicationName = ".NET Quickstart"'                          HttpClientInitializer = credential                      });              }
Magic Number,GPlusQuickstartCsharp,Signin,C:\repos\googleplus_gplus-quickstart-csharp\gplus-quickstart-csharp\signin.ashx.cs,ProcessRequest,The following statement contains a magic number: if (context.Session["authState"] == null)              {                  // The connect action exchanges a code from the sign-in button'                  // verifies it' and creates OAuth2 credentials.                  if (context.Request.Path.Contains("/connect"))                  {                      // Get the code from the request POST body.                      StreamReader sr = new StreamReader(                          context.Request.InputStream);                      string code = sr.ReadToEnd();                        string state = context.Request["state"];                        // Test that the request state matches the session state.                      if (!state.Equals(context.Session["state"]))                      {                          context.Response.StatusCode = 401;                          return;                      }                        // Use the code exchange flow to get an access and refresh token.                      IAuthorizationCodeFlow flow =                          new GoogleAuthorizationCodeFlow(new GoogleAuthorizationCodeFlow.Initializer                          {                              ClientSecrets = secrets'                              Scopes = SCOPES                          });                        token = flow.ExchangeCodeForTokenAsync(""' code' "postmessage"'                              CancellationToken.None).Result;                        // Create an authorization state from the returned token.                      context.Session["authState"] = token;                        // Get tokeninfo for the access token if you want to verify.                      Oauth2Service service = new Oauth2Service(                          new Google.Apis.Services.BaseClientService.Initializer());                      Oauth2Service.TokeninfoRequest request = service.Tokeninfo();                      request.AccessToken = token.AccessToken;                        Tokeninfo info = request.Execute();                        string gplus_id = info.UserId;                  }                  else                  {                      // No cached state and we are not connecting.                      context.Response.StatusCode = 400;                      return;                  }              }              else if (context.Request.Path.Contains("/connect"))              {                  // The user is already connected and credentials are cached.                  context.Response.ContentType = "application/json";                  context.Response.StatusCode = 200;                  context.Response.Write(JsonConvert.SerializeObject("Current user is already connected."));                  return;              }              else              {                  // Register the authenticator and construct the Plus service                  // for performing API calls on behalf of the user.                  token = (TokenResponse)context.Session["authState"];                  IAuthorizationCodeFlow flow =                      new GoogleAuthorizationCodeFlow(new GoogleAuthorizationCodeFlow.Initializer                      {                          ClientSecrets = secrets'                          Scopes = SCOPES                      });                    UserCredential credential = new UserCredential(flow' "me"' token);                  bool success = credential.RefreshTokenAsync(CancellationToken.None).Result;                    token = credential.Token;                  ps = new PlusService(                      new Google.Apis.Services.BaseClientService.Initializer()                      {                          ApplicationName = ".NET Quickstart"'                          HttpClientInitializer = credential                      });              }
