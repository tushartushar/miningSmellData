Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,CanProduceOccurrences,Cyclomatic complexity of the method is 9
Complex Method,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,AreEventSchedulesEqual,Cyclomatic complexity of the method is 24
Complex Method,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,PreviousOccurrence,Cyclomatic complexity of the method is 8
Complex Method,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,NextOccurrence,Cyclomatic complexity of the method is 8
Complex Method,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,DateRangeForPreviousOrNextOccurrence,Cyclomatic complexity of the method is 9
Complex Method,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,Cyclomatic complexity of the method is 9
Complex Method,ScheduleWidget.ScheduledEvents.FrequencyBuilder,EventFrequencyBuilder,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\FrequencyBuilder\EventFrequencyBuilder.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,DayMatches,Cyclomatic complexity of the method is 8
Complex Method,ScheduleWidget.TemporalExpressions,DayOfWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayOfWeekTE.cs,Includes,Cyclomatic complexity of the method is 8
Complex Method,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetDayOfWeekValue,Cyclomatic complexity of the method is 8
Long Statement,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The length of the statement  "                    dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) }; " is 120.
Long Statement,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The length of the statement  "                    dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) }; " is 120.
Long Statement,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The length of the statement  "                    dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) }; " is 122.
Long Statement,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The length of the statement  "                    dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) }; " is 122.
Long Statement,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The length of the statement  "                    dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddYears(interval * occurences) }; " is 121.
Long Statement,ScheduleWidget.ScheduledEvents.FrequencyBuilder.ConcreteBuilders,WeeklyEventBuilder,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\FrequencyBuilder\ConcreteBuilders\WeeklyEventBuilder.cs,Create,The length of the statement  "                foreach (DayOfWeekEnum day in daysOfWeek.Cast<DayOfWeekEnum>().OrderBy(e => e' new DayOfWeekEnumComparer(_event.FirstDayOfWeek))) " is 129.
Long Statement,ScheduleWidget.ScheduledEvents.FrequencyBuilder.ConcreteBuilders,WeeklyEventBuilder,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\FrequencyBuilder\ConcreteBuilders\WeeklyEventBuilder.cs,Create,The length of the statement  "                foreach (DayOfWeekEnum day in daysOfWeek.Cast<DayOfWeekEnum>().OrderBy(e => e' new DayOfWeekEnumComparer(_event.FirstDayOfWeek))) " is 129.
Long Statement,ScheduleWidget.TemporalExpressions,FloatingHolidayTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\FloatingHolidayTE.cs,Includes,The length of the statement  "            return MonthMatches(aDate) && TEHelpers.DayOfWeekMatches(aDate' _dayOfWeek) && TEHelpers.WeekMatches(aDate' _monthlyInterval); " is 126.
Long Statement,ScheduleWidget.TemporalExpressions,MonthTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\MonthTE.cs,Includes,The length of the statement  "                return IntervalMatches(aDate) && TEHelpers.DayOfWeekMatches(aDate' _dayOfWeek) && TEHelpers.WeekMatches(aDate' _monthlyInterval); " is 129.
Complex Conditional,ScheduleWidget.ScheduledEvents.FrequencyBuilder.ConcreteBuilders,YearlyEventBuilder,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\FrequencyBuilder\ConcreteBuilders\YearlyEventBuilder.cs,Create,The conditional expression  "_event.Anniversary.Day < 1 || _event.Anniversary.Day > 31 ||                      _event.Anniversary.Month < 1 || _event.Anniversary.Month > 12"  is complex.
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,CanProduceOccurrences,The following statement contains a magic number: switch (FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      break;                  case FrequencyTypeEnum.Weekly:                      maximumDaysWithoutOccurrence *= 7;                      break;                  case FrequencyTypeEnum.Monthly:                      maximumDaysWithoutOccurrence *= 31;                      break;                  case FrequencyTypeEnum.Quarterly:                      maximumDaysWithoutOccurrence *= 96;                      break;                  case FrequencyTypeEnum.Yearly:                      // Leap years have 366 days.                      maximumDaysWithoutOccurrence *= 366;                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,CanProduceOccurrences,The following statement contains a magic number: switch (FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      break;                  case FrequencyTypeEnum.Weekly:                      maximumDaysWithoutOccurrence *= 7;                      break;                  case FrequencyTypeEnum.Monthly:                      maximumDaysWithoutOccurrence *= 31;                      break;                  case FrequencyTypeEnum.Quarterly:                      maximumDaysWithoutOccurrence *= 96;                      break;                  case FrequencyTypeEnum.Yearly:                      // Leap years have 366 days.                      maximumDaysWithoutOccurrence *= 366;                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,CanProduceOccurrences,The following statement contains a magic number: switch (FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      break;                  case FrequencyTypeEnum.Weekly:                      maximumDaysWithoutOccurrence *= 7;                      break;                  case FrequencyTypeEnum.Monthly:                      maximumDaysWithoutOccurrence *= 31;                      break;                  case FrequencyTypeEnum.Quarterly:                      maximumDaysWithoutOccurrence *= 96;                      break;                  case FrequencyTypeEnum.Yearly:                      // Leap years have 366 days.                      maximumDaysWithoutOccurrence *= 366;                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,CanProduceOccurrences,The following statement contains a magic number: switch (FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      break;                  case FrequencyTypeEnum.Weekly:                      maximumDaysWithoutOccurrence *= 7;                      break;                  case FrequencyTypeEnum.Monthly:                      maximumDaysWithoutOccurrence *= 31;                      break;                  case FrequencyTypeEnum.Quarterly:                      maximumDaysWithoutOccurrence *= 96;                      break;                  case FrequencyTypeEnum.Yearly:                      // Leap years have 366 days.                      maximumDaysWithoutOccurrence *= 366;                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,RoughlyEstimateMinimumEventOccurrences,The following statement contains a magic number: int spanWeeks = timeSpan.Days / 7;
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,RoughlyEstimateMinimumEventOccurrences,The following statement contains a magic number: switch (eventInstance.FrequencyTypeOptions)              {                  case FrequencyTypeEnum.None:                      result = 1;                      break;                  case FrequencyTypeEnum.Daily:                      result = (spanDays / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Weekly:                      int includedDays = 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Mon) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Tue) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Wed) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Thu) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Fri) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sat) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sun) ? 1 : 0;                      result = ((spanWeeks / repeatInterval) * includedDays) - 1;                      break;                  case FrequencyTypeEnum.Monthly:                      int spanMonths = spanDays / 31;                      result = (spanMonths / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Quarterly:                      int spanQuarters = spanDays / 92;                      result = (spanQuarters / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Yearly:                      int spanYears = spanDays / 365;                      result = (spanYears / repeatInterval) - 1;                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,RoughlyEstimateMinimumEventOccurrences,The following statement contains a magic number: switch (eventInstance.FrequencyTypeOptions)              {                  case FrequencyTypeEnum.None:                      result = 1;                      break;                  case FrequencyTypeEnum.Daily:                      result = (spanDays / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Weekly:                      int includedDays = 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Mon) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Tue) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Wed) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Thu) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Fri) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sat) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sun) ? 1 : 0;                      result = ((spanWeeks / repeatInterval) * includedDays) - 1;                      break;                  case FrequencyTypeEnum.Monthly:                      int spanMonths = spanDays / 31;                      result = (spanMonths / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Quarterly:                      int spanQuarters = spanDays / 92;                      result = (spanQuarters / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Yearly:                      int spanYears = spanDays / 365;                      result = (spanYears / repeatInterval) - 1;                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,RoughlyEstimateMinimumEventOccurrences,The following statement contains a magic number: switch (eventInstance.FrequencyTypeOptions)              {                  case FrequencyTypeEnum.None:                      result = 1;                      break;                  case FrequencyTypeEnum.Daily:                      result = (spanDays / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Weekly:                      int includedDays = 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Mon) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Tue) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Wed) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Thu) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Fri) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sat) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sun) ? 1 : 0;                      result = ((spanWeeks / repeatInterval) * includedDays) - 1;                      break;                  case FrequencyTypeEnum.Monthly:                      int spanMonths = spanDays / 31;                      result = (spanMonths / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Quarterly:                      int spanQuarters = spanDays / 92;                      result = (spanQuarters / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Yearly:                      int spanYears = spanDays / 365;                      result = (spanYears / repeatInterval) - 1;                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,DateRangeForPreviousOrNextOccurrence,The following statement contains a magic number: switch (_event.FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddDays(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddDays(interval) };                      break;                  case FrequencyTypeEnum.Weekly:                      interval = (_event.RepeatInterval + 1) * 7;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddDays(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddDays(interval) };                      break;                  case FrequencyTypeEnum.Monthly:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddMonths(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddMonths(interval) };                      break;                  case FrequencyTypeEnum.Quarterly:                      //Assign a default value as there is no interval option available for this frequency type now.                      interval = 12;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddMonths(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddMonths(interval) };                      break;                  case FrequencyTypeEnum.Yearly:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddYears(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddYears(interval) };                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,DateRangeForPreviousOrNextOccurrence,The following statement contains a magic number: switch (_event.FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddDays(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddDays(interval) };                      break;                  case FrequencyTypeEnum.Weekly:                      interval = (_event.RepeatInterval + 1) * 7;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddDays(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddDays(interval) };                      break;                  case FrequencyTypeEnum.Monthly:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddMonths(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddMonths(interval) };                      break;                  case FrequencyTypeEnum.Quarterly:                      //Assign a default value as there is no interval option available for this frequency type now.                      interval = 12;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddMonths(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddMonths(interval) };                      break;                  case FrequencyTypeEnum.Yearly:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddYears(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddYears(interval) };                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The following statement contains a magic number: switch (frequencyType)              {                  case FrequencyTypeEnum.Daily:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) };                      break;                  case FrequencyTypeEnum.Weekly:                      interval = (_event.RepeatInterval + 1) * 7;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) };                      break;                  case FrequencyTypeEnum.Monthly:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) };                      break;                  case FrequencyTypeEnum.Quarterly:                      //Assign a default value as there is no interval option available for this frequency type now.                      interval = 12;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) };                      break;                  case FrequencyTypeEnum.Yearly:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddYears(interval * occurences) };                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The following statement contains a magic number: switch (frequencyType)              {                  case FrequencyTypeEnum.Daily:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) };                      break;                  case FrequencyTypeEnum.Weekly:                      interval = (_event.RepeatInterval + 1) * 7;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) };                      break;                  case FrequencyTypeEnum.Monthly:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) };                      break;                  case FrequencyTypeEnum.Quarterly:                      //Assign a default value as there is no interval option available for this frequency type now.                      interval = 12;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) };                      break;                  case FrequencyTypeEnum.Yearly:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddYears(interval * occurences) };                      break;              }
Magic Number,ScheduleWidget.ScheduledEvents.FrequencyBuilder.ConcreteBuilders,YearlyEventBuilder,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\FrequencyBuilder\ConcreteBuilders\YearlyEventBuilder.cs,Create,The following statement contains a magic number: _event.Anniversary.Day < 1 || _event.Anniversary.Day > 31 ||                      _event.Anniversary.Month < 1 || _event.Anniversary.Month > 12
Magic Number,ScheduleWidget.ScheduledEvents.FrequencyBuilder.ConcreteBuilders,YearlyEventBuilder,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\FrequencyBuilder\ConcreteBuilders\YearlyEventBuilder.cs,Create,The following statement contains a magic number: _event.Anniversary.Day < 1 || _event.Anniversary.Day > 31 ||                      _event.Anniversary.Month < 1 || _event.Anniversary.Month > 12
Magic Number,ScheduleWidget.TemporalExpressions,DayInQuarterTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInQuarterTE.cs,BuildMonthQuarterMatrix,The following statement contains a magic number: Array quarterMonthArray = Array.CreateInstance(typeof(Int32)' 4' 3);
Magic Number,ScheduleWidget.TemporalExpressions,DayInQuarterTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInQuarterTE.cs,BuildMonthQuarterMatrix,The following statement contains a magic number: Array quarterMonthArray = Array.CreateInstance(typeof(Int32)' 4' 3);
Magic Number,ScheduleWidget.TemporalExpressions,DayInQuarterTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInQuarterTE.cs,BuildMonthQuarterMatrix,The following statement contains a magic number: m <= 3
Magic Number,ScheduleWidget.TemporalExpressions,DayInQuarterTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInQuarterTE.cs,BuildMonthQuarterMatrix,The following statement contains a magic number: q <= 4
Magic Number,ScheduleWidget.TemporalExpressions,DayInQuarterTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInQuarterTE.cs,GetQuarterValue,The following statement contains a magic number: switch (quarter)              {                  case QuarterEnum.First:                      q = 0;                      break;                  case QuarterEnum.Second:                      q = 1;                      break;                  case QuarterEnum.Third:                      q = 2;                      break;                  default:                      q = 3;                      break;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInQuarterTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInQuarterTE.cs,GetQuarterValue,The following statement contains a magic number: switch (quarter)              {                  case QuarterEnum.First:                      q = 0;                      break;                  case QuarterEnum.Second:                      q = 1;                      break;                  case QuarterEnum.Third:                      q = 2;                      break;                  default:                      q = 3;                      break;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInQuarterTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInQuarterTE.cs,GetQuarterIntervalValue,The following statement contains a magic number: switch (quarterInterval)              {                  case QuarterlyIntervalEnum.First:                      q = 0;                      break;                  case QuarterlyIntervalEnum.Second:                      q = 1;                      break;                                        default:                      q = 2;                      break;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,DayMatches,The following statement contains a magic number: switch (aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int)_dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,DayMatches,The following statement contains a magic number: switch (aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int)_dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,DayMatches,The following statement contains a magic number: switch (aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int)_dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,DayMatches,The following statement contains a magic number: switch (aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int)_dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,DayMatches,The following statement contains a magic number: switch (aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int)_dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,DayMatches,The following statement contains a magic number: switch (aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int)_dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,WeekMatches,The following statement contains a magic number: double weeks = Math.Round((startOfWeek - _firstDateOfWeek).TotalDays / 7);
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,WeekMatches,The following statement contains a magic number: var endOfWeek = startOfWeek.AddDays(7);
Magic Number,ScheduleWidget.TemporalExpressions,DayInWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayInWeekTE.cs,StartOfWeek,The following statement contains a magic number: diff += 7;
Magic Number,ScheduleWidget.TemporalExpressions,DayOfWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayOfWeekTE.cs,Includes,The following statement contains a magic number: switch(aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int) _dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayOfWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayOfWeekTE.cs,Includes,The following statement contains a magic number: switch(aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int) _dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayOfWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayOfWeekTE.cs,Includes,The following statement contains a magic number: switch(aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int) _dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayOfWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayOfWeekTE.cs,Includes,The following statement contains a magic number: switch(aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int) _dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayOfWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayOfWeekTE.cs,Includes,The following statement contains a magic number: switch(aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int) _dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,DayOfWeekTE,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\DayOfWeekTE.cs,Includes,The following statement contains a magic number: switch(aDate.DayOfWeek)              {                  case DayOfWeek.Sunday:                      return ((int) _dayOfWeek == 1);                    case DayOfWeek.Monday:                      return ((int)_dayOfWeek == 2);                    case DayOfWeek.Tuesday:                      return ((int)_dayOfWeek == 4);                    case DayOfWeek.Wednesday:                      return ((int)_dayOfWeek == 8);                    case DayOfWeek.Thursday:                      return ((int)_dayOfWeek == 16);                    case DayOfWeek.Friday:                      return ((int)_dayOfWeek == 32);                    case DayOfWeek.Saturday:                      return ((int)_dayOfWeek == 64);                    default:                      return false;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetWeekInMonth,The following statement contains a magic number: var value = ((dayNumber - 1) / 7) + 1;
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetDayOfWeekValue,The following statement contains a magic number: switch (dayOfWeekOption)              {                  case DayOfWeekEnum.Sun:                      return 0;                    case DayOfWeekEnum.Mon:                      return 1;                    case DayOfWeekEnum.Tue:                      return 2;                    case DayOfWeekEnum.Wed:                      return 3;                    case DayOfWeekEnum.Thu:                      return 4;                    case DayOfWeekEnum.Fri:                      return 5;                    case DayOfWeekEnum.Sat:                      return 6;                    default:                      return 0;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetDayOfWeekValue,The following statement contains a magic number: switch (dayOfWeekOption)              {                  case DayOfWeekEnum.Sun:                      return 0;                    case DayOfWeekEnum.Mon:                      return 1;                    case DayOfWeekEnum.Tue:                      return 2;                    case DayOfWeekEnum.Wed:                      return 3;                    case DayOfWeekEnum.Thu:                      return 4;                    case DayOfWeekEnum.Fri:                      return 5;                    case DayOfWeekEnum.Sat:                      return 6;                    default:                      return 0;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetDayOfWeekValue,The following statement contains a magic number: switch (dayOfWeekOption)              {                  case DayOfWeekEnum.Sun:                      return 0;                    case DayOfWeekEnum.Mon:                      return 1;                    case DayOfWeekEnum.Tue:                      return 2;                    case DayOfWeekEnum.Wed:                      return 3;                    case DayOfWeekEnum.Thu:                      return 4;                    case DayOfWeekEnum.Fri:                      return 5;                    case DayOfWeekEnum.Sat:                      return 6;                    default:                      return 0;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetDayOfWeekValue,The following statement contains a magic number: switch (dayOfWeekOption)              {                  case DayOfWeekEnum.Sun:                      return 0;                    case DayOfWeekEnum.Mon:                      return 1;                    case DayOfWeekEnum.Tue:                      return 2;                    case DayOfWeekEnum.Wed:                      return 3;                    case DayOfWeekEnum.Thu:                      return 4;                    case DayOfWeekEnum.Fri:                      return 5;                    case DayOfWeekEnum.Sat:                      return 6;                    default:                      return 0;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetDayOfWeekValue,The following statement contains a magic number: switch (dayOfWeekOption)              {                  case DayOfWeekEnum.Sun:                      return 0;                    case DayOfWeekEnum.Mon:                      return 1;                    case DayOfWeekEnum.Tue:                      return 2;                    case DayOfWeekEnum.Wed:                      return 3;                    case DayOfWeekEnum.Thu:                      return 4;                    case DayOfWeekEnum.Fri:                      return 5;                    case DayOfWeekEnum.Sat:                      return 6;                    default:                      return 0;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetMonthlyIntervalValue,The following statement contains a magic number: switch (monthlyIntervalOption)              {                  case MonthlyIntervalEnum.First:                      return 1;                    case MonthlyIntervalEnum.Second:                      return 2;                    case MonthlyIntervalEnum.Third:                      return 3;                    case MonthlyIntervalEnum.Fourth:                      return 4;                    case MonthlyIntervalEnum.Last:                      return -1;                    default:                      return 0;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetMonthlyIntervalValue,The following statement contains a magic number: switch (monthlyIntervalOption)              {                  case MonthlyIntervalEnum.First:                      return 1;                    case MonthlyIntervalEnum.Second:                      return 2;                    case MonthlyIntervalEnum.Third:                      return 3;                    case MonthlyIntervalEnum.Fourth:                      return 4;                    case MonthlyIntervalEnum.Last:                      return -1;                    default:                      return 0;              }
Magic Number,ScheduleWidget.TemporalExpressions,TEHelpers,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\TemporalExpressions\TEHelpers.cs,GetMonthlyIntervalValue,The following statement contains a magic number: switch (monthlyIntervalOption)              {                  case MonthlyIntervalEnum.First:                      return 1;                    case MonthlyIntervalEnum.Second:                      return 2;                    case MonthlyIntervalEnum.Third:                      return 3;                    case MonthlyIntervalEnum.Fourth:                      return 4;                    case MonthlyIntervalEnum.Last:                      return -1;                    default:                      return 0;              }
Missing Default,ScheduleWidget.Enums,EnumExtensions,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\Enums\EnumExtensions.cs,GetDayOfWeek,The following switch statement is missing a default case: switch (dayOfWeek)              {                  case DayOfWeekEnum.Sun:                      return DayOfWeek.Sunday;                  case DayOfWeekEnum.Mon:                      return DayOfWeek.Monday;                  case DayOfWeekEnum.Tue:                      return DayOfWeek.Tuesday;                  case DayOfWeekEnum.Wed:                      return DayOfWeek.Wednesday;                  case DayOfWeekEnum.Thu:                      return DayOfWeek.Thursday;                  case DayOfWeekEnum.Fri:                      return DayOfWeek.Friday;                  //case DayOfWeekEnum.Sat:                  //	return DayOfWeek.Saturday;              }
Missing Default,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,CanProduceOccurrences,The following switch statement is missing a default case: switch (FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      break;                  case FrequencyTypeEnum.Weekly:                      maximumDaysWithoutOccurrence *= 7;                      break;                  case FrequencyTypeEnum.Monthly:                      maximumDaysWithoutOccurrence *= 31;                      break;                  case FrequencyTypeEnum.Quarterly:                      maximumDaysWithoutOccurrence *= 96;                      break;                  case FrequencyTypeEnum.Yearly:                      // Leap years have 366 days.                      maximumDaysWithoutOccurrence *= 366;                      break;              }
Missing Default,ScheduleWidget.ScheduledEvents,Event,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Event.cs,RoughlyEstimateMinimumEventOccurrences,The following switch statement is missing a default case: switch (eventInstance.FrequencyTypeOptions)              {                  case FrequencyTypeEnum.None:                      result = 1;                      break;                  case FrequencyTypeEnum.Daily:                      result = (spanDays / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Weekly:                      int includedDays = 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Mon) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Tue) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Wed) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Thu) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Fri) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sat) ? 1 : 0;                      includedDays += eventInstance.DaysOfWeekOptions.HasFlag(DayOfWeekEnum.Sun) ? 1 : 0;                      result = ((spanWeeks / repeatInterval) * includedDays) - 1;                      break;                  case FrequencyTypeEnum.Monthly:                      int spanMonths = spanDays / 31;                      result = (spanMonths / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Quarterly:                      int spanQuarters = spanDays / 92;                      result = (spanQuarters / repeatInterval) - 1;                      break;                  case FrequencyTypeEnum.Yearly:                      int spanYears = spanDays / 365;                      result = (spanYears / repeatInterval) - 1;                      break;              }
Missing Default,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,DateRangeForPreviousOrNextOccurrence,The following switch statement is missing a default case: switch (_event.FrequencyTypeOptions)              {                  case FrequencyTypeEnum.Daily:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddDays(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddDays(interval) };                      break;                  case FrequencyTypeEnum.Weekly:                      interval = (_event.RepeatInterval + 1) * 7;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddDays(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddDays(interval) };                      break;                  case FrequencyTypeEnum.Monthly:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddMonths(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddMonths(interval) };                      break;                  case FrequencyTypeEnum.Quarterly:                      //Assign a default value as there is no interval option available for this frequency type now.                      interval = 12;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddMonths(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddMonths(interval) };                      break;                  case FrequencyTypeEnum.Yearly:                      interval = _event.RepeatInterval + 1;                      dateRange = previousOccurrence                                  ? new DateRange { StartDateTime = aDate.AddYears(-interval)' EndDateTime = aDate }                                  : new DateRange { StartDateTime = aDate' EndDateTime = aDate.AddYears(interval) };                      break;              }
Missing Default,ScheduleWidget.ScheduledEvents,Schedule,D:\research\architectureSmells\repos\jamesstill_ScheduleWidget\ScheduleWidget\ScheduleWidget\ScheduledEvents\Schedule.cs,zInternalGetEndDateBasedOnNumberOfOccurrences,The following switch statement is missing a default case: switch (frequencyType)              {                  case FrequencyTypeEnum.Daily:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) };                      break;                  case FrequencyTypeEnum.Weekly:                      interval = (_event.RepeatInterval + 1) * 7;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddDays(interval * occurences) };                      break;                  case FrequencyTypeEnum.Monthly:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) };                      break;                  case FrequencyTypeEnum.Quarterly:                      //Assign a default value as there is no interval option available for this frequency type now.                      interval = 12;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddMonths(interval * occurences) };                      break;                  case FrequencyTypeEnum.Yearly:                      interval = _event.RepeatInterval + 1;                      dateRange = new DateRange { StartDateTime = startDateTime' EndDateTime = startDateTime.AddYears(interval * occurences) };                      break;              }
