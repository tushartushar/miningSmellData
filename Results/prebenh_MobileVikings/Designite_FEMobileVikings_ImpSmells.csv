Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FEMobileVikings.Common,RichTextColumns,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Parameter List,FEMobileVikings.ViewModel,IsMobileVikingViewModel,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\IsMobileVikingViewModel.cs,IsMobileVikingViewModel,The method has 5 parameters.
Long Parameter List,FEMobileVikings.ViewModel,MainViewModel,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\MainViewModel.cs,MainViewModel,The method has 6 parameters.
Long Parameter List,FEMobileVikings.ViewModel,MobileVikingsViewModelBase,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\MobileVikingsViewModelBase.cs,AddSettingsCommand,The method has 5 parameters.
Long Parameter List,FEMobileVikings.ViewModel,SimBalanceViewModel,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\SimBalanceViewModel.cs,SimBalanceViewModel,The method has 6 parameters.
Long Statement,FEMobileVikings,Bootstrapper,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Bootstrapper.cs,RegisterAll,The length of the statement  "	Register<MainViewModel> (() => new MainViewModel (SimpleIoc.Default.GetInstance<MobileNumbersViewModel> ()' SimpleIoc.Default.GetInstance<TwitterViewModel> ()' SimpleIoc.Default.GetInstance<BlogViewModel> ()' SimpleIoc.Default.GetInstance<IAuthorizationService> ()' SimpleIoc.Default.GetInstance<INavigationService> ()' SimpleIoc.Default.GetInstance<ResourceLoader> ())); " is 371.
Long Statement,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The length of the statement  "	if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) { " is 246.
Long Statement,FEMobileVikings.Common,SuspensionManager,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "	StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync (sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 141.
Long Statement,FEMobileVikings.Common,SuspensionManager,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "		throw new InvalidOperationException ("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 139.
Long Statement,FEMobileVikings.ViewModel,LoginViewModel,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\LoginViewModel.cs,OnCommandsRequested,The length of the statement  "	AddSettingsCommand ("GetAccount"' ResourceLoader.GetString ("GetAccount")' command => Launcher.LaunchUriAsync (new Uri ("http://mobilevikings.com/referral/ZInLzPvZCfgBJqVeNSsLPLdKMbIUqrTe/"' UriKind.Absolute))' args); " is 217.
Long Statement,FEMobileVikings.ViewModel,MobileVikingsViewModelBase,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\MobileVikingsViewModelBase.cs,OnCommandsRequested,The length of the statement  "	AddSettingsCommand ("PrivacyPolicy"' ResourceLoader.GetString ("PrivacyPolicyTitle")' command => NavigationService.Navigate<PrivacyPolicyView> ()' args); " is 153.
Complex Conditional,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,FEMobileVikings.ViewModel,MobileVikingsViewModelBase,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\MobileVikingsViewModelBase.cs,HandleNoInternet,The method has an empty catch block.
Magic Number,FEMobileVikings,App,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\App.xaml.cs,OnLaunched,The following statement contains a magic number: if (!ApplicationData.Current.LocalSettings.Values.ContainsKey ("SimBalanceBackgroundTask")) {  	//Register background worker  	var backgroundTaskManager = new BackgroundTaskBuilder {  		TaskEntryPoint = "MobileVikings.FrontEnd.BackgroundTasks.SimBalanceBackgroundTask"'  		Name = "SimBalanceBackgroundTask"  	};  	backgroundTaskManager.SetTrigger (new MaintenanceTrigger (15' false));  	backgroundTaskManager.AddCondition (new SystemCondition (SystemConditionType.InternetAvailable));  	var registration = backgroundTaskManager.Register ();  	ApplicationData.Current.LocalSettings.Values ["SimBalanceBackgroundTask"] = true;  }  
Magic Number,FEMobileVikings,App,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\App.xaml.cs,OnLaunched,The following statement contains a magic number: backgroundTaskManager.SetTrigger (new MaintenanceTrigger (15' false));  
Magic Number,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || args.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	var downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		args.Handled = true;  		this.GoBack (this' new RoutedEventArgs ());  	}  	else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		args.Handled = true;  		this.GoForward (this' new RoutedEventArgs ());  	}  }  
Magic Number,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// When the previous key or Alt+Left are pressed navigate back  	args.Handled = true;  	this.GoBack (this' new RoutedEventArgs ());  }  else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	args.Handled = true;  	this.GoForward (this' new RoutedEventArgs ());  }  
Magic Number,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// When the previous key or Alt+Left are pressed navigate back  	args.Handled = true;  	this.GoBack (this' new RoutedEventArgs ());  }  else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	args.Handled = true;  	this.GoForward (this' new RoutedEventArgs ());  }  
Magic Number,FEMobileVikings.Common,LayoutAwarePage,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	args.Handled = true;  	this.GoForward (this' new RoutedEventArgs ());  }  
Magic Number,FEMobileVikings.ViewModel,SimBalanceViewModel,D:\SecondaryReposToAnalyze\prebenh_MobileVikings\FEMobileVikings\FEMobileVikings\ViewModel\SimBalanceViewModel.cs,LoadBalance,The following statement contains a magic number: simBalanceGroup.Items.Add (new SimBalanceItem {  	Title = ResourceLoader.GetString ("MVCredit")'  	Value = (simBalance.MobileVikingsCredit / 60).ToString ("0.00 Min.")  });  
