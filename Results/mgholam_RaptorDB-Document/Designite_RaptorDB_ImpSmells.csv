Implementation smell,Namespace,Class,File,Method,Description
Long Method,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,InitializeCommandsDictionary,The method has 260 lines of code.
Long Method,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The method has 243 lines of code.
Long Method,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,GenerateSchemaColumns,The method has 101 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The method has 122 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,NextToken,The method has 200 lines of code.
Complex Method,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,Cyclomatic complexity of the method is 12
Complex Method,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Flush,Cyclomatic complexity of the method is 8
Complex Method,RaptorDB,Hoot,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\Hoot.cs,ExecutionPlan,Cyclomatic complexity of the method is 12
Complex Method,RaptorDB,MGIndex<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\MGIndex.cs,Query,Cyclomatic complexity of the method is 11
Complex Method,RaptorDB,MGIndex<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\MGIndex.cs,doLessOp,Cyclomatic complexity of the method is 8
Complex Method,RaptorDB,tokenizer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\tokenizer.cs,ParseString,Cyclomatic complexity of the method is 9
Complex Method,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,ListenerCallback,Cyclomatic complexity of the method is 8
Complex Method,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,RebuildDataFiles,Cyclomatic complexity of the method is 15
Complex Method,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitBinary,Cyclomatic complexity of the method is 10
Complex Method,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,SetView,Cyclomatic complexity of the method is 9
Complex Method,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,Query,Cyclomatic complexity of the method is 8
Complex Method,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,ReturnRowsTyped,Cyclomatic complexity of the method is 13
Complex Method,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,GenerateSchemaColumns,Cyclomatic complexity of the method is 8
Complex Method,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,SortBy,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,CompareConversions,Cyclomatic complexity of the method is 8
Long Parameter List,RaptorDB,FullTextIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\Indexes.cs,FullTextIndex,The method has 5 parameters. Parameters: IndexPath' FileName' docmode' sortable' tokenizer
Long Parameter List,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreatePageListData,The method has 6 parameters. Parameters: _pages' offset' rowindex' counter' page' blocknum
Long Parameter List,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Query,The method has 5 parameters. Parameters: viewname' filter' start' count' orderby
Long Parameter List,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,extractrowobject,The method has 7 parameters. Parameters: count' rows' skip' cc' del' order' idx
Long Parameter List,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,extractsortrowobject,The method has 7 parameters. Parameters: ba' count' orderby' rows' skip' c' idx
Long Parameter List,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,ReturnRowsTyped,The method has 6 parameters. Parameters: ba' trows' start' count' orderby' descending
Long Parameter List,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,extractsortrowT,The method has 7 parameters. Parameters: ba' count' orderby' rows' skip' c' idx
Long Parameter List,RaptorDB.Views,ViewManager,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewManager.cs,Query,The method has 5 parameters. Parameters: viewname' filter' start' count' orderby
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters. Parameters: signatures' opName' left' right' errorPos
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,FindMethod,The method has 5 parameters. Parameters: type' methodName' staticAccess' args' method
Long Identifier,RaptorDB,Global,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Global.cs,,The length of the parameter BackgroundFullTextIndexBatchSize is 32.
Long Identifier,System.Linq.Dynamic,Res,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Optimize,The length of the statement  "                        Stream _newrec = new FileStream(_Path + _FileName + "$" + _recExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite); " is 133.
Long Statement,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Optimize,The length of the statement  "                        Stream _newbmp = new FileStream(_Path + _FileName + "$" + _bmpExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite); " is 133.
Long Statement,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Initialize,The length of the statement  "            _recordFileRead = new FileStream(_Path + _FileName + _recExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite); " is 128.
Long Statement,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Initialize,The length of the statement  "            _recordFileWriteOrg = new FileStream(_Path + _FileName + _recExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite); " is 132.
Long Statement,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Initialize,The length of the statement  "            _bitmapFileRead = new FileStream(_Path + _FileName + _bmpExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite); " is 128.
Long Statement,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Initialize,The length of the statement  "            _bitmapFileWriteOrg = new FileStream(_Path + _FileName + _bmpExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite); " is 132.
Long Statement,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,InitializeCommandsDictionary,The length of the statement  "                    ret.Data = _defaultInstance.rdb.ServerSide(GetServerSideFuncCache(param[0].ToString()' param[1].ToString())' param[2].ToString()); " is 130.
Long Statement,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,InitializeCommandsDictionary,The length of the statement  "                    ret.Data = _defaultInstance.rdb.ServerSide(GetServerSideFuncWithArgsCache(param[0].ToString()' param[1].ToString())' param[2].ToString()' param[3]); " is 148.
Long Statement,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,ListenerCallback,The length of the statement  "                            WriteResponse(ctx' 404' "route path not found : " + ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped)); " is 124.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                        o.Add(new { Name = v.Name' Description = v.Description' BackgroundIndexing = v.BackgroundIndexing' Version = v.Version' isPrimaryList = v.isPrimaryList }); " is 155.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToJSON(oo' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' EnableAnonymousTypes = true }); " is 138.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToNiceJSON(_rdb.Fetch(g)' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false }); " is 150.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToJSON(h' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false }); " is 135.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToNiceJSON(oo' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false }); " is 139.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToNiceJSON(_rdb.FetchBytes(g)' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false }); " is 155.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToJSON(h' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false }); " is 135.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToNiceJSON(oo' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false }); " is 139.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToJSON(obj' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false' EnableAnonymousTypes = true }); " is 166.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToJSON(obj' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false' EnableAnonymousTypes = true }); " is 166.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The length of the statement  "                    var s = fastJSON.JSON.ToNiceJSON(h' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false' EnableAnonymousTypes = true }); " is 168.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,GetViewInfo,The length of the statement  "            var s = fastJSON.JSON.ToJSON(obj' new fastJSON.JSONParameters { UseFastGuid = false' UseEscapedUnicode = false' EnableAnonymousTypes = true }); " is 143.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,OutputJsonData,The length of the statement  "            var s = fastJSON.JSON.ToJSON(resf' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' EnableAnonymousTypes = true }); " is 140.
Long Statement,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,ProcessGET,The length of the statement  "                var s = fastJSON.JSON.ToJSON(result' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' EnableAnonymousTypes = true }); " is 142.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Shutdown,The length of the statement  "            File.WriteAllText(_Path + "RaptorDB.config"' fastJSON.JSON.ToNiceJSON(new Global()' new fastJSON.JSONParameters { UseExtensions = false })); " is 140.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Shutdown,The length of the statement  "            File.WriteAllBytes(_Path + "Data" + _S + "Fulltext" + _S + "_fulltext.rec"' Helper.GetBytes(_LastFulltextIndexed' false)); " is 122.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Backup,The length of the statement  "                File.Move(tempp + _S + "backup.mgdat.gz"' _Path + "Backup" + _S + DateTime.Now.ToString("yyyy-MM-dd-HH-mm") + ".mgdat.gz"); " is 123.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,DoRepProcessing,The length of the statement  "                            string err = Properties.Resources.msg.Replace("%js%"' fastJSON.JSON.Beautify(Helper.GetString(i.data' 0' (short)i.data.Length))) " is 128.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Initialize,The length of the statement  "                _repserver = new Replication.ReplicationServer(_Path' File.ReadAllText(_Path + "RaptorDB-Replication.config")' _objStore); " is 122.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,UpgradeStorageFile,The length of the statement  "            _log.Debug("Upgrading storage file version from " + ver + " to " + StorageFile<int>._CurrentVersion + " on file : " + filename); " is 128.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,_fulltextTimer_Elapsed,The length of the statement  "                            string json = fastJSON.JSON.ToJSON(obj' new fastJSON.JSONParameters { UseEscapedUnicode = false' UseFastGuid = false }); " is 120.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateTemplateConfigFiles,The length of the statement  "                File.WriteAllText(_Path + "-RaptorDB.config"' fastJSON.JSON.ToNiceJSON(new Global()' new fastJSON.JSONParameters { UseExtensions = false })); " is 141.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateTemplateConfigFiles,The length of the statement  "                File.WriteAllText(_Path + "-RaptorDB-Branch.config"' fastJSON.JSON.ToNiceJSON(new Replication.ClientConfiguration()' new fastJSON.JSONParameters { UseExtensions = false })); " is 173.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateTemplateConfigFiles,The length of the statement  "                s.What.Add(new Replication.WhatItem { Name = "default"' PackageItemLimit = 10000' Version = 1' B2HQtypes = new List<string> { "*" }' HQ2Btypes = new List<string> { "*" } }); " is 173.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateTemplateConfigFiles,The length of the statement  "                s.What.Add(new Replication.WhatItem { Name = "b2"' PackageItemLimit = 10000' Version = 1' B2HQtypes = new List<string> { "*" }' HQ2Btypes = new List<string> { "config.*" } }); " is 175.
Long Statement,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateTemplateConfigFiles,The length of the statement  "                File.WriteAllText(_Path + "-RaptorDB-Replication.config"' fastJSON.JSON.ToNiceJSON(s' new fastJSON.JSONParameters { UseExtensions = false })); " is 142.
Long Statement,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,CreateNewStorageFile,The length of the statement  "            FileStream file = new FileStream(_filename + i.ToString(_splitfileExtension)' FileMode.Open' FileAccess.Read' FileShare.ReadWrite); " is 131.
Long Statement,RaptorDB.Replication,ReplicationClient,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\ReplicationClient.cs,Initialize,The length of the statement  "                _clientConfig = fastBinaryJSON.BJSON.ToObject<ClientRepConfig>(File.ReadAllBytes(_path + "Replication" + _S + "branch.dat")); " is 125.
Long Statement,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,CreateRowFillerDelegate,The length of the statement  "            DynamicMethod dynMethod = new DynamicMethod("rowfill"' typeof(object)' new Type[] { typeof(object)' typeof(object[]) }); " is 120.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,CallIn,The length of the statement  "            return Expression.Call(method'  new Expression[] { ConstantExpression.Variable(datatype' pname)' Expression.NewArrayInit(datatype' args) }); " is 140.
Complex Conditional,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The conditional expression  "b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3]"  is complex.
Complex Conditional,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The conditional expression  "b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3]"  is complex.
Complex Conditional,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitBinary,The conditional expression  "t == ExpressionType.Equal || t == ExpressionType.NotEqual ||                  t == ExpressionType.LessThan || t == ExpressionType.LessThanOrEqual ||                  t == ExpressionType.GreaterThan || t == ExpressionType.GreaterThanOrEqual"  is complex.
Complex Conditional,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitBinary,The conditional expression  "t == ExpressionType.Equal || t == ExpressionType.NotEqual ||                  t == ExpressionType.LessThanOrEqual || t == ExpressionType.LessThan ||                  t == ExpressionType.GreaterThanOrEqual || t == ExpressionType.GreaterThan"  is complex.
Complex Conditional,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitBinary,The conditional expression  "t == ExpressionType.And || t == ExpressionType.AndAlso ||                  t == ExpressionType.Or || t == ExpressionType.OrElse"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,ParseComparison,The conditional expression  "token.id == TokenId.Equal || token.id == TokenId.DoubleEqual ||                  token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater ||                  token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual ||                  token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual"  is complex.
Empty Catch Block,RaptorDB,MGIndex<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\MGIndex.cs,FreeMemory,The method has an empty catch block.
Empty Catch Block,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,GetMemoryUsage,The method has an empty catch block.
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate,The following statement contains a magic number: if (matches.Count > 2)                  generate_days_of_month(matches[2].ToString());              else                  generate_days_of_month("*");
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate,The following statement contains a magic number: if (matches.Count > 2)                  generate_days_of_month(matches[2].ToString());              else                  generate_days_of_month("*");
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate,The following statement contains a magic number: if (matches.Count > 3)                  generate_months(matches[3].ToString());              else                  generate_months("*");
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate,The following statement contains a magic number: if (matches.Count > 3)                  generate_months(matches[3].ToString());              else                  generate_months("*");
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate,The following statement contains a magic number: if (matches.Count > 4)                  generate_days_of_weeks(matches[4].ToString());              else                  generate_days_of_weeks("*");
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate,The following statement contains a magic number: if (matches.Count > 4)                  generate_days_of_weeks(matches[4].ToString());              else                  generate_days_of_weeks("*");
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate_minutes,The following statement contains a magic number: this.minutes = generate_values(match' 0' 60);
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate_hours,The following statement contains a magic number: this.hours = generate_values(match' 0' 24);
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate_days_of_month,The following statement contains a magic number: this.days_of_month = generate_values(match' 1' 32);
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate_months,The following statement contains a magic number: this.months = generate_values(match' 1' 13);
Magic Number,RaptorDB,CronSchedule,C:\repos\mgholam_RaptorDB-Document\RaptorDB\cron\CronSchedule.cs,generate_days_of_weeks,The following statement contains a magic number: this.days_of_week = generate_values(match' 0' 7);
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: byte size = 4;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(int))      size = 4;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(uint))     size = 4;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(long))     size = 8;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(Guid))     size = 16;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(DateTime)) size = 8;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(decimal))  size = 16;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(float))    size = 4;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(short))    size = 2;
Magic Number,RaptorDB,RDBDataType<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetByteSize,The following statement contains a magic number: if (t == typeof(double))   size = 8;
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetBytes,The following statement contains a magic number: byte[] b = new byte[16];
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetBytes,The following statement contains a magic number: foreach (var d in bb)              {                  byte[] db = Helper.GetBytes(d' false);                  Buffer.BlockCopy(db' 0' b' index' 4);                  index += 4;              }
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetBytes,The following statement contains a magic number: foreach (var d in bb)              {                  byte[] db = Helper.GetBytes(d' false);                  Buffer.BlockCopy(db' 0' b' index' 4);                  index += 4;              }
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: int[] i = new int[4];
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: offset += 4;
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: offset += 4;
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: i[2] = Helper.ToInt32(buffer' offset);
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: offset += 4;
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: i[3] = Helper.ToInt32(buffer' offset);
Magic Number,RaptorDB,decimal_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: offset += 4;
Magic Number,RaptorDB,guid_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: byte[] b = new byte[16];
Magic Number,RaptorDB,guid_handler<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\DataTypes\DataTypes.cs,GetObject,The following statement contains a magic number: Buffer.BlockCopy(buffer' offset' b' 0' 16);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Not,The following statement contains a magic number: lock (_lock)              {                  this.CheckBitArray();                    uint[] left = this.GetBitArray();                  int c = left.Length;                  int ms = size >> 5;                  if (size - (ms << 5) > 0)                      ms++; // include remainder                  if (ms > c)                  {                      var a = new uint[ms];                      Array.Copy(left' 0' a' 0' c);                      left = a;                      c = ms;                  }                    for (int i = 0; i < c; i++)                      left[i] = ~left[i];                    return new WAHBitArray(TYPE.Bitarray' left);              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Not,The following statement contains a magic number: lock (_lock)              {                  this.CheckBitArray();                    uint[] left = this.GetBitArray();                  int c = left.Length;                  int ms = size >> 5;                  if (size - (ms << 5) > 0)                      ms++; // include remainder                  if (ms > c)                  {                      var a = new uint[ms];                      Array.Copy(left' 0' a' 0' c);                      left = a;                      c = ms;                  }                    for (int i = 0; i < c; i++)                      left[i] = ~left[i];                    return new WAHBitArray(TYPE.Bitarray' left);              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,BitCount,The following statement contains a magic number: n = (((n >> 2) & 0x33333333) + (n & 0x33333333));
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,BitCount,The following statement contains a magic number: n = (((n >> 4) + n) & 0x0f0f0f0f);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,BitCount,The following statement contains a magic number: return (int)((n * 0x01010101) >> 24);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,CountZeros,The following statement contains a magic number: int count = _uncompressed.Length << 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,GetBitIndexes,The following statement contains a magic number: if (_state == TYPE.Indexes)              {                  foreach (int i in GetOffsets())                      yield return i;              }              else              {                  CheckBitArray();                  int count = _uncompressed.Length;                    for (int i = 0; i < count; i++)                  {                      if (_uncompressed[i] > 0)                      {                          for (int j = 0; j < 32; j++)                          {                              bool b = internalGet((i << 5) + j);                              if (b == true)// ones)                                  yield return (i << 5) + j;                          }                      }                  }              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,GetBitIndexes,The following statement contains a magic number: if (_state == TYPE.Indexes)              {                  foreach (int i in GetOffsets())                      yield return i;              }              else              {                  CheckBitArray();                  int count = _uncompressed.Length;                    for (int i = 0; i < count; i++)                  {                      if (_uncompressed[i] > 0)                      {                          for (int j = 0; j < 32; j++)                          {                              bool b = internalGet((i << 5) + j);                              if (b == true)// ones)                                  yield return (i << 5) + j;                          }                      }                  }              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,GetBitIndexes,The following statement contains a magic number: if (_state == TYPE.Indexes)              {                  foreach (int i in GetOffsets())                      yield return i;              }              else              {                  CheckBitArray();                  int count = _uncompressed.Length;                    for (int i = 0; i < count; i++)                  {                      if (_uncompressed[i] > 0)                      {                          for (int j = 0; j < 32; j++)                          {                              bool b = internalGet((i << 5) + j);                              if (b == true)// ones)                                  yield return (i << 5) + j;                          }                      }                  }              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,UnpackOffsets,The following statement contains a magic number: uint[] ints = new uint[(max >> 5) + 1];
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,UnpackOffsets,The following statement contains a magic number: foreach (int index in k)              {                  int pointer = ((int)index) >> 5;                  uint mask = (uint)1 << (31 - // high order bit set                      ((int)index % 32));                    ints[pointer] |= mask;              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,UnpackOffsets,The following statement contains a magic number: foreach (int index in k)              {                  int pointer = ((int)index) >> 5;                  uint mask = (uint)1 << (31 - // high order bit set                      ((int)index % 32));                    ints[pointer] |= mask;              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,UnpackOffsets,The following statement contains a magic number: foreach (int index in k)              {                  int pointer = ((int)index) >> 5;                  uint mask = (uint)1 << (31 - // high order bit set                      ((int)index % 32));                    ints[pointer] |= mask;              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,ChangeTypeIfNeeded,The following statement contains a magic number: uint T = (_curMax >> 5) + 1;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Resize,The following statement contains a magic number: int c = index >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,ResizeAsNeeded,The following statement contains a magic number: int count = index >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,internalSet,The following statement contains a magic number: int pointer = index >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,internalSet,The following statement contains a magic number: uint mask = (uint)1 << (31 - // high order bit set                  (index % 32));
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,internalSet,The following statement contains a magic number: uint mask = (uint)1 << (31 - // high order bit set                  (index % 32));
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,internalGet,The following statement contains a magic number: int pointer = index >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,internalGet,The following statement contains a magic number: uint mask = (uint)1 << (31 - // high order bit get                  (index % 32));
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,internalGet,The following statement contains a magic number: uint mask = (uint)1 << (31 - // high order bit get                  (index % 32));
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Take31Bits,The following statement contains a magic number: int off = (index % 32);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Take31Bits,The following statement contains a magic number: int pointer = index >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Take31Bits,The following statement contains a magic number: l = (l1 << 32) + l2;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Take31Bits,The following statement contains a magic number: ret = (l >> (33 - off)) & 0x7fffffff;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Compress,The following statement contains a magic number: int count = data.Length << 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Compress,The following statement contains a magic number: while (i < count)//for (int i = 0; i < count;)              {                  uint num = Take31Bits(data' i);                  i += 31;                  if (num == 0) // all zero                  {                      zeros += 31;                      FlushOnes(compressed' ref ones);                  }                  else if (num == 0x7fffffff) // all ones                  {                      ones += 31;                      FlushZeros(compressed' ref zeros);                  }                  else // literal                  {                      FlushOnes(compressed' ref ones);                      FlushZeros(compressed' ref zeros);                      compressed.Add(num);                  }              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Compress,The following statement contains a magic number: while (i < count)//for (int i = 0; i < count;)              {                  uint num = Take31Bits(data' i);                  i += 31;                  if (num == 0) // all zero                  {                      zeros += 31;                      FlushOnes(compressed' ref ones);                  }                  else if (num == 0x7fffffff) // all ones                  {                      ones += 31;                      FlushZeros(compressed' ref zeros);                  }                  else // literal                  {                      FlushOnes(compressed' ref ones);                      FlushZeros(compressed' ref zeros);                      compressed.Add(num);                  }              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Compress,The following statement contains a magic number: while (i < count)//for (int i = 0; i < count;)              {                  uint num = Take31Bits(data' i);                  i += 31;                  if (num == 0) // all zero                  {                      zeros += 31;                      FlushOnes(compressed' ref ones);                  }                  else if (num == 0x7fffffff) // all ones                  {                      ones += 31;                      FlushZeros(compressed' ref zeros);                  }                  else // literal                  {                      FlushOnes(compressed' ref ones);                      FlushZeros(compressed' ref zeros);                      compressed.Add(num);                  }              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Write31Bits,The following statement contains a magic number: ResizeAsNeeded(list' index + 32);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Write31Bits,The following statement contains a magic number: int off = (index % 32);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Write31Bits,The following statement contains a magic number: int pointer = index >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Write31Bits,The following statement contains a magic number: ulong l = ((ulong)list[pointer] << 32) + list[pointer + 1];
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Write31Bits,The following statement contains a magic number: l |= (ulong)val << (33 - off);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Write31Bits,The following statement contains a magic number: list[pointer] = (uint)(l >> 32);
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: int off = index % 32;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: int pointer = index >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: int x = 32 - off;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: if (ccount > x)//|| x == 32) //current pointer              {                  list[pointer] |= (uint)((0xffffffff >> off));                  ccount -= x;                  indx += x;              }              else              {                  list[pointer] |= (uint)((0xffffffff << (32 - ccount)) >> off);                  ccount = 0;              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: while (ccount >= 32)//full ints              {                  if (checklast && list[list.Count - 1] == 0)                  {                      list.RemoveAt(list.Count - 1);                      checklast = false;                  }                    list.Add(0xffffffff);                  ccount -= 32;                  indx += 32;              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: while (ccount >= 32)//full ints              {                  if (checklast && list[list.Count - 1] == 0)                  {                      list.RemoveAt(list.Count - 1);                      checklast = false;                  }                    list.Add(0xffffffff);                  ccount -= 32;                  indx += 32;              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: while (ccount >= 32)//full ints              {                  if (checklast && list[list.Count - 1] == 0)                  {                      list.RemoveAt(list.Count - 1);                      checklast = false;                  }                    list.Add(0xffffffff);                  ccount -= 32;                  indx += 32;              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: int p = indx >> 5;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: off = indx % 32;
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WriteOnes,The following statement contains a magic number: if (ccount > 0)              {                  uint i = 0xffffffff << (32 - ccount);                  if (p > (list.Count - 1)) //remaining                      list.Add(i);                  else                      list[p] |= (uint)(i >> off);              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Uncompress,The following statement contains a magic number: foreach (uint ci in _compressed)              {                  if ((ci & 0x80000000) == 0) // literal                  {                      Write31Bits(list' index' ci);                      index += 31;                  }                  else                  {                      uint count = ci & 0x3fffffff;                      if ((ci & 0x40000000) != 0) // ones count                          WriteOnes(list' index' count);                        index += (int)count;                  }              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Fill,The following statement contains a magic number: if (count > 0)              {                  int c = count >> 5;                  int r = count % 32;                  if (r > 0)                      c++;                  uint[] ints = new uint[c];                  for (int i = 0; i < c; i++)                      ints[i] = 0xffffffff;                  if (r > 0)                      ints[c - 1] = 0xffffffff << (31 - r);                  return new WAHBitArray(TYPE.Bitarray' ints);              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Fill,The following statement contains a magic number: if (count > 0)              {                  int c = count >> 5;                  int r = count % 32;                  if (r > 0)                      c++;                  uint[] ints = new uint[c];                  for (int i = 0; i < c; i++)                      ints[i] = 0xffffffff;                  if (r > 0)                      ints[c - 1] = 0xffffffff << (31 - r);                  return new WAHBitArray(TYPE.Bitarray' ints);              }
Magic Number,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,Fill,The following statement contains a magic number: if (count > 0)              {                  int c = count >> 5;                  int r = count % 32;                  if (r > 0)                      c++;                  uint[] ints = new uint[c];                  for (int i = 0; i < c; i++)                      ints[i] = 0xffffffff;                  if (r > 0)                      ints[c - 1] = 0xffffffff << (31 - r);                  return new WAHBitArray(TYPE.Bitarray' ints);              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Optimize,The following statement contains a magic number: lock (_oplock)                  lock (_readlock)                      lock (_writelock)                      {                          _stopOperations = true;                          while (_workingCount > 0) Thread.SpinWait(1);                          Flush();                            if (File.Exists(_Path + _FileName + "$" + _bmpExt))                              File.Delete(_Path + _FileName + "$" + _bmpExt);                            if (File.Exists(_Path + _FileName + "$" + _recExt))                              File.Delete(_Path + _FileName + "$" + _recExt);                            Stream _newrec = new FileStream(_Path + _FileName + "$" + _recExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite);                          Stream _newbmp = new FileStream(_Path + _FileName + "$" + _bmpExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite);                            long newoffset = 0;                          int c = (int)(_recordFileRead.Length / 8);                          for (int i = 0; i < c; i++)                          {                              long offset = ReadRecordOffset(i);                                byte[] b = ReadBMPData(offset);                              if (b == null)                              {                                  _stopOperations = false;                                  throw new Exception("bitmap index file is corrupted");                              }                                _newrec.Write(Helper.GetBytes(newoffset' false)' 0' 8);                              newoffset += b.Length;                              _newbmp.Write(b' 0' b.Length);                            }                          _newbmp.Flush();                          _newbmp.Close();                          _newrec.Flush();                          _newrec.Close();                            InternalShutdown();                            File.Delete(_Path + _FileName + _bmpExt);                          File.Delete(_Path + _FileName + _recExt);                          File.Move(_Path + _FileName + "$" + _bmpExt' _Path + _FileName + _bmpExt);                          File.Move(_Path + _FileName + "$" + _recExt' _Path + _FileName + _recExt);                            Initialize();                          _stopOperations = false;                      }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Optimize,The following statement contains a magic number: lock (_oplock)                  lock (_readlock)                      lock (_writelock)                      {                          _stopOperations = true;                          while (_workingCount > 0) Thread.SpinWait(1);                          Flush();                            if (File.Exists(_Path + _FileName + "$" + _bmpExt))                              File.Delete(_Path + _FileName + "$" + _bmpExt);                            if (File.Exists(_Path + _FileName + "$" + _recExt))                              File.Delete(_Path + _FileName + "$" + _recExt);                            Stream _newrec = new FileStream(_Path + _FileName + "$" + _recExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite);                          Stream _newbmp = new FileStream(_Path + _FileName + "$" + _bmpExt' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.ReadWrite);                            long newoffset = 0;                          int c = (int)(_recordFileRead.Length / 8);                          for (int i = 0; i < c; i++)                          {                              long offset = ReadRecordOffset(i);                                byte[] b = ReadBMPData(offset);                              if (b == null)                              {                                  _stopOperations = false;                                  throw new Exception("bitmap index file is corrupted");                              }                                _newrec.Write(Helper.GetBytes(newoffset' false)' 0' 8);                              newoffset += b.Length;                              _newbmp.Write(b' 0' b.Length);                            }                          _newbmp.Flush();                          _newbmp.Close();                          _newrec.Flush();                          _newrec.Close();                            InternalShutdown();                            File.Delete(_Path + _FileName + _bmpExt);                          File.Delete(_Path + _FileName + _recExt);                          File.Move(_Path + _FileName + "$" + _bmpExt' _Path + _FileName + _bmpExt);                          File.Move(_Path + _FileName + "$" + _recExt' _Path + _FileName + _recExt);                            Initialize();                          _stopOperations = false;                      }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadBMPData,The following statement contains a magic number: byte[] b = new byte[8];
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadBMPData,The following statement contains a magic number: _bitmapFileRead.Read(b' 0' 8);
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadBMPData,The following statement contains a magic number: if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)              {                  int c = Helper.ToInt32(b' 2) * 4 + 8;                  byte[] data = new byte[c];                  _bitmapFileRead.Seek(offset' SeekOrigin.Begin);                  _bitmapFileRead.Read(data' 0' c);                  return data;              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadBMPData,The following statement contains a magic number: if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)              {                  int c = Helper.ToInt32(b' 2) * 4 + 8;                  byte[] data = new byte[c];                  _bitmapFileRead.Seek(offset' SeekOrigin.Begin);                  _bitmapFileRead.Read(data' 0' c);                  return data;              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadBMPData,The following statement contains a magic number: if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)              {                  int c = Helper.ToInt32(b' 2) * 4 + 8;                  byte[] data = new byte[c];                  _bitmapFileRead.Seek(offset' SeekOrigin.Begin);                  _bitmapFileRead.Read(data' 0' c);                  return data;              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadBMPData,The following statement contains a magic number: if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)              {                  int c = Helper.ToInt32(b' 2) * 4 + 8;                  byte[] data = new byte[c];                  _bitmapFileRead.Seek(offset' SeekOrigin.Begin);                  _bitmapFileRead.Read(data' 0' c);                  return data;              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadRecordOffset,The following statement contains a magic number: byte[] b = new byte[8];
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadRecordOffset,The following statement contains a magic number: long off = ((long)recnum) * 8;
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,ReadRecordOffset,The following statement contains a magic number: _recordFileRead.Read(b' 0' 8);
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,Initialize,The following statement contains a magic number: _lastRecordNumber = (int)(_recordFileRead.Length / 8);
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmap,The following statement contains a magic number: lock (_writelock)              {                  long offset = SaveBitmapToFile(bmp);                  //long v;                  //if (_offsetCache.TryGetValue(recno' out v))                  //    _offsetCache[recno] = offset;                  //else                  //    _offsetCache.Add(recno' offset);                    long pointer = ((long)recno) * 8;                  _recordFileWrite.Seek(pointer' SeekOrigin.Begin);                  byte[] b = new byte[8];                  b = Helper.GetBytes(offset' false);                  _recordFileWrite.Write(b' 0' 8);              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmap,The following statement contains a magic number: lock (_writelock)              {                  long offset = SaveBitmapToFile(bmp);                  //long v;                  //if (_offsetCache.TryGetValue(recno' out v))                  //    _offsetCache[recno] = offset;                  //else                  //    _offsetCache.Add(recno' offset);                    long pointer = ((long)recno) * 8;                  _recordFileWrite.Seek(pointer' SeekOrigin.Begin);                  byte[] b = new byte[8];                  b = Helper.GetBytes(offset' false);                  _recordFileWrite.Write(b' 0' 8);              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmap,The following statement contains a magic number: lock (_writelock)              {                  long offset = SaveBitmapToFile(bmp);                  //long v;                  //if (_offsetCache.TryGetValue(recno' out v))                  //    _offsetCache[recno] = offset;                  //else                  //    _offsetCache.Add(recno' offset);                    long pointer = ((long)recno) * 8;                  _recordFileWrite.Seek(pointer' SeekOrigin.Begin);                  byte[] b = new byte[8];                  b = Helper.GetBytes(offset' false);                  _recordFileWrite.Write(b' 0' 8);              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: byte[] b = new byte[bits.Length * 4 + 8];
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: byte[] b = new byte[bits.Length * 4 + 8];
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: Buffer.BlockCopy(Helper.GetBytes(bits.Length' false)' 0' b' 2' 4);
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: Buffer.BlockCopy(Helper.GetBytes(bits.Length' false)' 0' b' 2' 4);
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: b[6] = (byte)t;
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: b[7] = (byte)(0);
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++)              {                  byte[] u = Helper.GetBytes((int)bits[i]' false);                  Buffer.BlockCopy(u' 0' b' i * 4 + 8' 4);              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++)              {                  byte[] u = Helper.GetBytes((int)bits[i]' false);                  Buffer.BlockCopy(u' 0' b' i * 4 + 8' 4);              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,SaveBitmapToFile,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++)              {                  byte[] u = Helper.GetBytes((int)bits[i]' false);                  Buffer.BlockCopy(u' 0' b' i * 4 + 8' 4);              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BitmapIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\BitmapIndex.cs,LoadBitmap,The following statement contains a magic number: {                  bmp.Seek(offset' SeekOrigin.Begin);                    byte[] b = new byte[8];                    bmp.Read(b' 0' 8);                  if (b[0] == (byte)'B' && b[1] == (byte)'M' && b[7] == 0)                  {                      type = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[6]);                      int c = Helper.ToInt32(b' 2);                      byte[] buf = new byte[c * 4];                      bmp.Read(buf' 0' c * 4);                      for (int i = 0; i < c; i++)                      {                          ar.Add((uint)Helper.ToInt32(buf' i * 4));                      }                  }              }
Magic Number,RaptorDB,BoolIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\Indexes.cs,ReadFile,The following statement contains a magic number: if (b.Length % 4 > 0) // new format with the data type byte              {                  byte tb = br.ReadByte();                  t = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' tb);              }
Magic Number,RaptorDB,BoolIndex,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\Indexes.cs,ReadFile,The following statement contains a magic number: for (int i = 0; i < b.Length / 4; i++)              {                  ints.Add((uint)br.ReadInt32());              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,IndexFile,The following statement contains a magic number: if (typeof(T) == typeof(string) && Global.EnableOptimizedStringIndex)              {                  _externalStrings = true;                  _maxKeySize = 4;// blocknum:int              }              else                  _maxKeySize = maxKeySize;
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,IndexFile,The following statement contains a magic number: _rowSize = (_maxKeySize + 1 + 4 + 4);
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,IndexFile,The following statement contains a magic number: _rowSize = (_maxKeySize + 1 + 4 + 4);
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,IndexFile,The following statement contains a magic number: if (File.Exists(filename))              {                  // if file exists open and read header                  _file = File.Open(filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite);                  ReadFileHeader();                  if (_externalStrings == false)// if the file says different                  {                      _rowSize = (_maxKeySize + 1 + 4 + 4);                  }                  // compute last page number from file length                   _PageLength = (_BlockHeader.Length + _rowSize * (_PageNodeCount));                  _LastPageNumber = (int)((_file.Length - _FileHeader.Length) / _PageLength);              }              else              {                  // else create new file                  _file = File.Open(filename' FileMode.Create' FileAccess.ReadWrite' FileShare.ReadWrite);                    _PageLength = (_BlockHeader.Length + _rowSize * (_PageNodeCount));                    CreateFileHeader(0);                    _LastPageNumber = (int)((_file.Length - _FileHeader.Length) / _PageLength);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,IndexFile,The following statement contains a magic number: if (File.Exists(filename))              {                  // if file exists open and read header                  _file = File.Open(filename' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite);                  ReadFileHeader();                  if (_externalStrings == false)// if the file says different                  {                      _rowSize = (_maxKeySize + 1 + 4 + 4);                  }                  // compute last page number from file length                   _PageLength = (_BlockHeader.Length + _rowSize * (_PageNodeCount));                  _LastPageNumber = (int)((_file.Length - _FileHeader.Length) / _PageLength);              }              else              {                  // else create new file                  _file = File.Open(filename' FileMode.Create' FileAccess.ReadWrite' FileShare.ReadWrite);                    _PageLength = (_BlockHeader.Length + _rowSize * (_PageNodeCount));                    CreateFileHeader(0);                    _LastPageNumber = (int)((_file.Length - _FileHeader.Length) / _PageLength);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateBlockHeader,The following statement contains a magic number: block[4] = type;
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateBlockHeader,The following statement contains a magic number: Buffer.BlockCopy(b' 0' block' 5' 2);
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateBlockHeader,The following statement contains a magic number: Buffer.BlockCopy(b' 0' block' 5' 2);
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateBlockHeader,The following statement contains a magic number: Buffer.BlockCopy(b' 0' block' 11' 4);
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateBlockHeader,The following statement contains a magic number: Buffer.BlockCopy(b' 0' block' 11' 4);
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateFileHeader,The following statement contains a magic number: lock (_fileLock)              {                  // max key size                  byte[] b = Helper.GetBytes(_maxKeySize' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 3' 1);                  // page node count                  b = Helper.GetBytes(_PageNodeCount' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 4' 2);                  b = Helper.GetBytes(rowsindexed' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 11' 4);                    if (_externalStrings)                      _FileHeader[10] = 1;                    _file.Seek(0L' SeekOrigin.Begin);                  _file.Write(_FileHeader' 0' _FileHeader.Length);                  if (rowsindexed == 0)                  {                      byte[] pagezero = new byte[_PageLength];                      byte[] block = CreateBlockHeader(1' 0' -1);                      Buffer.BlockCopy(block' 0' pagezero' 0' block.Length);                      _file.Write(pagezero' 0' _PageLength);                  }                  _file.Flush();              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateFileHeader,The following statement contains a magic number: lock (_fileLock)              {                  // max key size                  byte[] b = Helper.GetBytes(_maxKeySize' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 3' 1);                  // page node count                  b = Helper.GetBytes(_PageNodeCount' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 4' 2);                  b = Helper.GetBytes(rowsindexed' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 11' 4);                    if (_externalStrings)                      _FileHeader[10] = 1;                    _file.Seek(0L' SeekOrigin.Begin);                  _file.Write(_FileHeader' 0' _FileHeader.Length);                  if (rowsindexed == 0)                  {                      byte[] pagezero = new byte[_PageLength];                      byte[] block = CreateBlockHeader(1' 0' -1);                      Buffer.BlockCopy(block' 0' pagezero' 0' block.Length);                      _file.Write(pagezero' 0' _PageLength);                  }                  _file.Flush();              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateFileHeader,The following statement contains a magic number: lock (_fileLock)              {                  // max key size                  byte[] b = Helper.GetBytes(_maxKeySize' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 3' 1);                  // page node count                  b = Helper.GetBytes(_PageNodeCount' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 4' 2);                  b = Helper.GetBytes(rowsindexed' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 11' 4);                    if (_externalStrings)                      _FileHeader[10] = 1;                    _file.Seek(0L' SeekOrigin.Begin);                  _file.Write(_FileHeader' 0' _FileHeader.Length);                  if (rowsindexed == 0)                  {                      byte[] pagezero = new byte[_PageLength];                      byte[] block = CreateBlockHeader(1' 0' -1);                      Buffer.BlockCopy(block' 0' pagezero' 0' block.Length);                      _file.Write(pagezero' 0' _PageLength);                  }                  _file.Flush();              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateFileHeader,The following statement contains a magic number: lock (_fileLock)              {                  // max key size                  byte[] b = Helper.GetBytes(_maxKeySize' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 3' 1);                  // page node count                  b = Helper.GetBytes(_PageNodeCount' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 4' 2);                  b = Helper.GetBytes(rowsindexed' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 11' 4);                    if (_externalStrings)                      _FileHeader[10] = 1;                    _file.Seek(0L' SeekOrigin.Begin);                  _file.Write(_FileHeader' 0' _FileHeader.Length);                  if (rowsindexed == 0)                  {                      byte[] pagezero = new byte[_PageLength];                      byte[] block = CreateBlockHeader(1' 0' -1);                      Buffer.BlockCopy(block' 0' pagezero' 0' block.Length);                      _file.Write(pagezero' 0' _PageLength);                  }                  _file.Flush();              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateFileHeader,The following statement contains a magic number: lock (_fileLock)              {                  // max key size                  byte[] b = Helper.GetBytes(_maxKeySize' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 3' 1);                  // page node count                  b = Helper.GetBytes(_PageNodeCount' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 4' 2);                  b = Helper.GetBytes(rowsindexed' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 11' 4);                    if (_externalStrings)                      _FileHeader[10] = 1;                    _file.Seek(0L' SeekOrigin.Begin);                  _file.Write(_FileHeader' 0' _FileHeader.Length);                  if (rowsindexed == 0)                  {                      byte[] pagezero = new byte[_PageLength];                      byte[] block = CreateBlockHeader(1' 0' -1);                      Buffer.BlockCopy(block' 0' pagezero' 0' block.Length);                      _file.Write(pagezero' 0' _PageLength);                  }                  _file.Flush();              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreateFileHeader,The following statement contains a magic number: lock (_fileLock)              {                  // max key size                  byte[] b = Helper.GetBytes(_maxKeySize' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 3' 1);                  // page node count                  b = Helper.GetBytes(_PageNodeCount' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 4' 2);                  b = Helper.GetBytes(rowsindexed' false);                  Buffer.BlockCopy(b' 0' _FileHeader' 11' 4);                    if (_externalStrings)                      _FileHeader[10] = 1;                    _file.Seek(0L' SeekOrigin.Begin);                  _file.Write(_FileHeader' 0' _FileHeader.Length);                  if (rowsindexed == 0)                  {                      byte[] pagezero = new byte[_PageLength];                      byte[] block = CreateBlockHeader(1' 0' -1);                      Buffer.BlockCopy(block' 0' pagezero' 0' block.Length);                      _file.Write(pagezero' 0' _PageLength);                  }                  _file.Flush();              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,ReadFileHeader,The following statement contains a magic number: if (b[0] == _FileHeader[0] && b[1] == _FileHeader[1] && b[2] == _FileHeader[2]) // header              {                  byte maxks = b[3];                  ushort nodes = (ushort)Helper.ToInt16(b' 4);                  int root = Helper.ToInt32(b' 6);                  _maxKeySize = maxks;                  _PageNodeCount = nodes;                  _FileHeader = b;                  if (b[10] == 0)                      _externalStrings = false;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,ReadFileHeader,The following statement contains a magic number: if (b[0] == _FileHeader[0] && b[1] == _FileHeader[1] && b[2] == _FileHeader[2]) // header              {                  byte maxks = b[3];                  ushort nodes = (ushort)Helper.ToInt16(b' 4);                  int root = Helper.ToInt32(b' 6);                  _maxKeySize = maxks;                  _PageNodeCount = nodes;                  _FileHeader = b;                  if (b[10] == 0)                      _externalStrings = false;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,ReadFileHeader,The following statement contains a magic number: if (b[0] == _FileHeader[0] && b[1] == _FileHeader[1] && b[2] == _FileHeader[2]) // header              {                  byte maxks = b[3];                  ushort nodes = (ushort)Helper.ToInt16(b' 4);                  int root = Helper.ToInt32(b' 6);                  _maxKeySize = maxks;                  _PageNodeCount = nodes;                  _FileHeader = b;                  if (b[10] == 0)                      _externalStrings = false;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,ReadFileHeader,The following statement contains a magic number: if (b[0] == _FileHeader[0] && b[1] == _FileHeader[1] && b[2] == _FileHeader[2]) // header              {                  byte maxks = b[3];                  ushort nodes = (ushort)Helper.ToInt16(b' 4);                  int root = Helper.ToInt32(b' 6);                  _maxKeySize = maxks;                  _PageNodeCount = nodes;                  _FileHeader = b;                  if (b[10] == 0)                      _externalStrings = false;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,ReadFileHeader,The following statement contains a magic number: if (b[0] == _FileHeader[0] && b[1] == _FileHeader[1] && b[2] == _FileHeader[2]) // header              {                  byte maxks = b[3];                  ushort nodes = (ushort)Helper.ToInt16(b' 4);                  int root = Helper.ToInt32(b' 6);                  _maxKeySize = maxks;                  _PageNodeCount = nodes;                  _FileHeader = b;                  if (b[10] == 0)                      _externalStrings = false;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,ReadFileHeader,The following statement contains a magic number: if (b[0] == _FileHeader[0] && b[1] == _FileHeader[1] && b[2] == _FileHeader[2]) // header              {                  byte maxks = b[3];                  ushort nodes = (ushort)Helper.ToInt16(b' 4);                  int root = Helper.ToInt32(b' 6);                  _maxKeySize = maxks;                  _PageNodeCount = nodes;                  _FileHeader = b;                  if (b[10] == 0)                      _externalStrings = false;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,GetPageList,The following statement contains a magic number: lastIndexedRow = Helper.ToInt32(_FileHeader' 11);
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The following statement contains a magic number: lock (_fileLock)              {                  // load page list data                  int nextpage = -1;                  SeekPage(page);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      nextpage = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                      if (File.Exists(_FileName + ".pagelist"))                      {                          var bn = File.ReadAllBytes(_FileName + ".pagelist");                          int blknum = Helper.ToInt32(bn' 0);                          byte[] bb = _strings.GetData(blknum' _pagelistalllocblock);                          keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                      }                      for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                                  key = _T.GetObject(b' idx + 1' ks); // do old way until better way                              else                                  key = (T)keys[i];                          }                          int pagenum = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          // add counts                          int unique = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          // FEATURE : add dup count                          PageList.Add(key' new PageInfo(pagenum' unique' 0));                      }                  }                  else                      throw new Exception("Page List header is invalid");                    return nextpage;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The following statement contains a magic number: lock (_fileLock)              {                  // load page list data                  int nextpage = -1;                  SeekPage(page);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      nextpage = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                      if (File.Exists(_FileName + ".pagelist"))                      {                          var bn = File.ReadAllBytes(_FileName + ".pagelist");                          int blknum = Helper.ToInt32(bn' 0);                          byte[] bb = _strings.GetData(blknum' _pagelistalllocblock);                          keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                      }                      for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                                  key = _T.GetObject(b' idx + 1' ks); // do old way until better way                              else                                  key = (T)keys[i];                          }                          int pagenum = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          // add counts                          int unique = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          // FEATURE : add dup count                          PageList.Add(key' new PageInfo(pagenum' unique' 0));                      }                  }                  else                      throw new Exception("Page List header is invalid");                    return nextpage;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The following statement contains a magic number: lock (_fileLock)              {                  // load page list data                  int nextpage = -1;                  SeekPage(page);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      nextpage = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                      if (File.Exists(_FileName + ".pagelist"))                      {                          var bn = File.ReadAllBytes(_FileName + ".pagelist");                          int blknum = Helper.ToInt32(bn' 0);                          byte[] bb = _strings.GetData(blknum' _pagelistalllocblock);                          keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                      }                      for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                                  key = _T.GetObject(b' idx + 1' ks); // do old way until better way                              else                                  key = (T)keys[i];                          }                          int pagenum = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          // add counts                          int unique = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          // FEATURE : add dup count                          PageList.Add(key' new PageInfo(pagenum' unique' 0));                      }                  }                  else                      throw new Exception("Page List header is invalid");                    return nextpage;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The following statement contains a magic number: lock (_fileLock)              {                  // load page list data                  int nextpage = -1;                  SeekPage(page);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      nextpage = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                      if (File.Exists(_FileName + ".pagelist"))                      {                          var bn = File.ReadAllBytes(_FileName + ".pagelist");                          int blknum = Helper.ToInt32(bn' 0);                          byte[] bb = _strings.GetData(blknum' _pagelistalllocblock);                          keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                      }                      for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                                  key = _T.GetObject(b' idx + 1' ks); // do old way until better way                              else                                  key = (T)keys[i];                          }                          int pagenum = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          // add counts                          int unique = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          // FEATURE : add dup count                          PageList.Add(key' new PageInfo(pagenum' unique' 0));                      }                  }                  else                      throw new Exception("Page List header is invalid");                    return nextpage;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The following statement contains a magic number: lock (_fileLock)              {                  // load page list data                  int nextpage = -1;                  SeekPage(page);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      nextpage = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                      if (File.Exists(_FileName + ".pagelist"))                      {                          var bn = File.ReadAllBytes(_FileName + ".pagelist");                          int blknum = Helper.ToInt32(bn' 0);                          byte[] bb = _strings.GetData(blknum' _pagelistalllocblock);                          keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                      }                      for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                                  key = _T.GetObject(b' idx + 1' ks); // do old way until better way                              else                                  key = (T)keys[i];                          }                          int pagenum = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          // add counts                          int unique = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          // FEATURE : add dup count                          PageList.Add(key' new PageInfo(pagenum' unique' 0));                      }                  }                  else                      throw new Exception("Page List header is invalid");                    return nextpage;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The following statement contains a magic number: lock (_fileLock)              {                  // load page list data                  int nextpage = -1;                  SeekPage(page);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      nextpage = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                      if (File.Exists(_FileName + ".pagelist"))                      {                          var bn = File.ReadAllBytes(_FileName + ".pagelist");                          int blknum = Helper.ToInt32(bn' 0);                          byte[] bb = _strings.GetData(blknum' _pagelistalllocblock);                          keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                      }                      for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                                  key = _T.GetObject(b' idx + 1' ks); // do old way until better way                              else                                  key = (T)keys[i];                          }                          int pagenum = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          // add counts                          int unique = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          // FEATURE : add dup count                          PageList.Add(key' new PageInfo(pagenum' unique' 0));                      }                  }                  else                      throw new Exception("Page List header is invalid");                    return nextpage;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageListData,The following statement contains a magic number: lock (_fileLock)              {                  // load page list data                  int nextpage = -1;                  SeekPage(page);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      nextpage = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                      if (File.Exists(_FileName + ".pagelist"))                      {                          var bn = File.ReadAllBytes(_FileName + ".pagelist");                          int blknum = Helper.ToInt32(bn' 0);                          byte[] bb = _strings.GetData(blknum' _pagelistalllocblock);                          keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                      }                      for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                                  key = _T.GetObject(b' idx + 1' ks); // do old way until better way                              else                                  key = (T)keys[i];                          }                          int pagenum = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          // add counts                          int unique = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          // FEATURE : add dup count                          PageList.Add(key' new PageInfo(pagenum' unique' 0));                      }                  }                  else                      throw new Exception("Page List header is invalid");                    return nextpage;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,SavePage,The following statement contains a magic number: lock (_fileLock)              {                  int pnum = node.DiskPageNumber;                  if (pnum > _LastPageNumber)                      throw new Exception("should not be here: page out of bounds");                    SeekPage(pnum);                  byte[] page = new byte[_PageLength];                  byte[] blockheader = CreateBlockHeader(0' (ushort)node.tree.Count()' node.RightPageNumber);                  Buffer.BlockCopy(blockheader' 0' page' 0' blockheader.Length);                    int index = blockheader.Length;                  int i = 0;                  byte[] b = null;                  T[] keys = node.tree.Keys();                  Array.Sort(keys); // sort keys on save for read performance                  int blocknum = 0;                  if (_externalStrings)                  {                      // free old blocks                      if (node.allocblocks != null)                          _strings.FreeBlocks(node.allocblocks);                      blocknum = _strings.SaveData(node.DiskPageNumber.ToString()' fastBinaryJSON.BJSON.ToBJSON(keys));                  }                  // node children                  foreach (var kp in keys)                  {                      var val = node.tree[kp];                      int idx = index + _rowSize * i;                      // key bytes                      byte[] kk;                      byte size;                      if (_externalStrings == false)                      {                          kk = _T.GetBytes(kp);                          size = (byte)kk.Length;                          if (size > _maxKeySize)                              size = _maxKeySize;                      }                      else                      {                          kk = new byte[4];                          Buffer.BlockCopy(Helper.GetBytes(blocknum' false)' 0' kk' 0' 4);                          size = 4;                      }                      // key size = 1 byte                      page[idx] = size;                      Buffer.BlockCopy(kk' 0' page' idx + 1' page[idx]);                      // offset = 4 bytes                      b = Helper.GetBytes(val.RecordNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize' b.Length);                      // duplicatepage = 4 bytes                      b = Helper.GetBytes(val.DuplicateBitmapNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize + 4' b.Length);                      i++;                  }                  _file.Write(page' 0' page.Length);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,SavePage,The following statement contains a magic number: lock (_fileLock)              {                  int pnum = node.DiskPageNumber;                  if (pnum > _LastPageNumber)                      throw new Exception("should not be here: page out of bounds");                    SeekPage(pnum);                  byte[] page = new byte[_PageLength];                  byte[] blockheader = CreateBlockHeader(0' (ushort)node.tree.Count()' node.RightPageNumber);                  Buffer.BlockCopy(blockheader' 0' page' 0' blockheader.Length);                    int index = blockheader.Length;                  int i = 0;                  byte[] b = null;                  T[] keys = node.tree.Keys();                  Array.Sort(keys); // sort keys on save for read performance                  int blocknum = 0;                  if (_externalStrings)                  {                      // free old blocks                      if (node.allocblocks != null)                          _strings.FreeBlocks(node.allocblocks);                      blocknum = _strings.SaveData(node.DiskPageNumber.ToString()' fastBinaryJSON.BJSON.ToBJSON(keys));                  }                  // node children                  foreach (var kp in keys)                  {                      var val = node.tree[kp];                      int idx = index + _rowSize * i;                      // key bytes                      byte[] kk;                      byte size;                      if (_externalStrings == false)                      {                          kk = _T.GetBytes(kp);                          size = (byte)kk.Length;                          if (size > _maxKeySize)                              size = _maxKeySize;                      }                      else                      {                          kk = new byte[4];                          Buffer.BlockCopy(Helper.GetBytes(blocknum' false)' 0' kk' 0' 4);                          size = 4;                      }                      // key size = 1 byte                      page[idx] = size;                      Buffer.BlockCopy(kk' 0' page' idx + 1' page[idx]);                      // offset = 4 bytes                      b = Helper.GetBytes(val.RecordNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize' b.Length);                      // duplicatepage = 4 bytes                      b = Helper.GetBytes(val.DuplicateBitmapNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize + 4' b.Length);                      i++;                  }                  _file.Write(page' 0' page.Length);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,SavePage,The following statement contains a magic number: lock (_fileLock)              {                  int pnum = node.DiskPageNumber;                  if (pnum > _LastPageNumber)                      throw new Exception("should not be here: page out of bounds");                    SeekPage(pnum);                  byte[] page = new byte[_PageLength];                  byte[] blockheader = CreateBlockHeader(0' (ushort)node.tree.Count()' node.RightPageNumber);                  Buffer.BlockCopy(blockheader' 0' page' 0' blockheader.Length);                    int index = blockheader.Length;                  int i = 0;                  byte[] b = null;                  T[] keys = node.tree.Keys();                  Array.Sort(keys); // sort keys on save for read performance                  int blocknum = 0;                  if (_externalStrings)                  {                      // free old blocks                      if (node.allocblocks != null)                          _strings.FreeBlocks(node.allocblocks);                      blocknum = _strings.SaveData(node.DiskPageNumber.ToString()' fastBinaryJSON.BJSON.ToBJSON(keys));                  }                  // node children                  foreach (var kp in keys)                  {                      var val = node.tree[kp];                      int idx = index + _rowSize * i;                      // key bytes                      byte[] kk;                      byte size;                      if (_externalStrings == false)                      {                          kk = _T.GetBytes(kp);                          size = (byte)kk.Length;                          if (size > _maxKeySize)                              size = _maxKeySize;                      }                      else                      {                          kk = new byte[4];                          Buffer.BlockCopy(Helper.GetBytes(blocknum' false)' 0' kk' 0' 4);                          size = 4;                      }                      // key size = 1 byte                      page[idx] = size;                      Buffer.BlockCopy(kk' 0' page' idx + 1' page[idx]);                      // offset = 4 bytes                      b = Helper.GetBytes(val.RecordNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize' b.Length);                      // duplicatepage = 4 bytes                      b = Helper.GetBytes(val.DuplicateBitmapNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize + 4' b.Length);                      i++;                  }                  _file.Write(page' 0' page.Length);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,SavePage,The following statement contains a magic number: lock (_fileLock)              {                  int pnum = node.DiskPageNumber;                  if (pnum > _LastPageNumber)                      throw new Exception("should not be here: page out of bounds");                    SeekPage(pnum);                  byte[] page = new byte[_PageLength];                  byte[] blockheader = CreateBlockHeader(0' (ushort)node.tree.Count()' node.RightPageNumber);                  Buffer.BlockCopy(blockheader' 0' page' 0' blockheader.Length);                    int index = blockheader.Length;                  int i = 0;                  byte[] b = null;                  T[] keys = node.tree.Keys();                  Array.Sort(keys); // sort keys on save for read performance                  int blocknum = 0;                  if (_externalStrings)                  {                      // free old blocks                      if (node.allocblocks != null)                          _strings.FreeBlocks(node.allocblocks);                      blocknum = _strings.SaveData(node.DiskPageNumber.ToString()' fastBinaryJSON.BJSON.ToBJSON(keys));                  }                  // node children                  foreach (var kp in keys)                  {                      var val = node.tree[kp];                      int idx = index + _rowSize * i;                      // key bytes                      byte[] kk;                      byte size;                      if (_externalStrings == false)                      {                          kk = _T.GetBytes(kp);                          size = (byte)kk.Length;                          if (size > _maxKeySize)                              size = _maxKeySize;                      }                      else                      {                          kk = new byte[4];                          Buffer.BlockCopy(Helper.GetBytes(blocknum' false)' 0' kk' 0' 4);                          size = 4;                      }                      // key size = 1 byte                      page[idx] = size;                      Buffer.BlockCopy(kk' 0' page' idx + 1' page[idx]);                      // offset = 4 bytes                      b = Helper.GetBytes(val.RecordNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize' b.Length);                      // duplicatepage = 4 bytes                      b = Helper.GetBytes(val.DuplicateBitmapNumber' false);                      Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize + 4' b.Length);                      i++;                  }                  _file.Write(page' 0' page.Length);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The following statement contains a magic number: lock (_fileLock)              {                  SeekPage(number);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      // create node here                      Page<T> page = new Page<T>();                        short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      page.DiskPageNumber = number;                      page.RightPageNumber = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                        for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                              {                                  int blknum = Helper.ToInt32(b' idx + 1' false);                                  byte[] bb = _strings.GetData(blknum' page.allocblocks);                                  keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                              }                              key = (T)keys[i];                          }                          int offset = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          int duppage = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          page.tree.Add(key' new KeyInfo(offset' duppage));                      }                      return page;                  }                  else                      throw new Exception("Page read error header invalid' number = " + number);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The following statement contains a magic number: lock (_fileLock)              {                  SeekPage(number);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      // create node here                      Page<T> page = new Page<T>();                        short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      page.DiskPageNumber = number;                      page.RightPageNumber = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                        for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                              {                                  int blknum = Helper.ToInt32(b' idx + 1' false);                                  byte[] bb = _strings.GetData(blknum' page.allocblocks);                                  keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                              }                              key = (T)keys[i];                          }                          int offset = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          int duppage = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          page.tree.Add(key' new KeyInfo(offset' duppage));                      }                      return page;                  }                  else                      throw new Exception("Page read error header invalid' number = " + number);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The following statement contains a magic number: lock (_fileLock)              {                  SeekPage(number);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      // create node here                      Page<T> page = new Page<T>();                        short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      page.DiskPageNumber = number;                      page.RightPageNumber = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                        for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                              {                                  int blknum = Helper.ToInt32(b' idx + 1' false);                                  byte[] bb = _strings.GetData(blknum' page.allocblocks);                                  keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                              }                              key = (T)keys[i];                          }                          int offset = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          int duppage = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          page.tree.Add(key' new KeyInfo(offset' duppage));                      }                      return page;                  }                  else                      throw new Exception("Page read error header invalid' number = " + number);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The following statement contains a magic number: lock (_fileLock)              {                  SeekPage(number);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      // create node here                      Page<T> page = new Page<T>();                        short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      page.DiskPageNumber = number;                      page.RightPageNumber = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                        for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                              {                                  int blknum = Helper.ToInt32(b' idx + 1' false);                                  byte[] bb = _strings.GetData(blknum' page.allocblocks);                                  keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                              }                              key = (T)keys[i];                          }                          int offset = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          int duppage = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          page.tree.Add(key' new KeyInfo(offset' duppage));                      }                      return page;                  }                  else                      throw new Exception("Page read error header invalid' number = " + number);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The following statement contains a magic number: lock (_fileLock)              {                  SeekPage(number);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      // create node here                      Page<T> page = new Page<T>();                        short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      page.DiskPageNumber = number;                      page.RightPageNumber = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                        for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                              {                                  int blknum = Helper.ToInt32(b' idx + 1' false);                                  byte[] bb = _strings.GetData(blknum' page.allocblocks);                                  keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                              }                              key = (T)keys[i];                          }                          int offset = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          int duppage = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          page.tree.Add(key' new KeyInfo(offset' duppage));                      }                      return page;                  }                  else                      throw new Exception("Page read error header invalid' number = " + number);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The following statement contains a magic number: lock (_fileLock)              {                  SeekPage(number);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      // create node here                      Page<T> page = new Page<T>();                        short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      page.DiskPageNumber = number;                      page.RightPageNumber = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                        for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                              {                                  int blknum = Helper.ToInt32(b' idx + 1' false);                                  byte[] bb = _strings.GetData(blknum' page.allocblocks);                                  keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                              }                              key = (T)keys[i];                          }                          int offset = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          int duppage = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          page.tree.Add(key' new KeyInfo(offset' duppage));                      }                      return page;                  }                  else                      throw new Exception("Page read error header invalid' number = " + number);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,LoadPageFromPageNumber,The following statement contains a magic number: lock (_fileLock)              {                  SeekPage(number);                  byte[] b = new byte[_PageLength];                  _file.Read(b' 0' _PageLength);                    if (b[0] == _BlockHeader[0] && b[1] == _BlockHeader[1] && b[2] == _BlockHeader[2] && b[3] == _BlockHeader[3])                  {                      // create node here                      Page<T> page = new Page<T>();                        short count = Helper.ToInt16(b' 5);                      if (count > _PageNodeCount)                          throw new Exception("Count > node size");                      page.DiskPageNumber = number;                      page.RightPageNumber = Helper.ToInt32(b' 11);                      int index = _BlockHeader.Length;                      object[] keys = null;                        for (int i = 0; i < count; i++)                      {                          int idx = index + _rowSize * i;                          byte ks = b[idx];                          T key;                          if (_externalStrings == false)                              key = _T.GetObject(b' idx + 1' ks);                          else                          {                              if (keys == null)                              {                                  int blknum = Helper.ToInt32(b' idx + 1' false);                                  byte[] bb = _strings.GetData(blknum' page.allocblocks);                                  keys = (object[])fastBinaryJSON.BJSON.ToObject(bb);                              }                              key = (T)keys[i];                          }                          int offset = Helper.ToInt32(b' idx + 1 + _maxKeySize);                          int duppage = Helper.ToInt32(b' idx + 1 + _maxKeySize + 4);                          page.tree.Add(key' new KeyInfo(offset' duppage));                      }                      return page;                  }                  else                      throw new Exception("Page read error header invalid' number = " + number);              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreatePageListData,The following statement contains a magic number: if (_externalStrings == false)              {                  kk = _T.GetBytes(_pages.GetKey(counter + offset));                  size = (byte)kk.Length;                  if (size > _maxKeySize)                      size = _maxKeySize;              }              else              {                  kk = new byte[4];                  Buffer.BlockCopy(Helper.GetBytes(counter + offset' false)' 0' kk' 0' 4);                  size = 4;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreatePageListData,The following statement contains a magic number: if (_externalStrings == false)              {                  kk = _T.GetBytes(_pages.GetKey(counter + offset));                  size = (byte)kk.Length;                  if (size > _maxKeySize)                      size = _maxKeySize;              }              else              {                  kk = new byte[4];                  Buffer.BlockCopy(Helper.GetBytes(counter + offset' false)' 0' kk' 0' 4);                  size = 4;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreatePageListData,The following statement contains a magic number: if (_externalStrings == false)              {                  kk = _T.GetBytes(_pages.GetKey(counter + offset));                  size = (byte)kk.Length;                  if (size > _maxKeySize)                      size = _maxKeySize;              }              else              {                  kk = new byte[4];                  Buffer.BlockCopy(Helper.GetBytes(counter + offset' false)' 0' kk' 0' 4);                  size = 4;              }
Magic Number,RaptorDB,IndexFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\IndexFile.cs,CreatePageListData,The following statement contains a magic number: Buffer.BlockCopy(b' 0' page' idx + 1 + _maxKeySize + 4' b.Length);
Magic Number,RaptorDB,MGIndex<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\MGIndex.cs,SplitPage,The following statement contains a magic number: for (int i = keys.Length / 2; i < keys.Length; i++)              {                  newpage.tree.Add(keys[i]' page.tree[keys[i]]);                  // remove from old page                  page.tree.Remove(keys[i]);              }
Magic Number,RaptorDB,MGIndex<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\MGIndex.cs,SplitPage,The following statement contains a magic number: newpage.FirstKey = keys[keys.Length / 2];
Magic Number,RaptorDB,tokenizer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\tokenizer.cs,GenerateWordFreq,The following statement contains a magic number: Dictionary<string' int> dic = new Dictionary<string' int>(500);
Magic Number,RaptorDB,tokenizer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\tokenizer.cs,AddDictionary,The following statement contains a magic number: if (l < 2)                  return;
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,RaptorDBServer,The following statement contains a magic number: _concleanuptimer = new System.Timers.Timer(30 * 1000);
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,RaptorDBServer,The following statement contains a magic number: _concleanuptimer = new System.Timers.Timer(30 * 1000);
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,RaptorDBServer,The following statement contains a magic number: _unusedintsancetimer = new System.Timers.Timer(300 * 1000);
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,RaptorDBServer,The following statement contains a magic number: _unusedintsancetimer = new System.Timers.Timer(300 * 1000);
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,_unusedinsancetimer_Elapsed,The following statement contains a magic number: lock (_lock)              {                  bool freed = false;                  // clear unused rdb instances                  if (_multiInstance)                  {                      foreach (var i in _instances)                      {                          if (i.Value.rdb != null &&                              FastDateTime.Now.Subtract(i.Value.lastUsed).TotalMinutes > 60) // FIX : configuration here                          {                              var r = i.Value;                              r.rdb.Shutdown();                              r.Initialized = false;                              r.register = null;                              r.save = null;                              r.saveCache = new SafeDictionary<Type' MethodInfo>();                              r.ssideCache = new SafeDictionary<string' ServerSideFunc>();                              r.sswcideCache = new SafeDictionary<string' ServerSideFuncWithArgs>();                              r.rdb = null;                                freed = true;                          }                      }                      if (freed)                          GC.Collect();                  }              }
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,InitializeCommandsDictionary,The following statement contains a magic number: _handlers.Add("" + COMMANDS.AddUser'                  (p' ret) =>                  {                      var param = (object[])p.Data;                      ret.OK = AddUser((string)param[0]' (string)param[1]' (string)param[2]);                  });
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,InitializeCommandsDictionary,The following statement contains a magic number: _handlers.Add("" + COMMANDS.ServerSide'                  (p' ret) =>                  {                      var param = (object[])p.Data;                      ret.OK = true;                      ret.Data = _defaultInstance.rdb.ServerSide(GetServerSideFuncCache(param[0].ToString()' param[1].ToString())' param[2].ToString());                  });
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,InitializeCommandsDictionary,The following statement contains a magic number: _handlers.Add("" + COMMANDS.ServerSideWithArgs'                  (p' ret) =>                  {                      var param = (object[])p.Data;                      ret.OK = true;                      ret.Data = _defaultInstance.rdb.ServerSide(GetServerSideFuncWithArgsCache(param[0].ToString()' param[1].ToString())' param[2].ToString()' param[3]);                  });
Magic Number,RaptorDB,RaptorDBServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDBServer.cs,InitializeCommandsDictionary,The following statement contains a magic number: _handlers.Add("" + COMMANDS.ServerSideWithArgs'                  (p' ret) =>                  {                      var param = (object[])p.Data;                      ret.OK = true;                      ret.Data = _defaultInstance.rdb.ServerSide(GetServerSideFuncWithArgsCache(param[0].ToString()' param[1].ToString())' param[2].ToString()' param[3]);                  });
Magic Number,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,ListenerCallback,The following statement contains a magic number: try              {                  //do some stuff                  string path = ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped).ToLower();                  if (ctx.User != null)                      _log.Debug("user : " + ctx.User.Identity.Name);                  else                  {                      //ctx.Response.Redirect("login");                      //return;                  }                    string webpath = "WEB\\";                  webpath = webpath.Replace("\\"' "/");                  bool handled = false;                  if (path.StartsWith(_apiPrefix))                  {                      string command = path.Replace(_apiPrefix + "/"' "");                      if (command.Contains("?"))                          command = command.Substring(0' command.IndexOf('?') - 1);                      if (command.Contains("/"))                          command = command.Substring(0' command.IndexOf('/'));                        Handler handler = null;                        if (_handler.TryGetValue(command' out handler))                      {                          handled = true;                          handler(ctx);                      }                  }                    if (!handled)                  {                      if (path == "")                      {                          ctx.Response.ContentType = "text/html";                          WriteResponse(ctx' 200' ReadFromStream(_WebCache[(webpath + "app.html").ToLower()])' false);                      }                      else                      {                          if (path.EndsWith(_apiPrefix + ".png") && File.Exists("logo.png"))                          {                              OutPutContentType(ctx' path);                              WriteResponse(ctx' 200' File.ReadAllBytes("logo.png")' false);                          }                          else if (_WebCache.ContainsKey((webpath + path).ToLower()))                          {                              bool compress = OutPutContentType(ctx' path);                              var o = _WebCache[(webpath + path).ToLower()];                              WriteResponse(ctx' 200' ReadFromStream(o)' compress);                          }                          else                              WriteResponse(ctx' 404' "route path not found : " + ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped));                      }                  }                  ctx.Response.OutputStream.Close();              }              catch (Exception ex)              {                  _log.Error(ex);              }
Magic Number,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,ListenerCallback,The following statement contains a magic number: try              {                  //do some stuff                  string path = ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped).ToLower();                  if (ctx.User != null)                      _log.Debug("user : " + ctx.User.Identity.Name);                  else                  {                      //ctx.Response.Redirect("login");                      //return;                  }                    string webpath = "WEB\\";                  webpath = webpath.Replace("\\"' "/");                  bool handled = false;                  if (path.StartsWith(_apiPrefix))                  {                      string command = path.Replace(_apiPrefix + "/"' "");                      if (command.Contains("?"))                          command = command.Substring(0' command.IndexOf('?') - 1);                      if (command.Contains("/"))                          command = command.Substring(0' command.IndexOf('/'));                        Handler handler = null;                        if (_handler.TryGetValue(command' out handler))                      {                          handled = true;                          handler(ctx);                      }                  }                    if (!handled)                  {                      if (path == "")                      {                          ctx.Response.ContentType = "text/html";                          WriteResponse(ctx' 200' ReadFromStream(_WebCache[(webpath + "app.html").ToLower()])' false);                      }                      else                      {                          if (path.EndsWith(_apiPrefix + ".png") && File.Exists("logo.png"))                          {                              OutPutContentType(ctx' path);                              WriteResponse(ctx' 200' File.ReadAllBytes("logo.png")' false);                          }                          else if (_WebCache.ContainsKey((webpath + path).ToLower()))                          {                              bool compress = OutPutContentType(ctx' path);                              var o = _WebCache[(webpath + path).ToLower()];                              WriteResponse(ctx' 200' ReadFromStream(o)' compress);                          }                          else                              WriteResponse(ctx' 404' "route path not found : " + ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped));                      }                  }                  ctx.Response.OutputStream.Close();              }              catch (Exception ex)              {                  _log.Error(ex);              }
Magic Number,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,ListenerCallback,The following statement contains a magic number: try              {                  //do some stuff                  string path = ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped).ToLower();                  if (ctx.User != null)                      _log.Debug("user : " + ctx.User.Identity.Name);                  else                  {                      //ctx.Response.Redirect("login");                      //return;                  }                    string webpath = "WEB\\";                  webpath = webpath.Replace("\\"' "/");                  bool handled = false;                  if (path.StartsWith(_apiPrefix))                  {                      string command = path.Replace(_apiPrefix + "/"' "");                      if (command.Contains("?"))                          command = command.Substring(0' command.IndexOf('?') - 1);                      if (command.Contains("/"))                          command = command.Substring(0' command.IndexOf('/'));                        Handler handler = null;                        if (_handler.TryGetValue(command' out handler))                      {                          handled = true;                          handler(ctx);                      }                  }                    if (!handled)                  {                      if (path == "")                      {                          ctx.Response.ContentType = "text/html";                          WriteResponse(ctx' 200' ReadFromStream(_WebCache[(webpath + "app.html").ToLower()])' false);                      }                      else                      {                          if (path.EndsWith(_apiPrefix + ".png") && File.Exists("logo.png"))                          {                              OutPutContentType(ctx' path);                              WriteResponse(ctx' 200' File.ReadAllBytes("logo.png")' false);                          }                          else if (_WebCache.ContainsKey((webpath + path).ToLower()))                          {                              bool compress = OutPutContentType(ctx' path);                              var o = _WebCache[(webpath + path).ToLower()];                              WriteResponse(ctx' 200' ReadFromStream(o)' compress);                          }                          else                              WriteResponse(ctx' 404' "route path not found : " + ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped));                      }                  }                  ctx.Response.OutputStream.Close();              }              catch (Exception ex)              {                  _log.Error(ex);              }
Magic Number,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,ListenerCallback,The following statement contains a magic number: try              {                  //do some stuff                  string path = ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped).ToLower();                  if (ctx.User != null)                      _log.Debug("user : " + ctx.User.Identity.Name);                  else                  {                      //ctx.Response.Redirect("login");                      //return;                  }                    string webpath = "WEB\\";                  webpath = webpath.Replace("\\"' "/");                  bool handled = false;                  if (path.StartsWith(_apiPrefix))                  {                      string command = path.Replace(_apiPrefix + "/"' "");                      if (command.Contains("?"))                          command = command.Substring(0' command.IndexOf('?') - 1);                      if (command.Contains("/"))                          command = command.Substring(0' command.IndexOf('/'));                        Handler handler = null;                        if (_handler.TryGetValue(command' out handler))                      {                          handled = true;                          handler(ctx);                      }                  }                    if (!handled)                  {                      if (path == "")                      {                          ctx.Response.ContentType = "text/html";                          WriteResponse(ctx' 200' ReadFromStream(_WebCache[(webpath + "app.html").ToLower()])' false);                      }                      else                      {                          if (path.EndsWith(_apiPrefix + ".png") && File.Exists("logo.png"))                          {                              OutPutContentType(ctx' path);                              WriteResponse(ctx' 200' File.ReadAllBytes("logo.png")' false);                          }                          else if (_WebCache.ContainsKey((webpath + path).ToLower()))                          {                              bool compress = OutPutContentType(ctx' path);                              var o = _WebCache[(webpath + path).ToLower()];                              WriteResponse(ctx' 200' ReadFromStream(o)' compress);                          }                          else                              WriteResponse(ctx' 404' "route path not found : " + ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped));                      }                  }                  ctx.Response.OutputStream.Close();              }              catch (Exception ex)              {                  _log.Error(ex);              }
Magic Number,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,WriteResponse,The following statement contains a magic number: if (compress == true && b.Length > 100 * 1024)              {                  _log.Debug("original data size : " + b.Length.ToString("#'0"));                  using (var ms = new MemoryStream())                  {                      using (var zip = new GZipStream(ms' CompressionMode.Compress' true))                          zip.Write(b' 0' b.Length);                      b = ms.ToArray();                  }                  _log.Debug("compressed size : " + b.Length.ToString("#'0"));                  ctx.Response.AppendHeader("Content-Encoding"' "gzip");              }
Magic Number,RaptorDB,aWebServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\aWebServer.cs,WriteResponse,The following statement contains a magic number: if (compress == true && b.Length > 100 * 1024)              {                  _log.Debug("original data size : " + b.Length.ToString("#'0"));                  using (var ms = new MemoryStream())                  {                      using (var zip = new GZipStream(ms' CompressionMode.Compress' true))                          zip.Write(b' 0' b.Length);                      b = ms.ToArray();                  }                  _log.Debug("compressed size : " + b.Length.ToString("#'0"));                  ctx.Response.AppendHeader("Content-Encoding"' "gzip");              }
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("getschema"'                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      if (qry == "")                      {                          WriteResponse(ctx' 404' "GetSchema requires a viewname to be defined e.g. ?view=customerview");                      }                      else                      {                          List<object> o = new List<object>();                          string view = qry.Split('=')[1];                          var sc = _rdb.GetSchema(view);                          foreach (var i in sc.Columns)                              o.Add(new { ColumnName = i.Key' Type = i.Value.Name });                          OutputJsonData(ctx' o);                      }                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("systeminfo"'                  (ctx) =>                  {                      var oo = GetInfo();                      var s = fastJSON.JSON.ToJSON(oo' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' EnableAnonymousTypes = true });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("action"'                  (ctx) =>                  {                      string action = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      switch (action)                      {                          case "backup":                              _rdb.Backup();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "compact":                              _rdb.GetKVHF().CompactStorageHF();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "getconfigs":                              WriteResponse(ctx' 200' File.ReadAllText(_path + "raptordb.config"));                              break;                      }                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("action"'                  (ctx) =>                  {                      string action = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      switch (action)                      {                          case "backup":                              _rdb.Backup();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "compact":                              _rdb.GetKVHF().CompactStorageHF();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "getconfigs":                              WriteResponse(ctx' 200' File.ReadAllText(_path + "raptordb.config"));                              break;                      }                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("action"'                  (ctx) =>                  {                      string action = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      switch (action)                      {                          case "backup":                              _rdb.Backup();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "compact":                              _rdb.GetKVHF().CompactStorageHF();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "getconfigs":                              WriteResponse(ctx' 200' File.ReadAllText(_path + "raptordb.config"));                              break;                      }                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("docget"' // takes : guid                   (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      var g = Guid.Parse(qry);                      _log.Debug("docid = " + qry);                      var s = fastJSON.JSON.ToNiceJSON(_rdb.Fetch(g)' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("dochistory"' // takes : guid                   (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      var g = Guid.Parse(qry);                      var h = _rdb.FetchHistoryInfo(g);                      _log.Debug("docid = " + qry);                      var s = fastJSON.JSON.ToJSON(h' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("docversion"' // takes : version                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      var v = int.Parse(qry);                      var oo = _rdb.FetchVersion(v);                      var s = fastJSON.JSON.ToNiceJSON(oo' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("fileget"' // takes : guid                   (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      var g = Guid.Parse(qry);                      _log.Debug("fileid = " + qry);                      var s = fastJSON.JSON.ToNiceJSON(_rdb.FetchBytes(g)' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("filehistory"' // takes : guid                   (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      var g = Guid.Parse(qry);                      var h = _rdb.FetchBytesHistoryInfo(g);                      _log.Debug("fileid = " + qry);                      var s = fastJSON.JSON.ToJSON(h' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("fileversion"' // takes : version                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      var v = int.Parse(qry);                      var oo = _rdb.FetchBytesVersion(v);                      var s = fastJSON.JSON.ToNiceJSON(oo' new fastJSON.JSONParameters { UseExtensions = true' UseFastGuid = false' UseEscapedUnicode = false });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("docsearch"' // takes : string & count =x &start=y                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      int start = 0;                      int count = -1;                        var m = _start_regex.Match(qry);                      if (m.Success)                      {                          start = int.Parse(m.Groups["start"].Value);                          qry = qry.Replace(m.Value' "");                      }                      m = _count_regex.Match(qry);                      if (m.Success)                      {                          count = int.Parse(m.Groups["count"].Value);                          qry = qry.Replace(m.Value' "");                      }                      var h = _rdb.FullTextSearch(qry);                      List<int> list = new List<int>();                      _log.Debug("search = " + qry);                      if (count > -1 && h.Length > 0)                      {                          int c = h.Length;                          for (int i = start; i < start + count && i < c; i++)                              list.Add(h[i]);                      }                      var obj = new                      {                          Items = list'                          Count = count'                          TotalCount = h.Length                      };                      var s = fastJSON.JSON.ToJSON(obj' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false' EnableAnonymousTypes = true });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("hfkeys"' // takes : count =x &start=y                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      int start = 0;                      int count = -1;                        var m = _start_regex.Match(qry);                      if (m.Success)                      {                          start = int.Parse(m.Groups["start"].Value);                          qry = qry.Replace(m.Value' "");                      }                      m = _count_regex.Match(qry);                      if (m.Success)                      {                          count = int.Parse(m.Groups["count"].Value);                          qry = qry.Replace(m.Value' "");                      }                      var h = _rdb.GetKVHF().GetKeysHF();                      List<string> list = new List<string>();                      if (count > -1 && h.Length > 0)                      {                          int c = h.Length;                          for (int i = start; i < start + count && i < c; i++)                              list.Add(h[i]);                      }                      var obj = new                      {                          Items = list'                          Count = count'                          TotalCount = h.Length                      };                      var s = fastJSON.JSON.ToJSON(obj' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false' EnableAnonymousTypes = true });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("hfget"' // takes : string                   (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      var h = _rdb.GetKVHF().GetObjectHF(qry);                      var s = fastJSON.JSON.ToNiceJSON(h' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' UseEscapedUnicode = false' EnableAnonymousTypes = true });                      ctx.Response.ContentType = "application/json";                      WriteResponse(ctx' 200' s);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("viewinfo"' // takes : viewname                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      if (qry == "")                      {                          WriteResponse(ctx' 404' "ViewInfo requires a viewname to be defined e.g. ?customerview");                      }                      else                      {                          var vi = GetViewInfo(qry);                          if (vi == "")                              WriteResponse(ctx' 500' "View not found.");                          else                          {                              ctx.Response.ContentType = "application/json";                              WriteResponse(ctx' 200' vi);                          }                      }                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("viewinfo"' // takes : viewname                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      if (qry == "")                      {                          WriteResponse(ctx' 404' "ViewInfo requires a viewname to be defined e.g. ?customerview");                      }                      else                      {                          var vi = GetViewInfo(qry);                          if (vi == "")                              WriteResponse(ctx' 500' "View not found.");                          else                          {                              ctx.Response.ContentType = "application/json";                              WriteResponse(ctx' 200' vi);                          }                      }                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("viewinfo"' // takes : viewname                  (ctx) =>                  {                      string qry = ctx.Request.Url.GetComponents(UriComponents.Query' UriFormat.Unescaped);                      if (qry == "")                      {                          WriteResponse(ctx' 404' "ViewInfo requires a viewname to be defined e.g. ?customerview");                      }                      else                      {                          var vi = GetViewInfo(qry);                          if (vi == "")                              WriteResponse(ctx' 500' "View not found.");                          else                          {                              ctx.Response.ContentType = "application/json";                              WriteResponse(ctx' 200' vi);                          }                      }                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following statement contains a magic number: _handler.Add("excelexport"'                  (ctx) =>                  {                      string path = ctx.Request.Url.GetComponents(UriComponents.Path' UriFormat.Unescaped).ToLower();                        var data = DoQuery(_rdb' ctx' path.Replace("raptordb/excelexport/"' "")' null);                      ctx.Response.AddHeader("content-disposition"' "attachment;filename='" + data.Title + ".csv'");                      ctx.Response.AddHeader("Content-Type"' "application/vnd.ms-excel");                      _log.Debug("exporting to excel rows : " + data.Rows.Count);                      WriteResponse(ctx' 200' WriteCsv(data.Rows)' true);                  });
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,GetMemoryUsage,The following statement contains a magic number: try              {                  string fname = Path.GetFileNameWithoutExtension(Assembly.GetEntryAssembly().Location);                    ProcessStartInfo ps = new ProcessStartInfo("tasklist");                  ps.Arguments = "/fi \"IMAGENAME eq " + fname + ".*\" /FO CSV /NH";                  ps.RedirectStandardOutput = true;                  ps.CreateNoWindow = true;                  ps.UseShellExecute = false;                  var p = Process.Start(ps);                  if (p.WaitForExit(1000))                  {                      var s = p.StandardOutput.ReadToEnd().Split('\"');                      return s[9].Replace("\""' "");                  }              }              catch { }
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,GetMemoryUsage,The following statement contains a magic number: try              {                  string fname = Path.GetFileNameWithoutExtension(Assembly.GetEntryAssembly().Location);                    ProcessStartInfo ps = new ProcessStartInfo("tasklist");                  ps.Arguments = "/fi \"IMAGENAME eq " + fname + ".*\" /FO CSV /NH";                  ps.RedirectStandardOutput = true;                  ps.CreateNoWindow = true;                  ps.UseShellExecute = false;                  var p = Process.Start(ps);                  if (p.WaitForExit(1000))                  {                      var s = p.StandardOutput.ReadToEnd().Split('\"');                      return s[9].Replace("\""' "");                  }              }              catch { }
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,OutputJsonData,The following statement contains a magic number: WriteResponse(ctx' 200' s);
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,ProcessGET,The following statement contains a magic number: try              {                  var result = DoQuery(rdb' ctx' path' route);                  var s = fastJSON.JSON.ToJSON(result' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' EnableAnonymousTypes = true });                  ctx.Response.ContentType = "application/json";                  WriteResponse(ctx' 200' s);                  return;              }              catch (Exception ex)              {                  WriteResponse(ctx' 500' "" + ex);              }
Magic Number,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,ProcessGET,The following statement contains a magic number: try              {                  var result = DoQuery(rdb' ctx' path' route);                  var s = fastJSON.JSON.ToJSON(result' new fastJSON.JSONParameters { UseExtensions = false' UseFastGuid = false' EnableAnonymousTypes = true });                  ctx.Response.ContentType = "application/json";                  WriteResponse(ctx' 200' s);                  return;              }              catch (Exception ex)              {                  WriteResponse(ctx' 500' "" + ex);              }
Magic Number,RaptorDB,KeyStoreString,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,Set,The following statement contains a magic number: ms.Write(Helper.GetBytes(bkey.Length' false)' 0' 4);
Magic Number,RaptorDB,KeyStoreString,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,UnpackData,The following statement contains a magic number: Buffer.BlockCopy(buffer' 4' key' 0' len);
Magic Number,RaptorDB,KeyStoreString,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,UnpackData,The following statement contains a magic number: val = new byte[buffer.Length - 4 - len];
Magic Number,RaptorDB,KeyStoreString,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,UnpackData,The following statement contains a magic number: Buffer.BlockCopy(buffer' 4 + len' val' 0' buffer.Length - 4 - len);
Magic Number,RaptorDB,KeyStoreString,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,UnpackData,The following statement contains a magic number: Buffer.BlockCopy(buffer' 4 + len' val' 0' buffer.Length - 4 - len);
Magic Number,RaptorDB,KeyStore<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,Count,The following statement contains a magic number: return c - _deleted.GetBits().CountOnes() * 2;
Magic Number,RaptorDB,KeyStore<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,Initialize,The following statement contains a magic number: _savetimer.Interval = Global.SaveIndexToDiskTimerSeconds * 1000;
Magic Number,RaptorDB,KeyStore<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStore.cs,CheckIndexState,The following statement contains a magic number: if (last < count)              {                  log.Debug("Rebuilding index...");                  log.Debug("   last index count = " + last);                  log.Debug("   data items count = " + count);                  // check last index record and archive record                  //       rebuild index if needed                  for (int i = last; i < count; i++)                  {                      bool deleted = false;                      T key = _archive.GetKey(i' out deleted);                      if (deleted == false)                          _index.Set(key' i);                      else                          _index.RemoveKey(key);                        if (i % 100000 == 0)                          log.Debug("100'000 items re-indexed");                  }                  log.Debug("Rebuild index done.");              }
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,PumpDataForBackup,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,PumpDataForBackup,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateObject,The following statement contains a magic number: if (b[0] < 32)                  return fastBinaryJSON.BJSON.ToObject(b);              else                  return fastJSON.JSON.ToObject(Encoding.ASCII.GetString(b));
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Initialize,The following statement contains a magic number: LogManager.Configure(_Path + "Logs" + _S + "log.txt"' 500' false);
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Initialize,The following statement contains a magic number: _saveTimer = new System.Timers.Timer(Global.BackgroundSaveViewTimer * 1000);
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Initialize,The following statement contains a magic number: _fulltextTimer = new System.Timers.Timer(Global.FullTextTimerSeconds * 1000);
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Initialize,The following statement contains a magic number: _freeMemTimer = new System.Timers.Timer(Global.FreeMemoryTimerSeconds * 1000);
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,Initialize,The following statement contains a magic number: _processinboxTimer = new System.Timers.Timer(Global.ProcessInboxTimerSeconds * 1000);
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,_freeMemTimer_Elapsed,The following statement contains a magic number: long l = GC.GetTotalMemory(true) / (1024 * 1024);
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,_freeMemTimer_Elapsed,The following statement contains a magic number: long l = GC.GetTotalMemory(true) / (1024 * 1024);
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateTemplateConfigFiles,The following statement contains a magic number: if (File.Exists(_Path + "RaptorDB-Replication.config") == false)              {                  Replication.ServerConfiguration s = new Replication.ServerConfiguration();                  s.What.Add(new Replication.WhatItem { Name = "default"' PackageItemLimit = 10000' Version = 1' B2HQtypes = new List<string> { "*" }' HQ2Btypes = new List<string> { "*" } });                  s.What.Add(new Replication.WhatItem { Name = "b2"' PackageItemLimit = 10000' Version = 1' B2HQtypes = new List<string> { "*" }' HQ2Btypes = new List<string> { "config.*" } });                  s.Where.Add(new Replication.WhereItem { BranchName = "b1"' Password = "123"' When = "*/5 * * * *"' What = "default" });                  s.Where.Add(new Replication.WhereItem { BranchName = "b2"' Password = "321"' When = "*/20 * * * *"' What = "b2" });                  File.WriteAllText(_Path + "-RaptorDB-Replication.config"' fastJSON.JSON.ToNiceJSON(s' new fastJSON.JSONParameters { UseExtensions = false }));              }
Magic Number,RaptorDB,RaptorDB,C:\repos\mgholam_RaptorDB-Document\RaptorDB\RaptorDB.cs,CreateTemplateConfigFiles,The following statement contains a magic number: if (File.Exists(_Path + "RaptorDB-Replication.config") == false)              {                  Replication.ServerConfiguration s = new Replication.ServerConfiguration();                  s.What.Add(new Replication.WhatItem { Name = "default"' PackageItemLimit = 10000' Version = 1' B2HQtypes = new List<string> { "*" }' HQ2Btypes = new List<string> { "*" } });                  s.What.Add(new Replication.WhatItem { Name = "b2"' PackageItemLimit = 10000' Version = 1' B2HQtypes = new List<string> { "*" }' HQ2Btypes = new List<string> { "config.*" } });                  s.Where.Add(new Replication.WhereItem { BranchName = "b1"' Password = "123"' When = "*/5 * * * *"' What = "default" });                  s.Where.Add(new Replication.WhereItem { BranchName = "b2"' Password = "321"' When = "*/20 * * * *"' What = "b2" });                  File.WriteAllText(_Path + "-RaptorDB-Replication.config"' fastJSON.JSON.ToNiceJSON(s' new fastJSON.JSONParameters { UseExtensions = false }));              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,KeyStoreHF,The following statement contains a magic number: _keys = new MGIndex<string>(_Path' "keys.idx"' 255' /*Global.PageItemCount'*/ false);
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,SetObjectHF,The following statement contains a magic number: if (k.Length > 255)              {                  _log.Error("Key length > 255 : " + key);                  throw new Exception("Key must be less than 255 characters");                  //return false;              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CompactStorageHF,The following statement contains a magic number: lock (_lock)              {                  try                  {                      _log.Debug("Compacting storage file ...");                      if (Directory.Exists(_Path + "temp"))                          Directory.Delete(_Path + "temp"' true);                        KeyStoreHF newfile = new KeyStoreHF(_Path + "temp");                      string[] keys = _keys.GetKeys().Cast<string>().ToArray();                      _log.Debug("Number of keys : " + keys.Length);                      foreach (var k in keys)                      {                          newfile.SetObjectHF(k' GetObjectHF(k));                      }                      newfile.Shutdown();                      _log.Debug("Compact done.");                      // shutdown and move files and restart here                      if (Directory.Exists(_Path + "old"))                          Directory.Delete(_Path + "old"' true);                      Directory.CreateDirectory(_Path + "old");                      _datastore.Shutdown();                      _keys.Shutdown();                      _log.Debug("Moving files...");                      foreach (var f in Directory.GetFiles(_Path' "*.*"))                          File.Move(f' _Path + "old" + _S + Path.GetFileName(f));                        foreach (var f in Directory.GetFiles(_Path + "temp"' "*.*"))                          File.Move(f' _Path + Path.GetFileName(f));                        Directory.Delete(_Path + "temp"' true);                      //Directory.Delete(_Path + "old"' true); // FEATURE : delete or keep?                      _log.Debug("Re-opening storage file");                      _datastore = new StorageFileHF(_Path + "data.mghf"' Global.HighFrequencyKVDiskBlockSize);                      _keys = new MGIndex<string>(_Path' "keys.idx"' 255' false);                        _BlockSize = _datastore.GetBlockSize();                  }                  catch (Exception ex)                  {                      _log.Error(ex);                  }              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,internalSave,The following statement contains a magic number: while (datablockcount > 0)              {                  datablockcount--;                  int next = 0;                  if (datablockcount > 0)                      next = _datastore.GetFreeBlockNumber();                    Buffer.BlockCopy(Helper.GetBytes(counter' false)' 0' header' 0' 4);    // set block number                  Buffer.BlockCopy(Helper.GetBytes(next' false)' 0' header' 4' 4); // set next pointer                    _datastore.SeekBlock(blocknum);                  _datastore.WriteBlockBytes(header' 0' header.Length);                  int c = len;                  if (c > dblocksize)                      c = dblocksize;                  _datastore.WriteBlockBytes(data' offset' c);                    if (next > 0)                      blocknum = next;                  offset += c;                  len -= c;                  counter++;              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,internalSave,The following statement contains a magic number: while (datablockcount > 0)              {                  datablockcount--;                  int next = 0;                  if (datablockcount > 0)                      next = _datastore.GetFreeBlockNumber();                    Buffer.BlockCopy(Helper.GetBytes(counter' false)' 0' header' 0' 4);    // set block number                  Buffer.BlockCopy(Helper.GetBytes(next' false)' 0' header' 4' 4); // set next pointer                    _datastore.SeekBlock(blocknum);                  _datastore.WriteBlockBytes(header' 0' header.Length);                  int c = len;                  if (c > dblocksize)                      c = dblocksize;                  _datastore.WriteBlockBytes(data' offset' c);                    if (next > 0)                      blocknum = next;                  offset += c;                  len -= c;                  counter++;              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,internalSave,The following statement contains a magic number: while (datablockcount > 0)              {                  datablockcount--;                  int next = 0;                  if (datablockcount > 0)                      next = _datastore.GetFreeBlockNumber();                    Buffer.BlockCopy(Helper.GetBytes(counter' false)' 0' header' 0' 4);    // set block number                  Buffer.BlockCopy(Helper.GetBytes(next' false)' 0' header' 4' 4); // set next pointer                    _datastore.SeekBlock(blocknum);                  _datastore.WriteBlockBytes(header' 0' header.Length);                  int c = len;                  if (c > dblocksize)                      c = dblocksize;                  _datastore.WriteBlockBytes(data' offset' c);                    if (next > 0)                      blocknum = next;                  offset += c;                  len -= c;                  counter++;              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: if (ab.isCompressed)                  alloc[8] = 1;
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: if (ab.isBinaryJSON)                  alloc[8] += 2;
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: if (ab.isBinaryJSON)                  alloc[8] += 2;
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: if (ab.deleteKey)                  alloc[8] += 4;
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: if (ab.deleteKey)                  alloc[8] += 4;
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: Buffer.BlockCopy(Helper.GetBytes(ab.datalength' false)' 0' alloc' 9' 4);
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: Buffer.BlockCopy(Helper.GetBytes(ab.datalength' false)' 0' alloc' 9' 4);
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: alloc[13] = ab.keylen;
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,CreateAllocHeader,The following statement contains a magic number: alloc[14] = 1;
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,FillAllocationBlock,The following statement contains a magic number: byte[] b = _datastore.ReadBlockBytes(blocknumber' _blockheader.Length + 255);
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,ParseBlockHeader,The following statement contains a magic number: if (b[14] != 1)              {                  _log.Error("Expecting string keys only' got : " + b[14]);                  //throw new Exception("Expecting string keys only' got : " + b[11]);                  return -1;              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,ParseBlockHeader,The following statement contains a magic number: if (b[14] != 1)              {                  _log.Error("Expecting string keys only' got : " + b[14]);                  //throw new Exception("Expecting string keys only' got : " + b[11]);                  return -1;              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,ParseBlockHeader,The following statement contains a magic number: int next = Helper.ToInt32(b' 4);
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,ParseBlockHeader,The following statement contains a magic number: if (ab.keylen == 0)              {                  byte flags = b[8];                    if ((flags & 0x01) > 0)                      ab.isCompressed = true;                  if ((flags & 0x02) > 0)                      ab.isBinaryJSON = true;                  if ((flags & 0x04) > 0)                      ab.deleteKey = true;                    ab.datalength = Helper.ToInt32(b' 9);                  byte keylen = b[13];                  ab.keylen = keylen;                  ab.key = Helper.GetString(b' _blockheader.Length' keylen);              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,ParseBlockHeader,The following statement contains a magic number: if (ab.keylen == 0)              {                  byte flags = b[8];                    if ((flags & 0x01) > 0)                      ab.isCompressed = true;                  if ((flags & 0x02) > 0)                      ab.isBinaryJSON = true;                  if ((flags & 0x04) > 0)                      ab.deleteKey = true;                    ab.datalength = Helper.ToInt32(b' 9);                  byte keylen = b[13];                  ab.keylen = keylen;                  ab.key = Helper.GetString(b' _blockheader.Length' keylen);              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,ParseBlockHeader,The following statement contains a magic number: if (ab.keylen == 0)              {                  byte flags = b[8];                    if ((flags & 0x01) > 0)                      ab.isCompressed = true;                  if ((flags & 0x02) > 0)                      ab.isBinaryJSON = true;                  if ((flags & 0x04) > 0)                      ab.deleteKey = true;                    ab.datalength = Helper.ToInt32(b' 9);                  byte keylen = b[13];                  ab.keylen = keylen;                  ab.key = Helper.GetString(b' _blockheader.Length' keylen);              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,RebuildDataFiles,The following statement contains a magic number: try              {                  // remove old free list                  if (File.Exists(_Path + "data.bmp"))                      File.Delete(_Path + "data.bmp");                    _datastore = new StorageFileHF(_Path + "data.mghf"' Global.HighFrequencyKVDiskBlockSize);                  _BlockSize = _datastore.GetBlockSize();                  if (File.Exists(_Path + "keys.idx"))                  {                      _log.Debug("removing old keys index");                      foreach (var f in Directory.GetFiles(_Path' "keys.*"))                          File.Delete(f);                  }                    keys = new MGIndex<string>(_Path' "keys.idx"' 255' /*Global.PageItemCount'*/ false);                    WAHBitArray visited = new WAHBitArray();                    int c = _datastore.NumberofBlocks();                    for (int i = 0; i < c; i++) // go through blocks                  {                      if (visited.Get(i))                          continue;                      byte[] b = _datastore.ReadBlockBytes(i' _blockheader.Length + 255);                      int bnum = Helper.ToInt32(b' 0);                      if (bnum > 0) // check if a start block                      {                          visited.Set(i' true);                          _datastore.FreeBlock(i); // mark as free                          continue;                      }                        AllocationBlock ab = new AllocationBlock();                      // start block found                      int blocknumexpected = 0;                        int next = ParseBlockHeader(ab' b' blocknumexpected);                      int last = 0;                      bool freelast = false;                      AllocationBlock old = null;                        if (ab.key == null)                          continue;                        if (keys.Get(ab.key' out last))                      {                          old = this.FillAllocationBlock(last);                          freelast = true;                      }                      blocknumexpected++;                      bool failed = false;                      if (ab.deleteKey == false)                      {                          while (next > 0) // read the blocks                          {                              ab.Blocks.Add(next);                              b = _datastore.ReadBlockBytes(next' _blockheader.Length + ab.keylen);                              next = ParseBlockHeader(ab' b' blocknumexpected);                              if (next == -1) // non matching block                              {                                  failed = true;                                  break;                              }                              blocknumexpected++;                          }                      }                      else                      {                          failed = true;                          keys.RemoveKey(ab.key);                      }                      // new data ok                      if (failed == false)                      {                          keys.Set(ab.key' i);// valid block found                          if (freelast && old != null)// free the old blocks                              _datastore.FreeBlocks(old.Blocks);                      }                        visited.Set(i' true);                  }                    // all ok delete temp.$ file                  if (File.Exists(_Path + _dirtyFilename))                      File.Delete(_Path + _dirtyFilename);              }              catch (Exception ex)              {                  _log.Error(ex);              }              finally              {                  _log.Debug("Shutting down files and index");                  _datastore.Shutdown();                  keys.SaveIndex();                  keys.Shutdown();              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,RebuildDataFiles,The following statement contains a magic number: try              {                  // remove old free list                  if (File.Exists(_Path + "data.bmp"))                      File.Delete(_Path + "data.bmp");                    _datastore = new StorageFileHF(_Path + "data.mghf"' Global.HighFrequencyKVDiskBlockSize);                  _BlockSize = _datastore.GetBlockSize();                  if (File.Exists(_Path + "keys.idx"))                  {                      _log.Debug("removing old keys index");                      foreach (var f in Directory.GetFiles(_Path' "keys.*"))                          File.Delete(f);                  }                    keys = new MGIndex<string>(_Path' "keys.idx"' 255' /*Global.PageItemCount'*/ false);                    WAHBitArray visited = new WAHBitArray();                    int c = _datastore.NumberofBlocks();                    for (int i = 0; i < c; i++) // go through blocks                  {                      if (visited.Get(i))                          continue;                      byte[] b = _datastore.ReadBlockBytes(i' _blockheader.Length + 255);                      int bnum = Helper.ToInt32(b' 0);                      if (bnum > 0) // check if a start block                      {                          visited.Set(i' true);                          _datastore.FreeBlock(i); // mark as free                          continue;                      }                        AllocationBlock ab = new AllocationBlock();                      // start block found                      int blocknumexpected = 0;                        int next = ParseBlockHeader(ab' b' blocknumexpected);                      int last = 0;                      bool freelast = false;                      AllocationBlock old = null;                        if (ab.key == null)                          continue;                        if (keys.Get(ab.key' out last))                      {                          old = this.FillAllocationBlock(last);                          freelast = true;                      }                      blocknumexpected++;                      bool failed = false;                      if (ab.deleteKey == false)                      {                          while (next > 0) // read the blocks                          {                              ab.Blocks.Add(next);                              b = _datastore.ReadBlockBytes(next' _blockheader.Length + ab.keylen);                              next = ParseBlockHeader(ab' b' blocknumexpected);                              if (next == -1) // non matching block                              {                                  failed = true;                                  break;                              }                              blocknumexpected++;                          }                      }                      else                      {                          failed = true;                          keys.RemoveKey(ab.key);                      }                      // new data ok                      if (failed == false)                      {                          keys.Set(ab.key' i);// valid block found                          if (freelast && old != null)// free the old blocks                              _datastore.FreeBlocks(old.Blocks);                      }                        visited.Set(i' true);                  }                    // all ok delete temp.$ file                  if (File.Exists(_Path + _dirtyFilename))                      File.Delete(_Path + _dirtyFilename);              }              catch (Exception ex)              {                  _log.Error(ex);              }              finally              {                  _log.Debug("Shutting down files and index");                  _datastore.Shutdown();                  keys.SaveIndex();                  keys.Shutdown();              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,Increment,The following statement contains a magic number: if (k.Length > 255)              {                  _log.Error("Key length > 255 : " + key);                  throw new Exception("Key must be less than 255 characters");                  //return false;              }
Magic Number,RaptorDB,KeyStoreHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\KeyStoreHF.cs,Increment,The following statement contains a magic number: if (k.Length > 255)              {                  _log.Error("Key length > 255 : " + key);                  throw new Exception("Key must be less than 255 characters");                  //return false;              }
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,ReadFreeListBMPFile,The following statement contains a magic number: if (b.Length % 4 > 0) // new format with the data type byte              {                  t = (WAHBitArray.TYPE)Enum.ToObject(typeof(WAHBitArray.TYPE)' b[0]);                  j = 1;              }
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,ReadFreeListBMPFile,The following statement contains a magic number: for (int i = 0; i < b.Length / 4; i++)              {                  ints.Add((uint)Helper.ToInt32(b' (i * 4) + j));              }
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,ReadFreeListBMPFile,The following statement contains a magic number: for (int i = 0; i < b.Length / 4; i++)              {                  ints.Add((uint)Helper.ToInt32(b' (i * 4) + j));              }
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,ReadFileHeader,The following statement contains a magic number: _BLOCKSIZE = (ushort)((int)hdr[5] + ((int)hdr[6]) << 8);
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,ReadFileHeader,The following statement contains a magic number: _BLOCKSIZE = (ushort)((int)hdr[5] + ((int)hdr[6]) << 8);
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,ReadFileHeader,The following statement contains a magic number: _BLOCKSIZE = (ushort)((int)hdr[5] + ((int)hdr[6]) << 8);
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,CreateFileHeader,The following statement contains a magic number: _fileheader[4] = (byte)_CurrentVersion;
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,CreateFileHeader,The following statement contains a magic number: _fileheader[5] = (byte)(blocksize & 0xff);
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,CreateFileHeader,The following statement contains a magic number: _fileheader[6] = (byte)(blocksize >> 8);
Magic Number,RaptorDB,StorageFileHF,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFileHF.cs,CreateFileHeader,The following statement contains a magic number: _fileheader[6] = (byte)(blocksize >> 8);
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,StorageFile,The following statement contains a magic number: _fileheader[5] = (byte)_CurrentVersion;
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,StorageFile,The following statement contains a magic number: _fileheader[5] = (byte)_CurrentVersion;
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,Initialize,The following statement contains a magic number: if (StorageOnlyMode == false)              {                  // load rec pointers                  _recfilename = filename.Substring(0' filename.LastIndexOf('.')) + ".mgrec";                  if (File.Exists(_recfilename) == false)                      _recfilewrite = new FileStream(_recfilename' FileMode.CreateNew' FileAccess.Write' FileShare.ReadWrite);                  else                      _recfilewrite = new FileStream(_recfilename' FileMode.Open' FileAccess.Write' FileShare.ReadWrite);                    _recfileread = new FileStream(_recfilename' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                    _lastRecordNum = (int)(_recfilewrite.Length / 8);                  _recfilewrite.Seek(0L' SeekOrigin.End);              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,GetStorageFileHeaderVersion,The following statement contains a magic number: if (File.Exists(fn))              {                  var fs = new FileStream(fn' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite);                  fs.Seek(0L' SeekOrigin.Begin);                  byte[] b = new byte[_fileheader.Length];                  fs.Read(b' 0' _fileheader.Length);                  fs.Close();                  return b[5];              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ReadObject,The following statement contains a magic number: if (b[0] < 32)                  return fastBinaryJSON.BJSON.ToObject(b);              else                  return fastJSON.JSON.ToObject(Encoding.ASCII.GetString(b));
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ViewReadRawBytes,The following statement contains a magic number: lock (_readlock)              {                  long offset = ComputeOffset(recnum);                  _dataread.Seek(offset' System.IO.SeekOrigin.Begin);                  byte[] hdr = new byte[5];                  // read header                  _dataread.Read(hdr' 0' 5); // meta length                  int len = Helper.ToInt32(hdr' 1);                    int type = hdr[0];                  if (type == 0)                  {                      byte[] data = new byte[len];                      _dataread.Read(data' 0' len);                      return data;                  }                  return null;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ViewReadRawBytes,The following statement contains a magic number: lock (_readlock)              {                  long offset = ComputeOffset(recnum);                  _dataread.Seek(offset' System.IO.SeekOrigin.Begin);                  byte[] hdr = new byte[5];                  // read header                  _dataread.Read(hdr' 0' 5); // meta length                  int len = Helper.ToInt32(hdr' 1);                    int type = hdr[0];                  if (type == 0)                  {                      byte[] data = new byte[len];                      _dataread.Read(data' 0' len);                      return data;                  }                  return null;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,internalWriteData,The following statement contains a magic number: lock (_readlock)              {                  _dirty = true;                  // seek end of file                  long offset = _lastWriteOffset;                  if (_viewmode == false && Global.SplitStorageFilesMegaBytes > 0)                  {                      // current file size > _splitMegaBytes --> new file                      if (offset > (long)Global.SplitStorageFilesMegaBytes * 1024 * 1024)                          CreateNewStorageFile();                  }                    if (raw == false)                  {                      if (data != null)                          meta.dataLength = data.Length;                      byte[] metabytes = fastBinaryJSON.BJSON.ToBJSON(meta' new fastBinaryJSON.BJSONParameters { UseExtensions = false });                        // write header info                      _datawrite.Write(new byte[] { 1 }' 0' 1); // FEATURE : add json here' write bson for now                      _datawrite.Write(Helper.GetBytes(metabytes.Length' false)' 0' 4);                      _datawrite.Write(metabytes' 0' metabytes.Length);                      // update pointer                      _lastWriteOffset += metabytes.Length + 5;                  }                  else                  {                      // write header info                      _datawrite.Write(new byte[] { 0 }' 0' 1); // write raw                      _datawrite.Write(Helper.GetBytes(data.Length' false)' 0' 4);                      // update pointer                      _lastWriteOffset += 5;                  }                    if (data != null)                  {                      // write data block                      _datawrite.Write(data' 0' data.Length);                      _lastWriteOffset += data.Length;                  }                  // return starting offset -> recno                  long recno = _lastRecordNum++;                  if (_recfilewrite != null)                      _recfilewrite.Write(Helper.GetBytes(offset' false)' 0' 8);                  if (Global.FlushStorageFileImmediately)                  {                      _datawrite.Flush();                      if (_recfilewrite != null)                          _recfilewrite.Flush();                  }                  return recno;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,internalWriteData,The following statement contains a magic number: lock (_readlock)              {                  _dirty = true;                  // seek end of file                  long offset = _lastWriteOffset;                  if (_viewmode == false && Global.SplitStorageFilesMegaBytes > 0)                  {                      // current file size > _splitMegaBytes --> new file                      if (offset > (long)Global.SplitStorageFilesMegaBytes * 1024 * 1024)                          CreateNewStorageFile();                  }                    if (raw == false)                  {                      if (data != null)                          meta.dataLength = data.Length;                      byte[] metabytes = fastBinaryJSON.BJSON.ToBJSON(meta' new fastBinaryJSON.BJSONParameters { UseExtensions = false });                        // write header info                      _datawrite.Write(new byte[] { 1 }' 0' 1); // FEATURE : add json here' write bson for now                      _datawrite.Write(Helper.GetBytes(metabytes.Length' false)' 0' 4);                      _datawrite.Write(metabytes' 0' metabytes.Length);                      // update pointer                      _lastWriteOffset += metabytes.Length + 5;                  }                  else                  {                      // write header info                      _datawrite.Write(new byte[] { 0 }' 0' 1); // write raw                      _datawrite.Write(Helper.GetBytes(data.Length' false)' 0' 4);                      // update pointer                      _lastWriteOffset += 5;                  }                    if (data != null)                  {                      // write data block                      _datawrite.Write(data' 0' data.Length);                      _lastWriteOffset += data.Length;                  }                  // return starting offset -> recno                  long recno = _lastRecordNum++;                  if (_recfilewrite != null)                      _recfilewrite.Write(Helper.GetBytes(offset' false)' 0' 8);                  if (Global.FlushStorageFileImmediately)                  {                      _datawrite.Flush();                      if (_recfilewrite != null)                          _recfilewrite.Flush();                  }                  return recno;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,internalWriteData,The following statement contains a magic number: lock (_readlock)              {                  _dirty = true;                  // seek end of file                  long offset = _lastWriteOffset;                  if (_viewmode == false && Global.SplitStorageFilesMegaBytes > 0)                  {                      // current file size > _splitMegaBytes --> new file                      if (offset > (long)Global.SplitStorageFilesMegaBytes * 1024 * 1024)                          CreateNewStorageFile();                  }                    if (raw == false)                  {                      if (data != null)                          meta.dataLength = data.Length;                      byte[] metabytes = fastBinaryJSON.BJSON.ToBJSON(meta' new fastBinaryJSON.BJSONParameters { UseExtensions = false });                        // write header info                      _datawrite.Write(new byte[] { 1 }' 0' 1); // FEATURE : add json here' write bson for now                      _datawrite.Write(Helper.GetBytes(metabytes.Length' false)' 0' 4);                      _datawrite.Write(metabytes' 0' metabytes.Length);                      // update pointer                      _lastWriteOffset += metabytes.Length + 5;                  }                  else                  {                      // write header info                      _datawrite.Write(new byte[] { 0 }' 0' 1); // write raw                      _datawrite.Write(Helper.GetBytes(data.Length' false)' 0' 4);                      // update pointer                      _lastWriteOffset += 5;                  }                    if (data != null)                  {                      // write data block                      _datawrite.Write(data' 0' data.Length);                      _lastWriteOffset += data.Length;                  }                  // return starting offset -> recno                  long recno = _lastRecordNum++;                  if (_recfilewrite != null)                      _recfilewrite.Write(Helper.GetBytes(offset' false)' 0' 8);                  if (Global.FlushStorageFileImmediately)                  {                      _datawrite.Flush();                      if (_recfilewrite != null)                          _recfilewrite.Flush();                  }                  return recno;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,internalWriteData,The following statement contains a magic number: lock (_readlock)              {                  _dirty = true;                  // seek end of file                  long offset = _lastWriteOffset;                  if (_viewmode == false && Global.SplitStorageFilesMegaBytes > 0)                  {                      // current file size > _splitMegaBytes --> new file                      if (offset > (long)Global.SplitStorageFilesMegaBytes * 1024 * 1024)                          CreateNewStorageFile();                  }                    if (raw == false)                  {                      if (data != null)                          meta.dataLength = data.Length;                      byte[] metabytes = fastBinaryJSON.BJSON.ToBJSON(meta' new fastBinaryJSON.BJSONParameters { UseExtensions = false });                        // write header info                      _datawrite.Write(new byte[] { 1 }' 0' 1); // FEATURE : add json here' write bson for now                      _datawrite.Write(Helper.GetBytes(metabytes.Length' false)' 0' 4);                      _datawrite.Write(metabytes' 0' metabytes.Length);                      // update pointer                      _lastWriteOffset += metabytes.Length + 5;                  }                  else                  {                      // write header info                      _datawrite.Write(new byte[] { 0 }' 0' 1); // write raw                      _datawrite.Write(Helper.GetBytes(data.Length' false)' 0' 4);                      // update pointer                      _lastWriteOffset += 5;                  }                    if (data != null)                  {                      // write data block                      _datawrite.Write(data' 0' data.Length);                      _lastWriteOffset += data.Length;                  }                  // return starting offset -> recno                  long recno = _lastRecordNum++;                  if (_recfilewrite != null)                      _recfilewrite.Write(Helper.GetBytes(offset' false)' 0' 8);                  if (Global.FlushStorageFileImmediately)                  {                      _datawrite.Flush();                      if (_recfilewrite != null)                          _recfilewrite.Flush();                  }                  return recno;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,internalWriteData,The following statement contains a magic number: lock (_readlock)              {                  _dirty = true;                  // seek end of file                  long offset = _lastWriteOffset;                  if (_viewmode == false && Global.SplitStorageFilesMegaBytes > 0)                  {                      // current file size > _splitMegaBytes --> new file                      if (offset > (long)Global.SplitStorageFilesMegaBytes * 1024 * 1024)                          CreateNewStorageFile();                  }                    if (raw == false)                  {                      if (data != null)                          meta.dataLength = data.Length;                      byte[] metabytes = fastBinaryJSON.BJSON.ToBJSON(meta' new fastBinaryJSON.BJSONParameters { UseExtensions = false });                        // write header info                      _datawrite.Write(new byte[] { 1 }' 0' 1); // FEATURE : add json here' write bson for now                      _datawrite.Write(Helper.GetBytes(metabytes.Length' false)' 0' 4);                      _datawrite.Write(metabytes' 0' metabytes.Length);                      // update pointer                      _lastWriteOffset += metabytes.Length + 5;                  }                  else                  {                      // write header info                      _datawrite.Write(new byte[] { 0 }' 0' 1); // write raw                      _datawrite.Write(Helper.GetBytes(data.Length' false)' 0' 4);                      // update pointer                      _lastWriteOffset += 5;                  }                    if (data != null)                  {                      // write data block                      _datawrite.Write(data' 0' data.Length);                      _lastWriteOffset += data.Length;                  }                  // return starting offset -> recno                  long recno = _lastRecordNum++;                  if (_recfilewrite != null)                      _recfilewrite.Write(Helper.GetBytes(offset' false)' 0' 8);                  if (Global.FlushStorageFileImmediately)                  {                      _datawrite.Flush();                      if (_recfilewrite != null)                          _recfilewrite.Flush();                  }                  return recno;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,internalWriteData,The following statement contains a magic number: lock (_readlock)              {                  _dirty = true;                  // seek end of file                  long offset = _lastWriteOffset;                  if (_viewmode == false && Global.SplitStorageFilesMegaBytes > 0)                  {                      // current file size > _splitMegaBytes --> new file                      if (offset > (long)Global.SplitStorageFilesMegaBytes * 1024 * 1024)                          CreateNewStorageFile();                  }                    if (raw == false)                  {                      if (data != null)                          meta.dataLength = data.Length;                      byte[] metabytes = fastBinaryJSON.BJSON.ToBJSON(meta' new fastBinaryJSON.BJSONParameters { UseExtensions = false });                        // write header info                      _datawrite.Write(new byte[] { 1 }' 0' 1); // FEATURE : add json here' write bson for now                      _datawrite.Write(Helper.GetBytes(metabytes.Length' false)' 0' 4);                      _datawrite.Write(metabytes' 0' metabytes.Length);                      // update pointer                      _lastWriteOffset += metabytes.Length + 5;                  }                  else                  {                      // write header info                      _datawrite.Write(new byte[] { 0 }' 0' 1); // write raw                      _datawrite.Write(Helper.GetBytes(data.Length' false)' 0' 4);                      // update pointer                      _lastWriteOffset += 5;                  }                    if (data != null)                  {                      // write data block                      _datawrite.Write(data' 0' data.Length);                      _lastWriteOffset += data.Length;                  }                  // return starting offset -> recno                  long recno = _lastRecordNum++;                  if (_recfilewrite != null)                      _recfilewrite.Write(Helper.GetBytes(offset' false)' 0' 8);                  if (Global.FlushStorageFileImmediately)                  {                      _datawrite.Flush();                      if (_recfilewrite != null)                          _recfilewrite.Flush();                  }                  return recno;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,internalWriteData,The following statement contains a magic number: lock (_readlock)              {                  _dirty = true;                  // seek end of file                  long offset = _lastWriteOffset;                  if (_viewmode == false && Global.SplitStorageFilesMegaBytes > 0)                  {                      // current file size > _splitMegaBytes --> new file                      if (offset > (long)Global.SplitStorageFilesMegaBytes * 1024 * 1024)                          CreateNewStorageFile();                  }                    if (raw == false)                  {                      if (data != null)                          meta.dataLength = data.Length;                      byte[] metabytes = fastBinaryJSON.BJSON.ToBJSON(meta' new fastBinaryJSON.BJSONParameters { UseExtensions = false });                        // write header info                      _datawrite.Write(new byte[] { 1 }' 0' 1); // FEATURE : add json here' write bson for now                      _datawrite.Write(Helper.GetBytes(metabytes.Length' false)' 0' 4);                      _datawrite.Write(metabytes' 0' metabytes.Length);                      // update pointer                      _lastWriteOffset += metabytes.Length + 5;                  }                  else                  {                      // write header info                      _datawrite.Write(new byte[] { 0 }' 0' 1); // write raw                      _datawrite.Write(Helper.GetBytes(data.Length' false)' 0' 4);                      // update pointer                      _lastWriteOffset += 5;                  }                    if (data != null)                  {                      // write data block                      _datawrite.Write(data' 0' data.Length);                      _lastWriteOffset += data.Length;                  }                  // return starting offset -> recno                  long recno = _lastRecordNum++;                  if (_recfilewrite != null)                      _recfilewrite.Write(Helper.GetBytes(offset' false)' 0' 8);                  if (Global.FlushStorageFileImmediately)                  {                      _datawrite.Flush();                      if (_recfilewrite != null)                          _recfilewrite.Flush();                  }                  return recno;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ComputeOffset,The following statement contains a magic number: long off = recnum << 3;
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ComputeOffset,The following statement contains a magic number: byte[] b = new byte[8];
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ComputeOffset,The following statement contains a magic number: _recfileread.Read(b' 0' 8);
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ComputeOffset,The following statement contains a magic number: if (off == 0)// kludge                  off = 6;
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ReadMetaData,The following statement contains a magic number: byte[] hdr = new byte[5];
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ReadMetaData,The following statement contains a magic number: fs.Read(hdr' 0' 5);
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,ReadMetaData,The following statement contains a magic number: if (type > 0)              {                  metasize = len + 5;                  hdr = new byte[len];                  fs.Read(hdr' 0' len);                  StorageItem<T> meta;                  if (type == 1)                      meta = fastBinaryJSON.BJSON.ToObject<StorageItem<T>>(hdr);                  else                  {                      string str = Helper.GetString(hdr' 0' (short)hdr.Length);                      meta = fastJSON.JSON.ToObject<StorageItem<T>>(str);                  }                  return meta;              }              else              {                  metasize = len;                  return null;              }
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,Pump,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,Pump,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB,StorageFile<T>,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Storage\StorageFile.cs,binarysearch,The following statement contains a magic number: while (low <= high)              {                  midpoint = low + (high - low) / 2;                  long k = _uptoindexes[midpoint];                  // check to see if value is equal to item in array                  if (offset == k)                      return midpoint + 1;                  else if (offset < k)                  {                      high = midpoint - 1;                      lastlower = midpoint;                  }                  else                      low = midpoint + 1;              }
Magic Number,RaptorDB.Replication,ServerConfiguration,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\Configuration.cs,ServerConfiguration,The following statement contains a magic number: ReplicationPort = 9999;
Magic Number,RaptorDB.Replication,ClientConfiguration,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\Configuration.cs,ClientConfiguration,The following statement contains a magic number: ServerReplicationPort = 9999;
Magic Number,RaptorDB.Replication,ReplicationClient,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\ReplicationClient.cs,PumpDataForBackup,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB.Replication,ReplicationClient,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\ReplicationClient.cs,PumpDataForBackup,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB.Replication,ReplicationServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\ReplicationServer.cs,PumpDataForBackup,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB.Replication,ReplicationServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\ReplicationServer.cs,PumpDataForBackup,The following statement contains a magic number: byte[] bytes = new byte[4096 * 2];
Magic Number,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Contains("Between"))              {                  Type datatype = m.Arguments[0].Type;                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                    if (datatype == typeof(DateTime))                  {                      DateTime from = DateTime.Now;                      DateTime to = DateTime.Now;                      if (m.Arguments[1].Type == typeof(string))                      {                          from = DateTime.Parse((string)GetValueForMember(m.Arguments[1]));                          to = DateTime.Parse((string)GetValueForMember(m.Arguments[2]));                      }                      else                      {                          from = (DateTime)GetValueForMember(m.Arguments[1]);                          to = (DateTime)GetValueForMember(m.Arguments[2]);                      }                      _bitmap.Push(qfromto(name' from' to));                  }                  else                  {                      var from = GetValueForMember(m.Arguments[1]);                      var to = GetValueForMember(m.Arguments[2]);                      _bitmap.Push(qfromto(name' from' to));                  }              }              else if (mc.Contains("In"))              {                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                  _InCommand = name;                  Visit(m.Arguments[1]);                  _bitmap.Push(_inBmp);                  _inBmp = null;                  _InCommand = "";              }              else                  _stack.Push(mc);
Magic Number,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Contains("Between"))              {                  Type datatype = m.Arguments[0].Type;                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                    if (datatype == typeof(DateTime))                  {                      DateTime from = DateTime.Now;                      DateTime to = DateTime.Now;                      if (m.Arguments[1].Type == typeof(string))                      {                          from = DateTime.Parse((string)GetValueForMember(m.Arguments[1]));                          to = DateTime.Parse((string)GetValueForMember(m.Arguments[2]));                      }                      else                      {                          from = (DateTime)GetValueForMember(m.Arguments[1]);                          to = (DateTime)GetValueForMember(m.Arguments[2]);                      }                      _bitmap.Push(qfromto(name' from' to));                  }                  else                  {                      var from = GetValueForMember(m.Arguments[1]);                      var to = GetValueForMember(m.Arguments[2]);                      _bitmap.Push(qfromto(name' from' to));                  }              }              else if (mc.Contains("In"))              {                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                  _InCommand = name;                  Visit(m.Arguments[1]);                  _bitmap.Push(_inBmp);                  _inBmp = null;                  _InCommand = "";              }              else                  _stack.Push(mc);
Magic Number,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Contains("Between"))              {                  Type datatype = m.Arguments[0].Type;                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                    if (datatype == typeof(DateTime))                  {                      DateTime from = DateTime.Now;                      DateTime to = DateTime.Now;                      if (m.Arguments[1].Type == typeof(string))                      {                          from = DateTime.Parse((string)GetValueForMember(m.Arguments[1]));                          to = DateTime.Parse((string)GetValueForMember(m.Arguments[2]));                      }                      else                      {                          from = (DateTime)GetValueForMember(m.Arguments[1]);                          to = (DateTime)GetValueForMember(m.Arguments[2]);                      }                      _bitmap.Push(qfromto(name' from' to));                  }                  else                  {                      var from = GetValueForMember(m.Arguments[1]);                      var to = GetValueForMember(m.Arguments[2]);                      _bitmap.Push(qfromto(name' from' to));                  }              }              else if (mc.Contains("In"))              {                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                  _InCommand = name;                  Visit(m.Arguments[1]);                  _bitmap.Push(_inBmp);                  _inBmp = null;                  _InCommand = "";              }              else                  _stack.Push(mc);
Magic Number,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Contains("Between"))              {                  Type datatype = m.Arguments[0].Type;                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                    if (datatype == typeof(DateTime))                  {                      DateTime from = DateTime.Now;                      DateTime to = DateTime.Now;                      if (m.Arguments[1].Type == typeof(string))                      {                          from = DateTime.Parse((string)GetValueForMember(m.Arguments[1]));                          to = DateTime.Parse((string)GetValueForMember(m.Arguments[2]));                      }                      else                      {                          from = (DateTime)GetValueForMember(m.Arguments[1]);                          to = (DateTime)GetValueForMember(m.Arguments[2]);                      }                      _bitmap.Push(qfromto(name' from' to));                  }                  else                  {                      var from = GetValueForMember(m.Arguments[1]);                      var to = GetValueForMember(m.Arguments[2]);                      _bitmap.Push(qfromto(name' from' to));                  }              }              else if (mc.Contains("In"))              {                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                  _InCommand = name;                  Visit(m.Arguments[1]);                  _bitmap.Push(_inBmp);                  _inBmp = null;                  _InCommand = "";              }              else                  _stack.Push(mc);
Magic Number,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Contains("Between"))              {                  Type datatype = m.Arguments[0].Type;                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                    if (datatype == typeof(DateTime))                  {                      DateTime from = DateTime.Now;                      DateTime to = DateTime.Now;                      if (m.Arguments[1].Type == typeof(string))                      {                          from = DateTime.Parse((string)GetValueForMember(m.Arguments[1]));                          to = DateTime.Parse((string)GetValueForMember(m.Arguments[2]));                      }                      else                      {                          from = (DateTime)GetValueForMember(m.Arguments[1]);                          to = (DateTime)GetValueForMember(m.Arguments[2]);                      }                      _bitmap.Push(qfromto(name' from' to));                  }                  else                  {                      var from = GetValueForMember(m.Arguments[1]);                      var to = GetValueForMember(m.Arguments[2]);                      _bitmap.Push(qfromto(name' from' to));                  }              }              else if (mc.Contains("In"))              {                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                  _InCommand = name;                  Visit(m.Arguments[1]);                  _bitmap.Push(_inBmp);                  _inBmp = null;                  _InCommand = "";              }              else                  _stack.Push(mc);
Magic Number,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Contains("Between"))              {                  Type datatype = m.Arguments[0].Type;                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                    if (datatype == typeof(DateTime))                  {                      DateTime from = DateTime.Now;                      DateTime to = DateTime.Now;                      if (m.Arguments[1].Type == typeof(string))                      {                          from = DateTime.Parse((string)GetValueForMember(m.Arguments[1]));                          to = DateTime.Parse((string)GetValueForMember(m.Arguments[2]));                      }                      else                      {                          from = (DateTime)GetValueForMember(m.Arguments[1]);                          to = (DateTime)GetValueForMember(m.Arguments[2]);                      }                      _bitmap.Push(qfromto(name' from' to));                  }                  else                  {                      var from = GetValueForMember(m.Arguments[1]);                      var to = GetValueForMember(m.Arguments[2]);                      _bitmap.Push(qfromto(name' from' to));                  }              }              else if (mc.Contains("In"))              {                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                  _InCommand = name;                  Visit(m.Arguments[1]);                  _bitmap.Push(_inBmp);                  _inBmp = null;                  _InCommand = "";              }              else                  _stack.Push(mc);
Magic Number,RaptorDB.Views,QueryVisitor,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\LINQQuery.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Contains("Between"))              {                  Type datatype = m.Arguments[0].Type;                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                    if (datatype == typeof(DateTime))                  {                      DateTime from = DateTime.Now;                      DateTime to = DateTime.Now;                      if (m.Arguments[1].Type == typeof(string))                      {                          from = DateTime.Parse((string)GetValueForMember(m.Arguments[1]));                          to = DateTime.Parse((string)GetValueForMember(m.Arguments[2]));                      }                      else                      {                          from = (DateTime)GetValueForMember(m.Arguments[1]);                          to = (DateTime)GetValueForMember(m.Arguments[2]);                      }                      _bitmap.Push(qfromto(name' from' to));                  }                  else                  {                      var from = GetValueForMember(m.Arguments[1]);                      var to = GetValueForMember(m.Arguments[2]);                      _bitmap.Push(qfromto(name' from' to));                  }              }              else if (mc.Contains("In"))              {                  var ss = m.Arguments[0].ToString().Split('.');                  string name = "";                  if (ss.Length > 2)                  {                      // handle datetype.year etc                      name = ss[1] + "_$" + ss[2];                  }                  else                      name = ss[1];                  _InCommand = name;                  Visit(m.Arguments[1]);                  _bitmap.Push(_inBmp);                  _inBmp = null;                  _InCommand = "";              }              else                  _stack.Push(mc);
Magic Number,RaptorDB.Views,TaskQueue,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\TaskQueue.cs,TaskQueue,The following statement contains a magic number: _timer.Interval = Global.TaskCleanupTimerSeconds * 1000;
Magic Number,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,SetView,The following statement contains a magic number: _saveTimer.Interval = Global.SaveIndexToDiskTimerSeconds * 1000;
Magic Number,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,Shutdown,The following statement contains a magic number: try              {                  lock (_savetimerlock)                      _saveTimer.Enabled = false;                  while (_stsaving)                      Thread.Sleep(1);                    if (_rebuilding)                      _log.Debug("Waiting for view rebuild to finish... : " + _view.Name);                    while (_rebuilding)                      Thread.Sleep(50);                    _log.Debug("Shutting down Viewhandler");                  // shutdown indexes                  foreach (var v in _indexes)                  {                      _log.Debug("Shutting down view index : " + v.Key);                      v.Value.Shutdown();                  }                  // save deletedbitmap                  _deletedRows.Shutdown();                    _viewData.Shutdown();                    // write view version                  File.WriteAllText(_Path + _view.Name + ".version"' _view.Version.ToString());                    File.WriteAllText(_Path + _RaptorDBVersionFilename' _RaptorDBVersion.ToString());                  // remove dirty file                  if (File.Exists(_Path + _dirtyFilename))                      File.Delete(_Path + _dirtyFilename);                  _log.Debug("Viewhandler shutdown done.");              }              catch (Exception ex)              {                  _log.Error(ex);              }
Magic Number,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,CreateObject,The following statement contains a magic number: if (b[0] < 32)                  return BJSON.ToObject(b);              else                  return JSON.ToObject(Encoding.ASCII.GetString(b));
Magic Number,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,CreateLoadIndexes,The following statement contains a magic number: _indexes.Add(_docid' new TypeIndexes<Guid>(_Path' _docid' 16));
Magic Number,RaptorDB.Views,ViewHandler,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\ViewHandler.cs,internalCount,The following statement contains a magic number: if (_rebuilding)                  while (_rebuilding)                      Thread.Sleep(10);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,ParseStringLiteral,The following statement contains a magic number: string s = token.text.Substring(1' token.text.Length - 2);
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 2;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind(type) == 3;
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode(type))              {                  case TypeCode.Char:                  case TypeCode.Single:                  case TypeCode.Double:                  case TypeCode.Decimal:                      return 1;                  case TypeCode.SByte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                      return 2;                  case TypeCode.Byte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      return 3;                  default:                      return 0;              }
Missing Default,RaptorDB,WAHBitArray,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Helper\WAHBitarray2.cs,WAHBitArray,The following switch statement is missing a default case: switch (type)              {                  case TYPE.WAH:                      _compressed = ints;                      Uncompress();                      _state = TYPE.Bitarray;                      _compressed = null;                      break;                  case TYPE.Bitarray:                      _uncompressed = ints;                      break;                  case TYPE.Indexes:                      if (Global.UseLessMemoryStructures)                          _offsets = new SafeSortedList<uint' bool>();                      else                          _offsets = new SafeDictionary<uint' bool>();                      //new Dictionary<uint' bool>();                      foreach (var i in ints)                          _offsets.Add(i' true);                      break;              }
Missing Default,RaptorDB,Hoot,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Indexes\Hoot.cs,DoBitOperation,The following switch statement is missing a default case: switch (op)                  {                      case OPERATION.AND:                          bits = bits.And(c);                          break;                      case OPERATION.OR:                          bits = bits.Or(c);                          break;                      case OPERATION.ANDNOT:                          bits = bits.And(c.Not(maxsize));                          break;                  }
Missing Default,RaptorDB,rdbRest,C:\repos\mgholam_RaptorDB-Document\RaptorDB\REST\rdbRest.cs,InitializeCommandHandler,The following switch statement is missing a default case: switch (action)                      {                          case "backup":                              _rdb.Backup();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "compact":                              _rdb.GetKVHF().CompactStorageHF();                              WriteResponse(ctx' 200' "\"Done\"");                              break;                          case "getconfigs":                              WriteResponse(ctx' 200' File.ReadAllText(_path + "raptordb.config"));                              break;                      }
Missing Default,RaptorDB.Replication,ReplicationServer,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Replication\ReplicationServer.cs,processpayload,The following switch statement is missing a default case: switch (p.command)                  {                      case "getbranchconfig":                          ret.OK = true;                          ret.Data = GetBranchConfig(p.branchname);                          break;                      case "getpackageforbranch":                          ret.OK = true;                          ReplicationPacket pack = GetPackageForBranch(p);                          ret.Data = pack;                          break;                      case "packageforhq":                          ret.OK = PackageForHQ(p);                          break;                      case "hqpackageok":                          ret.OK = true;                          File.Delete(_OutboxPath + _S + p.branchname + _S + p.filename);                          // set last rec on hq                          _branchLastDocs.Add(p.branchname.ToLower()' p.lastrecord);                          WriteBranchCounters();                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id)                  {                      case TokenId.Equal:                      case TokenId.DoubleEqual:                          left = GenerateEqual(left' right);                          break;                      case TokenId.ExclamationEqual:                      case TokenId.LessGreater:                          left = GenerateNotEqual(left' right);                          break;                      case TokenId.GreaterThan:                          left = GenerateGreaterThan(left' right);                          break;                      case TokenId.GreaterThanEqual:                          left = GenerateGreaterThanEqual(left' right);                          break;                      case TokenId.LessThan:                          left = GenerateLessThan(left' right);                          break;                      case TokenId.LessThanEqual:                          left = GenerateLessThanEqual(left' right);                          break;                  }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode(ce.Type))                          {                              case TypeCode.Int32:                              case TypeCode.UInt32:                              case TypeCode.Int64:                              case TypeCode.UInt64:                                  value = ParseNumber(text' target);                                  break;                              case TypeCode.Double:                                  if (target == typeof(decimal)) value = ParseNumber(text' target);                                  break;                              case TypeCode.String:                                  value = ParseEnum(text' target);                                  break;                          }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode(GetNonNullableType(type)))              {                  case TypeCode.SByte:                      sbyte sb;                      if (sbyte.TryParse(text' out sb)) return sb;                      break;                  case TypeCode.Byte:                      byte b;                      if (byte.TryParse(text' out b)) return b;                      break;                  case TypeCode.Int16:                      short s;                      if (short.TryParse(text' out s)) return s;                      break;                  case TypeCode.UInt16:                      ushort us;                      if (ushort.TryParse(text' out us)) return us;                      break;                  case TypeCode.Int32:                      int i;                      if (int.TryParse(text' out i)) return i;                      break;                  case TypeCode.UInt32:                      uint ui;                      if (uint.TryParse(text' out ui)) return ui;                      break;                  case TypeCode.Int64:                      long l;                      if (long.TryParse(text' out l)) return l;                      break;                  case TypeCode.UInt64:                      ulong ul;                      if (ulong.TryParse(text' out ul)) return ul;                      break;                  case TypeCode.Single:                      float f;                      if (float.TryParse(text' out f)) return f;                      break;                  case TypeCode.Double:                      double d;                      if (double.TryParse(text' out d)) return d;                      break;                  case TypeCode.Decimal:                      decimal e;                      if (decimal.TryParse(text' out e)) return e;                      break;              }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.SByte:                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Byte:                          case TypeCode.Int16:                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int16:                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt16:                          case TypeCode.Int32:                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int32:                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt32:                          case TypeCode.Int64:                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Int64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.UInt64:                          case TypeCode.Single:                          case TypeCode.Double:                          case TypeCode.Decimal:                              return true;                      }
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\mgholam_RaptorDB-Document\RaptorDB\Views\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc)                      {                          case TypeCode.Single:                          case TypeCode.Double:                              return true;                      }
