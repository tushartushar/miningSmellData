Implementation smell,Namespace,Class,File,Method,Description
Long Method,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,LoadImages,The method has 103 lines of code.
Long Method,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The method has 162 lines of code.
Long Method,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The method has 186 lines of code.
Long Method,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,RefreshModifiers,The method has 113 lines of code.
Long Method,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,LanguageSpecificInitialization,The method has 104 lines of code.
Complex Method,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,Cyclomatic complexity of the method is 23
Complex Method,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,Cyclomatic complexity of the method is 11
Complex Method,NClass.DiagramEditor.ClassDiagram,ConnectionCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ConnectionCreator.cs,MouseMove,Cyclomatic complexity of the method is 9
Complex Method,NClass.DiagramEditor.ClassDiagram,ConnectionCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ConnectionCreator.cs,CreateConnection,Cyclomatic complexity of the method is 24
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,GetElementsInDisplayOrder,Cyclomatic complexity of the method is 9
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,GetElementsInReversedDisplayOrder,Cyclomatic complexity of the method is 9
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,Display,Cyclomatic complexity of the method is 11
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,DeleteSelectedElements,Cyclomatic complexity of the method is 8
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,GetContextMenu,Cyclomatic complexity of the method is 10
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,SelectElements,Cyclomatic complexity of the method is 8
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,KeyDown,Cyclomatic complexity of the method is 33
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,shape_Dragging,Cyclomatic complexity of the method is 12
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,shape_Resizing,Cyclomatic complexity of the method is 12
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,connection_BendPointMove,Cyclomatic complexity of the method is 9
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,CreateShape,Cyclomatic complexity of the method is 10
Complex Method,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AddShape,Cyclomatic complexity of the method is 19
Complex Method,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,Cyclomatic complexity of the method is 12
Complex Method,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,Cyclomatic complexity of the method is 15
Complex Method,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,Cyclomatic complexity of the method is 15
Complex Method,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,Cyclomatic complexity of the method is 12
Complex Method,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,Cyclomatic complexity of the method is 32
Complex Method,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,Cyclomatic complexity of the method is 25
Complex Method,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,ValidatePosition,Cyclomatic complexity of the method is 8
Complex Method,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,OnDeserializing,Cyclomatic complexity of the method is 12
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,RefreshNewMembers,Cyclomatic complexity of the method is 25
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,txtName_KeyDown,Cyclomatic complexity of the method is 35
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,OpenNewMemberDropDown,Cyclomatic complexity of the method is 18
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,AddNewMember,Cyclomatic complexity of the method is 24
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,toolImplementList_Click,Cyclomatic complexity of the method is 8
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,DelegateEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\DelegateEditor.cs,txtNewValue_KeyDown,Cyclomatic complexity of the method is 13
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,DelegateEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\DelegateEditor.cs,txtReturnType_KeyDown,Cyclomatic complexity of the method is 13
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,DelegateEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\DelegateEditor.cs,txtName_KeyDown,Cyclomatic complexity of the method is 13
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,EnumEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\EnumEditor.cs,txtNewValue_KeyDown,Cyclomatic complexity of the method is 13
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,EnumEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\EnumEditor.cs,txtName_KeyDown,Cyclomatic complexity of the method is 13
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,ItemEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\ItemEditor.cs,txtDeclaration_KeyDown,Cyclomatic complexity of the method is 19
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,RefreshValues,Cyclomatic complexity of the method is 9
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,RefreshModifiers,Cyclomatic complexity of the method is 15
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,RefreshNewMembers,Cyclomatic complexity of the method is 25
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,txtDeclaration_KeyDown,Cyclomatic complexity of the method is 41
Complex Method,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,OpenNewMemberDropDown,Cyclomatic complexity of the method is 18
Complex Method,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,LanguageSpecificInitialization,Cyclomatic complexity of the method is 14
Complex Method,NClass.DiagramEditor.ClassDiagram.Dialogs,TreeDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\TreeDialog.cs,treMembers_AfterCheck,Cyclomatic complexity of the method is 8
Complex Method,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,MouseMoved,Cyclomatic complexity of the method is 8
Complex Method,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,InsertNewMember,Cyclomatic complexity of the method is 24
Complex Method,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawHeaderBackground,Cyclomatic complexity of the method is 12
Complex Method,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,GetHorizontalAlignment,Cyclomatic complexity of the method is 10
Complex Method,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,GetVerticalAlignment,Cyclomatic complexity of the method is 10
Complex Method,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,GetHeaderTextTop,Cyclomatic complexity of the method is 10
Long Parameter List,NClass.DiagramEditor,GdiGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\GdiGraphics.cs,DrawEllipse,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,GdiGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\GdiGraphics.cs,DrawLine,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,GdiGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\GdiGraphics.cs,DrawString,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,GdiGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\GdiGraphics.cs,DrawString,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,GdiGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\GdiGraphics.cs,FillEllipse,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,IGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\IGraphics.cs,DrawEllipse,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,IGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\IGraphics.cs,DrawLine,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,IGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\IGraphics.cs,DrawString,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,IGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\IGraphics.cs,DrawString,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,IGraphics,C:\repos\SamiDidier_NClass\src\DiagramEditor\IGraphics.cs,FillEllipse,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Connection,The method has 7 parameters.
Long Parameter List,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The method has 6 parameters.
Long Parameter List,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The method has 6 parameters.
Long Parameter List,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor.ClassDiagram.Editors,BorderedTextBox,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\BorderedTextBox.cs,SetBoundsCore,The method has 5 parameters.
Long Parameter List,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,Shape,The method has 5 parameters.
Long Statement,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,CopyAsImage,The length of the statement  "	Rectangle area = Rectangle.FromLTRB ((int)areaF.Left' (int)areaF.Top' (int)Math.Ceiling (areaF.Right)' (int)Math.Ceiling (areaF.Bottom)); " is 137.
Long Statement,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The length of the statement  "	Rectangle area = Rectangle.FromLTRB ((int)areaF.Left' (int)areaF.Top' (int)Math.Ceiling (areaF.Right)' (int)Math.Ceiling (areaF.Bottom)); " is 137.
Long Statement,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The length of the statement  "			MessageBox.Show (string.Format ("{0}\n{1}: {2}"' Strings.ErrorInSavingImage' Strings.ErrorsReason' ex.Message)' Strings.Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 171.
Long Statement,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The length of the statement  "					MessageBox.Show (string.Format ("{0}\n{1}: {2}"' Strings.ErrorInSavingImage' Strings.ErrorsReason' ex.Message)' Strings.Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 171.
Long Statement,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,ChangeZoom,The length of the statement  "	PointF centerPoint = new PointF (zoomingCenter.Left + zoomingCenter.Width / 2' zoomingCenter.Top + zoomingCenter.Height / 2); " is 125.
Long Statement,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,AutoZoom,The length of the statement  "		Offset = new Point ((int)(diagramRectangle.X * Zoom - Margin - offsetX)' (int)(diagramRectangle.Y * Zoom - Margin - offsetY)); " is 126.
Long Statement,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,SetScrolls,The length of the statement  "		this.AutoScrollMinSize = new Size ((int)Math.Ceiling (Document.Size.Width * Document.Zoom)' (int)Math.Ceiling (Document.Size.Height * Document.Zoom)); " is 150.
Long Statement,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,DrawContent,The length of the statement  "			if (DiagramEditor.Settings.Default.UseClearType == ClearTypeMode.WhenZoomed || DiagramEditor.Settings.Default.UseClearType == ClearTypeMode.Always) { " is 149.
Long Statement,NClass.DiagramEditor.ClassDiagram,ElementContainer,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ElementContainer.cs,Paste,The length of the statement  "		Size offset = new Size ((int)((diagram.Offset.X + currentOffset) / diagram.Zoom)' (int)((diagram.Offset.Y + currentOffset) / diagram.Zoom)); " is 140.
Long Statement,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,Display,The length of the statement  "		RectangleF frame = RectangleF.FromLTRB (Math.Min (selectionFrame.Left' selectionFrame.Right)' Math.Min (selectionFrame.Top' selectionFrame.Bottom)' Math.Max (selectionFrame.Left' selectionFrame.Right)' Math.Max (selectionFrame.Top' selectionFrame.Bottom)); " is 256.
Long Statement,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,Display,The length of the statement  "		g.DrawRectangle (SelectionPen' frame.X * Zoom - Offset.X' frame.Y * Zoom - Offset.Y' frame.Width * Zoom' frame.Height * Zoom); " is 126.
Long Statement,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,ConfirmDelete,The length of the statement  "	DialogResult result = MessageBox.Show (Strings.DeleteElementsConfirmation' Strings.Confirmation' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 146.
Long Statement,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,TrySelectElements,The length of the statement  "	selectionFrame = RectangleF.FromLTRB (Math.Min (selectionFrame.Left' selectionFrame.Right)' Math.Min (selectionFrame.Top' selectionFrame.Bottom)' Math.Max (selectionFrame.Left' selectionFrame.Right)' Math.Max (selectionFrame.Top' selectionFrame.Bottom)); " is 254.
Long Statement,NClass.DiagramEditor.ClassDiagram,DiagramElement,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\DiagramElement.cs,ConfirmMemberDelete,The length of the statement  "	DialogResult result = MessageBox.Show (Strings.DeleteMemberConfirmation' Strings.Confirmation' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 144.
Long Statement,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetLineCenter,The length of the statement  "	return new PointF ((float)(routeCache [index - 1].X + routeCache [index].X) / 2' (float)(routeCache [index - 1].Y + routeCache [index].Y) / 2); " is 143.
Long Statement,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetMaximalOffset,The length of the statement  "		if (IsSelected || (bendPoint.RelativeToStartShape && startShape.IsSelected) || (!bendPoint.RelativeToStartShape && endShape.IsSelected)) { " is 138.
Long Statement,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,BendPointDoubleClicked,The length of the statement  "			if (point == FirstBendPoint && !bendPoints.SecondValue.RelativeToStartShape || point == LastBendPoint && bendPoints.SecondLastValue.RelativeToStartShape) { " is 155.
Long Statement,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Picked,The length of the statement  "			if (x1 >= rectangle.Left && x1 <= rectangle.Right && (y1 < rectangle.Top && y2 > rectangle.Bottom || y2 < rectangle.Top && y1 > rectangle.Bottom)) { " is 148.
Long Statement,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Picked,The length of the statement  "			if (y1 >= rectangle.Top && y1 <= rectangle.Bottom && (x1 < rectangle.Left && x2 > rectangle.Right || x2 < rectangle.Left && x1 > rectangle.Right)) { " is 148.
Long Statement,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetStartMultiplicityArea,The length of the statement  "	return MultiplicityArea (style' AssociationRelationship.StartMultiplicity' RouteCache [0]' RouteCache [1]' StartCapSize); " is 121.
Long Statement,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetEndMultiplicityArea,The length of the statement  "	return MultiplicityArea (style' AssociationRelationship.EndMultiplicity' RouteCache [last]' RouteCache [last - 1]' EndCapSize); " is 127.
Long Statement,NClass.DiagramEditor.ClassDiagram.ContextMenus,BlankContextMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ContextMenus\BlankContextMenu.cs,InitMenuItems,The length of the statement  "	mnuNewGeneralization = new ToolStripMenuItem (Strings.MenuGeneralization' Resources.Generalization' mnuNewGeneralization_Click); " is 128.
Long Statement,NClass.DiagramEditor.ClassDiagram.ContextMenus,BlankContextMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ContextMenus\BlankContextMenu.cs,InitMenuItems,The length of the statement  "	mnuNewCommentRelationship = new ToolStripMenuItem (Strings.MenuCommentRelationship' Resources.CommentRel' mnuNewCommentRelationship_Click); " is 139.
Long Statement,NClass.DiagramEditor.ClassDiagram.ContextMenus,AssociationContextMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ContextMenus\AssociationContextMenu.cs,InitMenuItems,The length of the statement  "	mnuUnidirectional = new ToolStripMenuItem (Strings.MenuUnidirectional' Resources.Unidirectional' mnuUnidirectional_Click); " is 122.
Long Statement,NClass.DiagramEditor.ClassDiagram.ContextMenus,ShapeContextMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ContextMenus\ShapeContextMenu.cs,InitMenuItems,The length of the statement  "	mnuAlignHorizontal = new ToolStripMenuItem (Strings.MenuAlignHorizontal' Resources.AlignHorizontal' mnuAlignHorizontal_Click); " is 126.
Long Statement,NClass.DiagramEditor.ClassDiagram.ContextMenus,ShapeContextMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ContextMenus\ShapeContextMenu.cs,InitMenuItems,The length of the statement  "	mnuAlign = new ToolStripMenuItem (Strings.MenuAlign' null' mnuAlignTop' mnuAlignLeft' mnuAlignBottom' mnuAlignRight' new ToolStripSeparator ()' mnuAlignHorizontal' mnuAlignVertical); " is 182.
Long Statement,NClass.DiagramEditor.ClassDiagram.ContextMenus,TypeShapeContextMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ContextMenus\TypeShapeContextMenu.cs,InitMenuItems,The length of the statement  "	mnuSize = new ToolStripMenuItem (Strings.MenuSize' null' mnuAutoSize' mnuAutoWidth' mnuAutoHeight' new ToolStripSeparator ()' mnuCollapseAllSelected' mnuExpandAllSelected); " is 172.
Long Statement,NClass.DiagramEditor.ClassDiagram.Editors,CommentEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CommentEditor.cs,Relocate,The length of the statement  "		this.SetBounds ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + ParentLocation.X' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y + ParentLocation.Y' (int)(absolute.Width * diagram.Zoom)' (int)(absolute.Height * diagram.Zoom)); " is 237.
Long Statement,NClass.DiagramEditor.ClassDiagram.Editors,ParameterEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\ParameterEditor.cs,Relocate,The length of the statement  "		Size relative = new Size ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + MarginSize' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y); " is 145.
Long Statement,NClass.DiagramEditor.ClassDiagram.Editors,EnumValueEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\EnumValueEditor.cs,Relocate,The length of the statement  "		Size relative = new Size ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + MarginSize' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y); " is 145.
Long Statement,NClass.DiagramEditor.ClassDiagram.Editors,TypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\TypeEditor.cs,Relocate,The length of the statement  "		Size relative = new Size ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + MarginSize' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y); " is 145.
Long Statement,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,RefreshValues,The length of the statement  "			OperationModifier modifier = operation.Modifier & (OperationModifier.Abstract | OperationModifier.Override | OperationModifier.Sealed | OperationModifier.Virtual); " is 163.
Long Statement,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,Relocate,The length of the statement  "		Size relative = new Size ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + MarginSize' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y); " is 145.
Long Statement,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,ChangeModifier,The length of the statement  "					DialogResult result = MessageBox.Show (Strings.ChangingToAbstractConfirmation' Strings.Confirmation' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 150.
Long Statement,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,chkAbstract_CheckedChanged,The length of the statement  "				DialogResult result = MessageBox.Show (Strings.ChangingToAbstractConfirmation' Strings.Confirmation' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 150.
Long Statement,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,Print,The length of the statement  "		MessageBox.Show (string.Format (Strings.ErrorPrinting' ex.Message)' Strings.Error' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 127.
Long Statement,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,printDocument_PrintPage,The length of the statement  "	marginBounds = new RectangleF (marginBounds.X * marginScale' marginBounds.Y * marginScale' marginBounds.Width * marginScale' marginBounds.Height * marginScale); " is 160.
Long Statement,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,btnPageSetup_Click,The length of the statement  "		pageSetupDialog.PageSettings.Margins = PrinterUnitConvert.Convert (pageSetupDialog.PageSettings.Margins' PrinterUnit.Display' PrinterUnit.TenthsOfAMillimeter); " is 159.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,TransformRelativeToAbsolute,The length of the statement  "	rectangle = Rectangle.FromLTRB ((int)(rectangle.Left * zoom)' (int)(rectangle.Top * zoom)' (int)Math.Ceiling (rectangle.Right * zoom)' (int)Math.Ceiling (rectangle.Bottom * zoom)); " is 180.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetMemberRectangle,The length of the statement  "	Rectangle record = new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize' Width - MarginSize * 2' MemberHeight); " is 124.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetMemberString,The length of the statement  "	return member.GetUmlDescription (Settings.Default.ShowType' Settings.Default.ShowParameters' Settings.Default.ShowParameterNames' Settings.Default.ShowInitialValue); " is 165.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DrawContent,The length of the statement  "	Rectangle record = new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize' Width - MarginSize * 2' MemberHeight); " is 124.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRequiredWidth,The length of the statement  "		float fieldWidth = g.MeasureString (GetMemberString (field)' GetMemberFont (field' style)' PointF.Empty' memberFormat).Width; " is 125.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRequiredWidth,The length of the statement  "		float operationWidth = g.MeasureString (GetMemberString (operation)' GetMemberFont (operation' style)' PointF.Empty' memberFormat).Width; " is 137.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,DelegateShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\DelegateShape.cs,GetMemberRectangle,The length of the statement  "	return new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize + memberIndex * MemberHeight' Width - MarginSize * 2' MemberHeight); " is 141.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,DelegateShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\DelegateShape.cs,DrawContent,The length of the statement  "	Rectangle record = new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize' Width - MarginSize * 2' MemberHeight); " is 124.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,EnumShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\EnumShape.cs,GetMemberRectangle,The length of the statement  "	return new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize + memberIndex * MemberHeight' Width - MarginSize * 2' MemberHeight); " is 141.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,EnumShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\EnumShape.cs,DrawContent,The length of the statement  "	Rectangle record = new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize' Width - MarginSize * 2' MemberHeight); " is 124.
Long Statement,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,IsChevronPressed,The length of the statement  "	return (Settings.Default.ShowChevron != ChevronMode.Never && mouseLocation.X >= Right - MarginSize - chevronSize.Width && mouseLocation.X < Right - MarginSize && mouseLocation.Y >= Top + MarginSize && mouseLocation.Y < Top + MarginSize + chevronSize.Height); " is 258.
Complex Conditional,NClass.DiagramEditor.ClassDiagram,ElementContainer,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ElementContainer.cs,Paste,The conditional expression  "first != null && pastedShapes [first] != null && second != null && pastedShapes [second] != null"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetMaximalOffset,The conditional expression  "IsSelected || (bendPoint.RelativeToStartShape && startShape.IsSelected) || (!bendPoint.RelativeToStartShape && endShape.IsSelected)"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,BendPointDoubleClicked,The conditional expression  "point == FirstBendPoint && !bendPoints.SecondValue.RelativeToStartShape || point == LastBendPoint && bendPoints.SecondLastValue.RelativeToStartShape"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Picked,The conditional expression  "(x >= x1 - tolerance) && (x <= x1 + tolerance) && (y >= y1 && y <= y2 || y >= y2 && y <= y1)"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Picked,The conditional expression  "(y >= y1 - tolerance) && (y <= y1 + tolerance) && (x >= x1 && x <= x2 || x >= x2 && x <= x1)"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Picked,The conditional expression  "x1 >= rectangle.Left && x1 <= rectangle.Right && (y1 < rectangle.Top && y2 > rectangle.Bottom || y2 < rectangle.Top && y1 > rectangle.Bottom)"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Picked,The conditional expression  "y1 >= rectangle.Top && y1 <= rectangle.Bottom && (x1 < rectangle.Left && x2 > rectangle.Right || x2 < rectangle.Left && x1 > rectangle.Right)"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,toolMoveUp_Click,The conditional expression  "item1.Tag is Field && item2.Tag is Field || item1.Tag is Operation && item2.Tag is Operation"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,toolMoveDown_Click,The conditional expression  "item1.Tag is Field && item2.Tag is Field || item1.Tag is Operation && item2.Tag is Operation"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,GetResizeMode,The conditional expression  "right && (top || middle || bottom)"  is complex.
Complex Conditional,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,GetResizeMode,The conditional expression  "bottom && (left || center || right)"  is complex.
Virtual Method Call from Constructor,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Connection,The constructor "Connection" calls a virtual method "OnSerializing".
Virtual Method Call from Constructor,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Connection,The constructor "Connection" calls a virtual method "OnDeserializing".
Virtual Method Call from Constructor,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,Connection,The constructor "Connection" calls a virtual method "Reroute".
Virtual Method Call from Constructor,NClass.DiagramEditor.ClassDiagram.Editors,ItemEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\ItemEditor.cs,ItemEditor,The constructor "ItemEditor" calls a virtual method "UpdateTexts".
Virtual Method Call from Constructor,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,Shape,The constructor "Shape" calls a virtual method "OnSerializing".
Virtual Method Call from Constructor,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,Shape,The constructor "Shape" calls a virtual method "OnDeserializing".
Empty Catch Block,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,CopyAsImage,The method has an empty catch block.
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: if (HasDocument && documents.Count >= 2) {  	while (documents.Count >= 2) {  		IDocument document = documents [documents.Count - 1];  		if (document != exception) {  			documents.RemoveAt (documents.Count - 1);  		}  		else {  			document = documents [documents.Count - 2];  			documents.RemoveAt (documents.Count - 2);  		}  		document.Closing -= new EventHandler (document_Closing);  		OnDocumentRemoved (new DocumentEventArgs (document));  	}  	documentHistory.Clear ();  	documentHistory.Add (exception);  	if (activeDocument != exception) {  		IDocument oldDocument = activeDocument;  		activeDocument = exception;  		OnActiveDocumentChanged (new DocumentEventArgs (oldDocument));  	}  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: if (HasDocument && documents.Count >= 2) {  	while (documents.Count >= 2) {  		IDocument document = documents [documents.Count - 1];  		if (document != exception) {  			documents.RemoveAt (documents.Count - 1);  		}  		else {  			document = documents [documents.Count - 2];  			documents.RemoveAt (documents.Count - 2);  		}  		document.Closing -= new EventHandler (document_Closing);  		OnDocumentRemoved (new DocumentEventArgs (document));  	}  	documentHistory.Clear ();  	documentHistory.Add (exception);  	if (activeDocument != exception) {  		IDocument oldDocument = activeDocument;  		activeDocument = exception;  		OnActiveDocumentChanged (new DocumentEventArgs (oldDocument));  	}  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: if (HasDocument && documents.Count >= 2) {  	while (documents.Count >= 2) {  		IDocument document = documents [documents.Count - 1];  		if (document != exception) {  			documents.RemoveAt (documents.Count - 1);  		}  		else {  			document = documents [documents.Count - 2];  			documents.RemoveAt (documents.Count - 2);  		}  		document.Closing -= new EventHandler (document_Closing);  		OnDocumentRemoved (new DocumentEventArgs (document));  	}  	documentHistory.Clear ();  	documentHistory.Add (exception);  	if (activeDocument != exception) {  		IDocument oldDocument = activeDocument;  		activeDocument = exception;  		OnActiveDocumentChanged (new DocumentEventArgs (oldDocument));  	}  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: if (HasDocument && documents.Count >= 2) {  	while (documents.Count >= 2) {  		IDocument document = documents [documents.Count - 1];  		if (document != exception) {  			documents.RemoveAt (documents.Count - 1);  		}  		else {  			document = documents [documents.Count - 2];  			documents.RemoveAt (documents.Count - 2);  		}  		document.Closing -= new EventHandler (document_Closing);  		OnDocumentRemoved (new DocumentEventArgs (document));  	}  	documentHistory.Clear ();  	documentHistory.Add (exception);  	if (activeDocument != exception) {  		IDocument oldDocument = activeDocument;  		activeDocument = exception;  		OnActiveDocumentChanged (new DocumentEventArgs (oldDocument));  	}  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: while (documents.Count >= 2) {  	IDocument document = documents [documents.Count - 1];  	if (document != exception) {  		documents.RemoveAt (documents.Count - 1);  	}  	else {  		document = documents [documents.Count - 2];  		documents.RemoveAt (documents.Count - 2);  	}  	document.Closing -= new EventHandler (document_Closing);  	OnDocumentRemoved (new DocumentEventArgs (document));  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: while (documents.Count >= 2) {  	IDocument document = documents [documents.Count - 1];  	if (document != exception) {  		documents.RemoveAt (documents.Count - 1);  	}  	else {  		document = documents [documents.Count - 2];  		documents.RemoveAt (documents.Count - 2);  	}  	document.Closing -= new EventHandler (document_Closing);  	OnDocumentRemoved (new DocumentEventArgs (document));  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: while (documents.Count >= 2) {  	IDocument document = documents [documents.Count - 1];  	if (document != exception) {  		documents.RemoveAt (documents.Count - 1);  	}  	else {  		document = documents [documents.Count - 2];  		documents.RemoveAt (documents.Count - 2);  	}  	document.Closing -= new EventHandler (document_Closing);  	OnDocumentRemoved (new DocumentEventArgs (document));  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: if (document != exception) {  	documents.RemoveAt (documents.Count - 1);  }  else {  	document = documents [documents.Count - 2];  	documents.RemoveAt (documents.Count - 2);  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: if (document != exception) {  	documents.RemoveAt (documents.Count - 1);  }  else {  	document = documents [documents.Count - 2];  	documents.RemoveAt (documents.Count - 2);  }  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: document = documents [documents.Count - 2];  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,CloseAllOthers,The following statement contains a magic number: documents.RemoveAt (documents.Count - 2);  
Magic Number,NClass.DiagramEditor,DocumentManager,C:\repos\SamiDidier_NClass\src\DiagramEditor\DocumentManager.cs,SwitchDocument,The following statement contains a magic number: if (DocumentCount >= 2) {  	if (switchingNode == null)  		switchingNode = documentHistory.First;  	switchingNode = switchingNode.Next;  	if (switchingNode == null)  		switchingNode = documentHistory.First;  	ActiveDocument = switchingNode.Value;  }  
Magic Number,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The following statement contains a magic number: using (SaveFileDialog saveAsImageDialog = new SaveFileDialog ()) {  	saveAsImageDialog.DefaultExt = "png";  	if (Settings.Default.UseClearTypeForImages)  		saveAsImageDialog.Filter = DialogFilterWithoutTransparentPNG;  	else  		saveAsImageDialog.Filter = DialogFilter;  	saveAsImageDialog.FilterIndex = 4;  	saveAsImageDialog.FileName = document.GetSelectedElementName () ?? document.Name;  	if (initDir == null && document.Project != null)  		saveAsImageDialog.InitialDirectory = document.Project.GetProjectDirectory ();  	else  		saveAsImageDialog.InitialDirectory = initDir;  	if (saveAsImageDialog.ShowDialog () == DialogResult.OK) {  		initDir = Path.GetDirectoryName (saveAsImageDialog.FileName);  		string extension = System.IO.Path.GetExtension (saveAsImageDialog.FileName);  		ImageFormat format;  		switch (extension.ToLower ()) {  		case ".bmp":  			format = ImageFormat.Bmp;  			break;  		case ".gif":  			format = ImageFormat.Gif;  			break;  		case ".jpg":  		case ".jpeg":  			format = ImageFormat.Jpeg;  			break;  		case ".emf":  			format = ImageFormat.Emf;  			break;  		case ".png":  		default:  			format = ImageFormat.Png;  			break;  		}  		bool transparent = (saveAsImageDialog.FilterIndex == 5 && !Settings.Default.UseClearTypeForImages);  		SaveAsImage (document' saveAsImageDialog.FileName' format' selectedOnly' transparent);  	}  }  
Magic Number,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The following statement contains a magic number: using (SaveFileDialog saveAsImageDialog = new SaveFileDialog ()) {  	saveAsImageDialog.DefaultExt = "png";  	if (Settings.Default.UseClearTypeForImages)  		saveAsImageDialog.Filter = DialogFilterWithoutTransparentPNG;  	else  		saveAsImageDialog.Filter = DialogFilter;  	saveAsImageDialog.FilterIndex = 4;  	saveAsImageDialog.FileName = document.GetSelectedElementName () ?? document.Name;  	if (initDir == null && document.Project != null)  		saveAsImageDialog.InitialDirectory = document.Project.GetProjectDirectory ();  	else  		saveAsImageDialog.InitialDirectory = initDir;  	if (saveAsImageDialog.ShowDialog () == DialogResult.OK) {  		initDir = Path.GetDirectoryName (saveAsImageDialog.FileName);  		string extension = System.IO.Path.GetExtension (saveAsImageDialog.FileName);  		ImageFormat format;  		switch (extension.ToLower ()) {  		case ".bmp":  			format = ImageFormat.Bmp;  			break;  		case ".gif":  			format = ImageFormat.Gif;  			break;  		case ".jpg":  		case ".jpeg":  			format = ImageFormat.Jpeg;  			break;  		case ".emf":  			format = ImageFormat.Emf;  			break;  		case ".png":  		default:  			format = ImageFormat.Png;  			break;  		}  		bool transparent = (saveAsImageDialog.FilterIndex == 5 && !Settings.Default.UseClearTypeForImages);  		SaveAsImage (document' saveAsImageDialog.FileName' format' selectedOnly' transparent);  	}  }  
Magic Number,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The following statement contains a magic number: saveAsImageDialog.FilterIndex = 4;  
Magic Number,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The following statement contains a magic number: if (saveAsImageDialog.ShowDialog () == DialogResult.OK) {  	initDir = Path.GetDirectoryName (saveAsImageDialog.FileName);  	string extension = System.IO.Path.GetExtension (saveAsImageDialog.FileName);  	ImageFormat format;  	switch (extension.ToLower ()) {  	case ".bmp":  		format = ImageFormat.Bmp;  		break;  	case ".gif":  		format = ImageFormat.Gif;  		break;  	case ".jpg":  	case ".jpeg":  		format = ImageFormat.Jpeg;  		break;  	case ".emf":  		format = ImageFormat.Emf;  		break;  	case ".png":  	default:  		format = ImageFormat.Png;  		break;  	}  	bool transparent = (saveAsImageDialog.FilterIndex == 5 && !Settings.Default.UseClearTypeForImages);  	SaveAsImage (document' saveAsImageDialog.FileName' format' selectedOnly' transparent);  }  
Magic Number,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The following statement contains a magic number: if (format == ImageFormat.Emf)// Save to metafile   {  	Graphics metaG = control.CreateGraphics ();  	IntPtr hc = metaG.GetHdc ();  	Graphics g = null;  	try {  		// Set drawing parameters  		Metafile meta = new Metafile (path' hc);  		g = Graphics.FromImage (meta);  		g.SmoothingMode = SmoothingMode.HighQuality;  		if (DiagramEditor.Settings.Default.UseClearTypeForImages)  			g.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  		else  			g.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;  		g.TranslateTransform (-area.Left' -area.Top);  		// Draw image  		IGraphics graphics = new GdiGraphics (g);  		document.Print (graphics' selectedOnly' Style.CurrentStyle);  		meta.Dispose ();  	}  	catch (Exception ex) {  		MessageBox.Show (string.Format ("{0}\n{1}: {2}"' Strings.ErrorInSavingImage' Strings.ErrorsReason' ex.Message)' Strings.Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	finally {  		metaG.ReleaseHdc ();  		metaG.Dispose ();  		if (g != null)  			g.Dispose ();  	}  }  else// Save to rastered image   {  	int width = area.Width + Margin * 2;  	int height = area.Height + Margin * 2;  	PixelFormat pixelFormat;  	if (transparent)  		pixelFormat = PixelFormat.Format32bppArgb;  	else  		pixelFormat = PixelFormat.Format24bppRgb;  	using (Bitmap image = new Bitmap (width' height' pixelFormat))  		using (Graphics g = Graphics.FromImage (image)) {  			// Set drawing parameters  			g.SmoothingMode = SmoothingMode.HighQuality;  			if (DiagramEditor.Settings.Default.UseClearTypeForImages && !transparent)  				g.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  			else  				g.TextRenderingHint = TextRenderingHint.SingleBitPerPixelGridFit;  			g.TranslateTransform (Margin - area.Left' Margin - area.Top);  			// Draw image  			if (!transparent)  				g.Clear (Style.CurrentStyle.BackgroundColor);  			IGraphics graphics = new GdiGraphics (g);  			document.Print (graphics' selectedOnly' Style.CurrentStyle);  			try {  				image.Save (path' format);  			}  			catch (Exception ex) {  				MessageBox.Show (string.Format ("{0}\n{1}: {2}"' Strings.ErrorInSavingImage' Strings.ErrorsReason' ex.Message)' Strings.Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  		}  }  
Magic Number,NClass.DiagramEditor,ImageCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ImageCreator.cs,SaveAsImage,The following statement contains a magic number: if (format == ImageFormat.Emf)// Save to metafile   {  	Graphics metaG = control.CreateGraphics ();  	IntPtr hc = metaG.GetHdc ();  	Graphics g = null;  	try {  		// Set drawing parameters  		Metafile meta = new Metafile (path' hc);  		g = Graphics.FromImage (meta);  		g.SmoothingMode = SmoothingMode.HighQuality;  		if (DiagramEditor.Settings.Default.UseClearTypeForImages)  			g.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  		else  			g.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;  		g.TranslateTransform (-area.Left' -area.Top);  		// Draw image  		IGraphics graphics = new GdiGraphics (g);  		document.Print (graphics' selectedOnly' Style.CurrentStyle);  		meta.Dispose ();  	}  	catch (Exception ex) {  		MessageBox.Show (string.Format ("{0}\n{1}: {2}"' Strings.ErrorInSavingImage' Strings.ErrorsReason' ex.Message)' Strings.Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  	}  	finally {  		metaG.ReleaseHdc ();  		metaG.Dispose ();  		if (g != null)  			g.Dispose ();  	}  }  else// Save to rastered image   {  	int width = area.Width + Margin * 2;  	int height = area.Height + Margin * 2;  	PixelFormat pixelFormat;  	if (transparent)  		pixelFormat = PixelFormat.Format32bppArgb;  	else  		pixelFormat = PixelFormat.Format24bppRgb;  	using (Bitmap image = new Bitmap (width' height' pixelFormat))  		using (Graphics g = Graphics.FromImage (image)) {  			// Set drawing parameters  			g.SmoothingMode = SmoothingMode.HighQuality;  			if (DiagramEditor.Settings.Default.UseClearTypeForImages && !transparent)  				g.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;  			else  				g.TextRenderingHint = TextRenderingHint.SingleBitPerPixelGridFit;  			g.TranslateTransform (Margin - area.Left' Margin - area.Top);  			// Draw image  			if (!transparent)  				g.Clear (Style.CurrentStyle.BackgroundColor);  			IGraphics graphics = new GdiGraphics (g);  			document.Print (graphics' selectedOnly' Style.CurrentStyle);  			try {  				image.Save (path' format);  			}  			catch (Exception ex) {  				MessageBox.Show (string.Format ("{0}\n{1}: {2}"' Strings.ErrorInSavingImage' Strings.ErrorsReason' ex.Message)' Strings.Error' MessageBoxButtons.OK' MessageBoxIcon.Error);  			}  		}  }  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,Canvas,The following statement contains a magic number: borderPen = new Pen (Color.FromArgb (128' Color.Black));  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,Canvas,The following statement contains a magic number: borderPen.DashPattern = new float[] {  	5'  	5  };  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,Canvas,The following statement contains a magic number: borderPen.DashPattern = new float[] {  	5'  	5  };  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,GetAbsoluteCenterPoint,The following statement contains a magic number: return ConvertRelativeToAbsolute (new Point (Width / 2' Height / 2));  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,GetAbsoluteCenterPoint,The following statement contains a magic number: return ConvertRelativeToAbsolute (new Point (Width / 2' Height / 2));  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: if (enlarge)  	return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  else  	return ((int)Math.Round (Document.Zoom * 100) - 1) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: if (enlarge)  	return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  else  	return ((int)Math.Round (Document.Zoom * 100) - 1) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: if (enlarge)  	return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  else  	return ((int)Math.Round (Document.Zoom * 100) - 1) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: if (enlarge)  	return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  else  	return ((int)Math.Round (Document.Zoom * 100) - 1) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: if (enlarge)  	return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  else  	return ((int)Math.Round (Document.Zoom * 100) - 1) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: return ((int)Math.Round (Document.Zoom * 100) + 10) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: return ((int)Math.Round (Document.Zoom * 100) - 1) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,CalculateZoomValue,The following statement contains a magic number: return ((int)Math.Round (Document.Zoom * 100) - 1) / 10 / 10F;  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,AutoZoom,The following statement contains a magic number: if (HasDocument && !Document.IsEmpty) {  	const int Margin = Shape.SelectionMargin;  	selectedOnly &= Document.HasSelectedElement;  	Rectangle visibleRectangle = this.ClientRectangle;  	RectangleF diagramRectangle = document.GetPrintingArea (selectedOnly);  	visibleRectangle.Inflate (-Margin' -Margin);  	float scaleX = visibleRectangle.Width / diagramRectangle.Width;  	float scaleY = visibleRectangle.Height / diagramRectangle.Height;  	float scale = Math.Min (scaleX' scaleY);  	Document.Zoom = scale;  	float offsetX = (visibleRectangle.Width - diagramRectangle.Width * Zoom) / 2;  	float offsetY = (visibleRectangle.Height - diagramRectangle.Height * Zoom) / 2;  	Offset = new Point ((int)(diagramRectangle.X * Zoom - Margin - offsetX)' (int)(diagramRectangle.Y * Zoom - Margin - offsetY));  }  
Magic Number,NClass.DiagramEditor,Canvas,C:\repos\SamiDidier_NClass\src\DiagramEditor\Canvas.cs,AutoZoom,The following statement contains a magic number: if (HasDocument && !Document.IsEmpty) {  	const int Margin = Shape.SelectionMargin;  	selectedOnly &= Document.HasSelectedElement;  	Rectangle visibleRectangle = this.ClientRectangle;  	RectangleF diagramRectangle = document.GetPrintingArea (selectedOnly);  	visibleRectangle.Inflate (-Margin' -Margin);  	float scaleX = visibleRectangle.Width / diagramRectangle.Width;  	float scaleY = visibleRectangle.Height / diagramRectangle.Height;  	float scale = Math.Min (scaleX' scaleY);  	Document.Zoom = scale;  	float offsetX = (visibleRectangle.Width - diagramRectangle.Width * Zoom) / 2;  	float offsetY = (visibleRectangle.Height - diagramRectangle.Height * Zoom) / 2;  	Offset = new Point ((int)(diagramRectangle.X * Zoom - Margin - offsetX)' (int)(diagramRectangle.Y * Zoom - Margin - offsetY));  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,ConnectionCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ConnectionCreator.cs,ConnectionCreator,The following statement contains a magic number: arrowPen.CustomEndCap = new AdjustableArrowCap (6' 7' true);  
Magic Number,NClass.DiagramEditor.ClassDiagram,ConnectionCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ConnectionCreator.cs,ConnectionCreator,The following statement contains a magic number: arrowPen.CustomEndCap = new AdjustableArrowCap (6' 7' true);  
Magic Number,NClass.DiagramEditor.ClassDiagram,DiagramDynamicMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\DiagramDynamicMenu.cs,DiagramDynamicMenu,The following statement contains a magic number: menuItems = new ToolStripMenuItem[2] {  	mnuDiagram'  	mnuFormat  };  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignLeft,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int left = Size.Width;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		left = Math.Min (left' shape.Left);  	}  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Left = left;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignRight,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int right = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		right = Math.Max (right' shape.Right);  	}  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Right = right;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignTop,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int top = Size.Height;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		top = Math.Min (top' shape.Top);  	}  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Top = top;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignBottom,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int bottom = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		bottom = Math.Max (bottom' shape.Bottom);  	}  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Bottom = bottom;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignHorizontal,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int center = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		center += (shape.Top + shape.Bottom) / 2;  	}  	center /= SelectedShapeCount;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Top = center - shape.Height / 2;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignHorizontal,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int center = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		center += (shape.Top + shape.Bottom) / 2;  	}  	center /= SelectedShapeCount;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Top = center - shape.Height / 2;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignHorizontal,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int center = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		center += (shape.Top + shape.Bottom) / 2;  	}  	center /= SelectedShapeCount;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Top = center - shape.Height / 2;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignHorizontal,The following statement contains a magic number: foreach (Shape shape in shapes.GetSelectedElements ()) {  	center += (shape.Top + shape.Bottom) / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignHorizontal,The following statement contains a magic number: center += (shape.Top + shape.Bottom) / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignHorizontal,The following statement contains a magic number: foreach (Shape shape in shapes.GetSelectedElements ()) {  	shape.Top = center - shape.Height / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignHorizontal,The following statement contains a magic number: shape.Top = center - shape.Height / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignVertical,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int center = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		center += (shape.Left + shape.Right) / 2;  	}  	center /= SelectedShapeCount;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Left = center - shape.Width / 2;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignVertical,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int center = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		center += (shape.Left + shape.Right) / 2;  	}  	center /= SelectedShapeCount;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Left = center - shape.Width / 2;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignVertical,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int center = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		center += (shape.Left + shape.Right) / 2;  	}  	center /= SelectedShapeCount;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Left = center - shape.Width / 2;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignVertical,The following statement contains a magic number: foreach (Shape shape in shapes.GetSelectedElements ()) {  	center += (shape.Left + shape.Right) / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignVertical,The following statement contains a magic number: center += (shape.Left + shape.Right) / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignVertical,The following statement contains a magic number: foreach (Shape shape in shapes.GetSelectedElements ()) {  	shape.Left = center - shape.Width / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AlignVertical,The following statement contains a magic number: shape.Left = center - shape.Width / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AdjustToSameWidth,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int maxWidth = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		maxWidth = Math.Max (maxWidth' shape.Width);  	}  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Width = maxWidth;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AdjustToSameHeight,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	int maxHeight = 0;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		maxHeight = Math.Max (maxHeight' shape.Height);  	}  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Height = maxHeight;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,AdjustToSameSize,The following statement contains a magic number: if (SelectedShapeCount >= 2) {  	Size maxSize = Size.Empty;  	RedrawSuspended = true;  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		maxSize.Width = Math.Max (maxSize.Width' shape.Width);  		maxSize.Height = Math.Max (maxSize.Height' shape.Height);  	}  	foreach (Shape shape in shapes.GetSelectedElements ()) {  		shape.Size = maxSize;  	}  	RedrawSuspended = false;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,KeyDown,The following statement contains a magic number: if (e.KeyCode == Keys.Delete) {  	if (SelectedElementCount >= 2 || ActiveElement == null || !ActiveElement.DeleteSelectedMember ()) {  		DeleteSelectedElements ();  	}  }  // Escape  else if (e.KeyCode == Keys.Escape) {  	state = State.Normal;  	DeselectAll ();  	Redraw ();  }  // Enter  else if (e.KeyCode == Keys.Enter && ActiveElement != null) {  	ActiveElement.ShowEditor ();  }  // Up  else if (e.KeyCode == Keys.Up && ActiveElement != null) {  	if (e.Shift || e.Control)  		ActiveElement.MoveUp ();  	else  		ActiveElement.SelectPrevious ();  }  // Down  else if (e.KeyCode == Keys.Down && ActiveElement != null) {  	if (e.Shift || e.Control)  		ActiveElement.MoveDown ();  	else  		ActiveElement.SelectNext ();  }  // Ctrl + X  else if (e.KeyCode == Keys.X && e.Modifiers == Keys.Control) {  	Cut ();  }  // Ctrl + C  else if (e.KeyCode == Keys.C && e.Modifiers == Keys.Control) {  	Copy ();  }  // Ctrl + V  else if (e.KeyCode == Keys.V && e.Modifiers == Keys.Control) {  	Paste ();  }  // Ctrl + Shift + ?  else if (e.Modifiers == (Keys.Control | Keys.Shift)) {  	switch (e.KeyCode) {  	case Keys.A:  		CreateShape ();  		break;  	case Keys.C:  		CreateShape (EntityType.Class);  		break;  	case Keys.S:  		CreateShape (EntityType.Structure);  		break;  	case Keys.I:  		CreateShape (EntityType.Interface);  		break;  	case Keys.E:  		CreateShape (EntityType.Enum);  		break;  	case Keys.D:  		CreateShape (EntityType.Delegate);  		break;  	case Keys.N:  		CreateShape (EntityType.Comment);  		break;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,KeyDown,The following statement contains a magic number: if (SelectedElementCount >= 2 || ActiveElement == null || !ActiveElement.DeleteSelectedMember ()) {  	DeleteSelectedElements ();  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Field) {  	if (((Field)member).IsConstant) {  		group = 0;  	}  	else {  		group = 1;  	}  }  else if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Field) {  	if (((Field)member).IsConstant) {  		group = 0;  	}  	else {  		group = 1;  	}  }  else if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Field) {  	if (((Field)member).IsConstant) {  		group = 0;  	}  	else {  		group = 1;  	}  }  else if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Field) {  	if (((Field)member).IsConstant) {  		group = 0;  	}  	else {  		group = 1;  	}  }  else if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Field) {  	if (((Field)member).IsConstant) {  		group = 0;  	}  	else {  		group = 1;  	}  }  else if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Field) {  	if (((Field)member).IsConstant) {  		group = 0;  	}  	else {  		group = 1;  	}  }  else if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Field) {  	if (((Field)member).IsConstant) {  		group = 0;  	}  	else {  		group = 1;  	}  }  else if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Method) {  	if (member is Destructor) {  		return PrivateDestructorIndex;  	}  	else if (member is Constructor) {  		group = 2;  	}  	else if (((Method)member).IsOperator) {  		group = 3;  	}  	else {  		group = 4;  	}  }  else if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Destructor) {  	return PrivateDestructorIndex;  }  else if (member is Constructor) {  	group = 2;  }  else if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Destructor) {  	return PrivateDestructorIndex;  }  else if (member is Constructor) {  	group = 2;  }  else if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Destructor) {  	return PrivateDestructorIndex;  }  else if (member is Constructor) {  	group = 2;  }  else if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Constructor) {  	group = 2;  }  else if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Constructor) {  	group = 2;  }  else if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Constructor) {  	group = 2;  }  else if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: group = 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (((Method)member).IsOperator) {  	group = 3;  }  else {  	group = 4;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: group = 3;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: group = 4;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Property) {  	Property property = (Property)member;  	if (property.IsReadonly) {  		group = 5;  	}  	else if (property.IsWriteonly) {  		group = 6;  	}  	else {  		group = 7;  	}  }  else if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (property.IsReadonly) {  	group = 5;  }  else if (property.IsWriteonly) {  	group = 6;  }  else {  	group = 7;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (property.IsReadonly) {  	group = 5;  }  else if (property.IsWriteonly) {  	group = 6;  }  else {  	group = 7;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (property.IsReadonly) {  	group = 5;  }  else if (property.IsWriteonly) {  	group = 6;  }  else {  	group = 7;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: group = 5;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (property.IsWriteonly) {  	group = 6;  }  else {  	group = 7;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (property.IsWriteonly) {  	group = 6;  }  else {  	group = 7;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: group = 6;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: group = 7;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: if (member is Event) {  	group = 8;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: group = 8;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImageIndex,The following statement contains a magic number: return group * 6 + (int)member.Access;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case MemberType.Field:  	group = 1;  	break;  case MemberType.Method:  	group = 4;  	break;  case MemberType.Constructor:  	group = 2;  	break;  case MemberType.Property:  	group = 7;  	break;  case MemberType.Event:  	group = 8;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case MemberType.Field:  	group = 1;  	break;  case MemberType.Method:  	group = 4;  	break;  case MemberType.Constructor:  	group = 2;  	break;  case MemberType.Property:  	group = 7;  	break;  case MemberType.Event:  	group = 8;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case MemberType.Field:  	group = 1;  	break;  case MemberType.Method:  	group = 4;  	break;  case MemberType.Constructor:  	group = 2;  	break;  case MemberType.Property:  	group = 7;  	break;  case MemberType.Event:  	group = 8;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case MemberType.Field:  	group = 1;  	break;  case MemberType.Method:  	group = 4;  	break;  case MemberType.Constructor:  	group = 2;  	break;  case MemberType.Property:  	group = 7;  	break;  case MemberType.Event:  	group = 8;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 4;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 7;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 8;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: return images [group * 6 + (int)access];  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case EntityType.Class:  	group = 9;  	break;  case EntityType.Structure:  	group = 10;  	break;  case EntityType.Interface:  	group = 11;  	break;  case EntityType.Enum:  	group = 12;  	break;  case EntityType.Delegate:  	group = 13;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case EntityType.Class:  	group = 9;  	break;  case EntityType.Structure:  	group = 10;  	break;  case EntityType.Interface:  	group = 11;  	break;  case EntityType.Enum:  	group = 12;  	break;  case EntityType.Delegate:  	group = 13;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case EntityType.Class:  	group = 9;  	break;  case EntityType.Structure:  	group = 10;  	break;  case EntityType.Interface:  	group = 11;  	break;  case EntityType.Enum:  	group = 12;  	break;  case EntityType.Delegate:  	group = 13;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case EntityType.Class:  	group = 9;  	break;  case EntityType.Structure:  	group = 10;  	break;  case EntityType.Interface:  	group = 11;  	break;  case EntityType.Enum:  	group = 12;  	break;  case EntityType.Delegate:  	group = 13;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: switch (type) {  case EntityType.Class:  	group = 9;  	break;  case EntityType.Structure:  	group = 10;  	break;  case EntityType.Interface:  	group = 11;  	break;  case EntityType.Enum:  	group = 12;  	break;  case EntityType.Delegate:  	group = 13;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 9;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 10;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 11;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 12;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: group = 13;  
Magic Number,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following statement contains a magic number: return images [group * 6 + (int)access];  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,InitOrientations,The following statement contains a magic number: if (startShape == endShape) {  	startOrientation = LineOrientation.Horizontal;  	endOrientation = LineOrientation.Vertical;  }  else {  	int hDiff = Math.Max (startShape.Left - endShape.Right' endShape.Left - startShape.Right);  	int vDiff = Math.Max (startShape.Top - endShape.Bottom' endShape.Top - startShape.Bottom);  	if (vDiff >= Spacing * 2) {  		startOrientation = LineOrientation.Vertical;  		endOrientation = LineOrientation.Vertical;  	}  	else if (hDiff >= Spacing * 2) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Horizontal;  	}  	else {  		startOrientation = LineOrientation.Vertical;  		endOrientation = LineOrientation.Horizontal;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,InitOrientations,The following statement contains a magic number: if (startShape == endShape) {  	startOrientation = LineOrientation.Horizontal;  	endOrientation = LineOrientation.Vertical;  }  else {  	int hDiff = Math.Max (startShape.Left - endShape.Right' endShape.Left - startShape.Right);  	int vDiff = Math.Max (startShape.Top - endShape.Bottom' endShape.Top - startShape.Bottom);  	if (vDiff >= Spacing * 2) {  		startOrientation = LineOrientation.Vertical;  		endOrientation = LineOrientation.Vertical;  	}  	else if (hDiff >= Spacing * 2) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Horizontal;  	}  	else {  		startOrientation = LineOrientation.Vertical;  		endOrientation = LineOrientation.Horizontal;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,InitOrientations,The following statement contains a magic number: if (vDiff >= Spacing * 2) {  	startOrientation = LineOrientation.Vertical;  	endOrientation = LineOrientation.Vertical;  }  else if (hDiff >= Spacing * 2) {  	startOrientation = LineOrientation.Horizontal;  	endOrientation = LineOrientation.Horizontal;  }  else {  	startOrientation = LineOrientation.Vertical;  	endOrientation = LineOrientation.Horizontal;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,InitOrientations,The following statement contains a magic number: if (vDiff >= Spacing * 2) {  	startOrientation = LineOrientation.Vertical;  	endOrientation = LineOrientation.Vertical;  }  else if (hDiff >= Spacing * 2) {  	startOrientation = LineOrientation.Horizontal;  	endOrientation = LineOrientation.Horizontal;  }  else {  	startOrientation = LineOrientation.Vertical;  	endOrientation = LineOrientation.Horizontal;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,InitOrientations,The following statement contains a magic number: if (hDiff >= Spacing * 2) {  	startOrientation = LineOrientation.Horizontal;  	endOrientation = LineOrientation.Horizontal;  }  else {  	startOrientation = LineOrientation.Vertical;  	endOrientation = LineOrientation.Horizontal;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,CalculateDrawingArea,The following statement contains a magic number: if (IsSelected && !printing)  	lineSize = Math.Max (lineSize' (float)BendPoint.SquareSize / 2 / zoom);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,CalculateDrawingArea,The following statement contains a magic number: lineSize = Math.Max (lineSize' (float)BendPoint.SquareSize / 2 / zoom);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 0 || angle == 180)// Vertical direction   {  	area.X -= (float)StartCapSize.Width / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 0 || angle == 180)// Vertical direction   {  	area.X -= (float)StartCapSize.Width / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: area.X -= (float)StartCapSize.Width / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 90 || angle == 270)// Horizontal direction   {  	area.Y -= (float)StartCapSize.Width / 2;  	area.Width = StartCapSize.Height;  	area.Height = StartCapSize.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 90 || angle == 270)// Horizontal direction   {  	area.Y -= (float)StartCapSize.Width / 2;  	area.Width = StartCapSize.Height;  	area.Height = StartCapSize.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 90 || angle == 270)// Horizontal direction   {  	area.Y -= (float)StartCapSize.Width / 2;  	area.Width = StartCapSize.Height;  	area.Height = StartCapSize.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: area.Y -= (float)StartCapSize.Width / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= StartCapSize.Height;  }  else if (angle == 180)// Up   {  	area.Y -= StartCapSize.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= StartCapSize.Height;  }  else if (angle == 180)// Up   {  	area.Y -= StartCapSize.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetStartCapArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.Y -= StartCapSize.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 0 || angle == 180)// Up-down direction   {  	area.X -= (float)EndCapSize.Width / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 0 || angle == 180)// Up-down direction   {  	area.X -= (float)EndCapSize.Width / 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: area.X -= (float)EndCapSize.Width / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 90 || angle == 270)// Left-right direction   {  	area.Y -= (float)EndCapSize.Width / 2;  	area.Width = EndCapSize.Height;  	area.Height = EndCapSize.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 90 || angle == 270)// Left-right direction   {  	area.Y -= (float)EndCapSize.Width / 2;  	area.Width = EndCapSize.Height;  	area.Height = EndCapSize.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 90 || angle == 270)// Left-right direction   {  	area.Y -= (float)EndCapSize.Width / 2;  	area.Width = EndCapSize.Height;  	area.Height = EndCapSize.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: area.Y -= (float)EndCapSize.Width / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= EndCapSize.Height;  }  else if (angle == 180)// Up   {  	area.Y -= EndCapSize.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= EndCapSize.Height;  }  else if (angle == 180)// Up   {  	area.Y -= EndCapSize.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetEndCapArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.Y -= EndCapSize.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetLabelArea,The following statement contains a magic number: if (horizontal) {  	center.X -= size.Width / 2;  	center.Y -= size.Height + TextMargin.Height;  }  else {  	center.Y -= size.Height / 2;  	center.X += TextMargin.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetLabelArea,The following statement contains a magic number: if (horizontal) {  	center.X -= size.Width / 2;  	center.Y -= size.Height + TextMargin.Height;  }  else {  	center.Y -= size.Height / 2;  	center.X += TextMargin.Width;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetLabelArea,The following statement contains a magic number: center.X -= size.Width / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetLabelArea,The following statement contains a magic number: center.Y -= size.Height / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.X == point2.X) {  	return (point1.Y < point2.Y) ? 0 : 180;  }  else if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.X == point2.X) {  	return (point1.Y < point2.Y) ? 0 : 180;  }  else if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.X == point2.X) {  	return (point1.Y < point2.Y) ? 0 : 180;  }  else if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.X == point2.X) {  	return (point1.Y < point2.Y) ? 0 : 180;  }  else if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.X == point2.X) {  	return (point1.Y < point2.Y) ? 0 : 180;  }  else if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: return (point1.Y < point2.Y) ? 0 : 180;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: if (point1.Y == point2.Y) {  	return (point1.X < point2.X) ? 270 : 90;  }  else {  	return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: return (point1.X < point2.X) ? 270 : 90;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: return (point1.X < point2.X) ? 270 : 90;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetAngle,The following statement contains a magic number: return (float)(Math.Atan2 (point2.Y - point1.Y' point2.X - point1.X) * (180 / Math.PI)) - 90;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetLineCenter,The following statement contains a magic number: return new PointF ((float)(routeCache [index - 1].X + routeCache [index].X) / 2' (float)(routeCache [index - 1].Y + routeCache [index].Y) / 2);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,GetLineCenter,The following statement contains a magic number: return new PointF ((float)(routeCache [index - 1].X + routeCache [index].X) / 2' (float)(routeCache [index - 1].Y + routeCache [index].Y) / 2);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (IsSelected) {  	Point[] route = routeCache.ToArray ();  	int length = route.Length;  	for (int i = 0; i < route.Length; i++) {  		route [i].X = (int)(route [i].X * zoom) - offset.X;  		route [i].Y = (int)(route [i].Y * zoom) - offset.Y;  	}  	// Cut the line's start section  	int startOffset = (int)(StartSelectionOffset * zoom);  	if (route [0].X == route [1].X) {  		if (route [0].Y < route [1].Y)  			route [0].Y += startOffset;  		else  			route [0].Y -= startOffset;  	}  	else {  		if (route [0].X < route [1].X)  			route [0].X += startOffset;  		else  			route [0].X -= startOffset;  	}  	// Cut the line's end section  	int endOffset = (int)(EndSelectionOffset * zoom);  	if (route [length - 1].X == route [length - 2].X) {  		if (route [length - 1].Y < route [length - 2].Y)  			route [length - 1].Y += endOffset;  		else  			route [length - 1].Y -= endOffset;  	}  	else {  		if (route [length - 1].X < route [length - 2].X)  			route [length - 1].X += endOffset;  		else  			route [length - 1].X -= endOffset;  	}  	g.DrawLines (Diagram.SelectionPen' route);  	if (zoom > UndreadableZoom) {  		foreach (BendPoint point in bendPoints)  			point.Draw (g' true' zoom' offset);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (IsSelected) {  	Point[] route = routeCache.ToArray ();  	int length = route.Length;  	for (int i = 0; i < route.Length; i++) {  		route [i].X = (int)(route [i].X * zoom) - offset.X;  		route [i].Y = (int)(route [i].Y * zoom) - offset.Y;  	}  	// Cut the line's start section  	int startOffset = (int)(StartSelectionOffset * zoom);  	if (route [0].X == route [1].X) {  		if (route [0].Y < route [1].Y)  			route [0].Y += startOffset;  		else  			route [0].Y -= startOffset;  	}  	else {  		if (route [0].X < route [1].X)  			route [0].X += startOffset;  		else  			route [0].X -= startOffset;  	}  	// Cut the line's end section  	int endOffset = (int)(EndSelectionOffset * zoom);  	if (route [length - 1].X == route [length - 2].X) {  		if (route [length - 1].Y < route [length - 2].Y)  			route [length - 1].Y += endOffset;  		else  			route [length - 1].Y -= endOffset;  	}  	else {  		if (route [length - 1].X < route [length - 2].X)  			route [length - 1].X += endOffset;  		else  			route [length - 1].X -= endOffset;  	}  	g.DrawLines (Diagram.SelectionPen' route);  	if (zoom > UndreadableZoom) {  		foreach (BendPoint point in bendPoints)  			point.Draw (g' true' zoom' offset);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (IsSelected) {  	Point[] route = routeCache.ToArray ();  	int length = route.Length;  	for (int i = 0; i < route.Length; i++) {  		route [i].X = (int)(route [i].X * zoom) - offset.X;  		route [i].Y = (int)(route [i].Y * zoom) - offset.Y;  	}  	// Cut the line's start section  	int startOffset = (int)(StartSelectionOffset * zoom);  	if (route [0].X == route [1].X) {  		if (route [0].Y < route [1].Y)  			route [0].Y += startOffset;  		else  			route [0].Y -= startOffset;  	}  	else {  		if (route [0].X < route [1].X)  			route [0].X += startOffset;  		else  			route [0].X -= startOffset;  	}  	// Cut the line's end section  	int endOffset = (int)(EndSelectionOffset * zoom);  	if (route [length - 1].X == route [length - 2].X) {  		if (route [length - 1].Y < route [length - 2].Y)  			route [length - 1].Y += endOffset;  		else  			route [length - 1].Y -= endOffset;  	}  	else {  		if (route [length - 1].X < route [length - 2].X)  			route [length - 1].X += endOffset;  		else  			route [length - 1].X -= endOffset;  	}  	g.DrawLines (Diagram.SelectionPen' route);  	if (zoom > UndreadableZoom) {  		foreach (BendPoint point in bendPoints)  			point.Draw (g' true' zoom' offset);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (route [length - 1].X == route [length - 2].X) {  	if (route [length - 1].Y < route [length - 2].Y)  		route [length - 1].Y += endOffset;  	else  		route [length - 1].Y -= endOffset;  }  else {  	if (route [length - 1].X < route [length - 2].X)  		route [length - 1].X += endOffset;  	else  		route [length - 1].X -= endOffset;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (route [length - 1].X == route [length - 2].X) {  	if (route [length - 1].Y < route [length - 2].Y)  		route [length - 1].Y += endOffset;  	else  		route [length - 1].Y -= endOffset;  }  else {  	if (route [length - 1].X < route [length - 2].X)  		route [length - 1].X += endOffset;  	else  		route [length - 1].X -= endOffset;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (route [length - 1].X == route [length - 2].X) {  	if (route [length - 1].Y < route [length - 2].Y)  		route [length - 1].Y += endOffset;  	else  		route [length - 1].Y -= endOffset;  }  else {  	if (route [length - 1].X < route [length - 2].X)  		route [length - 1].X += endOffset;  	else  		route [length - 1].X -= endOffset;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (route [length - 1].Y < route [length - 2].Y)  	route [length - 1].Y += endOffset;  else  	route [length - 1].Y -= endOffset;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,DrawSelectionLines,The following statement contains a magic number: if (route [length - 1].X < route [length - 2].X)  	route [length - 1].X += endOffset;  else  	route [length - 1].X -= endOffset;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (FirstBendPoint.AutoPosition && LastBendPoint.AutoPosition) {  	if (startOrientation == endOrientation && startShape == endShape) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Vertical;  	}  	if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  		if (startShape.Right <= endShape.Left - 2 * Spacing) {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else if (startShape.Left >= endShape.Right + 2 * Spacing) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  		else {  			if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  				FirstBendPoint.X = startShape.Left - Spacing;  				LastBendPoint.X = endShape.Left - Spacing;  			}  			else {  				FirstBendPoint.X = startShape.Right + Spacing;  				LastBendPoint.X = endShape.Right + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Height < endShape.Height) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  			int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  			FirstBendPoint.Y = center;  			LastBendPoint.Y = center;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  		if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  		else {  			if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  				FirstBendPoint.Y = startShape.Top - Spacing;  				LastBendPoint.Y = endShape.Top - Spacing;  			}  			else {  				FirstBendPoint.Y = startShape.Bottom + Spacing;  				LastBendPoint.Y = endShape.Bottom + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Width < endShape.Width) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  			int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  			FirstBendPoint.X = center;  			LastBendPoint.X = center;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  	else {  		if (startOrientation == LineOrientation.Horizontal) {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  			if (LastBendPoint.X >= startShape.HorizontalCenter)  				FirstBendPoint.X = startShape.Right + Spacing;  			else  				FirstBendPoint.X = startShape.Left - Spacing;  			if (FirstBendPoint.Y >= endShape.VerticalCenter)  				LastBendPoint.Y = endShape.Bottom + Spacing;  			else  				LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  			if (LastBendPoint.Y >= startShape.VerticalCenter)  				FirstBendPoint.Y = startShape.Bottom + Spacing;  			else  				FirstBendPoint.Y = startShape.Top - Spacing;  			if (FirstBendPoint.X >= endShape.HorizontalCenter)  				LastBendPoint.X = endShape.Right + Spacing;  			else  				LastBendPoint.X = endShape.Left - Spacing;  		}  	}  }  else if (FirstBendPoint.AutoPosition) {  	if (startOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondValue.X < startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Left - Spacing;  		else  			FirstBendPoint.X = startShape.Right + Spacing;  		if (bendPoints.SecondValue.Y >= startShape.Top && bendPoints.SecondValue.Y <= startShape.Bottom) {  			FirstBendPoint.Y = bendPoints.SecondValue.Y;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondValue.Y < startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Top - Spacing;  		else  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		if (bendPoints.SecondValue.X >= startShape.Left && bendPoints.SecondValue.X <= startShape.Right) {  			FirstBendPoint.X = bendPoints.SecondValue.X;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  		}  	}  }  else if (LastBendPoint.AutoPosition) {  	if (endOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondLastValue.X < endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Left - Spacing;  		else  			LastBendPoint.X = endShape.Right + Spacing;  		if (bendPoints.SecondLastValue.Y >= endShape.Top && bendPoints.SecondLastValue.Y <= endShape.Bottom) {  			LastBendPoint.Y = bendPoints.SecondLastValue.Y;  		}  		else {  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondLastValue.Y < endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Top - Spacing;  		else  			LastBendPoint.Y = endShape.Bottom + Spacing;  		if (bendPoints.SecondLastValue.X >= endShape.Left && bendPoints.SecondLastValue.X <= endShape.Right) {  			LastBendPoint.X = bendPoints.SecondLastValue.X;  		}  		else {  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (FirstBendPoint.AutoPosition && LastBendPoint.AutoPosition) {  	if (startOrientation == endOrientation && startShape == endShape) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Vertical;  	}  	if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  		if (startShape.Right <= endShape.Left - 2 * Spacing) {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else if (startShape.Left >= endShape.Right + 2 * Spacing) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  		else {  			if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  				FirstBendPoint.X = startShape.Left - Spacing;  				LastBendPoint.X = endShape.Left - Spacing;  			}  			else {  				FirstBendPoint.X = startShape.Right + Spacing;  				LastBendPoint.X = endShape.Right + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Height < endShape.Height) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  			int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  			FirstBendPoint.Y = center;  			LastBendPoint.Y = center;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  		if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  		else {  			if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  				FirstBendPoint.Y = startShape.Top - Spacing;  				LastBendPoint.Y = endShape.Top - Spacing;  			}  			else {  				FirstBendPoint.Y = startShape.Bottom + Spacing;  				LastBendPoint.Y = endShape.Bottom + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Width < endShape.Width) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  			int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  			FirstBendPoint.X = center;  			LastBendPoint.X = center;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  	else {  		if (startOrientation == LineOrientation.Horizontal) {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  			if (LastBendPoint.X >= startShape.HorizontalCenter)  				FirstBendPoint.X = startShape.Right + Spacing;  			else  				FirstBendPoint.X = startShape.Left - Spacing;  			if (FirstBendPoint.Y >= endShape.VerticalCenter)  				LastBendPoint.Y = endShape.Bottom + Spacing;  			else  				LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  			if (LastBendPoint.Y >= startShape.VerticalCenter)  				FirstBendPoint.Y = startShape.Bottom + Spacing;  			else  				FirstBendPoint.Y = startShape.Top - Spacing;  			if (FirstBendPoint.X >= endShape.HorizontalCenter)  				LastBendPoint.X = endShape.Right + Spacing;  			else  				LastBendPoint.X = endShape.Left - Spacing;  		}  	}  }  else if (FirstBendPoint.AutoPosition) {  	if (startOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondValue.X < startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Left - Spacing;  		else  			FirstBendPoint.X = startShape.Right + Spacing;  		if (bendPoints.SecondValue.Y >= startShape.Top && bendPoints.SecondValue.Y <= startShape.Bottom) {  			FirstBendPoint.Y = bendPoints.SecondValue.Y;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondValue.Y < startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Top - Spacing;  		else  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		if (bendPoints.SecondValue.X >= startShape.Left && bendPoints.SecondValue.X <= startShape.Right) {  			FirstBendPoint.X = bendPoints.SecondValue.X;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  		}  	}  }  else if (LastBendPoint.AutoPosition) {  	if (endOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondLastValue.X < endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Left - Spacing;  		else  			LastBendPoint.X = endShape.Right + Spacing;  		if (bendPoints.SecondLastValue.Y >= endShape.Top && bendPoints.SecondLastValue.Y <= endShape.Bottom) {  			LastBendPoint.Y = bendPoints.SecondLastValue.Y;  		}  		else {  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondLastValue.Y < endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Top - Spacing;  		else  			LastBendPoint.Y = endShape.Bottom + Spacing;  		if (bendPoints.SecondLastValue.X >= endShape.Left && bendPoints.SecondLastValue.X <= endShape.Right) {  			LastBendPoint.X = bendPoints.SecondLastValue.X;  		}  		else {  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (FirstBendPoint.AutoPosition && LastBendPoint.AutoPosition) {  	if (startOrientation == endOrientation && startShape == endShape) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Vertical;  	}  	if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  		if (startShape.Right <= endShape.Left - 2 * Spacing) {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else if (startShape.Left >= endShape.Right + 2 * Spacing) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  		else {  			if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  				FirstBendPoint.X = startShape.Left - Spacing;  				LastBendPoint.X = endShape.Left - Spacing;  			}  			else {  				FirstBendPoint.X = startShape.Right + Spacing;  				LastBendPoint.X = endShape.Right + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Height < endShape.Height) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  			int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  			FirstBendPoint.Y = center;  			LastBendPoint.Y = center;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  		if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  		else {  			if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  				FirstBendPoint.Y = startShape.Top - Spacing;  				LastBendPoint.Y = endShape.Top - Spacing;  			}  			else {  				FirstBendPoint.Y = startShape.Bottom + Spacing;  				LastBendPoint.Y = endShape.Bottom + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Width < endShape.Width) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  			int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  			FirstBendPoint.X = center;  			LastBendPoint.X = center;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  	else {  		if (startOrientation == LineOrientation.Horizontal) {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  			if (LastBendPoint.X >= startShape.HorizontalCenter)  				FirstBendPoint.X = startShape.Right + Spacing;  			else  				FirstBendPoint.X = startShape.Left - Spacing;  			if (FirstBendPoint.Y >= endShape.VerticalCenter)  				LastBendPoint.Y = endShape.Bottom + Spacing;  			else  				LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  			if (LastBendPoint.Y >= startShape.VerticalCenter)  				FirstBendPoint.Y = startShape.Bottom + Spacing;  			else  				FirstBendPoint.Y = startShape.Top - Spacing;  			if (FirstBendPoint.X >= endShape.HorizontalCenter)  				LastBendPoint.X = endShape.Right + Spacing;  			else  				LastBendPoint.X = endShape.Left - Spacing;  		}  	}  }  else if (FirstBendPoint.AutoPosition) {  	if (startOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondValue.X < startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Left - Spacing;  		else  			FirstBendPoint.X = startShape.Right + Spacing;  		if (bendPoints.SecondValue.Y >= startShape.Top && bendPoints.SecondValue.Y <= startShape.Bottom) {  			FirstBendPoint.Y = bendPoints.SecondValue.Y;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondValue.Y < startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Top - Spacing;  		else  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		if (bendPoints.SecondValue.X >= startShape.Left && bendPoints.SecondValue.X <= startShape.Right) {  			FirstBendPoint.X = bendPoints.SecondValue.X;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  		}  	}  }  else if (LastBendPoint.AutoPosition) {  	if (endOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondLastValue.X < endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Left - Spacing;  		else  			LastBendPoint.X = endShape.Right + Spacing;  		if (bendPoints.SecondLastValue.Y >= endShape.Top && bendPoints.SecondLastValue.Y <= endShape.Bottom) {  			LastBendPoint.Y = bendPoints.SecondLastValue.Y;  		}  		else {  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondLastValue.Y < endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Top - Spacing;  		else  			LastBendPoint.Y = endShape.Bottom + Spacing;  		if (bendPoints.SecondLastValue.X >= endShape.Left && bendPoints.SecondLastValue.X <= endShape.Right) {  			LastBendPoint.X = bendPoints.SecondLastValue.X;  		}  		else {  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (FirstBendPoint.AutoPosition && LastBendPoint.AutoPosition) {  	if (startOrientation == endOrientation && startShape == endShape) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Vertical;  	}  	if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  		if (startShape.Right <= endShape.Left - 2 * Spacing) {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else if (startShape.Left >= endShape.Right + 2 * Spacing) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  		else {  			if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  				FirstBendPoint.X = startShape.Left - Spacing;  				LastBendPoint.X = endShape.Left - Spacing;  			}  			else {  				FirstBendPoint.X = startShape.Right + Spacing;  				LastBendPoint.X = endShape.Right + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Height < endShape.Height) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  			int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  			FirstBendPoint.Y = center;  			LastBendPoint.Y = center;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  		if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  		else {  			if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  				FirstBendPoint.Y = startShape.Top - Spacing;  				LastBendPoint.Y = endShape.Top - Spacing;  			}  			else {  				FirstBendPoint.Y = startShape.Bottom + Spacing;  				LastBendPoint.Y = endShape.Bottom + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Width < endShape.Width) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  			int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  			FirstBendPoint.X = center;  			LastBendPoint.X = center;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  	else {  		if (startOrientation == LineOrientation.Horizontal) {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  			if (LastBendPoint.X >= startShape.HorizontalCenter)  				FirstBendPoint.X = startShape.Right + Spacing;  			else  				FirstBendPoint.X = startShape.Left - Spacing;  			if (FirstBendPoint.Y >= endShape.VerticalCenter)  				LastBendPoint.Y = endShape.Bottom + Spacing;  			else  				LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  			if (LastBendPoint.Y >= startShape.VerticalCenter)  				FirstBendPoint.Y = startShape.Bottom + Spacing;  			else  				FirstBendPoint.Y = startShape.Top - Spacing;  			if (FirstBendPoint.X >= endShape.HorizontalCenter)  				LastBendPoint.X = endShape.Right + Spacing;  			else  				LastBendPoint.X = endShape.Left - Spacing;  		}  	}  }  else if (FirstBendPoint.AutoPosition) {  	if (startOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondValue.X < startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Left - Spacing;  		else  			FirstBendPoint.X = startShape.Right + Spacing;  		if (bendPoints.SecondValue.Y >= startShape.Top && bendPoints.SecondValue.Y <= startShape.Bottom) {  			FirstBendPoint.Y = bendPoints.SecondValue.Y;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondValue.Y < startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Top - Spacing;  		else  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		if (bendPoints.SecondValue.X >= startShape.Left && bendPoints.SecondValue.X <= startShape.Right) {  			FirstBendPoint.X = bendPoints.SecondValue.X;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  		}  	}  }  else if (LastBendPoint.AutoPosition) {  	if (endOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondLastValue.X < endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Left - Spacing;  		else  			LastBendPoint.X = endShape.Right + Spacing;  		if (bendPoints.SecondLastValue.Y >= endShape.Top && bendPoints.SecondLastValue.Y <= endShape.Bottom) {  			LastBendPoint.Y = bendPoints.SecondLastValue.Y;  		}  		else {  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondLastValue.Y < endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Top - Spacing;  		else  			LastBendPoint.Y = endShape.Bottom + Spacing;  		if (bendPoints.SecondLastValue.X >= endShape.Left && bendPoints.SecondLastValue.X <= endShape.Right) {  			LastBendPoint.X = bendPoints.SecondLastValue.X;  		}  		else {  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (FirstBendPoint.AutoPosition && LastBendPoint.AutoPosition) {  	if (startOrientation == endOrientation && startShape == endShape) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Vertical;  	}  	if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  		if (startShape.Right <= endShape.Left - 2 * Spacing) {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else if (startShape.Left >= endShape.Right + 2 * Spacing) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  		else {  			if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  				FirstBendPoint.X = startShape.Left - Spacing;  				LastBendPoint.X = endShape.Left - Spacing;  			}  			else {  				FirstBendPoint.X = startShape.Right + Spacing;  				LastBendPoint.X = endShape.Right + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Height < endShape.Height) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  			int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  			FirstBendPoint.Y = center;  			LastBendPoint.Y = center;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  		if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  		else {  			if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  				FirstBendPoint.Y = startShape.Top - Spacing;  				LastBendPoint.Y = endShape.Top - Spacing;  			}  			else {  				FirstBendPoint.Y = startShape.Bottom + Spacing;  				LastBendPoint.Y = endShape.Bottom + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Width < endShape.Width) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  			int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  			FirstBendPoint.X = center;  			LastBendPoint.X = center;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  	else {  		if (startOrientation == LineOrientation.Horizontal) {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  			if (LastBendPoint.X >= startShape.HorizontalCenter)  				FirstBendPoint.X = startShape.Right + Spacing;  			else  				FirstBendPoint.X = startShape.Left - Spacing;  			if (FirstBendPoint.Y >= endShape.VerticalCenter)  				LastBendPoint.Y = endShape.Bottom + Spacing;  			else  				LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  			if (LastBendPoint.Y >= startShape.VerticalCenter)  				FirstBendPoint.Y = startShape.Bottom + Spacing;  			else  				FirstBendPoint.Y = startShape.Top - Spacing;  			if (FirstBendPoint.X >= endShape.HorizontalCenter)  				LastBendPoint.X = endShape.Right + Spacing;  			else  				LastBendPoint.X = endShape.Left - Spacing;  		}  	}  }  else if (FirstBendPoint.AutoPosition) {  	if (startOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondValue.X < startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Left - Spacing;  		else  			FirstBendPoint.X = startShape.Right + Spacing;  		if (bendPoints.SecondValue.Y >= startShape.Top && bendPoints.SecondValue.Y <= startShape.Bottom) {  			FirstBendPoint.Y = bendPoints.SecondValue.Y;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondValue.Y < startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Top - Spacing;  		else  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		if (bendPoints.SecondValue.X >= startShape.Left && bendPoints.SecondValue.X <= startShape.Right) {  			FirstBendPoint.X = bendPoints.SecondValue.X;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  		}  	}  }  else if (LastBendPoint.AutoPosition) {  	if (endOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondLastValue.X < endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Left - Spacing;  		else  			LastBendPoint.X = endShape.Right + Spacing;  		if (bendPoints.SecondLastValue.Y >= endShape.Top && bendPoints.SecondLastValue.Y <= endShape.Bottom) {  			LastBendPoint.Y = bendPoints.SecondLastValue.Y;  		}  		else {  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondLastValue.Y < endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Top - Spacing;  		else  			LastBendPoint.Y = endShape.Bottom + Spacing;  		if (bendPoints.SecondLastValue.X >= endShape.Left && bendPoints.SecondLastValue.X <= endShape.Right) {  			LastBendPoint.X = bendPoints.SecondLastValue.X;  		}  		else {  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (FirstBendPoint.AutoPosition && LastBendPoint.AutoPosition) {  	if (startOrientation == endOrientation && startShape == endShape) {  		startOrientation = LineOrientation.Horizontal;  		endOrientation = LineOrientation.Vertical;  	}  	if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  		if (startShape.Right <= endShape.Left - 2 * Spacing) {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else if (startShape.Left >= endShape.Right + 2 * Spacing) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  		else {  			if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  				FirstBendPoint.X = startShape.Left - Spacing;  				LastBendPoint.X = endShape.Left - Spacing;  			}  			else {  				FirstBendPoint.X = startShape.Right + Spacing;  				LastBendPoint.X = endShape.Right + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Height < endShape.Height) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  			int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  			FirstBendPoint.Y = center;  			LastBendPoint.Y = center;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  		if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  		else {  			if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  				FirstBendPoint.Y = startShape.Top - Spacing;  				LastBendPoint.Y = endShape.Top - Spacing;  			}  			else {  				FirstBendPoint.Y = startShape.Bottom + Spacing;  				LastBendPoint.Y = endShape.Bottom + Spacing;  			}  		}  		Shape smallerShape' biggerShape;  		if (startShape.Width < endShape.Width) {  			smallerShape = startShape;  			biggerShape = endShape;  		}  		else {  			smallerShape = endShape;  			biggerShape = startShape;  		}  		if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  			int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  			FirstBendPoint.X = center;  			LastBendPoint.X = center;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  	else {  		if (startOrientation == LineOrientation.Horizontal) {  			FirstBendPoint.Y = startShape.VerticalCenter;  			LastBendPoint.X = endShape.HorizontalCenter;  			if (LastBendPoint.X >= startShape.HorizontalCenter)  				FirstBendPoint.X = startShape.Right + Spacing;  			else  				FirstBendPoint.X = startShape.Left - Spacing;  			if (FirstBendPoint.Y >= endShape.VerticalCenter)  				LastBendPoint.Y = endShape.Bottom + Spacing;  			else  				LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  			LastBendPoint.Y = endShape.VerticalCenter;  			if (LastBendPoint.Y >= startShape.VerticalCenter)  				FirstBendPoint.Y = startShape.Bottom + Spacing;  			else  				FirstBendPoint.Y = startShape.Top - Spacing;  			if (FirstBendPoint.X >= endShape.HorizontalCenter)  				LastBendPoint.X = endShape.Right + Spacing;  			else  				LastBendPoint.X = endShape.Left - Spacing;  		}  	}  }  else if (FirstBendPoint.AutoPosition) {  	if (startOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondValue.X < startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Left - Spacing;  		else  			FirstBendPoint.X = startShape.Right + Spacing;  		if (bendPoints.SecondValue.Y >= startShape.Top && bendPoints.SecondValue.Y <= startShape.Bottom) {  			FirstBendPoint.Y = bendPoints.SecondValue.Y;  		}  		else {  			FirstBendPoint.Y = startShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondValue.Y < startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Top - Spacing;  		else  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		if (bendPoints.SecondValue.X >= startShape.Left && bendPoints.SecondValue.X <= startShape.Right) {  			FirstBendPoint.X = bendPoints.SecondValue.X;  		}  		else {  			FirstBendPoint.X = startShape.HorizontalCenter;  		}  	}  }  else if (LastBendPoint.AutoPosition) {  	if (endOrientation == LineOrientation.Horizontal) {  		if (bendPoints.SecondLastValue.X < endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Left - Spacing;  		else  			LastBendPoint.X = endShape.Right + Spacing;  		if (bendPoints.SecondLastValue.Y >= endShape.Top && bendPoints.SecondLastValue.Y <= endShape.Bottom) {  			LastBendPoint.Y = bendPoints.SecondLastValue.Y;  		}  		else {  			LastBendPoint.Y = endShape.VerticalCenter;  		}  	}  	else {  		if (bendPoints.SecondLastValue.Y < endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Top - Spacing;  		else  			LastBendPoint.Y = endShape.Bottom + Spacing;  		if (bendPoints.SecondLastValue.X >= endShape.Left && bendPoints.SecondLastValue.X <= endShape.Right) {  			LastBendPoint.X = bendPoints.SecondLastValue.X;  		}  		else {  			LastBendPoint.X = endShape.HorizontalCenter;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  	if (startShape.Right <= endShape.Left - 2 * Spacing) {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else if (startShape.Left >= endShape.Right + 2 * Spacing) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  	else {  		if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Height < endShape.Height) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  		int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  		FirstBendPoint.Y = center;  		LastBendPoint.Y = center;  	}  	else {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  	}  }  else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  	if (startShape.Right <= endShape.Left - 2 * Spacing) {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else if (startShape.Left >= endShape.Right + 2 * Spacing) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  	else {  		if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Height < endShape.Height) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  		int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  		FirstBendPoint.Y = center;  		LastBendPoint.Y = center;  	}  	else {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  	}  }  else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  	if (startShape.Right <= endShape.Left - 2 * Spacing) {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else if (startShape.Left >= endShape.Right + 2 * Spacing) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  	else {  		if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Height < endShape.Height) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  		int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  		FirstBendPoint.Y = center;  		LastBendPoint.Y = center;  	}  	else {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  	}  }  else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  	if (startShape.Right <= endShape.Left - 2 * Spacing) {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else if (startShape.Left >= endShape.Right + 2 * Spacing) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  	else {  		if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Height < endShape.Height) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  		int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  		FirstBendPoint.Y = center;  		LastBendPoint.Y = center;  	}  	else {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  	}  }  else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  	if (startShape.Right <= endShape.Left - 2 * Spacing) {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else if (startShape.Left >= endShape.Right + 2 * Spacing) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  	else {  		if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Height < endShape.Height) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  		int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  		FirstBendPoint.Y = center;  		LastBendPoint.Y = center;  	}  	else {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  	}  }  else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Horizontal && endOrientation == LineOrientation.Horizontal) {  	if (startShape.Right <= endShape.Left - 2 * Spacing) {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else if (startShape.Left >= endShape.Right + 2 * Spacing) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  	else {  		if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  			FirstBendPoint.X = startShape.Left - Spacing;  			LastBendPoint.X = endShape.Left - Spacing;  		}  		else {  			FirstBendPoint.X = startShape.Right + Spacing;  			LastBendPoint.X = endShape.Right + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Height < endShape.Height) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  		int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  		FirstBendPoint.Y = center;  		LastBendPoint.Y = center;  	}  	else {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  	}  }  else if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startShape.Right <= endShape.Left - 2 * Spacing) {  	FirstBendPoint.X = startShape.Right + Spacing;  	LastBendPoint.X = endShape.Left - Spacing;  }  else if (startShape.Left >= endShape.Right + 2 * Spacing) {  	FirstBendPoint.X = startShape.Left - Spacing;  	LastBendPoint.X = endShape.Right + Spacing;  }  else {  	if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startShape.Right <= endShape.Left - 2 * Spacing) {  	FirstBendPoint.X = startShape.Right + Spacing;  	LastBendPoint.X = endShape.Left - Spacing;  }  else if (startShape.Left >= endShape.Right + 2 * Spacing) {  	FirstBendPoint.X = startShape.Left - Spacing;  	LastBendPoint.X = endShape.Right + Spacing;  }  else {  	if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startShape.Left >= endShape.Right + 2 * Spacing) {  	FirstBendPoint.X = startShape.Left - Spacing;  	LastBendPoint.X = endShape.Right + Spacing;  }  else {  	if (Math.Abs (startShape.Left - endShape.Left) < Math.Abs (startShape.Right - endShape.Right)) {  		FirstBendPoint.X = startShape.Left - Spacing;  		LastBendPoint.X = endShape.Left - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.Right + Spacing;  		LastBendPoint.X = endShape.Right + Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (biggerShape.Top <= smallerShape.VerticalCenter && biggerShape.Bottom >= smallerShape.VerticalCenter) {  	int center = (Math.Max (startShape.Top' endShape.Top) + Math.Min (startShape.Bottom' endShape.Bottom)) / 2;  	FirstBendPoint.Y = center;  	LastBendPoint.Y = center;  }  else {  	FirstBendPoint.Y = startShape.VerticalCenter;  	LastBendPoint.Y = endShape.VerticalCenter;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startOrientation == LineOrientation.Vertical && endOrientation == LineOrientation.Vertical) {  	if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  	else {  		if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  			FirstBendPoint.Y = startShape.Top - Spacing;  			LastBendPoint.Y = endShape.Top - Spacing;  		}  		else {  			FirstBendPoint.Y = startShape.Bottom + Spacing;  			LastBendPoint.Y = endShape.Bottom + Spacing;  		}  	}  	Shape smallerShape' biggerShape;  	if (startShape.Width < endShape.Width) {  		smallerShape = startShape;  		biggerShape = endShape;  	}  	else {  		smallerShape = endShape;  		biggerShape = startShape;  	}  	if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  		int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  		FirstBendPoint.X = center;  		LastBendPoint.X = center;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  	}  }  else {  	if (startOrientation == LineOrientation.Horizontal) {  		FirstBendPoint.Y = startShape.VerticalCenter;  		LastBendPoint.X = endShape.HorizontalCenter;  		if (LastBendPoint.X >= startShape.HorizontalCenter)  			FirstBendPoint.X = startShape.Right + Spacing;  		else  			FirstBendPoint.X = startShape.Left - Spacing;  		if (FirstBendPoint.Y >= endShape.VerticalCenter)  			LastBendPoint.Y = endShape.Bottom + Spacing;  		else  			LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.X = startShape.HorizontalCenter;  		LastBendPoint.Y = endShape.VerticalCenter;  		if (LastBendPoint.Y >= startShape.VerticalCenter)  			FirstBendPoint.Y = startShape.Bottom + Spacing;  		else  			FirstBendPoint.Y = startShape.Top - Spacing;  		if (FirstBendPoint.X >= endShape.HorizontalCenter)  			LastBendPoint.X = endShape.Right + Spacing;  		else  			LastBendPoint.X = endShape.Left - Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  	FirstBendPoint.Y = startShape.Bottom + Spacing;  	LastBendPoint.Y = endShape.Top - Spacing;  }  else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  	FirstBendPoint.Y = startShape.Top - Spacing;  	LastBendPoint.Y = endShape.Bottom + Spacing;  }  else {  	if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startShape.Bottom <= endShape.Top - 2 * Spacing) {  	FirstBendPoint.Y = startShape.Bottom + Spacing;  	LastBendPoint.Y = endShape.Top - Spacing;  }  else if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  	FirstBendPoint.Y = startShape.Top - Spacing;  	LastBendPoint.Y = endShape.Bottom + Spacing;  }  else {  	if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (startShape.Top >= endShape.Bottom + 2 * Spacing) {  	FirstBendPoint.Y = startShape.Top - Spacing;  	LastBendPoint.Y = endShape.Bottom + Spacing;  }  else {  	if (Math.Abs (startShape.Top - endShape.Top) < Math.Abs (startShape.Bottom - endShape.Bottom)) {  		FirstBendPoint.Y = startShape.Top - Spacing;  		LastBendPoint.Y = endShape.Top - Spacing;  	}  	else {  		FirstBendPoint.Y = startShape.Bottom + Spacing;  		LastBendPoint.Y = endShape.Bottom + Spacing;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,RelocateAutoBendPoints,The following statement contains a magic number: if (biggerShape.Left <= smallerShape.HorizontalCenter && biggerShape.Right >= smallerShape.HorizontalCenter) {  	int center = (Math.Max (startShape.Left' endShape.Left) + Math.Min (startShape.Right' endShape.Right)) / 2;  	FirstBendPoint.X = center;  	LastBendPoint.X = center;  }  else {  	FirstBendPoint.X = startShape.HorizontalCenter;  	LastBendPoint.X = endShape.HorizontalCenter;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.X == activePoint.X) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.Y < activePoint.Y)  		return FlowDirection.BottomUp;  	else  		return FlowDirection.TopDown;  }  else if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.X == activePoint.X) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.Y < activePoint.Y)  		return FlowDirection.BottomUp;  	else  		return FlowDirection.TopDown;  }  else if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.X == activePoint.X) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.Y < activePoint.Y)  		return FlowDirection.BottomUp;  	else  		return FlowDirection.TopDown;  }  else if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.X == activePoint.X) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.Y < activePoint.Y)  		return FlowDirection.BottomUp;  	else  		return FlowDirection.TopDown;  }  else if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.Y == activePoint.Y) {  	routeCache.Add (nextPoint.Location);  	if (nextPoint.X < activePoint.X)  		return FlowDirection.RightToLeft;  	else  		return FlowDirection.LeftToRight;  }  else if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.TopDown) {  	if (nextPoint.Y < activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else if (nextPoint.X < activePoint.X) {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  		else {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  	}  }  else if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.Y < activePoint.Y) {  	routeCache.Add (new Point (nextPoint.X' activePoint.Y));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.BottomUp;  }  else {  	Point nextNextPoint = GetNextNextPoint (current);  	if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  		int center = (nextPoint.Y + activePoint.Y) / 2;  		routeCache.Add (new Point (activePoint.X' center));  		routeCache.Add (new Point (nextPoint.X' center));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else if (nextPoint.X < activePoint.X) {  		if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  	}  	else {  		if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  		else {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y >= nextPoint.Y) {  	int center = (nextPoint.Y + activePoint.Y) / 2;  	routeCache.Add (new Point (activePoint.X' center));  	routeCache.Add (new Point (nextPoint.X' center));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.TopDown;  }  else if (nextPoint.X < activePoint.X) {  	if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  }  else {  	if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y >= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.BottomUp) {  	if (nextPoint.Y > activePoint.Y) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.TopDown;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  			int center = (nextPoint.Y + activePoint.Y) / 2;  			routeCache.Add (new Point (activePoint.X' center));  			routeCache.Add (new Point (nextPoint.X' center));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else if (nextPoint.X > activePoint.X) {  			if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  		}  		else {  			if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  			else {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  		}  	}  }  else if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.Y > activePoint.Y) {  	routeCache.Add (new Point (nextPoint.X' activePoint.Y));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.TopDown;  }  else {  	Point nextNextPoint = GetNextNextPoint (current);  	if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  		int center = (nextPoint.Y + activePoint.Y) / 2;  		routeCache.Add (new Point (activePoint.X' center));  		routeCache.Add (new Point (nextPoint.X' center));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else if (nextPoint.X > activePoint.X) {  		if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  	}  	else {  		if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  		else {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (current.Next.Next == null && nextNextPoint.X == nextPoint.X && nextNextPoint.Y <= nextPoint.Y) {  	int center = (nextPoint.Y + activePoint.Y) / 2;  	routeCache.Add (new Point (activePoint.X' center));  	routeCache.Add (new Point (nextPoint.X' center));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.BottomUp;  }  else if (nextPoint.X > activePoint.X) {  	if (nextNextPoint.X <= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X < nextPoint.X)) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  }  else {  	if (nextNextPoint.X >= activePoint.X || (nextNextPoint.Y <= nextPoint.Y && nextNextPoint.X > nextPoint.X)) {  		routeCache.Add (new Point (nextPoint.X' activePoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.BottomUp;  	}  	else {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.LeftToRight) {  	if (nextPoint.X < activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		if (nextPoint.Y > activePoint.Y) {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  		else {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.LeftToRight;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  	}  }  else if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.X < activePoint.X) {  	routeCache.Add (new Point (activePoint.X' nextPoint.Y));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.RightToLeft;  }  else {  	Point nextNextPoint = GetNextNextPoint (current);  	if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  		int center = (nextPoint.X + activePoint.X) / 2;  		routeCache.Add (new Point (center' activePoint.Y));  		routeCache.Add (new Point (center' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	if (nextPoint.Y > activePoint.Y) {  		if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		else {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  	}  	else {  		if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X >= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.LeftToRight;  		}  		else {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X >= nextPoint.X) {  	int center = (nextPoint.X + activePoint.X) / 2;  	routeCache.Add (new Point (center' activePoint.Y));  	routeCache.Add (new Point (center' nextPoint.Y));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.LeftToRight;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (direction == FlowDirection.RightToLeft) {  	if (nextPoint.X > activePoint.X) {  		routeCache.Add (new Point (activePoint.X' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.LeftToRight;  	}  	else {  		Point nextNextPoint = GetNextNextPoint (current);  		if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  			int center = (nextPoint.X + activePoint.X) / 2;  			routeCache.Add (new Point (center' activePoint.Y));  			routeCache.Add (new Point (center' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		if (nextPoint.Y < activePoint.Y) {  			if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.BottomUp;  			}  		}  		else {  			if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  				routeCache.Add (new Point (activePoint.X' nextPoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.RightToLeft;  			}  			else {  				routeCache.Add (new Point (nextPoint.X' activePoint.Y));  				routeCache.Add (nextPoint.Location);  				return FlowDirection.TopDown;  			}  		}  	}  }  else {  	routeCache.Add (nextPoint.Location);  	return direction;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (nextPoint.X > activePoint.X) {  	routeCache.Add (new Point (activePoint.X' nextPoint.Y));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.LeftToRight;  }  else {  	Point nextNextPoint = GetNextNextPoint (current);  	if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  		int center = (nextPoint.X + activePoint.X) / 2;  		routeCache.Add (new Point (center' activePoint.Y));  		routeCache.Add (new Point (center' nextPoint.Y));  		routeCache.Add (nextPoint.Location);  		return FlowDirection.RightToLeft;  	}  	if (nextPoint.Y < activePoint.Y) {  		if (nextNextPoint.Y >= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y > nextPoint.Y)) {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		else {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.BottomUp;  		}  	}  	else {  		if (nextNextPoint.Y <= activePoint.Y || (nextNextPoint.X <= nextPoint.X && nextNextPoint.Y < nextPoint.Y)) {  			routeCache.Add (new Point (activePoint.X' nextPoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.RightToLeft;  		}  		else {  			routeCache.Add (new Point (nextPoint.X' activePoint.Y));  			routeCache.Add (nextPoint.Location);  			return FlowDirection.TopDown;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Connection,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Connection.cs,AddInnerSegment,The following statement contains a magic number: if (current.Next.Next == null && nextNextPoint.Y == nextPoint.Y && nextNextPoint.X <= nextPoint.X) {  	int center = (nextPoint.X + activePoint.X) / 2;  	routeCache.Add (new Point (center' activePoint.Y));  	routeCache.Add (new Point (center' nextPoint.Y));  	routeCache.Add (nextPoint.Location);  	return FlowDirection.RightToLeft;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: point.X -= capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: point.Y += capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: if (angle == 180)// Up   {  	point.X -= capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y += capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: point.X -= capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawRole,The following statement contains a magic number: point.Y += capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 0)// Down   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y += style.ShadowOffset.Height + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Near;  }  else if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: point.X += capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 90)// Left   {  	point.X -= TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Far;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: point.Y -= capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: if (angle == 180)// Up   {  	point.X += capSize.Width / 2 + TextMargin.Width;  	point.Y -= TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  else// Right   {  	point.X += style.ShadowOffset.Width + TextMargin.Width;  	point.Y -= capSize.Width / 2 + TextMargin.Height;  	stringFormat.Alignment = StringAlignment.Near;  	stringFormat.LineAlignment = StringAlignment.Far;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: point.X += capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,DrawMultiplicity,The following statement contains a magic number: point.Y -= capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: area.Y += capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y += capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: area.X -= textSize.Width + capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,GetRoleArea,The following statement contains a magic number: area.Y += capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 0)// Down   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y += style.ShadowOffset.Height + TextMargin.Height;  }  else if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: area.X += capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 90)// Left   {  	area.X -= textSize.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  else if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: if (angle == 180)// Up   {  	area.X += capSize.Width / 2 + TextMargin.Width;  	area.Y -= textSize.Height + TextMargin.Height;  }  else// Right   {  	area.X += style.ShadowOffset.Width + TextMargin.Width;  	area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: area.X += capSize.Width / 2 + TextMargin.Width;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Association,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Association.cs,MultiplicityArea,The following statement contains a magic number: area.Y -= textSize.Height + capSize.Width / 2 + TextMargin.Height;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Arrowhead,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Arrowhead.cs,Arrowhead,The following statement contains a magic number: openArrowPoints = new Point[] {  	new Point (-OpenArrowWidth / 2' OpenArrowHeight)'  	new Point (0' 0)'  	new Point (OpenArrowWidth / 2' OpenArrowHeight)  };  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Arrowhead,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Arrowhead.cs,Arrowhead,The following statement contains a magic number: openArrowPoints = new Point[] {  	new Point (-OpenArrowWidth / 2' OpenArrowHeight)'  	new Point (0' 0)'  	new Point (OpenArrowWidth / 2' OpenArrowHeight)  };  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Arrowhead,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Arrowhead.cs,Arrowhead,The following statement contains a magic number: closedArrowPath.AddLines (new Point[] {  	new Point (0' 0)'  	new Point (ClosedArrowWidth / 2' ClosedArrowHeight)'  	new Point (-ClosedArrowWidth / 2' ClosedArrowHeight)  });  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Arrowhead,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Arrowhead.cs,Arrowhead,The following statement contains a magic number: closedArrowPath.AddLines (new Point[] {  	new Point (0' 0)'  	new Point (ClosedArrowWidth / 2' ClosedArrowHeight)'  	new Point (-ClosedArrowWidth / 2' ClosedArrowHeight)  });  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Nesting,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Nesting.cs,DrawStartCap,The following statement contains a magic number: g.DrawLine (linePen' 0' Radius - CrossSize / 2' 0' Radius + CrossSize / 2);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Nesting,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Nesting.cs,DrawStartCap,The following statement contains a magic number: g.DrawLine (linePen' 0' Radius - CrossSize / 2' 0' Radius + CrossSize / 2);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Nesting,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Nesting.cs,DrawStartCap,The following statement contains a magic number: g.DrawLine (linePen' -CrossSize / 2' Radius' CrossSize / 2' Radius);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Connections,Nesting,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Connections\Nesting.cs,DrawStartCap,The following statement contains a magic number: g.DrawLine (linePen' -CrossSize / 2' Radius' CrossSize / 2' Radius);  
Magic Number,NClass.DiagramEditor.ClassDiagram.ContextMenus,AssociationContextMenu,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ContextMenus\AssociationContextMenu.cs,InitMenuItems,The following statement contains a magic number: MenuList.InsertRange (7' new ToolStripItem[] {  	mnuDirection'  	mnuType'  	mnuReverse'  	new ToolStripSeparator ()'  });  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,CommentEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CommentEditor.cs,Relocate,The following statement contains a magic number: if (diagram != null) {  	Rectangle absolute = shape.GetTextRectangle ();  	// The following lines are required because of a .NET bug:  	// http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=380085  	if (!MonoHelper.IsRunningOnMono) {  		absolute.X -= 3;  		absolute.Width += 3;  	}  	this.SetBounds ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + ParentLocation.X' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y + ParentLocation.Y' (int)(absolute.Width * diagram.Zoom)' (int)(absolute.Height * diagram.Zoom));  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,CommentEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CommentEditor.cs,Relocate,The following statement contains a magic number: if (diagram != null) {  	Rectangle absolute = shape.GetTextRectangle ();  	// The following lines are required because of a .NET bug:  	// http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=380085  	if (!MonoHelper.IsRunningOnMono) {  		absolute.X -= 3;  		absolute.Width += 3;  	}  	this.SetBounds ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + ParentLocation.X' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y + ParentLocation.Y' (int)(absolute.Width * diagram.Zoom)' (int)(absolute.Height * diagram.Zoom));  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,CommentEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CommentEditor.cs,Relocate,The following statement contains a magic number: if (!MonoHelper.IsRunningOnMono) {  	absolute.X -= 3;  	absolute.Width += 3;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,CommentEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CommentEditor.cs,Relocate,The following statement contains a magic number: if (!MonoHelper.IsRunningOnMono) {  	absolute.X -= 3;  	absolute.Width += 3;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,CommentEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CommentEditor.cs,Relocate,The following statement contains a magic number: absolute.X -= 3;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,CommentEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CommentEditor.cs,Relocate,The following statement contains a magic number: absolute.Width += 3;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,BorderedTextBox,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\BorderedTextBox.cs,BorderedTextBox,The following statement contains a magic number: panel.Size = textBox.Size - new Size (2' 0);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,ParameterEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\ParameterEditor.cs,Relocate,The following statement contains a magic number: if (diagram != null) {  	Rectangle record = shape.GetMemberRectangle (shape.ActiveMemberIndex);  	Point absolute = new Point (shape.Right' record.Top);  	Size relative = new Size ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + MarginSize' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y);  	relative.Height -= (Height - (int)(record.Height * diagram.Zoom)) / 2;  	this.Location = ParentLocation + relative;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,ParameterEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\ParameterEditor.cs,Relocate,The following statement contains a magic number: relative.Height -= (Height - (int)(record.Height * diagram.Zoom)) / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,EnumValueEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\EnumValueEditor.cs,Relocate,The following statement contains a magic number: if (diagram != null) {  	Rectangle record = shape.GetMemberRectangle (shape.ActiveMemberIndex);  	Point absolute = new Point (shape.Right' record.Top);  	Size relative = new Size ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + MarginSize' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y);  	relative.Height -= (Height - (int)(record.Height * diagram.Zoom)) / 2;  	this.Location = ParentLocation + relative;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,EnumValueEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\EnumValueEditor.cs,Relocate,The following statement contains a magic number: relative.Height -= (Height - (int)(record.Height * diagram.Zoom)) / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,Relocate,The following statement contains a magic number: if (diagram != null) {  	Rectangle record = shape.GetMemberRectangle (shape.ActiveMemberIndex);  	Point absolute = new Point (shape.Right' record.Top);  	Size relative = new Size ((int)(absolute.X * diagram.Zoom) - diagram.Offset.X + MarginSize' (int)(absolute.Y * diagram.Zoom) - diagram.Offset.Y);  	relative.Height -= (Height - (int)(record.Height * diagram.Zoom)) / 2;  	this.Location = ParentLocation + relative;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,Relocate,The following statement contains a magic number: relative.Height -= (Height - (int)(record.Height * diagram.Zoom)) / 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: if (modifiedDirection == Direction.Unidirectional) {  	g.DrawLine (Pens.Black' width - ArrowWidth' center - ArrowHeight / 2' width' center);  	g.DrawLine (Pens.Black' width - ArrowWidth' center + ArrowHeight / 2' width' center);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: if (modifiedDirection == Direction.Unidirectional) {  	g.DrawLine (Pens.Black' width - ArrowWidth' center - ArrowHeight / 2' width' center);  	g.DrawLine (Pens.Black' width - ArrowWidth' center + ArrowHeight / 2' width' center);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: g.DrawLine (Pens.Black' width - ArrowWidth' center - ArrowHeight / 2' width' center);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: g.DrawLine (Pens.Black' width - ArrowWidth' center + ArrowHeight / 2' width' center);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: if (modifiedType != AssociationType.Association) {  	Point[] diamondPoints =  {  		new Point (0' center)'  		new Point (DiamondWidth / 2' center - DiamondHeight / 2)'  		new Point (DiamondWidth' center)'  		new Point (DiamondWidth / 2' center + DiamondHeight / 2)  	};  	if (modifiedType == AssociationType.Aggregation) {  		g.FillPolygon (Brushes.White' diamondPoints);  		g.DrawPolygon (Pens.Black' diamondPoints);  	}  	else if (modifiedType == AssociationType.Composition) {  		g.FillPolygon (Brushes.Black' diamondPoints);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: if (modifiedType != AssociationType.Association) {  	Point[] diamondPoints =  {  		new Point (0' center)'  		new Point (DiamondWidth / 2' center - DiamondHeight / 2)'  		new Point (DiamondWidth' center)'  		new Point (DiamondWidth / 2' center + DiamondHeight / 2)  	};  	if (modifiedType == AssociationType.Aggregation) {  		g.FillPolygon (Brushes.White' diamondPoints);  		g.DrawPolygon (Pens.Black' diamondPoints);  	}  	else if (modifiedType == AssociationType.Composition) {  		g.FillPolygon (Brushes.Black' diamondPoints);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: if (modifiedType != AssociationType.Association) {  	Point[] diamondPoints =  {  		new Point (0' center)'  		new Point (DiamondWidth / 2' center - DiamondHeight / 2)'  		new Point (DiamondWidth' center)'  		new Point (DiamondWidth / 2' center + DiamondHeight / 2)  	};  	if (modifiedType == AssociationType.Aggregation) {  		g.FillPolygon (Brushes.White' diamondPoints);  		g.DrawPolygon (Pens.Black' diamondPoints);  	}  	else if (modifiedType == AssociationType.Composition) {  		g.FillPolygon (Brushes.Black' diamondPoints);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,AssociationDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\AssociationDialog.cs,picArrow_Paint,The following statement contains a magic number: if (modifiedType != AssociationType.Association) {  	Point[] diamondPoints =  {  		new Point (0' center)'  		new Point (DiamondWidth / 2' center - DiamondHeight / 2)'  		new Point (DiamondWidth' center)'  		new Point (DiamondWidth / 2' center + DiamondHeight / 2)  	};  	if (modifiedType == AssociationType.Aggregation) {  		g.FillPolygon (Brushes.White' diamondPoints);  		g.DrawPolygon (Pens.Black' diamondPoints);  	}  	else if (modifiedType == AssociationType.Composition) {  		g.FillPolygon (Brushes.Black' diamondPoints);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,ImplementDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\ImplementDialog.cs,ImplementDialog,The following statement contains a magic number: chkImplementExplicitly.Location = new Point (12' 284);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,ImplementDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\ImplementDialog.cs,ImplementDialog,The following statement contains a magic number: chkImplementExplicitly.Location = new Point (12' 284);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,UpdateTexts,The following statement contains a magic number: lstMembers.Columns [2].Text = Strings.Type;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,UpdateTexts,The following statement contains a magic number: lstMembers.Columns [3].Text = Strings.Access;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,UpdateTexts,The following statement contains a magic number: lstMembers.Columns [4].Text = Strings.Modifiers;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: if (item != null && member != null) {  	item.ImageIndex = Icons.GetImageIndex (member);  	item.SubItems [1].Text = txtName.Text;  	item.SubItems [2].Text = cboType.Text;  	item.SubItems [3].Text = cboAccess.Text;  	if (member is Field) {  		item.SubItems [4].Text = member.Language.GetFieldModifierString (((Field)member).Modifier);  	}  	else if (member is Operation) {  		item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: if (item != null && member != null) {  	item.ImageIndex = Icons.GetImageIndex (member);  	item.SubItems [1].Text = txtName.Text;  	item.SubItems [2].Text = cboType.Text;  	item.SubItems [3].Text = cboAccess.Text;  	if (member is Field) {  		item.SubItems [4].Text = member.Language.GetFieldModifierString (((Field)member).Modifier);  	}  	else if (member is Operation) {  		item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: if (item != null && member != null) {  	item.ImageIndex = Icons.GetImageIndex (member);  	item.SubItems [1].Text = txtName.Text;  	item.SubItems [2].Text = cboType.Text;  	item.SubItems [3].Text = cboAccess.Text;  	if (member is Field) {  		item.SubItems [4].Text = member.Language.GetFieldModifierString (((Field)member).Modifier);  	}  	else if (member is Operation) {  		item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: if (item != null && member != null) {  	item.ImageIndex = Icons.GetImageIndex (member);  	item.SubItems [1].Text = txtName.Text;  	item.SubItems [2].Text = cboType.Text;  	item.SubItems [3].Text = cboAccess.Text;  	if (member is Field) {  		item.SubItems [4].Text = member.Language.GetFieldModifierString (((Field)member).Modifier);  	}  	else if (member is Operation) {  		item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: item.SubItems [2].Text = cboType.Text;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: item.SubItems [3].Text = cboAccess.Text;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: if (member is Field) {  	item.SubItems [4].Text = member.Language.GetFieldModifierString (((Field)member).Modifier);  }  else if (member is Operation) {  	item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: if (member is Field) {  	item.SubItems [4].Text = member.Language.GetFieldModifierString (((Field)member).Modifier);  }  else if (member is Operation) {  	item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: item.SubItems [4].Text = member.Language.GetFieldModifierString (((Field)member).Modifier);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: if (member is Operation) {  	item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,MembersDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\MembersDialog.cs,RefreshMembersList,The following statement contains a magic number: item.SubItems [4].Text = member.Language.GetOperationModifierString (((Operation)member).Modifier);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,DiagramPrintDialog,The following statement contains a magic number: printDocument.DefaultPageSettings.Margins = new Margins (50' 50' 50' 50);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,DiagramPrintDialog,The following statement contains a magic number: printDocument.DefaultPageSettings.Margins = new Margins (50' 50' 50' 50);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,DiagramPrintDialog,The following statement contains a magic number: printDocument.DefaultPageSettings.Margins = new Margins (50' 50' 50' 50);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,DiagramPrintDialog,The following statement contains a magic number: printDocument.DefaultPageSettings.Margins = new Margins (50' 50' 50' 50);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,UpdateTexts,The following statement contains a magic number: cboStyle.Left = minLeft + 6;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,UpdateTexts,The following statement contains a magic number: numColumns.Left = minLeft + 6;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Dialogs,DiagramPrintDialog,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Dialogs\DiagramPrintDialog.cs,UpdateTexts,The following statement contains a magic number: chkSelectedOnly.Left = numRows.Right + 14;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,CalculateDrawingArea,The following statement contains a magic number: if (printing || !IsSelected) {  	float borderSize = (float)GetBorderWidth (style) / 2;  	area.Inflate (borderSize' borderSize);  	if (style.ShadowOffset.Width > borderSize)  		area.Width += style.ShadowOffset.Width - borderSize;  	if (style.ShadowOffset.Height > borderSize)  		area.Height += style.ShadowOffset.Height - borderSize;  	return area;  }  else {  	float borderSize = (float)GetBorderWidth (style) / 2;  	float selectionSize = SelectionMargin / zoom;  	float inflation = Math.Max (borderSize' selectionSize);  	area.Inflate (inflation' inflation);  	return area;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,CalculateDrawingArea,The following statement contains a magic number: if (printing || !IsSelected) {  	float borderSize = (float)GetBorderWidth (style) / 2;  	area.Inflate (borderSize' borderSize);  	if (style.ShadowOffset.Width > borderSize)  		area.Width += style.ShadowOffset.Width - borderSize;  	if (style.ShadowOffset.Height > borderSize)  		area.Height += style.ShadowOffset.Height - borderSize;  	return area;  }  else {  	float borderSize = (float)GetBorderWidth (style) / 2;  	float selectionSize = SelectionMargin / zoom;  	float inflation = Math.Max (borderSize' selectionSize);  	area.Inflate (inflation' inflation);  	return area;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawSelectionLines,The following statement contains a magic number: if (IsSelected) {  	if (zoom > UndreadableZoom) {  		// Draw selection border and resizing squares  		Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  		int borderOffset = SelectionMargin / 2;  		frame.Inflate (borderOffset' borderOffset);  		g.DrawRectangle (Diagram.SelectionPen' frame);  		DrawResizingSquares (g' frame);  	}  	else {  		// Draw only selection border  		const int BorderOffset = 2;  		Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  		frame.Inflate (BorderOffset' BorderOffset);  		g.DrawRectangle (Diagram.SelectionPen' frame);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawSelectionLines,The following statement contains a magic number: if (IsSelected) {  	if (zoom > UndreadableZoom) {  		// Draw selection border and resizing squares  		Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  		int borderOffset = SelectionMargin / 2;  		frame.Inflate (borderOffset' borderOffset);  		g.DrawRectangle (Diagram.SelectionPen' frame);  		DrawResizingSquares (g' frame);  	}  	else {  		// Draw only selection border  		const int BorderOffset = 2;  		Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  		frame.Inflate (BorderOffset' BorderOffset);  		g.DrawRectangle (Diagram.SelectionPen' frame);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawSelectionLines,The following statement contains a magic number: if (zoom > UndreadableZoom) {  	// Draw selection border and resizing squares  	Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  	int borderOffset = SelectionMargin / 2;  	frame.Inflate (borderOffset' borderOffset);  	g.DrawRectangle (Diagram.SelectionPen' frame);  	DrawResizingSquares (g' frame);  }  else {  	// Draw only selection border  	const int BorderOffset = 2;  	Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  	frame.Inflate (BorderOffset' BorderOffset);  	g.DrawRectangle (Diagram.SelectionPen' frame);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawSelectionLines,The following statement contains a magic number: if (zoom > UndreadableZoom) {  	// Draw selection border and resizing squares  	Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  	int borderOffset = SelectionMargin / 2;  	frame.Inflate (borderOffset' borderOffset);  	g.DrawRectangle (Diagram.SelectionPen' frame);  	DrawResizingSquares (g' frame);  }  else {  	// Draw only selection border  	const int BorderOffset = 2;  	Rectangle frame = TransformRelativeToAbsolute (BorderRectangle' zoom' offset);  	frame.Inflate (BorderOffset' BorderOffset);  	g.DrawRectangle (Diagram.SelectionPen' frame);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int row = 0; row < 3; row++) {  	for (int column = 0; column < 3; column++) {  		if (row != 1 || column != 1)// It's not the center point  		 {  			int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  			int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  			g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  			g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int row = 0; row < 3; row++) {  	for (int column = 0; column < 3; column++) {  		if (row != 1 || column != 1)// It's not the center point  		 {  			int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  			int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  			g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  			g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int row = 0; row < 3; row++) {  	for (int column = 0; column < 3; column++) {  		if (row != 1 || column != 1)// It's not the center point  		 {  			int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  			int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  			g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  			g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int row = 0; row < 3; row++) {  	for (int column = 0; column < 3; column++) {  		if (row != 1 || column != 1)// It's not the center point  		 {  			int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  			int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  			g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  			g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int row = 0; row < 3; row++) {  	for (int column = 0; column < 3; column++) {  		if (row != 1 || column != 1)// It's not the center point  		 {  			int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  			int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  			g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  			g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int row = 0; row < 3; row++) {  	for (int column = 0; column < 3; column++) {  		if (row != 1 || column != 1)// It's not the center point  		 {  			int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  			int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  			g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  			g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int column = 0; column < 3; column++) {  	if (row != 1 || column != 1)// It's not the center point  	 {  		int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  		int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  		g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  		g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int column = 0; column < 3; column++) {  	if (row != 1 || column != 1)// It's not the center point  	 {  		int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  		int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  		g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  		g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int column = 0; column < 3; column++) {  	if (row != 1 || column != 1)// It's not the center point  	 {  		int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  		int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  		g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  		g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int column = 0; column < 3; column++) {  	if (row != 1 || column != 1)// It's not the center point  	 {  		int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  		int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  		g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  		g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: for (int column = 0; column < 3; column++) {  	if (row != 1 || column != 1)// It's not the center point  	 {  		int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  		int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  		g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  		g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: if (row != 1 || column != 1)// It's not the center point   {  	int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  	int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  	g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  	g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: if (row != 1 || column != 1)// It's not the center point   {  	int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  	int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  	g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  	g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: if (row != 1 || column != 1)// It's not the center point   {  	int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  	int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  	g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  	g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,Shape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\Shape.cs,DrawResizingSquares,The following statement contains a magic number: if (row != 1 || column != 1)// It's not the center point   {  	int x = frame.X + (frame.Width * column / 2) - squareSize / 2;  	int y = frame.Y + (frame.Height * row / 2) - squareSize / 2;  	g.FillRectangle (Brushes.White' x' y' squareSize' squareSize);  	g.DrawRectangle (selectionSquarePen' x' y' squareSize' squareSize);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CommentShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CommentShape.cs,GetTextRectangle,The following statement contains a magic number: return new Rectangle (Left + PaddingSize' Top + PaddingSize' Width - 2 * PaddingSize' Height - 2 * PaddingSize);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CommentShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CommentShape.cs,GetTextRectangle,The following statement contains a magic number: return new Rectangle (Left + PaddingSize' Top + PaddingSize' Width - 2 * PaddingSize' Height - 2 * PaddingSize);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CommentShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CommentShape.cs,DrawText,The following statement contains a magic number: if (string.IsNullOrEmpty (Text) && onScreen) {  	textBrush.Color = Color.FromArgb (128' style.CommentTextColor);  	g.DrawString (Strings.DoubleClickToEdit' style.CommentFont' textBrush' textBounds' format);  }  else {  	textBrush.Color = style.CommentTextColor;  	g.DrawString (Text' style.CommentFont' textBrush' textBounds' format);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CommentShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CommentShape.cs,DrawText,The following statement contains a magic number: textBrush.Color = Color.FromArgb (128' style.CommentTextColor);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,CompositeTypeShape,The following statement contains a magic number: selectionPen.DashPattern = new float[] {  	2'  	4  };  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,CompositeTypeShape,The following statement contains a magic number: selectionPen.DashPattern = new float[] {  	2'  	4  };  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetMemberRectangle,The following statement contains a magic number: if (CompositeType.SupportsFields && memberIndex >= CompositeType.FieldCount) {  	record.Y += MarginSize * 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetMemberRectangle,The following statement contains a magic number: record.Y += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,SelectMember,The following statement contains a magic number: if (Contains (location)) {  	int index;  	int y = (int)location.Y;  	int top = Top + HeaderHeight + MarginSize;  	if (top <= y) {  		if (CompositeType.SupportsFields) {  			index = (y - top) / MemberHeight;  			if (index < CompositeType.FieldCount) {  				ActiveMemberIndex = index;  				return;  			}  			top += MarginSize * 2;  		}  		int operationTop = top + CompositeType.FieldCount * MemberHeight;  		if (operationTop <= y) {  			index = (y - top) / MemberHeight;  			if (index < CompositeType.MemberCount) {  				ActiveMemberIndex = index;  				return;  			}  		}  	}  	ActiveMemberIndex = -1;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,SelectMember,The following statement contains a magic number: if (top <= y) {  	if (CompositeType.SupportsFields) {  		index = (y - top) / MemberHeight;  		if (index < CompositeType.FieldCount) {  			ActiveMemberIndex = index;  			return;  		}  		top += MarginSize * 2;  	}  	int operationTop = top + CompositeType.FieldCount * MemberHeight;  	if (operationTop <= y) {  		index = (y - top) / MemberHeight;  		if (index < CompositeType.MemberCount) {  			ActiveMemberIndex = index;  			return;  		}  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,SelectMember,The following statement contains a magic number: if (CompositeType.SupportsFields) {  	index = (y - top) / MemberHeight;  	if (index < CompositeType.FieldCount) {  		ActiveMemberIndex = index;  		return;  	}  	top += MarginSize * 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,SelectMember,The following statement contains a magic number: top += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DeleteActiveMember,The following statement contains a magic number: if (ActiveMemberIndex >= 0) {  	int newIndex;  	int fieldCount = CompositeType.FieldCount;  	int memberCount = CompositeType.MemberCount;  	if (ActiveMemberIndex == fieldCount - 1 && fieldCount >= 2)// Last field  	 {  		newIndex = fieldCount - 2;  	}  	else if (ActiveMemberIndex == memberCount - 1)// Last member  	 {  		newIndex = ActiveMemberIndex - 1;  	}  	else {  		newIndex = ActiveMemberIndex;  	}  	CompositeType.RemoveMember (ActiveMember);  	ActiveMemberIndex = newIndex;  	OnActiveMemberChanged (EventArgs.Empty);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DeleteActiveMember,The following statement contains a magic number: if (ActiveMemberIndex >= 0) {  	int newIndex;  	int fieldCount = CompositeType.FieldCount;  	int memberCount = CompositeType.MemberCount;  	if (ActiveMemberIndex == fieldCount - 1 && fieldCount >= 2)// Last field  	 {  		newIndex = fieldCount - 2;  	}  	else if (ActiveMemberIndex == memberCount - 1)// Last member  	 {  		newIndex = ActiveMemberIndex - 1;  	}  	else {  		newIndex = ActiveMemberIndex;  	}  	CompositeType.RemoveMember (ActiveMember);  	ActiveMemberIndex = newIndex;  	OnActiveMemberChanged (EventArgs.Empty);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DeleteActiveMember,The following statement contains a magic number: if (ActiveMemberIndex == fieldCount - 1 && fieldCount >= 2)// Last field   {  	newIndex = fieldCount - 2;  }  else if (ActiveMemberIndex == memberCount - 1)// Last member   {  	newIndex = ActiveMemberIndex - 1;  }  else {  	newIndex = ActiveMemberIndex;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DeleteActiveMember,The following statement contains a magic number: if (ActiveMemberIndex == fieldCount - 1 && fieldCount >= 2)// Last field   {  	newIndex = fieldCount - 2;  }  else if (ActiveMemberIndex == memberCount - 1)// Last member   {  	newIndex = ActiveMemberIndex - 1;  }  else {  	newIndex = ActiveMemberIndex;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DeleteActiveMember,The following statement contains a magic number: newIndex = fieldCount - 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DrawSelectionLines,The following statement contains a magic number: if (IsActive && ActiveMember != null) {  	Rectangle record = GetMemberRectangle (ActiveMemberIndex);  	record = TransformRelativeToAbsolute (record' zoom' offset);  	record.Inflate (2' 0);  	g.DrawRectangle (Diagram.SelectionPen' record);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DrawSelectionLines,The following statement contains a magic number: record.Inflate (2' 0);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DrawContent,The following statement contains a magic number: if (CompositeType.SupportsFields) {  	DrawSeparatorLine (g' record.Top + MarginSize);  	record.Y += MarginSize * 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,DrawContent,The following statement contains a magic number: record.Y += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRequiredWidth,The following statement contains a magic number: requiredWidth += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRequiredHeight,The following statement contains a magic number: if (CompositeType.SupportsFields) {  	memberCount += CompositeType.FieldCount;  	spacingHeight += MarginSize * 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRequiredHeight,The following statement contains a magic number: spacingHeight += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRequiredHeight,The following statement contains a magic number: if (CompositeType.SupportsOperations) {  	memberCount += CompositeType.OperationCount;  	spacingHeight += MarginSize * 2;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRequiredHeight,The following statement contains a magic number: spacingHeight += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRowIndex,The following statement contains a magic number: if (CompositeType.SupportsFields && (height > CompositeType.FieldCount * MemberHeight))  	height -= MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,GetRowIndex,The following statement contains a magic number: height -= MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,DelegateShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\DelegateShape.cs,GetMemberRectangle,The following statement contains a magic number: return new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize + memberIndex * MemberHeight' Width - MarginSize * 2' MemberHeight);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,DelegateShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\DelegateShape.cs,DrawSelectionLines,The following statement contains a magic number: if (IsActive && ActiveParameter != null) {  	Rectangle record = GetMemberRectangle (ActiveMemberIndex);  	record = TransformRelativeToAbsolute (record' zoom' offset);  	record.Inflate (2' 0);  	g.DrawRectangle (Diagram.SelectionPen' record);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,DelegateShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\DelegateShape.cs,DrawSelectionLines,The following statement contains a magic number: record.Inflate (2' 0);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,DelegateShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\DelegateShape.cs,GetRequiredWidth,The following statement contains a magic number: requiredWidth += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,DelegateShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\DelegateShape.cs,GetRequiredHeight,The following statement contains a magic number: return (HeaderHeight + (MarginSize * 2) + (DelegateType.ArgumentCount * MemberHeight));  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,EnumShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\EnumShape.cs,GetMemberRectangle,The following statement contains a magic number: return new Rectangle (Left + MarginSize' Top + HeaderHeight + MarginSize + memberIndex * MemberHeight' Width - MarginSize * 2' MemberHeight);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,EnumShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\EnumShape.cs,DrawSelectionLines,The following statement contains a magic number: if (IsActive && ActiveValue != null) {  	Rectangle record = GetMemberRectangle (ActiveMemberIndex);  	record = TransformRelativeToAbsolute (record' zoom' offset);  	record.Inflate (2' 0);  	g.DrawRectangle (Diagram.SelectionPen' record);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,EnumShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\EnumShape.cs,DrawSelectionLines,The following statement contains a magic number: record.Inflate (2' 0);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,EnumShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\EnumShape.cs,GetRequiredWidth,The following statement contains a magic number: requiredWidth += MarginSize * 2;  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,EnumShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\EnumShape.cs,GetRequiredHeight,The following statement contains a magic number: return (HeaderHeight + (MarginSize * 2) + (EnumType.ValueCount * MemberHeight));  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawHeaderBackground,The following statement contains a magic number: if (GetGradientHeaderStyle (style) != GradientStyle.None) {  	LinearGradientMode gradientMode;  	switch (GetGradientHeaderStyle (style)) {  	case GradientStyle.Vertical:  		gradientMode = LinearGradientMode.Vertical;  		break;  	case GradientStyle.Diagonal:  		gradientMode = LinearGradientMode.ForwardDiagonal;  		break;  	case GradientStyle.Horizontal:  	default:  		gradientMode = LinearGradientMode.Horizontal;  		break;  	}  	Brush headerBrush = new LinearGradientBrush (headerRectangle' headerColor' backColor' gradientMode);  	g.FillRectangle (headerBrush' headerRectangle);  	headerBrush.Dispose ();  }  else {  	if (headerColor != backColor || headerColor.A < 255) {  		solidHeaderBrush.Color = GetHeaderColor (style);  		g.FillRectangle (solidHeaderBrush' headerRectangle);  	}  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawHeaderBackground,The following statement contains a magic number: if (headerColor != backColor || headerColor.A < 255) {  	solidHeaderBrush.Color = GetHeaderColor (style);  	g.FillRectangle (solidHeaderBrush' headerRectangle);  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawRoundedSurface,The following statement contains a magic number: borderPath.AddArc (Left' Top' diameter' diameter' 180' 90);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawRoundedSurface,The following statement contains a magic number: borderPath.AddArc (Left' Top' diameter' diameter' 180' 90);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawRoundedSurface,The following statement contains a magic number: borderPath.AddArc (Right - diameter' Top' diameter' diameter' 270' 90);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawRoundedSurface,The following statement contains a magic number: borderPath.AddArc (Right - diameter' Top' diameter' diameter' 270' 90);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawRoundedSurface,The following statement contains a magic number: borderPath.AddArc (Right - diameter' Bottom - diameter' diameter' diameter' 0' 90);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawRoundedSurface,The following statement contains a magic number: borderPath.AddArc (Left' Bottom - diameter' diameter' diameter' 90' 90);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,DrawRoundedSurface,The following statement contains a magic number: borderPath.AddArc (Left' Bottom - diameter' diameter' diameter' 90' 90);  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,GetHeaderTextTop,The following statement contains a magic number: switch (alignment) {  case ContentAlignment.BottomLeft:  case ContentAlignment.BottomCenter:  case ContentAlignment.BottomRight:  	top += textRegion.Height - textHeight;  	break;  case ContentAlignment.MiddleLeft:  case ContentAlignment.MiddleCenter:  case ContentAlignment.MiddleRight:  	top += (textRegion.Height - textHeight) / 2;  	break;  }  
Magic Number,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,GetHeaderTextTop,The following statement contains a magic number: top += (textRegion.Height - textHeight) / 2;  
Missing Default,NClass.DiagramEditor.ClassDiagram,ConnectionCreator,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\ConnectionCreator.cs,CreateConnection,The following switch statement is missing a default case: switch (type) {  case RelationshipType.Association:  	CreateAssociation ();  	break;  case RelationshipType.Composition:  	CreateComposition ();  	break;  case RelationshipType.Aggregation:  	CreateAggregation ();  	break;  case RelationshipType.Generalization:  	CreateGeneralization ();  	break;  case RelationshipType.Realization:  	CreateRealization ();  	break;  case RelationshipType.Dependency:  	CreateDependency ();  	break;  case RelationshipType.Nesting:  	CreateNesting ();  	break;  case RelationshipType.Comment:  	CreateCommentRelationship ();  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.A:  	CreateShape ();  	break;  case Keys.C:  	CreateShape (EntityType.Class);  	break;  case Keys.S:  	CreateShape (EntityType.Structure);  	break;  case Keys.I:  	CreateShape (EntityType.Interface);  	break;  case Keys.E:  	CreateShape (EntityType.Enum);  	break;  case Keys.D:  	CreateShape (EntityType.Delegate);  	break;  case Keys.N:  	CreateShape (EntityType.Comment);  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram,Diagram,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Diagram.cs,CreateShape,The following switch statement is missing a default case: switch (type) {  case EntityType.Class:  case EntityType.Delegate:  case EntityType.Enum:  case EntityType.Interface:  case EntityType.Structure:  	shapeOutline = TypeShape.GetOutline (Style.CurrentStyle);  	break;  case EntityType.Comment:  	shapeOutline = CommentShape.GetOutline (Style.CurrentStyle);  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following switch statement is missing a default case: switch (type) {  case MemberType.Field:  	group = 1;  	break;  case MemberType.Method:  	group = 4;  	break;  case MemberType.Constructor:  	group = 2;  	break;  case MemberType.Property:  	group = 7;  	break;  case MemberType.Event:  	group = 8;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram,Icons,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Icons.cs,GetImage,The following switch statement is missing a default case: switch (type) {  case EntityType.Class:  	group = 9;  	break;  case EntityType.Structure:  	group = 10;  	break;  case EntityType.Interface:  	group = 11;  	break;  case EntityType.Enum:  	group = 12;  	break;  case EntityType.Delegate:  	group = 13;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,RefreshNewMembers,The following switch statement is missing a default case: switch (NewMemberType) {  case MemberType.Field:  	if (shape.CompositeType.SupportsFields) {  		toolNewMember.Image = Properties.Resources.NewField;  		toolNewMember.Text = Strings.NewField;  		valid = true;  	}  	break;  case MemberType.Method:  	if (shape.CompositeType.SupportsMethods) {  		toolNewMember.Image = Properties.Resources.NewMethod;  		toolNewMember.Text = Strings.NewMethod;  		valid = true;  	}  	break;  case MemberType.Constructor:  	if (shape.CompositeType.SupportsConstuctors) {  		toolNewMember.Image = Properties.Resources.NewConstructor;  		toolNewMember.Text = Strings.NewConstructor;  		valid = true;  	}  	break;  case MemberType.Destructor:  	if (shape.CompositeType.SupportsDestructors) {  		toolNewMember.Image = Properties.Resources.NewDestructor;  		toolNewMember.Text = Strings.NewDestructor;  		valid = true;  	}  	break;  case MemberType.Property:  	if (shape.CompositeType.SupportsProperties) {  		toolNewMember.Image = Properties.Resources.NewProperty;  		toolNewMember.Text = Strings.NewProperty;  		valid = true;  	}  	break;  case MemberType.Event:  	if (shape.CompositeType.SupportsEvents) {  		toolNewMember.Image = Properties.Resources.NewEvent;  		toolNewMember.Text = Strings.NewEvent;  		valid = true;  	}  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,txtName_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	if (e.Modifiers == Keys.Control || e.Modifiers == Keys.Shift)  		OpenNewMemberDropDown ();  	else  		ValidateName ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	shape.HideEditor ();  	e.Handled = true;  	break;  case Keys.Down:  	shape.ActiveMemberIndex = 0;  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,txtName_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.A:  	AddNewMember ();  	break;  case Keys.F:  	AddNewMember (MemberType.Field);  	break;  case Keys.M:  	AddNewMember (MemberType.Method);  	break;  case Keys.C:  	AddNewMember (MemberType.Constructor);  	break;  case Keys.D:  	AddNewMember (MemberType.Destructor);  	break;  case Keys.P:  	AddNewMember (MemberType.Property);  	break;  case Keys.E:  	AddNewMember (MemberType.Event);  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,OpenNewMemberDropDown,The following switch statement is missing a default case: switch (NewMemberType) {  case MemberType.Field:  	toolNewField.Select ();  	break;  case MemberType.Method:  	toolNewMethod.Select ();  	break;  case MemberType.Constructor:  	toolNewConstructor.Select ();  	break;  case MemberType.Destructor:  	toolNewDestructor.Select ();  	break;  case MemberType.Property:  	toolNewProperty.Select ();  	break;  case MemberType.Event:  	toolNewEvent.Select ();  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,CompositeTypeEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\CompositeTypeEditor.cs,AddNewMember,The following switch statement is missing a default case: switch (type) {  case MemberType.Field:  	if (shape.CompositeType.SupportsFields) {  		shape.CompositeType.AddField ();  		shape.ActiveMemberIndex = shape.CompositeType.FieldCount - 1;  	}  	break;  case MemberType.Method:  	if (shape.CompositeType.SupportsMethods) {  		shape.CompositeType.AddMethod ();  		shape.ActiveMemberIndex = shape.CompositeType.MemberCount - 1;  	}  	break;  case MemberType.Constructor:  	if (shape.CompositeType.SupportsConstuctors) {  		shape.CompositeType.AddConstructor ();  		shape.ActiveMemberIndex = shape.CompositeType.MemberCount - 1;  	}  	break;  case MemberType.Destructor:  	if (shape.CompositeType.SupportsDestructors) {  		shape.CompositeType.AddDestructor ();  		shape.ActiveMemberIndex = shape.CompositeType.MemberCount - 1;  	}  	break;  case MemberType.Property:  	if (shape.CompositeType.SupportsProperties) {  		shape.CompositeType.AddProperty ();  		shape.ActiveMemberIndex = shape.CompositeType.MemberCount - 1;  	}  	break;  case MemberType.Event:  	if (shape.CompositeType.SupportsEvents) {  		shape.CompositeType.AddEvent ();  		shape.ActiveMemberIndex = shape.CompositeType.MemberCount - 1;  	}  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,DelegateEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\DelegateEditor.cs,txtNewValue_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	AddNewValue ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	shape.HideEditor ();  	e.Handled = true;  	break;  case Keys.Tab:  	txtReturnType.Focus ();  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,DelegateEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\DelegateEditor.cs,txtReturnType_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	ValidateName ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	shape.HideEditor ();  	e.Handled = true;  	break;  case Keys.Down:  	shape.ActiveMemberIndex = 0;  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,DelegateEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\DelegateEditor.cs,txtName_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	ValidateName ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	shape.HideEditor ();  	e.Handled = true;  	break;  case Keys.Down:  	shape.ActiveMemberIndex = 0;  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,EnumEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\EnumEditor.cs,txtNewValue_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	AddNewValue ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	shape.HideEditor ();  	e.Handled = true;  	break;  case Keys.Tab:  	txtName.Focus ();  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,EnumEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\EnumEditor.cs,txtName_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	ValidateName ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	shape.HideEditor ();  	e.Handled = true;  	break;  case Keys.Down:  	shape.ActiveMemberIndex = 0;  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,ItemEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\ItemEditor.cs,txtDeclaration_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	ValidateDeclarationLine ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	HideEditor ();  	e.Handled = true;  	break;  case Keys.Up:  	if (e.Shift || e.Control)  		MoveUp ();  	else  		SelectPrevious ();  	e.Handled = true;  	break;  case Keys.Down:  	if (e.Shift || e.Control)  		MoveDown ();  	else  		SelectNext ();  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,RefreshNewMembers,The following switch statement is missing a default case: switch (NewMemberType) {  case MemberType.Field:  	if (shape.CompositeType.SupportsFields) {  		toolNewMember.Image = Properties.Resources.NewField;  		toolNewMember.Text = Strings.NewField;  		valid = true;  	}  	break;  case MemberType.Method:  	if (shape.CompositeType.SupportsMethods) {  		toolNewMember.Image = Properties.Resources.NewMethod;  		toolNewMember.Text = Strings.NewMethod;  		valid = true;  	}  	break;  case MemberType.Constructor:  	if (shape.CompositeType.SupportsConstuctors) {  		toolNewMember.Image = Properties.Resources.NewConstructor;  		toolNewMember.Text = Strings.NewConstructor;  		valid = true;  	}  	break;  case MemberType.Destructor:  	if (shape.CompositeType.SupportsDestructors) {  		toolNewMember.Image = Properties.Resources.NewDestructor;  		toolNewMember.Text = Strings.NewDestructor;  		valid = true;  	}  	break;  case MemberType.Property:  	if (shape.CompositeType.SupportsProperties) {  		toolNewMember.Image = Properties.Resources.NewProperty;  		toolNewMember.Text = Strings.NewProperty;  		valid = true;  	}  	break;  case MemberType.Event:  	if (shape.CompositeType.SupportsEvents) {  		toolNewMember.Image = Properties.Resources.NewEvent;  		toolNewMember.Text = Strings.NewEvent;  		valid = true;  	}  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,txtDeclaration_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	if (e.Modifiers == Keys.Control || e.Modifiers == Keys.Shift)  		OpenNewMemberDropDown ();  	else  		ValidateDeclarationLine ();  	e.Handled = true;  	break;  case Keys.Escape:  	needValidation = false;  	shape.HideEditor ();  	e.Handled = true;  	break;  case Keys.Up:  	if (e.Shift || e.Control)  		MoveUp ();  	else  		SelectPrevious ();  	e.Handled = true;  	break;  case Keys.Down:  	if (e.Shift || e.Control)  		MoveDown ();  	else  		SelectNext ();  	e.Handled = true;  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,txtDeclaration_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.A:  	AddNewMember ();  	break;  case Keys.F:  	AddNewMember (MemberType.Field);  	break;  case Keys.M:  	AddNewMember (MemberType.Method);  	break;  case Keys.C:  	AddNewMember (MemberType.Constructor);  	break;  case Keys.D:  	AddNewMember (MemberType.Destructor);  	break;  case Keys.P:  	AddNewMember (MemberType.Property);  	break;  case Keys.E:  	AddNewMember (MemberType.Event);  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Editors,MemberEditor,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Editors\MemberEditor.cs,OpenNewMemberDropDown,The following switch statement is missing a default case: switch (NewMemberType) {  case MemberType.Field:  	toolNewField.Select ();  	break;  case MemberType.Method:  	toolNewMethod.Select ();  	break;  case MemberType.Constructor:  	toolNewConstructor.Select ();  	break;  case MemberType.Destructor:  	toolNewDestructor.Select ();  	break;  case MemberType.Property:  	toolNewProperty.Select ();  	break;  case MemberType.Event:  	toolNewEvent.Select ();  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Shapes,CompositeTypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\CompositeTypeShape.cs,InsertNewMember,The following switch statement is missing a default case: switch (type) {  case MemberType.Field:  	if (CompositeType.SupportsFields) {  		int index = Math.Min (ActiveMemberIndex + 1' fieldCount);  		bool changing = (index == fieldCount && ActiveMember.MemberType != MemberType.Field);  		CompositeType.InsertMember (MemberType.Field' index);  		ActiveMemberIndex = index;  	}  	break;  case MemberType.Method:  	if (CompositeType.SupportsMethods) {  		int index = Math.Max (ActiveMemberIndex + 1' fieldCount);  		CompositeType.InsertMember (MemberType.Method' index);  		ActiveMemberIndex = index;  	}  	break;  case MemberType.Constructor:  	if (CompositeType.SupportsConstuctors) {  		int index = Math.Max (ActiveMemberIndex + 1' fieldCount);  		CompositeType.InsertMember (MemberType.Constructor' index);  		ActiveMemberIndex = index;  	}  	break;  case MemberType.Destructor:  	if (CompositeType.SupportsDestructors) {  		int index = Math.Max (ActiveMemberIndex + 1' fieldCount);  		CompositeType.InsertMember (MemberType.Destructor' index);  		ActiveMemberIndex = index;  	}  	break;  case MemberType.Property:  	if (CompositeType.SupportsProperties) {  		int index = Math.Max (ActiveMemberIndex + 1' fieldCount);  		CompositeType.InsertMember (MemberType.Property' index);  		ActiveMemberIndex = index;  	}  	break;  case MemberType.Event:  	if (CompositeType.SupportsEvents) {  		int index = Math.Max (ActiveMemberIndex + 1' fieldCount);  		CompositeType.InsertMember (MemberType.Event' index);  		ActiveMemberIndex = index;  	}  	break;  }  
Missing Default,NClass.DiagramEditor.ClassDiagram.Shapes,TypeShape,C:\repos\SamiDidier_NClass\src\DiagramEditor\ClassDiagram\Shapes\TypeShape.cs,GetHeaderTextTop,The following switch statement is missing a default case: switch (alignment) {  case ContentAlignment.BottomLeft:  case ContentAlignment.BottomCenter:  case ContentAlignment.BottomRight:  	top += textRegion.Height - textHeight;  	break;  case ContentAlignment.MiddleLeft:  case ContentAlignment.MiddleCenter:  case ContentAlignment.MiddleRight:  	top += (textRegion.Height - textHeight) / 2;  	break;  }  
