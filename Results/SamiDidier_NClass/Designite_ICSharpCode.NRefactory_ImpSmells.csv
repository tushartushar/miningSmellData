Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.NRefactory.TypeSystem,ReflectionHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ReflectionHelper.cs,ParseReflectionName,The method has 109 lines of code.
Long Method,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The method has 322 lines of code.
Long Method,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The method has 322 lines of code.
Long Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateWriter,The method has 172 lines of code.
Long Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,Deserialize,The method has 126 lines of code.
Long Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateReader,The method has 203 lines of code.
Complex Method,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckTypes,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckNamespace,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,Check,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.Analysis,TypeGraph,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\TypeGraph.cs,TypeGraph,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.Analysis,SymbolCollector,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\SymbolCollector.cs,GetRelatedSymbols,Cyclomatic complexity of the method is 31
Complex Method,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,XmlDocumentationProvider,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,ReadMembersSection,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,LoadDocumentation,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,GetIdString,Cyclomatic complexity of the method is 22
Complex Method,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,AppendTypeName,Cyclomatic complexity of the method is 34
Complex Method,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,IsIDStringSpecialCharacter,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,ParseTypeName,Cyclomatic complexity of the method is 22
Complex Method,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,ReadTypeName,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.Documentation,IdStringMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringMemberReference.cs,CanMatch,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterType,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterType,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetString,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.PatternMatching,Pattern,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\PatternMatching\Pattern.cs,DoMatchCollection,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.TypeSystem,TypeSystemExtensions,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeSystemExtensions.cs,Import,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.TypeSystem,TypeSystemExtensions,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeSystemExtensions.cs,GetAttributes,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.NRefactory.TypeSystem,InheritanceHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\InheritanceHelper.cs,GetBaseMembers,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.TypeSystem,InheritanceHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\InheritanceHelper.cs,GetDerivedMember,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.NRefactory.TypeSystem,KnownTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\KnownTypeReference.cs,GetCSharpNameByTypeCode,Cyclomatic complexity of the method is 17
Complex Method,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,ParameterizedType,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem,ReflectionHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ReflectionHelper.cs,ToTypeReference,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem,ReflectionHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ReflectionHelper.cs,IsReflectionNameSpecialCharacter,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem,ReflectionHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ReflectionHelper.cs,ParseReflectionName,Cyclomatic complexity of the method is 35
Complex Method,ICSharpCode.NRefactory.TypeSystem,ReflectionHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ReflectionHelper.cs,SkipAheadAndReadAssemblyName,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadElemValue,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadNamedArg,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCustomAttributeFieldOrPropType,Cyclomatic complexity of the method is 19
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,CecilResolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\ResolvedAttributeBlob.cs,DecodeBlob,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractUnresolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractUnresolvedMember.cs,Resolve,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultMemberReference.cs,Resolve,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,GetMemberList,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,CalculateDirectBaseTypes,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,GetFilteredAccessors,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,GetInterfaceImplementation,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetNestedTypesImpl,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetMethodsImpl,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetMembersImpl,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,SimpleCompilation,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SimpleCompilation.cs,SimpleCompilation,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,SpecializedMethod,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateScanner,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateWriter,Cyclomatic complexity of the method is 44
Complex Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,WritePrimitiveValue,Cyclomatic complexity of the method is 27
Complex Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,Deserialize,Cyclomatic complexity of the method is 49
Complex Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateReader,Cyclomatic complexity of the method is 64
Complex Method,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,ReadPrimitiveValue,Cyclomatic complexity of the method is 27
Complex Method,ICSharpCode.NRefactory.Utils,CompositeFormatStringParser,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\CompositeFormatStringParser.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookup,Cyclomatic complexity of the method is 8
Long Parameter List,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckTypes,The method has 6 parameters.
Long Parameter List,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,ReadTypeName,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedConversion,The method has 6 parameters.
Long Parameter List,ICSharpCode.NRefactory.Semantics,ForEachResolveResult,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\ForEachResolveResult.cs,ForEachResolveResult,The method has 8 parameters.
Long Parameter List,ICSharpCode.NRefactory.Semantics,InvocationResolveResult,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\InvocationResolveResult.cs,InvocationResolveResult,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.Semantics,MemberResolveResult,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\MemberResolveResult.cs,MemberResolveResult,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.Semantics,MemberResolveResult,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\MemberResolveResult.cs,MemberResolveResult,The method has 6 parameters.
Long Parameter List,ICSharpCode.NRefactory.Semantics,OperatorResolveResult,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\OperatorResolveResult.cs,OperatorResolveResult,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,DomRegion,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem,KnownTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\KnownTypeReference.cs,KnownTypeReference,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultVariable,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultVariable.cs,DefaultVariable,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,VariableReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultVariable.cs,VariableReference,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractTypeParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractResolvedTypeParameter.cs,AbstractTypeParameter,The method has 6 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractTypeParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractResolvedTypeParameter.cs,AbstractTypeParameter,The method has 7 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractUnresolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractUnresolvedMember.cs,Resolve,The method has 7 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultMemberReference.cs,DefaultMemberReference,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultParameter.cs,DefaultParameter,The method has 10 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,ParameterReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultParameter.cs,ParameterReference,The method has 8 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultTypeParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeParameter.cs,DefaultTypeParameter,The method has 10 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultTypeParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeParameter.cs,DefaultTypeParameter,The method has 11 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetNestedTypes,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetMethods,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetConstructorsOrAccessorsImpl,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateWriter,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateReader,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.Utils,CompositeFormatStringParser,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\CompositeFormatStringParser.cs,GetAndCheckNumber,The method has 5 parameters.
Long Identifier,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedImplicitConversion,The length of the parameter conversionBeforeUserDefinedOperator is 35.
Long Identifier,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedImplicitConversion,The length of the parameter conversionAfterUserDefinedOperator is 34.
Long Identifier,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedExplicitConversion,The length of the parameter conversionBeforeUserDefinedOperator is 35.
Long Identifier,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedExplicitConversion,The length of the parameter conversionAfterUserDefinedOperator is 34.
Long Identifier,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedConversion,The length of the parameter conversionBeforeUserDefinedOperator is 35.
Long Identifier,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedConversion,The length of the parameter conversionAfterUserDefinedOperator is 34.
Long Identifier,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractUnresolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractUnresolvedMember.cs,Resolve,The length of the parameter explicitInterfaceTypeReference is 30.
Long Identifier,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,GetMemberList,The length of the parameter addDefaultConstructorIfRequired is 31.
Long Identifier,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultTypeParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeParameter.cs,DefaultTypeParameter,The length of the parameter hasDefaultConstructorConstraint is 31.
Long Identifier,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultTypeParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeParameter.cs,DefaultTypeParameter,The length of the parameter hasDefaultConstructorConstraint is 31.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckContstraints,The length of the statement  "	if (p1.DirectBaseTypes.Count () != p2.DirectBaseTypes.Count () || p1.HasReferenceTypeConstraint != p2.HasReferenceTypeConstraint || p1.HasValueTypeConstraint != p2.HasValueTypeConstraint || p1.HasDefaultConstructorConstraint != p2.HasDefaultConstructorConstraint) { " is 265.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckContstraints,The length of the statement  "		OnIncompatibilityFound (new AbiEventArgs (string.Format (TranslateString ("Type parameter constraints of type {0} have changed.")' otype.FullName))); " is 149.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckContstraints,The length of the statement  "	if (p1.DirectBaseTypes.Count () != p2.DirectBaseTypes.Count () || p1.HasReferenceTypeConstraint != p2.HasReferenceTypeConstraint || p1.HasValueTypeConstraint != p2.HasValueTypeConstraint || p1.HasDefaultConstructorConstraint != p2.HasDefaultConstructorConstraint) { " is 265.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckContstraints,The length of the statement  "		OnIncompatibilityFound (new AbiEventArgs (string.Format (TranslateString ("Type parameter constraints of method {0} have changed.")' omethod.FullName))); " is 153.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckTypes,The length of the statement  "		var newMember = nType.GetMembers (m => member.UnresolvedMember.Name == m.Name && m.IsPublic == member.IsPublic && m.IsProtected == member.IsProtected); " is 151.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckTypes,The length of the statement  "			OnIncompatibilityFound (new AbiEventArgs (string.Format (TranslateString ("Interafce {0} has changed.")' oType.FullName))); " is 123.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckNamespace,The length of the statement  "			OnIncompatibilityFound (new AbiEventArgs (string.Format (TranslateString ("Type definition {0} is missing.")' type.FullName))); " is 127.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,Check,The length of the statement  "				OnIncompatibilityFound (new AbiEventArgs (string.Format (TranslateString ("Namespace {0} is missing.")' child.FullName))); " is 122.
Long Statement,ICSharpCode.NRefactory.Analysis,SymbolCollector,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\SymbolCollector.cs,CollectTypeRelatedMembers,The length of the statement  "	foreach (var c in type.GetDefinition ().GetMembers (m => !m.IsSynthetic && (m.SymbolKind == SymbolKind.Constructor || m.SymbolKind == SymbolKind.Destructor)' GetMemberOptions.IgnoreInheritedMembers)) { " is 201.
Long Statement,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,GetIdString,The length of the statement  "	if (member.IsExplicitInterfaceImplementation && member.Name.IndexOf ('.') < 0 && member.ImplementedInterfaceMembers.Count == 1) { " is 129.
Long Statement,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,ReadTypeName,The length of the statement  "	while (pos < typeName.Length && !IsIDStringSpecialCharacter (typeName [pos]) && (allowDottedName || typeName [pos] != '.')) " is 123.
Long Statement,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,IsNewLine,The length of the statement  "	return ch == NewLine.CR || ch == NewLine.LF || ch == NewLine.NEL || ch == NewLine.VT || ch == NewLine.FF || ch == NewLine.LS || ch == NewLine.PS; " is 145.
Long Statement,ICSharpCode.NRefactory.Semantics,ByReferenceResolveResult,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\ByReferenceResolveResult.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' "[{0} {1} {2}]"' GetType ().Name' IsOut ? "out" : "ref"' ElementType); " is 122.
Long Statement,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedImplicitConversion,The length of the statement  "	return new UserDefinedConv (true' operatorMethod' conversionBeforeUserDefinedOperator' conversionAfterUserDefinedOperator' isLifted' false); " is 140.
Long Statement,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedExplicitConversion,The length of the statement  "	return new UserDefinedConv (false' operatorMethod' conversionBeforeUserDefinedOperator' conversionAfterUserDefinedOperator' isLifted' false); " is 141.
Long Statement,ICSharpCode.NRefactory.Semantics,Conversion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\Conversion.cs,UserDefinedConversion,The length of the statement  "	return new UserDefinedConv (isImplicit' operatorMethod' conversionBeforeUserDefinedOperator' conversionAfterUserDefinedOperator' isLifted' isAmbiguous); " is 152.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ComHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ComHelper.cs,IsComImport,The length of the statement  "	return typeDefinition != null && typeDefinition.Kind == TypeKind.Interface && typeDefinition.Attributes.Any (a => IsComAttribute (a' "ComImportAttribute")); " is 156.
Long Statement,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,IsInside,The length of the statement  "	return line >= BeginLine && (line <= EndLine || EndLine == -1) && (line != BeginLine || column >= BeginColumn) && (line != EndLine || column <= EndColumn); " is 155.
Long Statement,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' "[DomRegion FileName={0}' Begin=({1}' {2})' End=({3}' {4})]"' fileName' beginLine' beginColumn' endLine' endColumn); " is 168.
Long Statement,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,Equals,The length of the statement  "	return beginLine == other.beginLine && beginColumn == other.beginColumn && endLine == other.endLine && endColumn == other.endColumn && fileName == other.fileName; " is 162.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,Compose,The length of the statement  "	var classTypeArguments = f.classTypeArguments != null ? GetComposedTypeArguments (f.classTypeArguments' g) : g.classTypeArguments; " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,Compose,The length of the statement  "	var methodTypeArguments = f.methodTypeArguments != null ? GetComposedTypeArguments (f.methodTypeArguments' g) : g.methodTypeArguments; " is 134.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,Equals,The length of the statement  "	return TypeListEquals (classTypeArguments' other.classTypeArguments) && TypeListEquals (methodTypeArguments' other.methodTypeArguments); " is 136.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemExtensions,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeSystemExtensions.cs,CreateResolvedAttributes,The length of the statement  "		return new ProjectedList<ITypeResolveContext' IUnresolvedAttribute' IAttribute> (context' attributes' (c' a) => a.CreateResolvedAttribute (c)); " is 143.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemExtensions,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeSystemExtensions.cs,CreateResolvedTypeParameters,The length of the statement  "		return new ProjectedList<ITypeResolveContext' IUnresolvedTypeParameter' ITypeParameter> (context' typeParameters' (c' a) => a.CreateResolvedTypeParameter (c)); " is 159.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemExtensions,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeSystemExtensions.cs,CreateResolvedParameters,The length of the statement  "		return new ProjectedList<ITypeResolveContext' IUnresolvedParameter' IParameter> (context' parameters' (c' a) => a.CreateResolvedParameter (c)); " is 143.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemExtensions,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeSystemExtensions.cs,Resolve,The length of the statement  "		return new ProjectedList<ITypeResolveContext' ITypeReference' IType> (context' typeReferences' (c' t) => t.Resolve (c)); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemExtensions,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeSystemExtensions.cs,Resolve,The length of the statement  "		return new ProjectedList<ITypeResolveContext' IConstantValue' ResolveResult> (context' constantValues' (c' t) => t.Resolve (c)); " is 128.
Long Statement,ICSharpCode.NRefactory.TypeSystem,FullTypeNameComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\FullTypeName.cs,Equals,The length of the statement  "	if (topX.TypeParameterCount == topY.TypeParameterCount && NameComparer.Equals (topX.Name' topY.Name) && NameComparer.Equals (topX.Namespace' topY.Namespace)) { " is 159.
Long Statement,ICSharpCode.NRefactory.TypeSystem,InheritanceHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\InheritanceHelper.cs,GetBaseMembers,The length of the statement  "			baseMembers = baseType.GetAccessors (m => m.Name == member.Name && !m.IsExplicitInterfaceImplementation' GetMemberOptions.IgnoreInheritedMembers); " is 146.
Long Statement,ICSharpCode.NRefactory.TypeSystem,InheritanceHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\InheritanceHelper.cs,GetBaseMembers,The length of the statement  "			baseMembers = baseType.GetMembers (m => m.Name == member.Name && !m.IsExplicitInterfaceImplementation' GetMemberOptions.IgnoreInheritedMembers); " is 144.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,ToTypeReference,The length of the statement  "	return new ParameterizedTypeReference (genericType.ToTypeReference ()' typeArguments.Select (t => t.ToTypeReference ())); " is 121.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TopLevelTypeName,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TopLevelTypeName.cs,Equals,The length of the statement  "	return this.namespaceName == other.namespaceName && this.name == other.name && this.typeParameterCount == other.typeParameterCount; " is 131.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TopLevelTypeName,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TopLevelTypeName.cs,GetHashCode,The length of the statement  "	return (name != null ? name.GetHashCode () : 0) ^ (namespaceName != null ? namespaceName.GetHashCode () : 0) ^ typeParameterCount; " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TopLevelTypeNameComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TopLevelTypeName.cs,Equals,The length of the statement  "	return x.TypeParameterCount == y.TypeParameterCount && NameComparer.Equals (x.Name' y.Name) && NameComparer.Equals (x.Namespace' y.Namespace); " is 142.
Long Statement,ICSharpCode.NRefactory.TypeSystem,SpecialType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\SpecialType.cs,Equals,The length of the statement  "	// However' an unknown type with additional information is not considered to be equal to the SpecialType with TypeKind.Unknown. " is 127.
Long Statement,ICSharpCode.NRefactory.TypeSystem,AssemblyLoader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AssemblyLoader.cs,Create,The length of the statement  "		return (AssemblyLoader)Assembly.Load ("ICSharpCode.NRefactory.Cecil").CreateInstance ("ICSharpCode.NRefactory.TypeSystem.CecilLoader"); " is 135.
Long Statement,ICSharpCode.NRefactory.TypeSystem,AssemblyLoader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AssemblyLoader.cs,Create,The length of the statement  "		return (AssemblyLoader)Assembly.Load ("ICSharpCode.NRefactory.IKVM").CreateInstance ("ICSharpCode.NRefactory.TypeSystem.IkvmLoader"); " is 133.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The length of the statement  "		uint value = (uint)(buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24)); " is 134.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadSerString,The length of the statement  "	string @string = System.Text.Encoding.UTF8.GetString (buffer' position' buffer [position + length - 1] == 0 ? length - 1 : length); " is 131.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,UnresolvedAttributeBlob,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\UnresolvedAttributeBlob.cs,EqualsForInterning,The length of the statement  "	return o != null && attributeType == o.attributeType && ctorParameterTypes == o.ctorParameterTypes && BlobReader.BlobEquals (blob' o.blob); " is 139.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractResolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractResolvedMember.cs,FindImplementedInterfaceMembers,The length of the statement  "	else if (unresolved.IsStatic || !unresolved.IsPublic || DeclaringTypeDefinition == null || DeclaringTypeDefinition.Kind == TypeKind.Interface) { " is 144.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractResolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractResolvedMember.cs,FindImplementedInterfaceMembers,The length of the statement  "		var result = InheritanceHelper.GetBaseMembers (this' true).Where (m => m.DeclaringTypeDefinition != null && m.DeclaringTypeDefinition.Kind == TypeKind.Interface).ToArray (); " is 173.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractResolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractResolvedMember.cs,FindImplementedInterfaceMembers,The length of the statement  "		result = result.Where (item => !otherMembers.Any (m => m.IsExplicitInterfaceImplementation && m.ImplementedInterfaceMembers.Contains (item))).ToArray (); " is 153.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractResolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractResolvedMember.cs,ToReference,The length of the statement  "		return new ExplicitInterfaceImplementationMemberReference (declTypeRef' ImplementedInterfaceMembers [0].ToReference ()); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractType.cs,GetMembers,The length of the statement  "	return members.Concat (GetProperties (filter' options)).Concat (GetFields (filter' options)).Concat (GetEvents (filter' options)); " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractUnresolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractUnresolvedMember.cs,Resolve,The length of the statement  "	return Resolve (ExtendContextForType (context' this.DeclaringTypeDefinition)' this.SymbolKind' this.Name' interfaceTypeReference); " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultMemberReference.cs,Resolve,The length of the statement  "		members = type.GetAccessors (m => m.Name == name && !m.IsExplicitInterfaceImplementation' GetMemberOptions.IgnoreInheritedMembers); " is 131.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultMemberReference.cs,Resolve,The length of the statement  "		members = type.GetMethods (m => m.Name == name && m.SymbolKind == SymbolKind.Method && m.TypeParameters.Count == typeParameterCount && !m.IsExplicitInterfaceImplementation' GetMemberOptions.IgnoreInheritedMembers); " is 214.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultMemberReference.cs,Resolve,The length of the statement  "		members = type.GetMembers (m => m.Name == name && m.SymbolKind == symbolKind && !m.IsExplicitInterfaceImplementation' GetMemberOptions.IgnoreInheritedMembers); " is 159.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultMemberReference.cs,EqualsForInterning,The length of the statement  "	return o != null && symbolKind == o.symbolKind && typeReference == o.typeReference && name == o.name && parameterTypes == o.parameterTypes; " is 139.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultParameter.cs,ToReference,The length of the statement  "		return new ParameterReference (type.ToTypeReference ()' name' region' isRef' isOut' isParams' isOptional' defaultValue); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,ParameterReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultParameter.cs,Resolve,The length of the statement  "	return new DefaultParameter (type.Resolve (context)' name' region: region' isRef: isRef' isOut: isOut' isParams: isParams' isOptional: isOptional' defaultValue: defaultValue); " is 175.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedMethod.cs,ToReference,The length of the statement  "		return new ExplicitInterfaceImplementationMemberReference (declTypeRef' ImplementedInterfaceMembers [0].ToReference ()); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedMethod.cs,ToReference,The length of the statement  "		return new DefaultMemberReference (this.SymbolKind' declTypeRef' this.Name' this.TypeParameters.Count' this.Parameters.Select (p => p.Type.ToTypeReference ()).ToList ()); " is 170.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedMethod.cs,GetDummyConstructor,The length of the statement  "	return (IMethod)compilation.CacheManager.GetOrAddShared (dummyConstructor' _ => dummyConstructor.CreateResolved (compilation.TypeResolveContext)); " is 146.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedProperty,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedProperty.cs,ToReference,The length of the statement  "		return new ExplicitInterfaceImplementationMemberReference (declTypeRef' ImplementedInterfaceMembers [0].ToReference ()); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedProperty,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedProperty.cs,ToReference,The length of the statement  "		return new DefaultMemberReference (this.SymbolKind' declTypeRef' this.Name' 0' this.Parameters.Select (p => p.Type.ToTypeReference ()).ToList ()); " is 146.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,GetMemberList,The length of the statement  "		if (kind == TypeKind.Class && !this.IsStatic && !unresolvedMembers.Any (m => m.SymbolKind == SymbolKind.Constructor && !m.IsStatic) || kind == TypeKind.Enum || kind == TypeKind.Struct) { " is 186.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,ToTypeReference,The length of the statement  "		return new NestedTypeReference (declTypeDef.ToTypeReference ()' this.Name' this.TypeParameterCount - declTypeDef.TypeParameterCount); " is 133.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,AddNamedFieldArgument,The length of the statement  "	this.NamedArguments.Add (new KeyValuePair<IMemberReference' IConstantValue> (new DefaultMemberReference (SymbolKind.Field' attributeType' fieldName)' value)); " is 158.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,AddNamedPropertyArgument,The length of the statement  "	this.NamedArguments.Add (new KeyValuePair<IMemberReference' IConstantValue> (new DefaultMemberReference (SymbolKind.Property' attributeType' propertyName)' value)); " is 164.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,EqualsForInterning,The length of the statement  "	return o != null && attributeType == o.attributeType && ListEquals (constructorParameterTypes' o.constructorParameterTypes) && ListEquals (positionalArguments' o.positionalArguments) && ListEquals (namedArguments ?? EmptyList<KeyValuePair<IMemberReference' IConstantValue>>.Instance' o.namedArguments ?? EmptyList<KeyValuePair<IMemberReference' IConstantValue>>.Instance); " is 372.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedMethod.cs,Resolve,The length of the statement  "	return Resolve (ExtendContextForType (context' this.DeclaringTypeDefinition)' this.SymbolKind' this.Name' interfaceTypeReference' this.TypeParameters.Select (tp => tp.Name).ToList ()' this.Parameters.Select (p => p.Type).ToList ()); " is 232.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,EqualsForInterning,The length of the statement  "	return p != null && type == p.type && name == p.name && defaultValue == p.defaultValue && region == p.region && (flags & ~1) == (p.flags & ~1) && ListEquals (attributes' p.attributes); " is 184.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,ListEquals,The length of the statement  "	return (list1 ?? EmptyList<IUnresolvedAttribute>.Instance).SequenceEqual (list2 ?? EmptyList<IUnresolvedAttribute>.Instance); " is 125.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,CreateResolvedParameter,The length of the statement  "		return new DefaultParameter (type.Resolve (context)' name' owner' region' resolvedAttributes' IsRef' IsOut' IsParams' isOptional); " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedProperty,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedProperty.cs,Resolve,The length of the statement  "	return Resolve (ExtendContextForType (context' this.DeclaringTypeDefinition)' this.SymbolKind' this.Name' interfaceTypeReference' parameterTypeReferences: this.Parameters.Select (p => p.Type).ToList ()); " is 203.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedTypeDefinition.cs,Resolve,The length of the statement  "	return context.CurrentAssembly.GetTypeDefinition (this.FullTypeName) ?? (IType)new UnknownType (this.Namespace' this.Name' this.TypeParameters.Count); " is 150.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedTypeParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedTypeParameter.cs,CreateResolvedTypeParameter,The length of the statement  "	return new DefaultTypeParameter (owner' index' name' variance' this.Attributes.CreateResolvedAttributes (context)' this.Region' this.HasValueTypeConstraint' this.HasReferenceTypeConstraint' this.HasDefaultConstructorConstraint' this.Constraints.Resolve (context)); " is 264.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,ExplicitInterfaceImplementationMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\ExplicitInterfaceImplementationMemberReference.cs,Resolve,The length of the statement  "	IMember interfaceMember = interfaceMemberReference.Resolve (context.WithCurrentTypeDefinition (declaringType.GetDefinition ())); " is 128.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,ExplicitInterfaceImplementationMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\ExplicitInterfaceImplementationMemberReference.cs,Resolve,The length of the statement  "		members = declaringType.GetAccessors (m => m.IsExplicitInterfaceImplementation' GetMemberOptions.IgnoreInheritedMembers); " is 121.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,ExplicitInterfaceImplementationMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\ExplicitInterfaceImplementationMemberReference.cs,Resolve,The length of the statement  "		members = declaringType.GetMembers (m => m.SymbolKind == interfaceMember.SymbolKind && m.IsExplicitInterfaceImplementation' GetMemberOptions.IgnoreInheritedMembers); " is 165.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,ExplicitInterfaceImplementationMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\ExplicitInterfaceImplementationMemberReference.cs,Resolve,The length of the statement  "	return members.FirstOrDefault (m => m.ImplementedInterfaceMembers.Count == 1 && interfaceMember.Equals (m.ImplementedInterfaceMembers [0])); " is 140.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetNestedTypesImpl,The length of the statement  "		if (totalTypeParameterCount == 0 || (options & GetMemberOptions.ReturnMemberDefinitions) == GetMemberOptions.ReturnMemberDefinitions) { " is 135.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetMethodsImpl,The length of the statement  "	if ((options & GetMemberOptions.ReturnMemberDefinitions) == 0 && (pt != null || (methodTypeArguments != null && methodTypeArguments.Count > 0))) { " is 146.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetAccessorsImpl,The length of the statement  "	return GetConstructorsOrAccessorsImpl (baseType' baseType.GetAccessors (filter' options | declaredMembers)' filter' options); " is 125.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetConstructorsImpl,The length of the statement  "	return GetConstructorsOrAccessorsImpl (baseType' baseType.GetConstructors (filter' options | declaredMembers)' filter' options); " is 128.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,MergedNamespace,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\MergedNamespace.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' "[MergedNamespace {0}{1} (from {2} assemblies)]"' externAlias != null ? externAlias + "::" : null' this.FullName' this.namespaces.Length); " is 190.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,NestedTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\NestedTypeReference.cs,EqualsForInterning,The length of the statement  "	return o != null && declaringTypeRef == o.declaringTypeRef && name == o.name && additionalTypeParameterCount == o.additionalTypeParameterCount; " is 143.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMember.cs,ToReference,The length of the statement  "	return new SpecializingMemberReference (baseMember.ToReference ()' ToTypeReference (substitution.ClassTypeArguments)' null); " is 124.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedParameterizedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMember.cs,CreateParameters,The length of the statement  "			parameters [i] = new DefaultParameter (newType' p.Name' this' p.Region' p.Attributes' p.IsRef' p.IsOut' p.IsParams' p.IsOptional' p.ConstantValue); " is 147.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,ToReference,The length of the statement  "	//   If this member is specialized using open generic types' the resulting member reference will need to be looked up in an appropriate generic context. " is 152.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,ToReference,The length of the statement  "		return new SpecializingMemberReference (baseMember.ToReference ()' ToTypeReference (base.Substitution.ClassTypeArguments)' ToTypeReference (base.Substitution.MethodTypeArguments)); " is 180.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,Equals,The length of the statement  "	return this.baseMember.Equals (other.baseMember) && this.substitutionWithoutSpecializedTypeParameters.Equals (other.substitutionWithoutSpecializedTypeParameters); " is 162.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,GetHashCode,The length of the statement  "		return 1000000013 * baseMember.GetHashCode () + 1000000009 * substitutionWithoutSpecializedTypeParameters.GetHashCode (); " is 121.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,Specialize,The length of the statement  "	return methodDefinition.Specialize (TypeParameterSubstitution.Compose (newSubstitution' substitutionWithoutSpecializedTypeParameters)); " is 135.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,Specialize,The length of the statement  "	return methodDefinition.Specialize (TypeParameterSubstitution.Compose (newSubstitution' substitutionWithoutSpecializedTypeParameters)); " is 135.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializingMemberReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializingMemberReference.cs,Resolve,The length of the statement  "	return memberDefinition.Specialize (new TypeParameterSubstitution (classTypeArgumentReferences != null ? classTypeArgumentReferences.Resolve (context) : null' methodTypeArgumentReferences != null ? methodTypeArgumentReferences.Resolve (context) : null)); " is 254.
Long Statement,ICSharpCode.NRefactory.TypeSystem.Implementation,TypeParameterReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\TypeParameterReference.cs,Create,The length of the statement  "		TypeParameterReference[] arr = (ownerType == SymbolKind.TypeDefinition) ? classTypeParameterReferences : methodTypeParameterReferences; " is 135.
Long Statement,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,GetSerializableFields,The length of the statement  "		FieldInfo[] declFields = baseType.GetFields (BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.DeclaredOnly); " is 143.
Long Statement,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateWriter,The length of the statement  "	DynamicMethod dynamicMethod = new DynamicMethod ((isArray ? "WriteArray_" : "Write_") + type.Name' typeof(void)' new[] { " is 120.
Long Statement,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateReader,The length of the statement  "	DynamicMethod dynamicMethod = new DynamicMethod ((isArray ? "ReadArray_" : "Read_") + type.Name' MethodAttributes.Public | MethodAttributes.Static' CallingConventions.Standard' typeof(void)' new[] { " is 198.
Long Statement,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateCustomDeserializationAction,The length of the statement  "	ConstructorInfo ctor = type.GetConstructor (BindingFlags.DeclaredOnly | BindingFlags.ExactBinding | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public' null' new Type[] { " is 188.
Long Statement,ICSharpCode.NRefactory.Utils,FastSerializer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\FastSerializer.cs,CreateCustomDeserializationAction,The length of the statement  "	DynamicMethod dynamicMethod = new DynamicMethod ("CallCtor_" + type.Name' MethodAttributes.Public | MethodAttributes.Static' CallingConventions.Standard' typeof(void)' new[] { " is 175.
Long Statement,ICSharpCode.NRefactory.Utils,CompositeFormatStringParser,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\CompositeFormatStringParser.cs,GetAndCheckNumber,The length of the statement  "		AddInvalidNumberFormatError (numberFieldStart' format.Substring (numberFieldStart' index - numberFieldStart)' suggestedNumber); " is 127.
Long Statement,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,FieldsEquals,The length of the statement  "	return Index == other.Index && Alignment == other.Alignment && FormatString == other.FormatString && StartLocation == other.StartLocation && EndLocation == other.EndLocation; " is 174.
Long Statement,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,ToString,The length of the statement  "	return string.Format ("[FormatItem: Index={0}' Alignment={1}' FormatString={2}' StartLocation={3}' EndLocation={4}]"' Index' Alignment' FormatString' StartLocation' EndLocation); " is 178.
Long Statement,ICSharpCode.NRefactory.Utils,DefaultFormatStringError,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\IFormatStringError.cs,ToString,The length of the statement  "	return string.Format ("[DefaultFormatStringError: StartLocation={0}' EndLocation={1}' Message={2}' OriginalText={3}' SuggestedReplacementText={4}]"' StartLocation' EndLocation' Message' OriginalText' SuggestedReplacementText); " is 226.
Long Statement,ICSharpCode.NRefactory.Completion,CompletionExtensionMethods,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\CompletionExtensionMethods.cs,GetEditorBrowsableState,The length of the statement  "	var browsableState = entity.Attributes.FirstOrDefault (attr => attr.AttributeType.Name == "EditorBrowsableAttribute" && attr.AttributeType.Namespace == "System.ComponentModel"); " is 177.
Long Statement,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetExtensionMethodLookups,The length of the statement  "	return GetLookup (resolveResult.MemberName' extLookupTable' headerSize + assemblyListTable.Length * 4 + typeLookupTable.Length * 8); " is 132.
Long Statement,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookup,The length of the statement  "	using (var reader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)' Encoding.UTF8)) { " is 125.
Long Statement,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookup,The length of the statement  "				throw new InvalidDataException ("Assembly lookup was " + assembly + " but only " + assemblyListTable.Length + " are known."); " is 125.
Complex Conditional,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckContstraints,The conditional expression  "p1.DirectBaseTypes.Count () != p2.DirectBaseTypes.Count () || p1.HasReferenceTypeConstraint != p2.HasReferenceTypeConstraint || p1.HasValueTypeConstraint != p2.HasValueTypeConstraint || p1.HasDefaultConstructorConstraint != p2.HasDefaultConstructorConstraint"  is complex.
Complex Conditional,ICSharpCode.NRefactory.Analysis,AbiComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Analysis\AbiComparer.cs,CheckContstraints,The conditional expression  "p1.DirectBaseTypes.Count () != p2.DirectBaseTypes.Count () || p1.HasReferenceTypeConstraint != p2.HasReferenceTypeConstraint || p1.HasValueTypeConstraint != p2.HasValueTypeConstraint || p1.HasDefaultConstructorConstraint != p2.HasDefaultConstructorConstraint"  is complex.
Complex Conditional,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The conditional expression  "curChar == LF || curChar == NEL || curChar == VT || curChar == FF || curChar == LS || curChar == PS"  is complex.
Complex Conditional,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The conditional expression  "curChar == LF || curChar == NEL || curChar == VT || curChar == FF || curChar == LS || curChar == PS"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,SignatureComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,Equals,The conditional expression  "x == null || y == null || x.SymbolKind != y.SymbolKind || !nameComparer.Equals (x.Name' y.Name)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem.Implementation,AbstractResolvedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\AbstractResolvedMember.cs,FindImplementedInterfaceMembers,The conditional expression  "unresolved.IsStatic || !unresolved.IsPublic || DeclaringTypeDefinition == null || DeclaringTypeDefinition.Kind == TypeKind.Interface"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem.Implementation,BaseTypeCollector,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BaseTypeCollector.cs,CollectBaseTypes,The conditional expression  "SkipImplementedInterfaces && def != null && def.Kind != TypeKind.Interface && def.Kind != TypeKind.TypeParameter"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,GetMemberList,The conditional expression  "kind == TypeKind.Class && !this.IsStatic && !unresolvedMembers.Any (m => m.SymbolKind == SymbolKind.Constructor && !m.IsStatic) || kind == TypeKind.Enum || kind == TypeKind.Struct"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultResolvedTypeDefinition,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultResolvedTypeDefinition.cs,CalculateDirectBaseTypes,The conditional expression  "!hasNonInterface && !(this.Name == "Object" && this.Namespace == "System" && this.TypeParameterCount == 0)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem.Implementation,GetMembersHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetMembersHelper.cs,GetMethodsImpl,The conditional expression  "(options & GetMemberOptions.ReturnMemberDefinitions) == 0 && (pt != null || (methodTypeArguments != null && methodTypeArguments.Count > 0))"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem.Implementation,TypeParameterReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\TypeParameterReference.cs,Create,The conditional expression  "index >= 0 && index < 8 && (ownerType == SymbolKind.TypeDefinition || ownerType == SymbolKind.Method)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.Utils,CompositeFormatStringParser,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\CompositeFormatStringParser.cs,Parse,The conditional expression  "i == formatItemStart + 1 && (i == length || (i < length && format [i] != '}'))"  is complex.
Magic Number,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,ReadMembersSection,The following statement contains a magic number: while (reader.Read ()) {  	switch (reader.NodeType) {  	case XmlNodeType.EndElement:  		if (reader.LocalName == "members") {  			return;  		}  		break;  	case XmlNodeType.Element:  		if (reader.LocalName == "member") {  			int pos = linePosMapper.GetPositionForLine (reader.LineNumber) + Math.Max (reader.LinePosition - 2' 0);  			string memberAttr = reader.GetAttribute ("name");  			if (memberAttr != null)  				indexList.Add (new IndexEntry (GetHashCode (memberAttr)' pos));  			reader.Skip ();  		}  		break;  	}  }  
Magic Number,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,ReadMembersSection,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (reader.LocalName == "members") {  		return;  	}  	break;  case XmlNodeType.Element:  	if (reader.LocalName == "member") {  		int pos = linePosMapper.GetPositionForLine (reader.LineNumber) + Math.Max (reader.LinePosition - 2' 0);  		string memberAttr = reader.GetAttribute ("name");  		if (memberAttr != null)  			indexList.Add (new IndexEntry (GetHashCode (memberAttr)' pos));  		reader.Skip ();  	}  	break;  }  
Magic Number,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,ReadMembersSection,The following statement contains a magic number: if (reader.LocalName == "member") {  	int pos = linePosMapper.GetPositionForLine (reader.LineNumber) + Math.Max (reader.LinePosition - 2' 0);  	string memberAttr = reader.GetAttribute ("name");  	if (memberAttr != null)  		indexList.Add (new IndexEntry (GetHashCode (memberAttr)' pos));  	reader.Skip ();  }  
Magic Number,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int h = 0;  	foreach (char c in key) {  		h = (h << 5) - h + c;  	}  	return h;  }  
Magic Number,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,GetHashCode,The following statement contains a magic number: foreach (char c in key) {  	h = (h << 5) - h + c;  }  
Magic Number,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,GetHashCode,The following statement contains a magic number: h = (h << 5) - h + c;  
Magic Number,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,ParseMemberIdString,The following statement contains a magic number: if (memberIdString.Length < 2 || memberIdString [1] != ':')  	throw new ReflectionNameParseException (0' "Missing type tag");  
Magic Number,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,ParseTypeName,The following statement contains a magic number: if (typeName.StartsWith ("T:"' StringComparison.Ordinal))  	pos = 2;  
Magic Number,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,ParseTypeName,The following statement contains a magic number: pos = 2;  
Magic Number,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,FindEntity,The following statement contains a magic number: if (idString.StartsWith ("T:"' StringComparison.Ordinal)) {  	return ParseTypeName (idString.Substring (2)).Resolve (context).GetDefinition ();  }  else {  	return ParseMemberIdString (idString).Resolve (context);  }  
Magic Number,ICSharpCode.NRefactory.Documentation,IdStringProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\IdStringProvider.cs,FindEntity,The following statement contains a magic number: return ParseTypeName (idString.Substring (2)).Resolve (context).GetDefinition ();  
Magic Number,ICSharpCode.NRefactory,AbstractAnnotatable,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\IAnnotatable.cs,AddAnnotation,The following statement contains a magic number: if (list == null) {  	// we need to transform the old annotation into a list  	list = new AnnotationList (4);  	list.Add (oldAnnotation);  	list.Add (annotation);  	if (Interlocked.CompareExchange (ref this.annotations' list' oldAnnotation) != oldAnnotation) {  		// the transformation failed (some other thread wrote to this.annotations first)  		goto retry;  	}  }  else {  	// once there's a list' use simple locking  	lock (list) {  		list.Add (annotation);  	}  }  
Magic Number,ICSharpCode.NRefactory,AbstractAnnotatable,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\IAnnotatable.cs,AddAnnotation,The following statement contains a magic number: list = new AnnotationList (4);  
Magic Number,ICSharpCode.NRefactory,TextLocation,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TextLocation.cs,GetHashCode,The following statement contains a magic number: return unchecked(191 * column.GetHashCode () ^ line.GetHashCode ());  
Magic Number,ICSharpCode.NRefactory,TextLocationConverter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TextLocation.cs,ConvertFrom,The following statement contains a magic number: if (value is string) {  	string[] parts = ((string)value).Split (';'' ''');  	if (parts.Length == 2) {  		return new TextLocation (int.Parse (parts [0])' int.Parse (parts [1]));  	}  }  
Magic Number,ICSharpCode.NRefactory,TextLocationConverter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TextLocation.cs,ConvertFrom,The following statement contains a magic number: if (parts.Length == 2) {  	return new TextLocation (int.Parse (parts [0])' int.Parse (parts [1]));  }  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The following statement contains a magic number: if (curChar == CR) {  	if (nextChar != null && nextChar () == LF)  		return 2;  	return 1;  }  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The following statement contains a magic number: if (nextChar != null && nextChar () == LF)  	return 2;  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The following statement contains a magic number: return 2;  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The following statement contains a magic number: if (curChar == CR) {  	if (nextChar == LF)  		return 2;  	return 1;  }  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The following statement contains a magic number: if (nextChar == LF)  	return 2;  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterLength,The following statement contains a magic number: return 2;  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following statement contains a magic number: if (curChar == CR) {  	if (nextChar != null && nextChar () == LF) {  		length = 2;  		type = UnicodeNewline.CRLF;  	}  	else {  		length = 1;  		type = UnicodeNewline.CR;  	}  	return true;  }  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following statement contains a magic number: if (nextChar != null && nextChar () == LF) {  	length = 2;  	type = UnicodeNewline.CRLF;  }  else {  	length = 1;  	type = UnicodeNewline.CR;  }  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following statement contains a magic number: length = 2;  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following statement contains a magic number: if (curChar == CR) {  	if (nextChar == LF) {  		length = 2;  		type = UnicodeNewline.CRLF;  	}  	else {  		length = 1;  		type = UnicodeNewline.CR;  	}  	return true;  }  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following statement contains a magic number: if (nextChar == LF) {  	length = 2;  	type = UnicodeNewline.CRLF;  }  else {  	length = 1;  	type = UnicodeNewline.CR;  }  
Magic Number,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following statement contains a magic number: length = 2;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,AnonymousType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AnonymousType.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = resolvedProperties.Count;  	foreach (var p in resolvedProperties) {  		hashCode *= 31;  		hashCode += p.Name.GetHashCode () ^ p.ReturnType.GetHashCode ();  	}  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,AnonymousType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AnonymousType.cs,GetHashCode,The following statement contains a magic number: foreach (var p in resolvedProperties) {  	hashCode *= 31;  	hashCode += p.Name.GetHashCode () ^ p.ReturnType.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,AnonymousType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AnonymousType.cs,GetHashCode,The following statement contains a magic number: hashCode *= 31;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ArrayType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ArrayType.cs,GetHashCode,The following statement contains a magic number: return unchecked(elementType.GetHashCode () * 71681 + dimensions);  
Magic Number,ICSharpCode.NRefactory.TypeSystem,AssemblyQualifiedTypeName,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AssemblyQualifiedTypeName.cs,GetHashCode,The following statement contains a magic number: unchecked {  	if (AssemblyName != null)  		hashCode += 1000000007 * AssemblyName.GetHashCode ();  	hashCode += TypeName.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,AssemblyQualifiedTypeName,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AssemblyQualifiedTypeName.cs,GetHashCode,The following statement contains a magic number: if (AssemblyName != null)  	hashCode += 1000000007 * AssemblyName.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem,AssemblyQualifiedTypeName,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\AssemblyQualifiedTypeName.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000007 * AssemblyName.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ByReferenceType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ByReferenceType.cs,GetHashCode,The following statement contains a magic number: return elementType.GetHashCode () ^ 91725813;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ByReferenceTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ByReferenceType.cs,GetHashCodeForInterning,The following statement contains a magic number: return elementType.GetHashCode () ^ 91725814;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = fileName != null ? fileName.GetHashCode () : 0;  	hashCode ^= beginColumn + 1100009 * beginLine + 1200007 * endLine + 1300021 * endColumn;  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = fileName != null ? fileName.GetHashCode () : 0;  	hashCode ^= beginColumn + 1100009 * beginLine + 1200007 * endLine + 1300021 * endColumn;  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = fileName != null ? fileName.GetHashCode () : 0;  	hashCode ^= beginColumn + 1100009 * beginLine + 1200007 * endLine + 1300021 * endColumn;  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,GetHashCode,The following statement contains a magic number: hashCode ^= beginColumn + 1100009 * beginLine + 1200007 * endLine + 1300021 * endColumn;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,GetHashCode,The following statement contains a magic number: hashCode ^= beginColumn + 1100009 * beginLine + 1200007 * endLine + 1300021 * endColumn;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,DomRegion,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\DomRegion.cs,GetHashCode,The following statement contains a magic number: hashCode ^= beginColumn + 1100009 * beginLine + 1200007 * endLine + 1300021 * endColumn;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return 1124131 * TypeListHashCode (classTypeArguments) + 1821779 * TypeListHashCode (methodTypeArguments);  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return 1124131 * TypeListHashCode (classTypeArguments) + 1821779 * TypeListHashCode (methodTypeArguments);  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,GetHashCode,The following statement contains a magic number: return 1124131 * TypeListHashCode (classTypeArguments) + 1821779 * TypeListHashCode (methodTypeArguments);  
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,GetHashCode,The following statement contains a magic number: return 1124131 * TypeListHashCode (classTypeArguments) + 1821779 * TypeListHashCode (methodTypeArguments);  
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,TypeListHashCode,The following statement contains a magic number: unchecked {  	int hashCode = 1;  	foreach (var element in obj) {  		hashCode *= 27;  		hashCode += element.GetHashCode ();  	}  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,TypeListHashCode,The following statement contains a magic number: foreach (var element in obj) {  	hashCode *= 27;  	hashCode += element.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeParameterSubstitution,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\TypeParameterSubstitution.cs,TypeListHashCode,The following statement contains a magic number: hashCode *= 27;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,FullTypeNameComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\FullTypeName.cs,GetHashCode,The following statement contains a magic number: unchecked {  	for (int i = 0; i < obj.NestingLevel; i++) {  		hash *= 31;  		hash += NameComparer.GetHashCode (obj.Name) ^ obj.TypeParameterCount;  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,FullTypeNameComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\FullTypeName.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < obj.NestingLevel; i++) {  	hash *= 31;  	hash += NameComparer.GetHashCode (obj.Name) ^ obj.TypeParameterCount;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,FullTypeNameComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\FullTypeName.cs,GetHashCode,The following statement contains a magic number: hash *= 31;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,IntersectionType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\IntersectionType.cs,IntersectionType,The following statement contains a magic number: Debug.Assert (types.Length >= 2);  
Magic Number,ICSharpCode.NRefactory.TypeSystem,IntersectionType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\IntersectionType.cs,GetHashCode,The following statement contains a magic number: unchecked {  	foreach (var t in types) {  		hashCode *= 7137517;  		hashCode += t.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,IntersectionType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\IntersectionType.cs,GetHashCode,The following statement contains a magic number: foreach (var t in types) {  	hashCode *= 7137517;  	hashCode += t.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,IntersectionType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\IntersectionType.cs,GetHashCode,The following statement contains a magic number: hashCode *= 7137517;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCode,The following statement contains a magic number: unchecked {  	foreach (var ta in typeArguments) {  		hashCode *= 1000000007;  		hashCode += 1000000009 * ta.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCode,The following statement contains a magic number: unchecked {  	foreach (var ta in typeArguments) {  		hashCode *= 1000000007;  		hashCode += 1000000009 * ta.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCode,The following statement contains a magic number: foreach (var ta in typeArguments) {  	hashCode *= 1000000007;  	hashCode += 1000000009 * ta.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCode,The following statement contains a magic number: foreach (var ta in typeArguments) {  	hashCode *= 1000000007;  	hashCode += 1000000009 * ta.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCode,The following statement contains a magic number: hashCode *= 1000000007;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000009 * ta.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	foreach (ITypeReference t in typeArguments) {  		hashCode *= 27;  		hashCode += t.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCodeForInterning,The following statement contains a magic number: foreach (ITypeReference t in typeArguments) {  	hashCode *= 27;  	hashCode += t.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterizedTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterizedType.cs,GetHashCodeForInterning,The following statement contains a magic number: hashCode *= 27;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterListComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	foreach (IParameter p in obj) {  		hashCode *= 27;  		IType type = p.Type.AcceptVisitor (normalizationVisitor);  		hashCode += type.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterListComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,GetHashCode,The following statement contains a magic number: foreach (IParameter p in obj) {  	hashCode *= 27;  	IType type = p.Type.AcceptVisitor (normalizationVisitor);  	hashCode += type.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,ParameterListComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,GetHashCode,The following statement contains a magic number: hashCode *= 27;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,SignatureComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = (int)obj.SymbolKind * 33 + nameComparer.GetHashCode (obj.Name);  	IParameterizedMember pm = obj as IParameterizedMember;  	if (pm != null) {  		hash *= 27;  		hash += ParameterListComparer.Instance.GetHashCode (pm.Parameters);  		IMethod m = pm as IMethod;  		if (m != null)  			hash += m.TypeParameters.Count;  	}  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,SignatureComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = (int)obj.SymbolKind * 33 + nameComparer.GetHashCode (obj.Name);  	IParameterizedMember pm = obj as IParameterizedMember;  	if (pm != null) {  		hash *= 27;  		hash += ParameterListComparer.Instance.GetHashCode (pm.Parameters);  		IMethod m = pm as IMethod;  		if (m != null)  			hash += m.TypeParameters.Count;  	}  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,SignatureComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,GetHashCode,The following statement contains a magic number: if (pm != null) {  	hash *= 27;  	hash += ParameterListComparer.Instance.GetHashCode (pm.Parameters);  	IMethod m = pm as IMethod;  	if (m != null)  		hash += m.TypeParameters.Count;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem,SignatureComparer,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ParameterListComparer.cs,GetHashCode,The following statement contains a magic number: hash *= 27;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,PointerType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\PointerType.cs,GetHashCode,The following statement contains a magic number: return elementType.GetHashCode () ^ 91725811;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,PointerTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\PointerType.cs,GetHashCodeForInterning,The following statement contains a magic number: return elementType.GetHashCode () ^ 91725812;  
Magic Number,ICSharpCode.NRefactory.TypeSystem,SpecialType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\SpecialType.cs,GetHashCode,The following statement contains a magic number: return 81625621 ^ (int)kind;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,GetBlobHashCode,The following statement contains a magic number: unchecked {  	int hash = 0;  	foreach (byte b in blob) {  		hash *= 257;  		hash += b;  	}  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,GetBlobHashCode,The following statement contains a magic number: foreach (byte b in blob) {  	hash *= 257;  	hash += b;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,GetBlobHashCode,The following statement contains a magic number: hash *= 257;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt16,The following statement contains a magic number: unchecked {  	ushort value = (ushort)(buffer [position] | (buffer [position + 1] << 8));  	position += 2;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt16,The following statement contains a magic number: unchecked {  	ushort value = (ushort)(buffer [position] | (buffer [position + 1] << 8));  	position += 2;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt16,The following statement contains a magic number: position += 2;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked {  	uint value = (uint)(buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked {  	uint value = (uint)(buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked {  	uint value = (uint)(buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked {  	uint value = (uint)(buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked {  	uint value = (uint)(buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The following statement contains a magic number: unchecked {  	uint value = (uint)(buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt32,The following statement contains a magic number: position += 4;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt64,The following statement contains a magic number: unchecked {  	uint low = ReadUInt32 ();  	uint high = ReadUInt32 ();  	return (((ulong)high) << 32) | low;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadUInt64,The following statement contains a magic number: return (((ulong)high) << 32) | low;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: unchecked {  	byte first = ReadByte ();  	if ((first & 0x80) == 0)  		return first;  	if ((first & 0x40) == 0)  		return ((uint)(first & ~0x80) << 8) | ReadByte ();  	return ((uint)(first & ~0xc0) << 24) | (uint)ReadByte () << 16 | (uint)ReadByte () << 8 | ReadByte ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: unchecked {  	byte first = ReadByte ();  	if ((first & 0x80) == 0)  		return first;  	if ((first & 0x40) == 0)  		return ((uint)(first & ~0x80) << 8) | ReadByte ();  	return ((uint)(first & ~0xc0) << 24) | (uint)ReadByte () << 16 | (uint)ReadByte () << 8 | ReadByte ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: unchecked {  	byte first = ReadByte ();  	if ((first & 0x80) == 0)  		return first;  	if ((first & 0x40) == 0)  		return ((uint)(first & ~0x80) << 8) | ReadByte ();  	return ((uint)(first & ~0xc0) << 24) | (uint)ReadByte () << 16 | (uint)ReadByte () << 8 | ReadByte ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: unchecked {  	byte first = ReadByte ();  	if ((first & 0x80) == 0)  		return first;  	if ((first & 0x40) == 0)  		return ((uint)(first & ~0x80) << 8) | ReadByte ();  	return ((uint)(first & ~0xc0) << 24) | (uint)ReadByte () << 16 | (uint)ReadByte () << 8 | ReadByte ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: if ((first & 0x40) == 0)  	return ((uint)(first & ~0x80) << 8) | ReadByte ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0x80) << 8) | ReadByte ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0xc0) << 24) | (uint)ReadByte () << 16 | (uint)ReadByte () << 8 | ReadByte ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0xc0) << 24) | (uint)ReadByte () << 16 | (uint)ReadByte () << 8 | ReadByte ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadCompressedUInt32,The following statement contains a magic number: return ((uint)(first & ~0xc0) << 24) | (uint)ReadByte () << 16 | (uint)ReadByte () << 8 | ReadByte ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadSingle,The following statement contains a magic number: unchecked {  	if (!BitConverter.IsLittleEndian) {  		var bytes = ReadBytes (4);  		Array.Reverse (bytes);  		return BitConverter.ToSingle (bytes' 0);  	}  	float value = BitConverter.ToSingle (buffer' position);  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadSingle,The following statement contains a magic number: unchecked {  	if (!BitConverter.IsLittleEndian) {  		var bytes = ReadBytes (4);  		Array.Reverse (bytes);  		return BitConverter.ToSingle (bytes' 0);  	}  	float value = BitConverter.ToSingle (buffer' position);  	position += 4;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadSingle,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	var bytes = ReadBytes (4);  	Array.Reverse (bytes);  	return BitConverter.ToSingle (bytes' 0);  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadSingle,The following statement contains a magic number: position += 4;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadDouble,The following statement contains a magic number: unchecked {  	if (!BitConverter.IsLittleEndian) {  		var bytes = ReadBytes (8);  		Array.Reverse (bytes);  		return BitConverter.ToDouble (bytes' 0);  	}  	double value = BitConverter.ToDouble (buffer' position);  	position += 8;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadDouble,The following statement contains a magic number: unchecked {  	if (!BitConverter.IsLittleEndian) {  		var bytes = ReadBytes (8);  		Array.Reverse (bytes);  		return BitConverter.ToDouble (bytes' 0);  	}  	double value = BitConverter.ToDouble (buffer' position);  	position += 8;  	return value;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadDouble,The following statement contains a magic number: if (!BitConverter.IsLittleEndian) {  	var bytes = ReadBytes (8);  	Array.Reverse (bytes);  	return BitConverter.ToDouble (bytes' 0);  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,BlobReader,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\BlobReader.cs,ReadDouble,The following statement contains a magic number: position += 8;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	if (constructorParameterTypes != null) {  		foreach (var type in constructorParameterTypes) {  			hash *= 27;  			hash += type.GetHashCode ();  		}  	}  	if (positionalArguments != null) {  		foreach (var arg in positionalArguments) {  			hash *= 31;  			hash += arg.GetHashCode ();  		}  	}  	if (namedArguments != null) {  		foreach (var pair in namedArguments) {  			hash *= 71;  			hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	if (constructorParameterTypes != null) {  		foreach (var type in constructorParameterTypes) {  			hash *= 27;  			hash += type.GetHashCode ();  		}  	}  	if (positionalArguments != null) {  		foreach (var arg in positionalArguments) {  			hash *= 31;  			hash += arg.GetHashCode ();  		}  	}  	if (namedArguments != null) {  		foreach (var pair in namedArguments) {  			hash *= 71;  			hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	if (constructorParameterTypes != null) {  		foreach (var type in constructorParameterTypes) {  			hash *= 27;  			hash += type.GetHashCode ();  		}  	}  	if (positionalArguments != null) {  		foreach (var arg in positionalArguments) {  			hash *= 31;  			hash += arg.GetHashCode ();  		}  	}  	if (namedArguments != null) {  		foreach (var pair in namedArguments) {  			hash *= 71;  			hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	if (constructorParameterTypes != null) {  		foreach (var type in constructorParameterTypes) {  			hash *= 27;  			hash += type.GetHashCode ();  		}  	}  	if (positionalArguments != null) {  		foreach (var arg in positionalArguments) {  			hash *= 31;  			hash += arg.GetHashCode ();  		}  	}  	if (namedArguments != null) {  		foreach (var pair in namedArguments) {  			hash *= 71;  			hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: if (constructorParameterTypes != null) {  	foreach (var type in constructorParameterTypes) {  		hash *= 27;  		hash += type.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: foreach (var type in constructorParameterTypes) {  	hash *= 27;  	hash += type.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: hash *= 27;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: if (positionalArguments != null) {  	foreach (var arg in positionalArguments) {  		hash *= 31;  		hash += arg.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: foreach (var arg in positionalArguments) {  	hash *= 31;  	hash += arg.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: hash *= 31;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: if (namedArguments != null) {  	foreach (var pair in namedArguments) {  		hash *= 71;  		hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: if (namedArguments != null) {  	foreach (var pair in namedArguments) {  		hash *= 71;  		hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  	}  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: foreach (var pair in namedArguments) {  	hash *= 71;  	hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: foreach (var pair in namedArguments) {  	hash *= 71;  	hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: hash *= 71;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedAttribute,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedAttribute.cs,GetHashCodeForInterning,The following statement contains a magic number: hash += pair.Key.GetHashCode () + pair.Value.GetHashCode () * 73;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	int hashCode = 1919191 ^ (flags & ~1);  	hashCode *= 31;  	hashCode += type.GetHashCode ();  	hashCode *= 31;  	hashCode += name.GetHashCode ();  	if (attributes != null) {  		foreach (var attr in attributes)  			hashCode ^= attr.GetHashCode ();  	}  	if (defaultValue != null)  		hashCode ^= defaultValue.GetHashCode ();  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	int hashCode = 1919191 ^ (flags & ~1);  	hashCode *= 31;  	hashCode += type.GetHashCode ();  	hashCode *= 31;  	hashCode += name.GetHashCode ();  	if (attributes != null) {  		foreach (var attr in attributes)  			hashCode ^= attr.GetHashCode ();  	}  	if (defaultValue != null)  		hashCode ^= defaultValue.GetHashCode ();  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	int hashCode = 1919191 ^ (flags & ~1);  	hashCode *= 31;  	hashCode += type.GetHashCode ();  	hashCode *= 31;  	hashCode += name.GetHashCode ();  	if (attributes != null) {  		foreach (var attr in attributes)  			hashCode ^= attr.GetHashCode ();  	}  	if (defaultValue != null)  		hashCode ^= defaultValue.GetHashCode ();  	return hashCode;  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,GetHashCodeForInterning,The following statement contains a magic number: hashCode *= 31;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,DefaultUnresolvedParameter,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\DefaultUnresolvedParameter.cs,GetHashCodeForInterning,The following statement contains a magic number: hashCode *= 31;  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,GetClassTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetClassTypeReference.cs,GetHashCodeForInterning,The following statement contains a magic number: unchecked {  	return 33 * assembly.GetHashCode () + fullTypeName.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,GetClassTypeReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\GetClassTypeReference.cs,GetHashCodeForInterning,The following statement contains a magic number: return 33 * assembly.GetHashCode () + fullTypeName.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMember.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return 1000000007 * baseMember.GetHashCode () + 1000000009 * substitution.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMember.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return 1000000007 * baseMember.GetHashCode () + 1000000009 * substitution.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMember.cs,GetHashCode,The following statement contains a magic number: return 1000000007 * baseMember.GetHashCode () + 1000000009 * substitution.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMember,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMember.cs,GetHashCode,The following statement contains a magic number: return 1000000007 * baseMember.GetHashCode () + 1000000009 * substitution.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return 1000000013 * baseMember.GetHashCode () + 1000000009 * substitutionWithoutSpecializedTypeParameters.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return 1000000013 * baseMember.GetHashCode () + 1000000009 * substitutionWithoutSpecializedTypeParameters.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,GetHashCode,The following statement contains a magic number: return 1000000013 * baseMember.GetHashCode () + 1000000009 * substitutionWithoutSpecializedTypeParameters.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,SpecializedMethod,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\SpecializedMethod.cs,GetHashCode,The following statement contains a magic number: return 1000000013 * baseMember.GetHashCode () + 1000000009 * substitutionWithoutSpecializedTypeParameters.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,TypeParameterReference,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\TypeParameterReference.cs,Create,The following statement contains a magic number: if (index >= 0 && index < 8 && (ownerType == SymbolKind.TypeDefinition || ownerType == SymbolKind.Method)) {  	TypeParameterReference[] arr = (ownerType == SymbolKind.TypeDefinition) ? classTypeParameterReferences : methodTypeParameterReferences;  	TypeParameterReference result = LazyInit.VolatileRead (ref arr [index]);  	if (result == null) {  		result = LazyInit.GetOrSet (ref arr [index]' new TypeParameterReference (ownerType' index));  	}  	return result;  }  else {  	return new TypeParameterReference (ownerType' index);  }  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,UnknownType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\UnknownType.cs,GetHashCode,The following statement contains a magic number: return (namespaceKnown ? 812571 : 12651) ^ fullTypeName.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,UnknownType,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\Implementation\UnknownType.cs,GetHashCode,The following statement contains a magic number: return (namespaceKnown ? 812571 : 12651) ^ fullTypeName.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryReaderWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,ReadUInt64,The following statement contains a magic number: while (shift < 64) {  	byte b = this.ReadByte ();  	num |= (ulong)(b & 127) << shift;  	shift += 7;  	if ((b & 128) == 0) {  		return num;  	}  }  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryReaderWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,ReadUInt64,The following statement contains a magic number: while (shift < 64) {  	byte b = this.ReadByte ();  	num |= (ulong)(b & 127) << shift;  	shift += 7;  	if ((b & 128) == 0) {  		return num;  	}  }  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryReaderWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,ReadUInt64,The following statement contains a magic number: while (shift < 64) {  	byte b = this.ReadByte ();  	num |= (ulong)(b & 127) << shift;  	shift += 7;  	if ((b & 128) == 0) {  		return num;  	}  }  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryReaderWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,ReadUInt64,The following statement contains a magic number: while (shift < 64) {  	byte b = this.ReadByte ();  	num |= (ulong)(b & 127) << shift;  	shift += 7;  	if ((b & 128) == 0) {  		return num;  	}  }  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryReaderWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,ReadUInt64,The following statement contains a magic number: num |= (ulong)(b & 127) << shift;  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryReaderWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,ReadUInt64,The following statement contains a magic number: shift += 7;  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryReaderWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,ReadUInt64,The following statement contains a magic number: if ((b & 128) == 0) {  	return num;  }  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryWriterWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,Write,The following statement contains a magic number: while (value >= 128) {  	this.Write (unchecked((byte)(value | 128u)));  	value >>= 7;  }  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryWriterWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,Write,The following statement contains a magic number: while (value >= 128) {  	this.Write (unchecked((byte)(value | 128u)));  	value >>= 7;  }  
Magic Number,ICSharpCode.NRefactory.Utils,BinaryWriterWith7BitEncodedInts,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\7BitEncodedInts.cs,Write,The following statement contains a magic number: value >>= 7;  
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParser,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\CompositeFormatStringParser.cs,CheckForMissingEndBrace,The following statement contains a magic number: if (i == length) {  	int j;  	for (j = i - 1; format [j] == '}'; j--)  		;  	var oddEndBraceCount = (i - j) % 2 == 1;  	if (oddEndBraceCount) {  		AddMissingEndBraceError (i' i' "Missing '}'"' "");  	}  	return;  }  
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParser,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\CompositeFormatStringParser.cs,GetNumber,The following statement contains a magic number: while (i < format.Length && format [i] >= '0' && format [i] <= '9') {  	sum = 10 * sum + format [i] - '0';  	++i;  }  
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParser,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\CompositeFormatStringParser.cs,GetNumber,The following statement contains a magic number: sum = 10 * sum + format [i] - '0';  
Magic Number,ICSharpCode.NRefactory.Utils,TextSegment,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\TextSegment.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Text.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,TextSegment,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\TextSegment.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Text.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,TextSegment,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\TextSegment.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Text.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,TextSegment,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\TextSegment.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Text.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,TextSegment,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\TextSegment.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Text.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,TextSegment,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\TextSegment.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + StartLocation.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,TextSegment,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\TextSegment.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + EndLocation.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Index.GetHashCode ();  	hash = hash * 37 + Alignment.GetHashCode ();  	hash = hash * 37 + FormatString.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Index.GetHashCode ();  	hash = hash * 37 + Alignment.GetHashCode ();  	hash = hash * 37 + FormatString.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Index.GetHashCode ();  	hash = hash * 37 + Alignment.GetHashCode ();  	hash = hash * 37 + FormatString.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Index.GetHashCode ();  	hash = hash * 37 + Alignment.GetHashCode ();  	hash = hash * 37 + FormatString.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Index.GetHashCode ();  	hash = hash * 37 + Alignment.GetHashCode ();  	hash = hash * 37 + FormatString.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 23;  	hash = hash * 37 + Index.GetHashCode ();  	hash = hash * 37 + Alignment.GetHashCode ();  	hash = hash * 37 + FormatString.GetHashCode ();  	hash = hash * 37 + StartLocation.GetHashCode ();  	hash = hash * 37 + EndLocation.GetHashCode ();  	return hash;  }  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Index.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + Alignment.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + FormatString.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + StartLocation.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,FormatItem,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CompositeFormatStringParser\FormatItem.cs,GetHashCode,The following statement contains a magic number: hash = hash * 37 + EndLocation.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.Utils,ComparableList,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\ComparableList.cs,GetHashCode,The following statement contains a magic number: foreach (var item in this) {  	unchecked {  		hash *= 31;  		hash += item.GetHashCode ();  	}  }  
Magic Number,ICSharpCode.NRefactory.Utils,ComparableList,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\ComparableList.cs,GetHashCode,The following statement contains a magic number: unchecked {  	hash *= 31;  	hash += item.GetHashCode ();  }  
Magic Number,ICSharpCode.NRefactory.Utils,ComparableList,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\ComparableList.cs,GetHashCode,The following statement contains a magic number: hash *= 31;  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetExtensionMethodLookups,The following statement contains a magic number: return GetLookup (resolveResult.MemberName' extLookupTable' headerSize + assemblyListTable.Length * 4 + typeLookupTable.Length * 8);  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetExtensionMethodLookups,The following statement contains a magic number: return GetLookup (resolveResult.MemberName' extLookupTable' headerSize + assemblyListTable.Length * 4 + typeLookupTable.Length * 8);  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookups,The following statement contains a magic number: return GetLookup (identifier' typeLookupTable' headerSize + assemblyListTable.Length * 4);  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookups,The following statement contains a magic number: foreach (var lookup in GetLookup (identifier' typeLookupTable' headerSize + assemblyListTable.Length * 4)) {  	if (fullMemberName.StartsWith (lookup.Namespace' StringComparison.Ordinal))  		yield return lookup;  }  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookup,The following statement contains a magic number: using (var reader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)' Encoding.UTF8)) {  	reader.BaseStream.Seek (tableOffset + index * 8 + 4' SeekOrigin.Begin);  	int listPtr = reader.ReadInt32 ();  	reader.BaseStream.Seek (listPtr' SeekOrigin.Begin);  	var b = reader.ReadInt32 ();  	var assemblies = new List<ushort> ();  	while (b-- > 0) {  		var assembly = reader.ReadUInt16 ();  		if (assembly < 0 || assembly >= assemblyListTable.Length)  			throw new InvalidDataException ("Assembly lookup was " + assembly + " but only " + assemblyListTable.Length + " are known.");  		assemblies.Add (assembly);  	}  	foreach (var assembly in assemblies) {  		reader.BaseStream.Seek (assemblyListTable [assembly]' SeekOrigin.Begin);  		var package = reader.ReadString ();  		var fullName = reader.ReadString ();  		var ns = reader.ReadString ();  		yield return new AssemblyLookup (package' fullName' ns);  	}  }  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookup,The following statement contains a magic number: using (var reader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.Read)' Encoding.UTF8)) {  	reader.BaseStream.Seek (tableOffset + index * 8 + 4' SeekOrigin.Begin);  	int listPtr = reader.ReadInt32 ();  	reader.BaseStream.Seek (listPtr' SeekOrigin.Begin);  	var b = reader.ReadInt32 ();  	var assemblies = new List<ushort> ();  	while (b-- > 0) {  		var assembly = reader.ReadUInt16 ();  		if (assembly < 0 || assembly >= assemblyListTable.Length)  			throw new InvalidDataException ("Assembly lookup was " + assembly + " but only " + assemblyListTable.Length + " are known.");  		assemblies.Add (assembly);  	}  	foreach (var assembly in assemblies) {  		reader.BaseStream.Seek (assemblyListTable [assembly]' SeekOrigin.Begin);  		var package = reader.ReadString ();  		var fullName = reader.ReadString ();  		var ns = reader.ReadString ();  		yield return new AssemblyLookup (package' fullName' ns);  	}  }  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookup,The following statement contains a magic number: reader.BaseStream.Seek (tableOffset + index * 8 + 4' SeekOrigin.Begin);  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetLookup,The following statement contains a magic number: reader.BaseStream.Seek (tableOffset + index * 8 + 4' SeekOrigin.Begin);  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetStableHashCode,The following statement contains a magic number: unchecked {  	int h = 0;  	foreach (char c in text) {  		h = (h << 5) - h + c;  	}  	return h;  }  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetStableHashCode,The following statement contains a magic number: foreach (char c in text) {  	h = (h << 5) - h + c;  }  
Magic Number,ICSharpCode.NRefactory.Completion,FrameworkLookup,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Completion\FrameworkLookup.cs,GetStableHashCode,The following statement contains a magic number: h = (h << 5) - h + c;  
Missing Default,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,ReadXmlDoc,The following switch statement is missing a default case: switch (reader.LocalName) {  case "members":  	ReadMembersSection (reader' linePosMapper' indexList);  	break;  }  
Missing Default,ICSharpCode.NRefactory.Documentation,XmlDocumentationProvider,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Documentation\XmlDocumentationProvider.cs,ReadMembersSection,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (reader.LocalName == "members") {  		return;  	}  	break;  case XmlNodeType.Element:  	if (reader.LocalName == "member") {  		int pos = linePosMapper.GetPositionForLine (reader.LineNumber) + Math.Max (reader.LinePosition - 2' 0);  		string memberAttr = reader.GetAttribute ("name");  		if (memberAttr != null)  			indexList.Add (new IndexEntry (GetHashCode (memberAttr)' pos));  		reader.Skip ();  	}  	break;  }  
Missing Default,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following switch statement is missing a default case: switch (curChar) {  case LF:  	type = UnicodeNewline.LF;  	length = 1;  	return true;  case NEL:  	type = UnicodeNewline.NEL;  	length = 1;  	return true;  case VT:  	type = UnicodeNewline.VT;  	length = 1;  	return true;  case FF:  	type = UnicodeNewline.FF;  	length = 1;  	return true;  case LS:  	type = UnicodeNewline.LS;  	length = 1;  	return true;  case PS:  	type = UnicodeNewline.PS;  	length = 1;  	return true;  }  
Missing Default,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,TryGetDelimiterLengthAndType,The following switch statement is missing a default case: switch (curChar) {  case LF:  	type = UnicodeNewline.LF;  	length = 1;  	return true;  case NEL:  	type = UnicodeNewline.NEL;  	length = 1;  	return true;  case VT:  	type = UnicodeNewline.VT;  	length = 1;  	return true;  case FF:  	type = UnicodeNewline.FF;  	length = 1;  	return true;  case LS:  	type = UnicodeNewline.LS;  	length = 1;  	return true;  case PS:  	type = UnicodeNewline.PS;  	length = 1;  	return true;  }  
Missing Default,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterType,The following switch statement is missing a default case: switch (curChar) {  case CR:  	if (nextChar != null && nextChar () == LF)  		return UnicodeNewline.CRLF;  	return UnicodeNewline.CR;  case LF:  	return UnicodeNewline.LF;  case NEL:  	return UnicodeNewline.NEL;  case VT:  	return UnicodeNewline.VT;  case FF:  	return UnicodeNewline.FF;  case LS:  	return UnicodeNewline.LS;  case PS:  	return UnicodeNewline.PS;  }  
Missing Default,ICSharpCode.NRefactory,NewLine,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Editor\UnicodeNewline.cs,GetDelimiterType,The following switch statement is missing a default case: switch (curChar) {  case CR:  	if (nextChar == LF)  		return UnicodeNewline.CRLF;  	return UnicodeNewline.CR;  case LF:  	return UnicodeNewline.LF;  case NEL:  	return UnicodeNewline.NEL;  case VT:  	return UnicodeNewline.VT;  case FF:  	return UnicodeNewline.FF;  case LS:  	return UnicodeNewline.LS;  case PS:  	return UnicodeNewline.PS;  }  
Missing Default,ICSharpCode.NRefactory.Semantics,MemberResolveResult,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Semantics\MemberResolveResult.cs,ComputeType,The following switch statement is missing a default case: switch (member.SymbolKind) {  case SymbolKind.Constructor:  	return member.DeclaringType;  case SymbolKind.Field:  	if (((IField)member).IsFixed)  		return new PointerType (member.ReturnType);  	break;  }  
Missing Default,ICSharpCode.NRefactory.TypeSystem,ReflectionHelper,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\TypeSystem\ReflectionHelper.cs,SkipAheadAndReadAssemblyName,The following switch statement is missing a default case: switch (reflectionTypeName [pos++]) {  case '[':  	nestingLevel++;  	break;  case ']':  	if (nestingLevel == 0)  		return null;  	nestingLevel--;  	break;  case ''':  	if (nestingLevel == 0) {  		// first skip the whitespace  		while (pos < reflectionTypeName.Length && reflectionTypeName [pos] == ' ')  			pos++;  		// everything up to the end/next ']' is the assembly name  		int endPos = pos;  		while (endPos < reflectionTypeName.Length && reflectionTypeName [endPos] != ']')  			endPos++;  		return reflectionTypeName.Substring (pos' endPos - pos);  	}  	break;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (targetType) {  case TypeCode.Char:  	switch (sourceType) {  	case TypeCode.SByte:  		return (char)(sbyte)input;  	case TypeCode.Byte:  		return (char)(byte)input;  	case TypeCode.Int16:  		return (char)(short)input;  	case TypeCode.UInt16:  		return (char)(ushort)input;  	case TypeCode.Int32:  		return (char)(int)input;  	case TypeCode.UInt32:  		return (char)(uint)input;  	case TypeCode.Int64:  		return (char)(long)input;  	case TypeCode.UInt64:  		return (char)(ulong)input;  	case TypeCode.Single:  		return (char)(float)input;  	case TypeCode.Double:  		return (char)(double)input;  	case TypeCode.Decimal:  		return (char)(decimal)input;  	}  	break;  case TypeCode.SByte:  	switch (sourceType) {  	case TypeCode.Char:  		return (sbyte)(char)input;  	case TypeCode.Byte:  		return (sbyte)(byte)input;  	case TypeCode.Int16:  		return (sbyte)(short)input;  	case TypeCode.UInt16:  		return (sbyte)(ushort)input;  	case TypeCode.Int32:  		return (sbyte)(int)input;  	case TypeCode.UInt32:  		return (sbyte)(uint)input;  	case TypeCode.Int64:  		return (sbyte)(long)input;  	case TypeCode.UInt64:  		return (sbyte)(ulong)input;  	case TypeCode.Single:  		return (sbyte)(float)input;  	case TypeCode.Double:  		return (sbyte)(double)input;  	case TypeCode.Decimal:  		return (sbyte)(decimal)input;  	}  	break;  case TypeCode.Byte:  	switch (sourceType) {  	case TypeCode.Char:  		return (byte)(char)input;  	case TypeCode.SByte:  		return (byte)(sbyte)input;  	case TypeCode.Int16:  		return (byte)(short)input;  	case TypeCode.UInt16:  		return (byte)(ushort)input;  	case TypeCode.Int32:  		return (byte)(int)input;  	case TypeCode.UInt32:  		return (byte)(uint)input;  	case TypeCode.Int64:  		return (byte)(long)input;  	case TypeCode.UInt64:  		return (byte)(ulong)input;  	case TypeCode.Single:  		return (byte)(float)input;  	case TypeCode.Double:  		return (byte)(double)input;  	case TypeCode.Decimal:  		return (byte)(decimal)input;  	}  	break;  case TypeCode.Int16:  	switch (sourceType) {  	case TypeCode.Char:  		return (short)(char)input;  	case TypeCode.SByte:  		return (short)(sbyte)input;  	case TypeCode.Byte:  		return (short)(byte)input;  	case TypeCode.UInt16:  		return (short)(ushort)input;  	case TypeCode.Int32:  		return (short)(int)input;  	case TypeCode.UInt32:  		return (short)(uint)input;  	case TypeCode.Int64:  		return (short)(long)input;  	case TypeCode.UInt64:  		return (short)(ulong)input;  	case TypeCode.Single:  		return (short)(float)input;  	case TypeCode.Double:  		return (short)(double)input;  	case TypeCode.Decimal:  		return (short)(decimal)input;  	}  	break;  case TypeCode.UInt16:  	switch (sourceType) {  	case TypeCode.Char:  		return (ushort)(char)input;  	case TypeCode.SByte:  		return (ushort)(sbyte)input;  	case TypeCode.Byte:  		return (ushort)(byte)input;  	case TypeCode.Int16:  		return (ushort)(short)input;  	case TypeCode.Int32:  		return (ushort)(int)input;  	case TypeCode.UInt32:  		return (ushort)(uint)input;  	case TypeCode.Int64:  		return (ushort)(long)input;  	case TypeCode.UInt64:  		return (ushort)(ulong)input;  	case TypeCode.Single:  		return (ushort)(float)input;  	case TypeCode.Double:  		return (ushort)(double)input;  	case TypeCode.Decimal:  		return (ushort)(decimal)input;  	}  	break;  case TypeCode.Int32:  	switch (sourceType) {  	case TypeCode.Char:  		return (int)(char)input;  	case TypeCode.SByte:  		return (int)(sbyte)input;  	case TypeCode.Byte:  		return (int)(byte)input;  	case TypeCode.Int16:  		return (int)(short)input;  	case TypeCode.UInt16:  		return (int)(ushort)input;  	case TypeCode.UInt32:  		return (int)(uint)input;  	case TypeCode.Int64:  		return (int)(long)input;  	case TypeCode.UInt64:  		return (int)(ulong)input;  	case TypeCode.Single:  		return (int)(float)input;  	case TypeCode.Double:  		return (int)(double)input;  	case TypeCode.Decimal:  		return (int)(decimal)input;  	}  	break;  case TypeCode.UInt32:  	switch (sourceType) {  	case TypeCode.Char:  		return (uint)(char)input;  	case TypeCode.SByte:  		return (uint)(sbyte)input;  	case TypeCode.Byte:  		return (uint)(byte)input;  	case TypeCode.Int16:  		return (uint)(short)input;  	case TypeCode.UInt16:  		return (uint)(ushort)input;  	case TypeCode.Int32:  		return (uint)(int)input;  	case TypeCode.Int64:  		return (uint)(long)input;  	case TypeCode.UInt64:  		return (uint)(ulong)input;  	case TypeCode.Single:  		return (uint)(float)input;  	case TypeCode.Double:  		return (uint)(double)input;  	case TypeCode.Decimal:  		return (uint)(decimal)input;  	}  	break;  case TypeCode.Int64:  	switch (sourceType) {  	case TypeCode.Char:  		return (long)(char)input;  	case TypeCode.SByte:  		return (long)(sbyte)input;  	case TypeCode.Byte:  		return (long)(byte)input;  	case TypeCode.Int16:  		return (long)(short)input;  	case TypeCode.UInt16:  		return (long)(ushort)input;  	case TypeCode.Int32:  		return (long)(int)input;  	case TypeCode.UInt32:  		return (long)(uint)input;  	case TypeCode.UInt64:  		return (long)(ulong)input;  	case TypeCode.Single:  		return (long)(float)input;  	case TypeCode.Double:  		return (long)(double)input;  	case TypeCode.Decimal:  		return (long)(decimal)input;  	}  	break;  case TypeCode.UInt64:  	switch (sourceType) {  	case TypeCode.Char:  		return (ulong)(char)input;  	case TypeCode.SByte:  		return (ulong)(sbyte)input;  	case TypeCode.Byte:  		return (ulong)(byte)input;  	case TypeCode.Int16:  		return (ulong)(short)input;  	case TypeCode.UInt16:  		return (ulong)(ushort)input;  	case TypeCode.Int32:  		return (ulong)(int)input;  	case TypeCode.UInt32:  		return (ulong)(uint)input;  	case TypeCode.Int64:  		return (ulong)(long)input;  	case TypeCode.Single:  		return (ulong)(float)input;  	case TypeCode.Double:  		return (ulong)(double)input;  	case TypeCode.Decimal:  		return (ulong)(decimal)input;  	}  	break;  case TypeCode.Single:  	switch (sourceType) {  	case TypeCode.Char:  		return (float)(char)input;  	case TypeCode.SByte:  		return (float)(sbyte)input;  	case TypeCode.Byte:  		return (float)(byte)input;  	case TypeCode.Int16:  		return (float)(short)input;  	case TypeCode.UInt16:  		return (float)(ushort)input;  	case TypeCode.Int32:  		return (float)(int)input;  	case TypeCode.UInt32:  		return (float)(uint)input;  	case TypeCode.Int64:  		return (float)(long)input;  	case TypeCode.UInt64:  		return (float)(ulong)input;  	case TypeCode.Double:  		return (float)(double)input;  	case TypeCode.Decimal:  		return (float)(decimal)input;  	}  	break;  case TypeCode.Double:  	switch (sourceType) {  	case TypeCode.Char:  		return (double)(char)input;  	case TypeCode.SByte:  		return (double)(sbyte)input;  	case TypeCode.Byte:  		return (double)(byte)input;  	case TypeCode.Int16:  		return (double)(short)input;  	case TypeCode.UInt16:  		return (double)(ushort)input;  	case TypeCode.Int32:  		return (double)(int)input;  	case TypeCode.UInt32:  		return (double)(uint)input;  	case TypeCode.Int64:  		return (double)(long)input;  	case TypeCode.UInt64:  		return (double)(ulong)input;  	case TypeCode.Single:  		return (double)(float)input;  	case TypeCode.Decimal:  		return (double)(decimal)input;  	}  	break;  case TypeCode.Decimal:  	switch (sourceType) {  	case TypeCode.Char:  		return (decimal)(char)input;  	case TypeCode.SByte:  		return (decimal)(sbyte)input;  	case TypeCode.Byte:  		return (decimal)(byte)input;  	case TypeCode.Int16:  		return (decimal)(short)input;  	case TypeCode.UInt16:  		return (decimal)(ushort)input;  	case TypeCode.Int32:  		return (decimal)(int)input;  	case TypeCode.UInt32:  		return (decimal)(uint)input;  	case TypeCode.Int64:  		return (decimal)(long)input;  	case TypeCode.UInt64:  		return (decimal)(ulong)input;  	case TypeCode.Single:  		return (decimal)(float)input;  	case TypeCode.Double:  		return (decimal)(double)input;  	}  	break;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.SByte:  	return (char)(sbyte)input;  case TypeCode.Byte:  	return (char)(byte)input;  case TypeCode.Int16:  	return (char)(short)input;  case TypeCode.UInt16:  	return (char)(ushort)input;  case TypeCode.Int32:  	return (char)(int)input;  case TypeCode.UInt32:  	return (char)(uint)input;  case TypeCode.Int64:  	return (char)(long)input;  case TypeCode.UInt64:  	return (char)(ulong)input;  case TypeCode.Single:  	return (char)(float)input;  case TypeCode.Double:  	return (char)(double)input;  case TypeCode.Decimal:  	return (char)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (sbyte)(char)input;  case TypeCode.Byte:  	return (sbyte)(byte)input;  case TypeCode.Int16:  	return (sbyte)(short)input;  case TypeCode.UInt16:  	return (sbyte)(ushort)input;  case TypeCode.Int32:  	return (sbyte)(int)input;  case TypeCode.UInt32:  	return (sbyte)(uint)input;  case TypeCode.Int64:  	return (sbyte)(long)input;  case TypeCode.UInt64:  	return (sbyte)(ulong)input;  case TypeCode.Single:  	return (sbyte)(float)input;  case TypeCode.Double:  	return (sbyte)(double)input;  case TypeCode.Decimal:  	return (sbyte)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (byte)(char)input;  case TypeCode.SByte:  	return (byte)(sbyte)input;  case TypeCode.Int16:  	return (byte)(short)input;  case TypeCode.UInt16:  	return (byte)(ushort)input;  case TypeCode.Int32:  	return (byte)(int)input;  case TypeCode.UInt32:  	return (byte)(uint)input;  case TypeCode.Int64:  	return (byte)(long)input;  case TypeCode.UInt64:  	return (byte)(ulong)input;  case TypeCode.Single:  	return (byte)(float)input;  case TypeCode.Double:  	return (byte)(double)input;  case TypeCode.Decimal:  	return (byte)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (short)(char)input;  case TypeCode.SByte:  	return (short)(sbyte)input;  case TypeCode.Byte:  	return (short)(byte)input;  case TypeCode.UInt16:  	return (short)(ushort)input;  case TypeCode.Int32:  	return (short)(int)input;  case TypeCode.UInt32:  	return (short)(uint)input;  case TypeCode.Int64:  	return (short)(long)input;  case TypeCode.UInt64:  	return (short)(ulong)input;  case TypeCode.Single:  	return (short)(float)input;  case TypeCode.Double:  	return (short)(double)input;  case TypeCode.Decimal:  	return (short)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (ushort)(char)input;  case TypeCode.SByte:  	return (ushort)(sbyte)input;  case TypeCode.Byte:  	return (ushort)(byte)input;  case TypeCode.Int16:  	return (ushort)(short)input;  case TypeCode.Int32:  	return (ushort)(int)input;  case TypeCode.UInt32:  	return (ushort)(uint)input;  case TypeCode.Int64:  	return (ushort)(long)input;  case TypeCode.UInt64:  	return (ushort)(ulong)input;  case TypeCode.Single:  	return (ushort)(float)input;  case TypeCode.Double:  	return (ushort)(double)input;  case TypeCode.Decimal:  	return (ushort)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (int)(char)input;  case TypeCode.SByte:  	return (int)(sbyte)input;  case TypeCode.Byte:  	return (int)(byte)input;  case TypeCode.Int16:  	return (int)(short)input;  case TypeCode.UInt16:  	return (int)(ushort)input;  case TypeCode.UInt32:  	return (int)(uint)input;  case TypeCode.Int64:  	return (int)(long)input;  case TypeCode.UInt64:  	return (int)(ulong)input;  case TypeCode.Single:  	return (int)(float)input;  case TypeCode.Double:  	return (int)(double)input;  case TypeCode.Decimal:  	return (int)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (uint)(char)input;  case TypeCode.SByte:  	return (uint)(sbyte)input;  case TypeCode.Byte:  	return (uint)(byte)input;  case TypeCode.Int16:  	return (uint)(short)input;  case TypeCode.UInt16:  	return (uint)(ushort)input;  case TypeCode.Int32:  	return (uint)(int)input;  case TypeCode.Int64:  	return (uint)(long)input;  case TypeCode.UInt64:  	return (uint)(ulong)input;  case TypeCode.Single:  	return (uint)(float)input;  case TypeCode.Double:  	return (uint)(double)input;  case TypeCode.Decimal:  	return (uint)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (long)(char)input;  case TypeCode.SByte:  	return (long)(sbyte)input;  case TypeCode.Byte:  	return (long)(byte)input;  case TypeCode.Int16:  	return (long)(short)input;  case TypeCode.UInt16:  	return (long)(ushort)input;  case TypeCode.Int32:  	return (long)(int)input;  case TypeCode.UInt32:  	return (long)(uint)input;  case TypeCode.UInt64:  	return (long)(ulong)input;  case TypeCode.Single:  	return (long)(float)input;  case TypeCode.Double:  	return (long)(double)input;  case TypeCode.Decimal:  	return (long)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (ulong)(char)input;  case TypeCode.SByte:  	return (ulong)(sbyte)input;  case TypeCode.Byte:  	return (ulong)(byte)input;  case TypeCode.Int16:  	return (ulong)(short)input;  case TypeCode.UInt16:  	return (ulong)(ushort)input;  case TypeCode.Int32:  	return (ulong)(int)input;  case TypeCode.UInt32:  	return (ulong)(uint)input;  case TypeCode.Int64:  	return (ulong)(long)input;  case TypeCode.Single:  	return (ulong)(float)input;  case TypeCode.Double:  	return (ulong)(double)input;  case TypeCode.Decimal:  	return (ulong)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (float)(char)input;  case TypeCode.SByte:  	return (float)(sbyte)input;  case TypeCode.Byte:  	return (float)(byte)input;  case TypeCode.Int16:  	return (float)(short)input;  case TypeCode.UInt16:  	return (float)(ushort)input;  case TypeCode.Int32:  	return (float)(int)input;  case TypeCode.UInt32:  	return (float)(uint)input;  case TypeCode.Int64:  	return (float)(long)input;  case TypeCode.UInt64:  	return (float)(ulong)input;  case TypeCode.Double:  	return (float)(double)input;  case TypeCode.Decimal:  	return (float)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (double)(char)input;  case TypeCode.SByte:  	return (double)(sbyte)input;  case TypeCode.Byte:  	return (double)(byte)input;  case TypeCode.Int16:  	return (double)(short)input;  case TypeCode.UInt16:  	return (double)(ushort)input;  case TypeCode.Int32:  	return (double)(int)input;  case TypeCode.UInt32:  	return (double)(uint)input;  case TypeCode.Int64:  	return (double)(long)input;  case TypeCode.UInt64:  	return (double)(ulong)input;  case TypeCode.Single:  	return (double)(float)input;  case TypeCode.Decimal:  	return (double)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastChecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (decimal)(char)input;  case TypeCode.SByte:  	return (decimal)(sbyte)input;  case TypeCode.Byte:  	return (decimal)(byte)input;  case TypeCode.Int16:  	return (decimal)(short)input;  case TypeCode.UInt16:  	return (decimal)(ushort)input;  case TypeCode.Int32:  	return (decimal)(int)input;  case TypeCode.UInt32:  	return (decimal)(uint)input;  case TypeCode.Int64:  	return (decimal)(long)input;  case TypeCode.UInt64:  	return (decimal)(ulong)input;  case TypeCode.Single:  	return (decimal)(float)input;  case TypeCode.Double:  	return (decimal)(double)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (targetType) {  case TypeCode.Char:  	switch (sourceType) {  	case TypeCode.SByte:  		return (char)(sbyte)input;  	case TypeCode.Byte:  		return (char)(byte)input;  	case TypeCode.Int16:  		return (char)(short)input;  	case TypeCode.UInt16:  		return (char)(ushort)input;  	case TypeCode.Int32:  		return (char)(int)input;  	case TypeCode.UInt32:  		return (char)(uint)input;  	case TypeCode.Int64:  		return (char)(long)input;  	case TypeCode.UInt64:  		return (char)(ulong)input;  	case TypeCode.Single:  		return (char)(float)input;  	case TypeCode.Double:  		return (char)(double)input;  	case TypeCode.Decimal:  		return (char)(decimal)input;  	}  	break;  case TypeCode.SByte:  	switch (sourceType) {  	case TypeCode.Char:  		return (sbyte)(char)input;  	case TypeCode.Byte:  		return (sbyte)(byte)input;  	case TypeCode.Int16:  		return (sbyte)(short)input;  	case TypeCode.UInt16:  		return (sbyte)(ushort)input;  	case TypeCode.Int32:  		return (sbyte)(int)input;  	case TypeCode.UInt32:  		return (sbyte)(uint)input;  	case TypeCode.Int64:  		return (sbyte)(long)input;  	case TypeCode.UInt64:  		return (sbyte)(ulong)input;  	case TypeCode.Single:  		return (sbyte)(float)input;  	case TypeCode.Double:  		return (sbyte)(double)input;  	case TypeCode.Decimal:  		return (sbyte)(decimal)input;  	}  	break;  case TypeCode.Byte:  	switch (sourceType) {  	case TypeCode.Char:  		return (byte)(char)input;  	case TypeCode.SByte:  		return (byte)(sbyte)input;  	case TypeCode.Int16:  		return (byte)(short)input;  	case TypeCode.UInt16:  		return (byte)(ushort)input;  	case TypeCode.Int32:  		return (byte)(int)input;  	case TypeCode.UInt32:  		return (byte)(uint)input;  	case TypeCode.Int64:  		return (byte)(long)input;  	case TypeCode.UInt64:  		return (byte)(ulong)input;  	case TypeCode.Single:  		return (byte)(float)input;  	case TypeCode.Double:  		return (byte)(double)input;  	case TypeCode.Decimal:  		return (byte)(decimal)input;  	}  	break;  case TypeCode.Int16:  	switch (sourceType) {  	case TypeCode.Char:  		return (short)(char)input;  	case TypeCode.SByte:  		return (short)(sbyte)input;  	case TypeCode.Byte:  		return (short)(byte)input;  	case TypeCode.UInt16:  		return (short)(ushort)input;  	case TypeCode.Int32:  		return (short)(int)input;  	case TypeCode.UInt32:  		return (short)(uint)input;  	case TypeCode.Int64:  		return (short)(long)input;  	case TypeCode.UInt64:  		return (short)(ulong)input;  	case TypeCode.Single:  		return (short)(float)input;  	case TypeCode.Double:  		return (short)(double)input;  	case TypeCode.Decimal:  		return (short)(decimal)input;  	}  	break;  case TypeCode.UInt16:  	switch (sourceType) {  	case TypeCode.Char:  		return (ushort)(char)input;  	case TypeCode.SByte:  		return (ushort)(sbyte)input;  	case TypeCode.Byte:  		return (ushort)(byte)input;  	case TypeCode.Int16:  		return (ushort)(short)input;  	case TypeCode.Int32:  		return (ushort)(int)input;  	case TypeCode.UInt32:  		return (ushort)(uint)input;  	case TypeCode.Int64:  		return (ushort)(long)input;  	case TypeCode.UInt64:  		return (ushort)(ulong)input;  	case TypeCode.Single:  		return (ushort)(float)input;  	case TypeCode.Double:  		return (ushort)(double)input;  	case TypeCode.Decimal:  		return (ushort)(decimal)input;  	}  	break;  case TypeCode.Int32:  	switch (sourceType) {  	case TypeCode.Char:  		return (int)(char)input;  	case TypeCode.SByte:  		return (int)(sbyte)input;  	case TypeCode.Byte:  		return (int)(byte)input;  	case TypeCode.Int16:  		return (int)(short)input;  	case TypeCode.UInt16:  		return (int)(ushort)input;  	case TypeCode.UInt32:  		return (int)(uint)input;  	case TypeCode.Int64:  		return (int)(long)input;  	case TypeCode.UInt64:  		return (int)(ulong)input;  	case TypeCode.Single:  		return (int)(float)input;  	case TypeCode.Double:  		return (int)(double)input;  	case TypeCode.Decimal:  		return (int)(decimal)input;  	}  	break;  case TypeCode.UInt32:  	switch (sourceType) {  	case TypeCode.Char:  		return (uint)(char)input;  	case TypeCode.SByte:  		return (uint)(sbyte)input;  	case TypeCode.Byte:  		return (uint)(byte)input;  	case TypeCode.Int16:  		return (uint)(short)input;  	case TypeCode.UInt16:  		return (uint)(ushort)input;  	case TypeCode.Int32:  		return (uint)(int)input;  	case TypeCode.Int64:  		return (uint)(long)input;  	case TypeCode.UInt64:  		return (uint)(ulong)input;  	case TypeCode.Single:  		return (uint)(float)input;  	case TypeCode.Double:  		return (uint)(double)input;  	case TypeCode.Decimal:  		return (uint)(decimal)input;  	}  	break;  case TypeCode.Int64:  	switch (sourceType) {  	case TypeCode.Char:  		return (long)(char)input;  	case TypeCode.SByte:  		return (long)(sbyte)input;  	case TypeCode.Byte:  		return (long)(byte)input;  	case TypeCode.Int16:  		return (long)(short)input;  	case TypeCode.UInt16:  		return (long)(ushort)input;  	case TypeCode.Int32:  		return (long)(int)input;  	case TypeCode.UInt32:  		return (long)(uint)input;  	case TypeCode.UInt64:  		return (long)(ulong)input;  	case TypeCode.Single:  		return (long)(float)input;  	case TypeCode.Double:  		return (long)(double)input;  	case TypeCode.Decimal:  		return (long)(decimal)input;  	}  	break;  case TypeCode.UInt64:  	switch (sourceType) {  	case TypeCode.Char:  		return (ulong)(char)input;  	case TypeCode.SByte:  		return (ulong)(sbyte)input;  	case TypeCode.Byte:  		return (ulong)(byte)input;  	case TypeCode.Int16:  		return (ulong)(short)input;  	case TypeCode.UInt16:  		return (ulong)(ushort)input;  	case TypeCode.Int32:  		return (ulong)(int)input;  	case TypeCode.UInt32:  		return (ulong)(uint)input;  	case TypeCode.Int64:  		return (ulong)(long)input;  	case TypeCode.Single:  		return (ulong)(float)input;  	case TypeCode.Double:  		return (ulong)(double)input;  	case TypeCode.Decimal:  		return (ulong)(decimal)input;  	}  	break;  case TypeCode.Single:  	switch (sourceType) {  	case TypeCode.Char:  		return (float)(char)input;  	case TypeCode.SByte:  		return (float)(sbyte)input;  	case TypeCode.Byte:  		return (float)(byte)input;  	case TypeCode.Int16:  		return (float)(short)input;  	case TypeCode.UInt16:  		return (float)(ushort)input;  	case TypeCode.Int32:  		return (float)(int)input;  	case TypeCode.UInt32:  		return (float)(uint)input;  	case TypeCode.Int64:  		return (float)(long)input;  	case TypeCode.UInt64:  		return (float)(ulong)input;  	case TypeCode.Double:  		return (float)(double)input;  	case TypeCode.Decimal:  		return (float)(decimal)input;  	}  	break;  case TypeCode.Double:  	switch (sourceType) {  	case TypeCode.Char:  		return (double)(char)input;  	case TypeCode.SByte:  		return (double)(sbyte)input;  	case TypeCode.Byte:  		return (double)(byte)input;  	case TypeCode.Int16:  		return (double)(short)input;  	case TypeCode.UInt16:  		return (double)(ushort)input;  	case TypeCode.Int32:  		return (double)(int)input;  	case TypeCode.UInt32:  		return (double)(uint)input;  	case TypeCode.Int64:  		return (double)(long)input;  	case TypeCode.UInt64:  		return (double)(ulong)input;  	case TypeCode.Single:  		return (double)(float)input;  	case TypeCode.Decimal:  		return (double)(decimal)input;  	}  	break;  case TypeCode.Decimal:  	switch (sourceType) {  	case TypeCode.Char:  		return (decimal)(char)input;  	case TypeCode.SByte:  		return (decimal)(sbyte)input;  	case TypeCode.Byte:  		return (decimal)(byte)input;  	case TypeCode.Int16:  		return (decimal)(short)input;  	case TypeCode.UInt16:  		return (decimal)(ushort)input;  	case TypeCode.Int32:  		return (decimal)(int)input;  	case TypeCode.UInt32:  		return (decimal)(uint)input;  	case TypeCode.Int64:  		return (decimal)(long)input;  	case TypeCode.UInt64:  		return (decimal)(ulong)input;  	case TypeCode.Single:  		return (decimal)(float)input;  	case TypeCode.Double:  		return (decimal)(double)input;  	}  	break;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.SByte:  	return (char)(sbyte)input;  case TypeCode.Byte:  	return (char)(byte)input;  case TypeCode.Int16:  	return (char)(short)input;  case TypeCode.UInt16:  	return (char)(ushort)input;  case TypeCode.Int32:  	return (char)(int)input;  case TypeCode.UInt32:  	return (char)(uint)input;  case TypeCode.Int64:  	return (char)(long)input;  case TypeCode.UInt64:  	return (char)(ulong)input;  case TypeCode.Single:  	return (char)(float)input;  case TypeCode.Double:  	return (char)(double)input;  case TypeCode.Decimal:  	return (char)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (sbyte)(char)input;  case TypeCode.Byte:  	return (sbyte)(byte)input;  case TypeCode.Int16:  	return (sbyte)(short)input;  case TypeCode.UInt16:  	return (sbyte)(ushort)input;  case TypeCode.Int32:  	return (sbyte)(int)input;  case TypeCode.UInt32:  	return (sbyte)(uint)input;  case TypeCode.Int64:  	return (sbyte)(long)input;  case TypeCode.UInt64:  	return (sbyte)(ulong)input;  case TypeCode.Single:  	return (sbyte)(float)input;  case TypeCode.Double:  	return (sbyte)(double)input;  case TypeCode.Decimal:  	return (sbyte)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (byte)(char)input;  case TypeCode.SByte:  	return (byte)(sbyte)input;  case TypeCode.Int16:  	return (byte)(short)input;  case TypeCode.UInt16:  	return (byte)(ushort)input;  case TypeCode.Int32:  	return (byte)(int)input;  case TypeCode.UInt32:  	return (byte)(uint)input;  case TypeCode.Int64:  	return (byte)(long)input;  case TypeCode.UInt64:  	return (byte)(ulong)input;  case TypeCode.Single:  	return (byte)(float)input;  case TypeCode.Double:  	return (byte)(double)input;  case TypeCode.Decimal:  	return (byte)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (short)(char)input;  case TypeCode.SByte:  	return (short)(sbyte)input;  case TypeCode.Byte:  	return (short)(byte)input;  case TypeCode.UInt16:  	return (short)(ushort)input;  case TypeCode.Int32:  	return (short)(int)input;  case TypeCode.UInt32:  	return (short)(uint)input;  case TypeCode.Int64:  	return (short)(long)input;  case TypeCode.UInt64:  	return (short)(ulong)input;  case TypeCode.Single:  	return (short)(float)input;  case TypeCode.Double:  	return (short)(double)input;  case TypeCode.Decimal:  	return (short)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (ushort)(char)input;  case TypeCode.SByte:  	return (ushort)(sbyte)input;  case TypeCode.Byte:  	return (ushort)(byte)input;  case TypeCode.Int16:  	return (ushort)(short)input;  case TypeCode.Int32:  	return (ushort)(int)input;  case TypeCode.UInt32:  	return (ushort)(uint)input;  case TypeCode.Int64:  	return (ushort)(long)input;  case TypeCode.UInt64:  	return (ushort)(ulong)input;  case TypeCode.Single:  	return (ushort)(float)input;  case TypeCode.Double:  	return (ushort)(double)input;  case TypeCode.Decimal:  	return (ushort)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (int)(char)input;  case TypeCode.SByte:  	return (int)(sbyte)input;  case TypeCode.Byte:  	return (int)(byte)input;  case TypeCode.Int16:  	return (int)(short)input;  case TypeCode.UInt16:  	return (int)(ushort)input;  case TypeCode.UInt32:  	return (int)(uint)input;  case TypeCode.Int64:  	return (int)(long)input;  case TypeCode.UInt64:  	return (int)(ulong)input;  case TypeCode.Single:  	return (int)(float)input;  case TypeCode.Double:  	return (int)(double)input;  case TypeCode.Decimal:  	return (int)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (uint)(char)input;  case TypeCode.SByte:  	return (uint)(sbyte)input;  case TypeCode.Byte:  	return (uint)(byte)input;  case TypeCode.Int16:  	return (uint)(short)input;  case TypeCode.UInt16:  	return (uint)(ushort)input;  case TypeCode.Int32:  	return (uint)(int)input;  case TypeCode.Int64:  	return (uint)(long)input;  case TypeCode.UInt64:  	return (uint)(ulong)input;  case TypeCode.Single:  	return (uint)(float)input;  case TypeCode.Double:  	return (uint)(double)input;  case TypeCode.Decimal:  	return (uint)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (long)(char)input;  case TypeCode.SByte:  	return (long)(sbyte)input;  case TypeCode.Byte:  	return (long)(byte)input;  case TypeCode.Int16:  	return (long)(short)input;  case TypeCode.UInt16:  	return (long)(ushort)input;  case TypeCode.Int32:  	return (long)(int)input;  case TypeCode.UInt32:  	return (long)(uint)input;  case TypeCode.UInt64:  	return (long)(ulong)input;  case TypeCode.Single:  	return (long)(float)input;  case TypeCode.Double:  	return (long)(double)input;  case TypeCode.Decimal:  	return (long)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (ulong)(char)input;  case TypeCode.SByte:  	return (ulong)(sbyte)input;  case TypeCode.Byte:  	return (ulong)(byte)input;  case TypeCode.Int16:  	return (ulong)(short)input;  case TypeCode.UInt16:  	return (ulong)(ushort)input;  case TypeCode.Int32:  	return (ulong)(int)input;  case TypeCode.UInt32:  	return (ulong)(uint)input;  case TypeCode.Int64:  	return (ulong)(long)input;  case TypeCode.Single:  	return (ulong)(float)input;  case TypeCode.Double:  	return (ulong)(double)input;  case TypeCode.Decimal:  	return (ulong)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (float)(char)input;  case TypeCode.SByte:  	return (float)(sbyte)input;  case TypeCode.Byte:  	return (float)(byte)input;  case TypeCode.Int16:  	return (float)(short)input;  case TypeCode.UInt16:  	return (float)(ushort)input;  case TypeCode.Int32:  	return (float)(int)input;  case TypeCode.UInt32:  	return (float)(uint)input;  case TypeCode.Int64:  	return (float)(long)input;  case TypeCode.UInt64:  	return (float)(ulong)input;  case TypeCode.Double:  	return (float)(double)input;  case TypeCode.Decimal:  	return (float)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (double)(char)input;  case TypeCode.SByte:  	return (double)(sbyte)input;  case TypeCode.Byte:  	return (double)(byte)input;  case TypeCode.Int16:  	return (double)(short)input;  case TypeCode.UInt16:  	return (double)(ushort)input;  case TypeCode.Int32:  	return (double)(int)input;  case TypeCode.UInt32:  	return (double)(uint)input;  case TypeCode.Int64:  	return (double)(long)input;  case TypeCode.UInt64:  	return (double)(ulong)input;  case TypeCode.Single:  	return (double)(float)input;  case TypeCode.Decimal:  	return (double)(decimal)input;  }  
Missing Default,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCast,C:\repos\SamiDidier_NClass\lib\NRefactory\ICSharpCode.NRefactory\Utils\CSharpPrimitiveCast.cs,CSharpPrimitiveCastUnchecked,The following switch statement is missing a default case: switch (sourceType) {  case TypeCode.Char:  	return (decimal)(char)input;  case TypeCode.SByte:  	return (decimal)(sbyte)input;  case TypeCode.Byte:  	return (decimal)(byte)input;  case TypeCode.Int16:  	return (decimal)(short)input;  case TypeCode.UInt16:  	return (decimal)(ushort)input;  case TypeCode.Int32:  	return (decimal)(int)input;  case TypeCode.UInt32:  	return (decimal)(uint)input;  case TypeCode.Int64:  	return (decimal)(long)input;  case TypeCode.UInt64:  	return (decimal)(ulong)input;  case TypeCode.Single:  	return (decimal)(float)input;  case TypeCode.Double:  	return (decimal)(double)input;  }  
