Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PDFExport,PDFExportPlugin,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportPlugin.cs,Launch,Cyclomatic complexity of the method is 8
Complex Method,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,CombineClippingRegion,Cyclomatic complexity of the method is 20
Complex Method,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,FontStyleToXFontStyle,Cyclomatic complexity of the method is 8
Complex Method,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,LineCapToXLineCap,Cyclomatic complexity of the method is 12
Complex Method,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,DashStyleToXDashStyle,Cyclomatic complexity of the method is 8
Complex Method,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,Cyclomatic complexity of the method is 13
Long Parameter List,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,DrawLine,The method has 5 parameters.
Long Parameter List,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,DrawEllipse,The method has 5 parameters.
Long Parameter List,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,DrawString,The method has 5 parameters.
Long Parameter List,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,DrawString,The method has 5 parameters.
Long Parameter List,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,FillEllipse,The method has 5 parameters.
Long Statement,PDFExport,PDFExporter,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExporter.cs,Export,The length of the statement  "		MessageBox.Show (String.Format (Strings.Error_CoulNotWritePDF' e.Message)' Strings.ErrorDialog_Title' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 146.
Long Statement,PDFExport,PDFExportPlugin,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportPlugin.cs,Launch,The length of the statement  "	Padding padding = new Padding ((int)new XUnit (optionsForm.PDFPadding.Left' optionsForm.Unit).Point' (int)new XUnit (optionsForm.PDFPadding.Top' optionsForm.Unit).Point' (int)new XUnit (optionsForm.PDFPadding.Right' optionsForm.Unit).Point' (int)new XUnit (optionsForm.PDFPadding.Bottom' optionsForm.Unit).Point); " is 313.
Long Statement,PDFExport,PDFExportProgress,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportProgress.cs,ShowAsync,The length of the statement  "	Point point = parent == null ? new Point (Screen.PrimaryScreen.WorkingArea.Width / 2' Screen.PrimaryScreen.WorkingArea.Height / 2) : new Point (parent.Left + parent.Width / 2' parent.Top + parent.Height / 2); " is 208.
Long Statement,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetClip,The length of the statement  "	graphics.IntersectClip (new XGraphicsPath (path.PathData.Points' path.PathData.Types' FillModeToXFillMode (path.FillMode))); " is 124.
Long Statement,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,DrawString,The length of the statement  "			RectangleF rect = new RectangleF (layoutRectangle.X' layoutRectangle.Y + i * lineHeight' layoutRectangle.Width' lineHeight); " is 124.
Long Statement,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The length of the statement  "				lines.Add (TrimString (line.ToString ()' width' xFont' (wordCount == 1 ? StringTrimming.EllipsisCharacter : StringTrimming.EllipsisWord))); " is 139.
Long Statement,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The length of the statement  "						lines.Add (TrimString (line.ToString ()' width' xFont' (wordCount == 1 ? StringTrimming.EllipsisCharacter : StringTrimming.EllipsisWord))); " is 139.
Long Statement,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,TrimString,The length of the statement  "	bool ellipsis = stringTrimming == StringTrimming.EllipsisCharacter || stringTrimming == StringTrimming.EllipsisWord || stringTrimming == StringTrimming.EllipsisPath; " is 165.
Empty Catch Block,PDFExport,PDFExportPlugin,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportPlugin.cs,PDFExportPlugin,The method has an empty catch block.
Magic Number,PDFExport,PDFExporter,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExporter.cs,Export,The following statement contains a magic number: page.Width = new XUnit (diagramSize.Width' XGraphicsUnit.Presentation) + new XUnit (padding.Right * 2);  
Magic Number,PDFExport,PDFExporter,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExporter.cs,Export,The following statement contains a magic number: page.Height = new XUnit (diagramSize.Height' XGraphicsUnit.Presentation) + new XUnit (padding.Bottom * 2);  
Magic Number,PDFExport,PDFExportProgress,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportProgress.cs,Run,The following statement contains a magic number: progressForm.Location = new Point (point.X - progressForm.Width / 2' point.Y - progressForm.Height / 2);  
Magic Number,PDFExport,PDFExportProgress,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportProgress.cs,Run,The following statement contains a magic number: progressForm.Location = new Point (point.X - progressForm.Width / 2' point.Y - progressForm.Height / 2);  
Magic Number,PDFExport,PDFExportProgress,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportProgress.cs,Run,The following statement contains a magic number: try {  	while (true) {  		Thread.Sleep (5);  		Application.DoEvents ();  	}  }  catch (ThreadAbortException) {  	//We are asked to close the window  	progressForm.Close ();  	progressForm.Dispose ();  }  
Magic Number,PDFExport,PDFExportProgress,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportProgress.cs,Run,The following statement contains a magic number: while (true) {  	Thread.Sleep (5);  	Application.DoEvents ();  }  
Magic Number,PDFExport,PDFExportProgress,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportProgress.cs,Run,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,PDFExport,PDFExportProgress,C:\repos\SamiDidier_NClass\src\PDFExport\PDFExportProgress.cs,timer_Tick,The following statement contains a magic number: pictureBoxEntity.Left += 2;  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The following statement contains a magic number: for (int i = 0; i < tokens.Count; i += 2) {  	line.Append (tokens [i]);  	wordCount++;  	double lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  	if (lineWidth > width) {  		//too long => wrap  		if (lines.Count == maxLines - 1) {  			//This is the last line. Trim the line.  			lines.Add (TrimString (line.ToString ()' width' xFont' (wordCount == 1 ? StringTrimming.EllipsisCharacter : StringTrimming.EllipsisWord)));  			return lines;  		}  		if (wordCount == 1) {  			//single word too long => while too long: new line  			int charsSet = 0;  			while (lineWidth > width) {  				if (lines.Count == maxLines - 1) {  					//This is the last line. Trim the line.  					lines.Add (TrimString (line.ToString ()' width' xFont' StringTrimming.EllipsisCharacter));  					return lines;  				}  				//Remove characters until the "word" fits  				do {  					line.Length--;  					lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  				}  				while (lineWidth > width && line.Length > 0);  				if (line.Length == 0) {  					//This can happen if the width is to small for one singel char. We set the char  					//in this case even if it doesn't realy fit.  					line.Append (tokens [i] [charsSet]);  				}  				lines.Add (line.ToString ());  				charsSet += line.Length;  				//The next line starts with the rest of the word  				line = new StringBuilder (tokens [i].Substring (charsSet));  				lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  			}  		}  		else {  			//multiple words in line => remove last one  			line.Length -= tokens [i].Length;  			lines.Add (line.ToString ().TrimEnd ());  			line = new StringBuilder ();  			wordCount = 0;  			i -= 2;  		}  	}  	if (lineWidth <= width) {  		if (i + 1 < tokens.Count) {  			string token = tokens [i + 1];  			Regex regex = new Regex ("\r\n|\n\r|\n|\r");  			if (regex.IsMatch (token)) {  				// A new line  				if (lines.Count == maxLines - 1) {  					//This is the last line. Trim the line.  					line.Append ("...");  					lines.Add (TrimString (line.ToString ()' width' xFont' (wordCount == 1 ? StringTrimming.EllipsisCharacter : StringTrimming.EllipsisWord)));  					return lines;  				}  				lines.Add (line.ToString ().TrimEnd ());  				line = new StringBuilder ();  				wordCount = 0;  			}  			else {  				line.Append (token);  			}  		}  	}  }  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The following statement contains a magic number: for (int i = 0; i < tokens.Count; i += 2) {  	line.Append (tokens [i]);  	wordCount++;  	double lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  	if (lineWidth > width) {  		//too long => wrap  		if (lines.Count == maxLines - 1) {  			//This is the last line. Trim the line.  			lines.Add (TrimString (line.ToString ()' width' xFont' (wordCount == 1 ? StringTrimming.EllipsisCharacter : StringTrimming.EllipsisWord)));  			return lines;  		}  		if (wordCount == 1) {  			//single word too long => while too long: new line  			int charsSet = 0;  			while (lineWidth > width) {  				if (lines.Count == maxLines - 1) {  					//This is the last line. Trim the line.  					lines.Add (TrimString (line.ToString ()' width' xFont' StringTrimming.EllipsisCharacter));  					return lines;  				}  				//Remove characters until the "word" fits  				do {  					line.Length--;  					lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  				}  				while (lineWidth > width && line.Length > 0);  				if (line.Length == 0) {  					//This can happen if the width is to small for one singel char. We set the char  					//in this case even if it doesn't realy fit.  					line.Append (tokens [i] [charsSet]);  				}  				lines.Add (line.ToString ());  				charsSet += line.Length;  				//The next line starts with the rest of the word  				line = new StringBuilder (tokens [i].Substring (charsSet));  				lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  			}  		}  		else {  			//multiple words in line => remove last one  			line.Length -= tokens [i].Length;  			lines.Add (line.ToString ().TrimEnd ());  			line = new StringBuilder ();  			wordCount = 0;  			i -= 2;  		}  	}  	if (lineWidth <= width) {  		if (i + 1 < tokens.Count) {  			string token = tokens [i + 1];  			Regex regex = new Regex ("\r\n|\n\r|\n|\r");  			if (regex.IsMatch (token)) {  				// A new line  				if (lines.Count == maxLines - 1) {  					//This is the last line. Trim the line.  					line.Append ("...");  					lines.Add (TrimString (line.ToString ()' width' xFont' (wordCount == 1 ? StringTrimming.EllipsisCharacter : StringTrimming.EllipsisWord)));  					return lines;  				}  				lines.Add (line.ToString ().TrimEnd ());  				line = new StringBuilder ();  				wordCount = 0;  			}  			else {  				line.Append (token);  			}  		}  	}  }  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The following statement contains a magic number: i += 2
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The following statement contains a magic number: if (lineWidth > width) {  	//too long => wrap  	if (lines.Count == maxLines - 1) {  		//This is the last line. Trim the line.  		lines.Add (TrimString (line.ToString ()' width' xFont' (wordCount == 1 ? StringTrimming.EllipsisCharacter : StringTrimming.EllipsisWord)));  		return lines;  	}  	if (wordCount == 1) {  		//single word too long => while too long: new line  		int charsSet = 0;  		while (lineWidth > width) {  			if (lines.Count == maxLines - 1) {  				//This is the last line. Trim the line.  				lines.Add (TrimString (line.ToString ()' width' xFont' StringTrimming.EllipsisCharacter));  				return lines;  			}  			//Remove characters until the "word" fits  			do {  				line.Length--;  				lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  			}  			while (lineWidth > width && line.Length > 0);  			if (line.Length == 0) {  				//This can happen if the width is to small for one singel char. We set the char  				//in this case even if it doesn't realy fit.  				line.Append (tokens [i] [charsSet]);  			}  			lines.Add (line.ToString ());  			charsSet += line.Length;  			//The next line starts with the rest of the word  			line = new StringBuilder (tokens [i].Substring (charsSet));  			lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  		}  	}  	else {  		//multiple words in line => remove last one  		line.Length -= tokens [i].Length;  		lines.Add (line.ToString ().TrimEnd ());  		line = new StringBuilder ();  		wordCount = 0;  		i -= 2;  	}  }  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The following statement contains a magic number: if (wordCount == 1) {  	//single word too long => while too long: new line  	int charsSet = 0;  	while (lineWidth > width) {  		if (lines.Count == maxLines - 1) {  			//This is the last line. Trim the line.  			lines.Add (TrimString (line.ToString ()' width' xFont' StringTrimming.EllipsisCharacter));  			return lines;  		}  		//Remove characters until the "word" fits  		do {  			line.Length--;  			lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  		}  		while (lineWidth > width && line.Length > 0);  		if (line.Length == 0) {  			//This can happen if the width is to small for one singel char. We set the char  			//in this case even if it doesn't realy fit.  			line.Append (tokens [i] [charsSet]);  		}  		lines.Add (line.ToString ());  		charsSet += line.Length;  		//The next line starts with the rest of the word  		line = new StringBuilder (tokens [i].Substring (charsSet));  		lineWidth = graphics.MeasureString (line.ToString ()' xFont).Width;  	}  }  else {  	//multiple words in line => remove last one  	line.Length -= tokens [i].Length;  	lines.Add (line.ToString ().TrimEnd ());  	line = new StringBuilder ();  	wordCount = 0;  	i -= 2;  }  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,SetText,The following statement contains a magic number: i -= 2;  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,TrimString,The following statement contains a magic number: do {  	if (word) {  		int pos = result.LastIndexOf (' ');  		result = (pos <= 0 ? "" : result.Substring (0' pos));  	}  	else {  		result = result.Substring (0' (ellipsis ? result.Length - 4 : result.Length - 1));  	}  	result = ellipsis ? result + "..." : result;  }  while (graphics.MeasureString (result' font).Width > width || s.Length <= 0);  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,TrimString,The following statement contains a magic number: if (word) {  	int pos = result.LastIndexOf (' ');  	result = (pos <= 0 ? "" : result.Substring (0' pos));  }  else {  	result = result.Substring (0' (ellipsis ? result.Length - 4 : result.Length - 1));  }  
Magic Number,PDFExport,PDFGraphics,C:\repos\SamiDidier_NClass\src\PDFExport\PDFGraphics.cs,TrimString,The following statement contains a magic number: result = result.Substring (0' (ellipsis ? result.Length - 4 : result.Length - 1));  
Magic Number,PDFExport,RegionExtend,C:\repos\SamiDidier_NClass\src\PDFExport\RegionExtend.cs,GetPath,The following statement contains a magic number: path.AddRectangle (new Rectangle (0' 0' 100' 100));  
Magic Number,PDFExport,RegionExtend,C:\repos\SamiDidier_NClass\src\PDFExport\RegionExtend.cs,GetPath,The following statement contains a magic number: path.AddRectangle (new Rectangle (0' 0' 100' 100));  
