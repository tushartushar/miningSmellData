Implementation smell,Namespace,Class,File,Method,Description
Long Method,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Insert,The method has 142 lines of code.
Long Method,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetFactory,The method has 182 lines of code.
Complex Method,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetAutoMapper,Cyclomatic complexity of the method is 9
Complex Method,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,PocoData,Cyclomatic complexity of the method is 9
Complex Method,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetFactory,Cyclomatic complexity of the method is 9
Long Parameter List,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,BuildPageQueries,The method has 6 parameters. Parameters: skip' take' sql' args' sqlCount' sqlPage
Long Parameter List,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,FindSplitPoint,The method has 5 parameters. Parameters: typeThis' typeNext' sql' r' pos
Long Parameter List,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Update,The method has 5 parameters. Parameters: tableName' primaryKeyName' poco' primaryKeyValue' columns
Long Parameter List,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetFactory,The method has 6 parameters. Parameters: sql' connString' ForceDateTimesToUtc' firstColumn' countColumns' r
Long Statement,RequestReduce.SqlServer,FileRepository,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\FileRepository.cs,ValidateEntity,The length of the statement  "                throw new ArgumentOutOfRangeException("requestReduceFile"' requestReduceFile.FileName.Length' "requestReduceFile.FileName.Length"); " is 131.
Long Statement,RequestReduce.SqlServer,FileRepository,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\FileRepository.cs,BuildFailedUpdateException,The length of the statement  "            var message = new StringBuilder(string.Format("You were saving {0}. Context failed to save."' attemptedEntity.RequestReduceFileId)); " is 132.
Long Statement,RequestReduce.SqlServer,SqlServerStore,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\SqlServerStore.cs,GetSavedUrls,The length of the statement  "            return files.ToDictionary(file => uriBuilder.ParseKey(file)' file => uriBuilder.BuildResourceUrl(uriBuilder.ParseKey(file)' uriBuilder.ParseSignature(file)' RRContainer.GetAllResourceTypes().SingleOrDefault(x => file.EndsWith(x.FileName)).GetType())); " is 251.
Long Statement,RequestReduce.SqlServer,SqlServerStore,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\SqlServerStore.cs,GetUrlByKey,The length of the statement  "            return fileName == null ? null : uriBuilder.BuildResourceUrl(uriBuilder.ParseKey(fileName)' uriBuilder.ParseSignature(fileName)' resourceType); " is 143.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,CommonConstruct,The length of the statement  "            if (_dbType == DBType.MySql && _connectionString != null && _connectionString.IndexOf("Allow User Variables=true") >= 0) " is 120.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,ProcessParams,The length of the statement  "                        throw new ArgumentOutOfRangeException(string.Format("Parameter '@{0}' specified but only {1} parameters supplied (in `{2}`)"' paramIndex' args_src.Length' _sql)); " is 162.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,ProcessParams,The length of the statement  "                        throw new ArgumentException(string.Format("Parameter '@{0}' specified but none of the passed arguments have a property with this name (in '{1}')"' param' _sql)); " is 161.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,SplitSqlForPaging,The length of the statement  "                sqlCount = sql.Substring(0' g.Index) + "COUNT(" + m.Groups[1].ToString().Trim() + ") " + sql.Substring(g.Index + g.Length); " is 123.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,BuildPageQueries,The length of the statement  "                sqlPage = string.Format("SELECT * FROM (SELECT ROW_NUMBER() OVER ({0}) peta_rn' {1}) peta_paged WHERE peta_rn>@{2} AND peta_rn<=@{3}"' " is 134.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Query,The length of the statement  "                    var factory = pd.GetFactory(cmd.CommandText' _sharedConnection.ConnectionString' ForceDateTimesToUtc' 0' r.FieldCount' r) as Func<IDataReader' T>; " is 146.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetAutoMapper,The length of the statement  "                            throw new InvalidOperationException(string.Format("Can't auto join {0} as {1} has more than one property of type {0}"' types[i]' types[j])); " is 140.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,FindSplitPoint,The length of the statement  "                return PocoData.ForType(typeThis).GetFactory(sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' pos' r.FieldCount - pos' r); " is 135.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,FindSplitPoint,The length of the statement  "                if (usedColumns.ContainsKey(fieldName) || (!pdThis.Columns.ContainsKey(fieldName) && pdNext.Columns.ContainsKey(fieldName))) " is 124.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,FindSplitPoint,The length of the statement  "                    return pdThis.GetFactory(sql' _sharedConnection.ConnectionString' ForceDateTimesToUtc' firstColumn' pos - firstColumn' r); " is 122.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,FindSplitPoint,The length of the statement  "            throw new InvalidOperationException(string.Format("Couldn't find split point between {0} and {1}"' typeThis' typeNext)); " is 120.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "            var m = new DynamicMethod("petapoco_multipoco_factory"' typeof(TRet)' new Type[] { typeof(MultiPocoFactory)' typeof(IDataReader)' typeof(object) }' typeof(MultiPocoFactory)); " is 174.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "            il.Emit(OpCodes.Callvirt' Expression.GetFuncType(types.Concat(new Type[] { typeof(TRet) }).ToArray()).GetMethod("Invoke")); " is 123.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,CreateMultiPocoFactory,The length of the statement  "            return (Func<IDataReader' object' TRet>)m.CreateDelegate(typeof(Func<IDataReader' object' TRet>)' new MultiPocoFactory() { m_Delegates = dels }); " is 145.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Exists,The length of the statement  "            return FirstOrDefault<T>(string.Format("WHERE {0}=@0"' EscapeSqlIdentifier(PocoData.ForType(typeof(T)).TableInfo.PrimaryKey))' primaryKey) != null; " is 147.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Single,The length of the statement  "            return Single<T>(string.Format("WHERE {0}=@0"' EscapeSqlIdentifier(PocoData.ForType(typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 131.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,SingleOrDefault,The length of the statement  "            return SingleOrDefault<T>(string.Format("WHERE {0}=@0"' EscapeSqlIdentifier(PocoData.ForType(typeof(T)).TableInfo.PrimaryKey))' primaryKey); " is 140.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Delete,The length of the statement  "            var sql = string.Format("DELETE FROM {0} WHERE {1}=@0"' EscapeTableName(tableName)' EscapeSqlIdentifier(primaryKeyName)); " is 121.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,IsNew,The length of the statement  "                    throw new ArgumentException(string.Format("The object doesn't have a property matching the primary key column name '{0}'"' primaryKeyName)); " is 140.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,IsNew,The length of the statement  "                throw new InvalidOperationException("IsNew() and Save() are only supported on tables with auto-increment/identity primary key columns"); " is 136.
Long Statement,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,FormatCommand,The length of the statement  "            return FormatCommand(cmd.CommandText' (from IDataParameter parameter in cmd.Parameters select parameter.Value).ToArray()); " is 122.
Long Statement,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetFactory,The length of the statement  "                    var m = new DynamicMethod("petapoco_factory_" + PocoFactories.Count.ToString()' type' new Type[] { typeof(IDataReader) }' true); " is 128.
Long Statement,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetFactory,The length of the statement  "                            il.Emit(OpCodes.Newobj' type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null)); " is 140.
Long Statement,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetFactory,The length of the statement  "                            var fnOnLoaded = RecurseInheritedTypes<MethodInfo>(type' (x) => x.GetMethod("OnLoaded"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null)); " is 184.
Long Statement,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetConverter,The length of the statement  "                if (forceDateTimesToUtc && converter == null && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?))) " is 141.
Complex Conditional,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetFactory,The conditional expression  "valuegetter != null                                              && valuegetter.ReturnType == srcType                                              && (valuegetter.ReturnType == dstType || valuegetter.ReturnType == Nullable.GetUnderlyingType(dstType))"  is complex.
Complex Conditional,RequestReduce.SqlServer.ORM,PocoData,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,GetConverter,The conditional expression  "forceDateTimesToUtc && converter == null && srcType == typeof(DateTime) && (dstType == typeof(DateTime) || dstType == typeof(DateTime?))"  is complex.
Magic Number,RequestReduce.SqlServer,DbDiskCache,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\DbDiskCache.cs,DbDiskCache,The following statement contains a magic number: const int interval = 1000*60*5;
Magic Number,RequestReduce.SqlServer,DbDiskCache,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\DbDiskCache.cs,DbDiskCache,The following statement contains a magic number: const int interval = 1000*60*5;
Magic Number,RequestReduce.SqlServer,DbDiskCache,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\DbDiskCache.cs,DbDiskCache,The following statement contains a magic number: const int interval = 1000*60*5;
Magic Number,RequestReduce.SqlServer,DbDiskCache,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\DbDiskCache.cs,PurgeOldFiles,The following statement contains a magic number: try              {                  oldEntries = fileList.Where(x => DateTime.Now.Subtract(x.Value).TotalMinutes > 5).ToList();              }              finally              {                  _cacheLock.ExitReadLock();              }
Magic Number,RequestReduce.SqlServer,FileRepository,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\FileRepository.cs,ValidateEntity,The following statement contains a magic number: if (requestReduceFile.FileName.Length > 150)              {                  throw new ArgumentOutOfRangeException("requestReduceFile"' requestReduceFile.FileName.Length' "requestReduceFile.FileName.Length");              }
Magic Number,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Database,The following statement contains a magic number: _sharedConnectionDepth = 2;
Magic Number,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)		// PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      p.Size = Math.Max((item as string).Length + 1' 4000);		// Help query plan caching by using common size                      p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL)                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)		// PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      p.Size = Math.Max((item as string).Length + 1' 4000);		// Help query plan caching by using common size                      p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL)                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,RequestReduce.SqlServer.ORM,Database,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,AddParam,The following statement contains a magic number: if (item == null)              {                  p.Value = DBNull.Value;              }              else              {                  var t = item.GetType();                  if (t.IsEnum)		// PostgreSQL .NET driver wont cast enum to int                  {                      p.Value = (int)item;                  }                  else if (t == typeof(Guid))                  {                      p.Value = item.ToString();                      p.DbType = DbType.String;                      p.Size = 40;                  }                  else if (t == typeof(string))                  {                      p.Size = Math.Max((item as string).Length + 1' 4000);		// Help query plan caching by using common size                      p.Value = item;                  }                  else if (t == typeof(AnsiString))                  {                      // Thanks @DataChomp for pointing out the SQL Server indexing performance hit of using wrong string type on varchar                      p.Size = Math.Max((item as AnsiString).Value.Length + 1' 4000);                      p.Value = (item as AnsiString).Value;                      p.DbType = DbType.AnsiString;                  }                  else if (t == typeof(bool) && _dbType != DBType.PostgreSQL)                  {                      p.Value = ((bool)item) ? 1 : 0;                  }                  else if (item.GetType().Name == "SqlGeography") //SqlGeography is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geography"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                    else if (item.GetType().Name == "SqlGeometry") //SqlGeometry is a CLR Type                  {                      p.GetType().GetProperty("UdtTypeName").SetValue(p' "geometry"' null); //geography is the equivalent SQL Server Type                      p.Value = item;                  }                  else                  {                      p.Value = item;                  }              }
Magic Number,RequestReduce.SqlServer.ORM,Sql,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty(_sql))              {                  // Add SQL to the string                  if (sb.Length > 0)                  {                      sb.Append("\n");                  }                    var sql = Database.ProcessParams(_sql' _args' args);                    if (Is(lhs' "WHERE ") && Is(this' "WHERE "))                      sql = "AND " + sql.Substring(6);                  if (Is(lhs' "ORDER BY ") && Is(this' "ORDER BY "))                      sql = "' " + sql.Substring(9);                    sb.Append(sql);              }
Magic Number,RequestReduce.SqlServer.ORM,Sql,C:\repos\mwrock_RequestReduce\RequestReduce.SqlServer\ORM\PetaPoco.cs,Build,The following statement contains a magic number: if (!String.IsNullOrEmpty(_sql))              {                  // Add SQL to the string                  if (sb.Length > 0)                  {                      sb.Append("\n");                  }                    var sql = Database.ProcessParams(_sql' _args' args);                    if (Is(lhs' "WHERE ") && Is(this' "WHERE "))                      sql = "AND " + sql.Substring(6);                  if (Is(lhs' "ORDER BY ") && Is(this' "ORDER BY "))                      sql = "' " + sql.Substring(9);                    sb.Append(sql);              }
