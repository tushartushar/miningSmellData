Implementation smell,Namespace,Class,File,Method,Description
Magic Number,StockMarket,SimpleAuthenticationService,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleAuthenticationService.cs,AuthenticateUserAsync,The following statement contains a magic number: await Task.Delay(5000);
Magic Number,StockMarket,SimpleDataContext,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleDataContext.cs,SimpleDataContext,The following statement contains a magic number: DemoData.Holdings = new List<UserStockHolding>              {                  new UserStockHolding { UserId = jon.Id' Ticker = "acme"' Quantity = 20 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "abcd"' Quantity = 5 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "efgh"' Quantity = 10 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "ijkl"' Quantity = 1 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "mnop"' Quantity = 15 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "acme"' Quantity = 5 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "xyz"' Quantity = 10 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "tkpb"' Quantity = 3 }              };
Magic Number,StockMarket,SimpleDataContext,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleDataContext.cs,SimpleDataContext,The following statement contains a magic number: DemoData.Holdings = new List<UserStockHolding>              {                  new UserStockHolding { UserId = jon.Id' Ticker = "acme"' Quantity = 20 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "abcd"' Quantity = 5 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "efgh"' Quantity = 10 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "ijkl"' Quantity = 1 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "mnop"' Quantity = 15 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "acme"' Quantity = 5 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "xyz"' Quantity = 10 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "tkpb"' Quantity = 3 }              };
Magic Number,StockMarket,SimpleDataContext,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleDataContext.cs,SimpleDataContext,The following statement contains a magic number: DemoData.Holdings = new List<UserStockHolding>              {                  new UserStockHolding { UserId = jon.Id' Ticker = "acme"' Quantity = 20 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "abcd"' Quantity = 5 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "efgh"' Quantity = 10 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "ijkl"' Quantity = 1 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "mnop"' Quantity = 15 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "acme"' Quantity = 5 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "xyz"' Quantity = 10 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "tkpb"' Quantity = 3 }              };
Magic Number,StockMarket,SimpleDataContext,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleDataContext.cs,SimpleDataContext,The following statement contains a magic number: DemoData.Holdings = new List<UserStockHolding>              {                  new UserStockHolding { UserId = jon.Id' Ticker = "acme"' Quantity = 20 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "abcd"' Quantity = 5 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "efgh"' Quantity = 10 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "ijkl"' Quantity = 1 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "mnop"' Quantity = 15 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "acme"' Quantity = 5 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "xyz"' Quantity = 10 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "tkpb"' Quantity = 3 }              };
Magic Number,StockMarket,SimpleDataContext,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleDataContext.cs,SimpleDataContext,The following statement contains a magic number: DemoData.Holdings = new List<UserStockHolding>              {                  new UserStockHolding { UserId = jon.Id' Ticker = "acme"' Quantity = 20 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "abcd"' Quantity = 5 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "efgh"' Quantity = 10 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "ijkl"' Quantity = 1 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "mnop"' Quantity = 15 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "acme"' Quantity = 5 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "xyz"' Quantity = 10 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "tkpb"' Quantity = 3 }              };
Magic Number,StockMarket,SimpleDataContext,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleDataContext.cs,SimpleDataContext,The following statement contains a magic number: DemoData.Holdings = new List<UserStockHolding>              {                  new UserStockHolding { UserId = jon.Id' Ticker = "acme"' Quantity = 20 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "abcd"' Quantity = 5 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "efgh"' Quantity = 10 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "ijkl"' Quantity = 1 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "mnop"' Quantity = 15 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "acme"' Quantity = 5 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "xyz"' Quantity = 10 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "tkpb"' Quantity = 3 }              };
Magic Number,StockMarket,SimpleDataContext,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleDataContext.cs,SimpleDataContext,The following statement contains a magic number: DemoData.Holdings = new List<UserStockHolding>              {                  new UserStockHolding { UserId = jon.Id' Ticker = "acme"' Quantity = 20 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "abcd"' Quantity = 5 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "efgh"' Quantity = 10 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "ijkl"' Quantity = 1 }'                  new UserStockHolding { UserId = jon.Id' Ticker = "mnop"' Quantity = 15 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "acme"' Quantity = 5 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "xyz"' Quantity = 10 }'                  new UserStockHolding { UserId = rob.Id' Ticker = "tkpb"' Quantity = 3 }              };
Magic Number,StockMarket,SimpleStockPortfolioService,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleStockPortfolioService.cs,GetPortfolioAsync,The following statement contains a magic number: await Task.Delay(RandomProvider.GetThreadRandom().Next(2000));
Magic Number,StockMarket,SimpleStockPriceService,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleStockPriceService.cs,LookupPriceAsync,The following statement contains a magic number: if (ticker == "acme")              {                  await Task.Delay(3000);              }
Magic Number,StockMarket,SimpleStockPriceService,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleStockPriceService.cs,LookupPriceAsync,The following statement contains a magic number: await Task.Delay(1000 + RandomProvider.GetThreadRandom().Next(1000));
Magic Number,StockMarket,SimpleStockPriceService,C:\repos\jskeet_DemoCode\AsyncIntro\Code\StockMarket\SimpleStockPriceService.cs,LookupPriceAsync,The following statement contains a magic number: await Task.Delay(1000 + RandomProvider.GetThreadRandom().Next(1000));
