Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AsyncHttpService,HttpJsonRpcHandler,C:\repos\jskeet_DemoCode\AsyncIntro\Code\AsyncHttpService\HttpJsonRpcHandler.cs,Start,The following statement contains a magic number: using (HttpListener listener = new HttpListener())              {                  listener.Prefixes.Add("http://localhost:" + port + "/" + prefix + "/");                  listener.Start();                    int requestId = 0;                  while (true)                  {                      HttpListenerContext context = await listener.GetContextAsync();                      HttpListenerRequest request = context.Request;                        if (!request.Url.AbsolutePath.StartsWith(fullPrefix))                      {                          Console.WriteLine("Unexpected request for " + request.Url);                          await WriteErrorResponse(context' HttpStatusCode.NotFound' "Unknown url");                          continue;                      }                        requestId++;                        string relativePath = request.Url.AbsolutePath.Substring(fullPrefix.Length);                      if (relativePath == "quit")                      {                          using (HttpListenerResponse response = context.Response)                          {                              response.StatusCode = (int) HttpStatusCode.OK;                              response.ContentType = "text/plain";                              await WriteResponseBody(response' "Shutting down");                          }                          break;                      }                        string[] parts = relativePath.Split('/');                        if (parts.Length != 2)                      {                          Console.WriteLine("Expected target/method relative path; was " + relativePath);                          await WriteErrorResponse(context' HttpStatusCode.BadRequest' "Bad path");                          continue;                      }                        object target;                      if (!targets.TryGetValue(parts[0]' out target))                      {                          Console.WriteLine("Unknown target for " + request.Url);                          await WriteErrorResponse(context' HttpStatusCode.NotFound' "Unknown target");                          continue;                      }                        // TODO: Make this cleaner. Possibly use a linked list?                      Task task = HandleRequestAsync(context' target' parts[1]' requestId);                      outstandingRequests[requestId] = task;                      int thisRequestId = requestId;  #pragma warning disable 4014                      task.ContinueWith(t => outstandingRequests.TryRemove(thisRequestId' out task));  #pragma warning restore                  }                  Console.WriteLine("Shutting down... waiting for {0} outstanding requests"' outstandingRequests.Count);                  await Task.WhenAll(outstandingRequests.Values);                  listener.Stop();              }
Magic Number,AsyncHttpService,Program,C:\repos\jskeet_DemoCode\AsyncIntro\Code\AsyncHttpService\Program.cs,Main,The following statement contains a magic number: var handler = new HttpJsonRpcHandler(8888' "async");
