Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,Cyclomatic complexity of the method is 8
Complex Method,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,Cyclomatic complexity of the method is 8
Complex Method,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,Cyclomatic complexity of the method is 9
Long Parameter List,VDrumExplorer.Data.Fields,Parameters,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\FieldBase.cs,Parameters,The method has 6 parameters. Parameters: schema' name' offset' size' description' condition
Long Parameter List,VDrumExplorer.Data.Fields,NumericField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericField.cs,NumericField,The method has 9 parameters. Parameters: common' min' max' default' divisor' multiplier' valueOffset' suffix' customValueFormatting
Long Parameter List,VDrumExplorer.Data.Json,ContainerJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\ContainerJson.cs,ToContainer,The method has 6 parameters. Parameters: schema' module' name' offset' description' condition
Long Parameter List,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The method has 6 parameters. Parameters: schema' module' name' offset' description' condition
Long Parameter List,VDrumExplorer.Data.Json,HexInt32Converter,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\HexInt32Converter.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,VDrumExplorer.Data.Layout,VisualTreeNode,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Layout\VisualTreeNode.cs,VisualTreeNode,The method has 9 parameters. Parameters: parent' context' childrenProvider' details' description' kitOnlyDescription' midiNoteField' kitNumber' instrumentNumber
Long Identifier,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,,The length of the parameter DurationPerInstrumentFieldNumber is 32.
Long Identifier,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,,The length of the parameter _repeated_instrumentCaptures_codec is 34.
Long Statement,VDrumExplorer.Data.Fields,FieldCondition,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\FieldCondition.cs,IsEnabled,The length of the statement  "            var referenceField = context.GetPrimitiveFields(data).OfType<NumericFieldBase>().Single(field => field.Offset == ReferenceOffset); " is 130.
Long Statement,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,TrySetText,The length of the statement  "            var instrument = Schema.PresetInstruments.Concat(Schema.UserSampleInstruments).FirstOrDefault(inst => inst.Name == text); " is 121.
Long Statement,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The length of the statement  "                var switchContainerOffset = ValidateNotNull(overlay.SwitchContainerOffset' nameof(overlay.SwitchContainerOffset)).Value; " is 120.
Long Statement,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The length of the statement  "                    .Select((json' index) => json.ToContainer(schema' module' Invariant($"Overlay[{index}]")' 0' description' condition: null)) " is 123.
Long Statement,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The length of the statement  "            FieldBase.Parameters BuildCommon(int size) => new FieldBase.Parameters(schema' name' offset' size' description' condition); " is 123.
Long Statement,VDrumExplorer.Data.Json,ModuleJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\ModuleJson.cs,FromJson,The length of the statement  "            var serializer = new JsonSerializer { Converters = { new HexInt32Converter() }' MissingMemberHandling = MissingMemberHandling.Error }; " is 134.
Long Statement,VDrumExplorer.Data.Json,VisualTreeNodeJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\VisualTreeNodeJson.cs,ConvertVisualNodes,The length of the statement  "                Func<VisualTreeNode?' IReadOnlyList<VisualTreeNode>> childrenProvider = newNode => Children.SelectMany(child => child.ConvertVisualNodes(newNode' context)).ToList().AsReadOnly(); " is 178.
Long Statement,VDrumExplorer.Data.Json,VisualTreeNodeJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\VisualTreeNodeJson.cs,ConvertVisualNodes,The length of the statement  "                return new VisualTreeNode(parent' context.ContainerContext' childrenProvider' details' description' kitOnlyDescription' midiNoteField' kitIndex' instrumentIndex); " is 162.
Long Statement,VDrumExplorer.Data.Layout,VisualTreeNode,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Layout\VisualTreeNode.cs,FromFixedContainer,The length of the statement  "                container.Fields.OfType<Container>().Select(c => FromFixedContainer(newNode' new FixedContainer(c' context.Address + c.Offset))).ToList().AsReadOnly(); " is 151.
Long Statement,VDrumExplorer.Data.Layout,VisualTreeNode,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Layout\VisualTreeNode.cs,FromFixedContainer,The length of the statement  "            return new VisualTreeNode(parent' context' childrenProvider' details' new FormattableDescription(container.Description' null)' null' null' null' null); " is 151.
Long Statement,VDrumExplorer.Data.Proto,ProtoIo,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\ProtoIo.cs,ReadDrumFile,The length of the statement  "                    throw new InvalidDataException($"Magic number invalid in stream. Index={i}; Expected={MagicBytes[i]}; Actual={streamByte}"); " is 124.
Magic Number,VDrumExplorer.Data,ModuleData,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\ModuleData.cs,GetSegmentOrNull,The following statement contains a magic number: int candidate = (lowInc + highExc) / 2;
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,GetInstrument,The following statement contains a magic number: int rawValue = (short) (                      (data.GetAddressValue(instrumentAddress) << 12) |                      (data.GetAddressValue(instrumentAddress + 1) << 8) |                      (data.GetAddressValue(instrumentAddress + 2) << 4) |                      data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,GetInstrument,The following statement contains a magic number: int rawValue = (short) (                      (data.GetAddressValue(instrumentAddress) << 12) |                      (data.GetAddressValue(instrumentAddress + 1) << 8) |                      (data.GetAddressValue(instrumentAddress + 2) << 4) |                      data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,GetInstrument,The following statement contains a magic number: int rawValue = (short) (                      (data.GetAddressValue(instrumentAddress) << 12) |                      (data.GetAddressValue(instrumentAddress + 1) << 8) |                      (data.GetAddressValue(instrumentAddress + 2) << 4) |                      data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,GetInstrument,The following statement contains a magic number: int rawValue = (short) (                      (data.GetAddressValue(instrumentAddress) << 12) |                      (data.GetAddressValue(instrumentAddress + 1) << 8) |                      (data.GetAddressValue(instrumentAddress + 2) << 4) |                      data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,GetInstrument,The following statement contains a magic number: int rawValue = (short) (                      (data.GetAddressValue(instrumentAddress) << 12) |                      (data.GetAddressValue(instrumentAddress + 1) << 8) |                      (data.GetAddressValue(instrumentAddress + 2) << 4) |                      data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,SetInstrument,The following statement contains a magic number: byte[] idBytes =              {                  (byte) ((instrument.Id >> 12) & 0xf)'                  (byte) ((instrument.Id >> 8) & 0xf)'                  (byte) ((instrument.Id >> 4) & 0xf)'                  (byte) ((instrument.Id >> 0) & 0xf)              };
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,SetInstrument,The following statement contains a magic number: byte[] idBytes =              {                  (byte) ((instrument.Id >> 12) & 0xf)'                  (byte) ((instrument.Id >> 8) & 0xf)'                  (byte) ((instrument.Id >> 4) & 0xf)'                  (byte) ((instrument.Id >> 0) & 0xf)              };
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,SetInstrument,The following statement contains a magic number: byte[] idBytes =              {                  (byte) ((instrument.Id >> 12) & 0xf)'                  (byte) ((instrument.Id >> 8) & 0xf)'                  (byte) ((instrument.Id >> 4) & 0xf)'                  (byte) ((instrument.Id >> 0) & 0xf)              };
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,ValidateData,The following statement contains a magic number: int rawValue = (short) (                 (data.GetAddressValue(instrumentAddress) << 12) |                 (data.GetAddressValue(instrumentAddress + 1) << 8) |                 (data.GetAddressValue(instrumentAddress + 2) << 4) |                 data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,ValidateData,The following statement contains a magic number: int rawValue = (short) (                 (data.GetAddressValue(instrumentAddress) << 12) |                 (data.GetAddressValue(instrumentAddress + 1) << 8) |                 (data.GetAddressValue(instrumentAddress + 2) << 4) |                 data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,ValidateData,The following statement contains a magic number: int rawValue = (short) (                 (data.GetAddressValue(instrumentAddress) << 12) |                 (data.GetAddressValue(instrumentAddress + 1) << 8) |                 (data.GetAddressValue(instrumentAddress + 2) << 4) |                 data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,ValidateData,The following statement contains a magic number: int rawValue = (short) (                 (data.GetAddressValue(instrumentAddress) << 12) |                 (data.GetAddressValue(instrumentAddress + 1) << 8) |                 (data.GetAddressValue(instrumentAddress + 2) << 4) |                 data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,InstrumentField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\InstrumentField.cs,ValidateData,The following statement contains a magic number: int rawValue = (short) (                 (data.GetAddressValue(instrumentAddress) << 12) |                 (data.GetAddressValue(instrumentAddress + 1) << 8) |                 (data.GetAddressValue(instrumentAddress + 2) << 4) |                 data.GetAddressValue(instrumentAddress + 3));
Magic Number,VDrumExplorer.Data.Fields,MidiNoteField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\MidiNoteField.cs,GetMidiNote,The following statement contains a magic number: return note == 128 ? default(int?) : note;
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,GetRawValueUnvalidated,The following statement contains a magic number: return Size switch              {                  1 => data.GetAddressValue(address)'                  2 => ((sbyte) ((data.GetAddressValue(address) << 4) | data.GetAddressValue(address + 1)))'                  // TODO: Just fetch a byte array? Stackalloc it?                  4 => (short) (                      (data.GetAddressValue(address) << 12) |                      (data.GetAddressValue(address + 1) << 8) |                      (data.GetAddressValue(address + 2) << 4) |                      data.GetAddressValue(address + 3))'                  _ => throw new InvalidOperationException($"Cannot get value with size {Size}")              };
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,NumericFieldBase,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\NumericFieldBase.cs,SetRawValue,The following statement contains a magic number: switch (Size)              {                  case 1:                      bytes[0] = (byte) newValue;                      break;                  case 2:                      bytes[0] = (byte) ((newValue >> 4) & 0xf);                      bytes[1] = (byte) ((newValue >> 0) & 0xf);                      break;                  case 4:                      bytes[0] = (byte) ((newValue >> 12) & 0xf);                      bytes[1] = (byte) ((newValue >> 8) & 0xf);                      bytes[2] = (byte) ((newValue >> 4) & 0xf);                      bytes[3] = (byte) ((newValue >> 0) & 0xf);                      break;                  default:                      throw new InvalidOperationException($"Cannot set value with size {Size}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,GetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      return Encoding.ASCII.GetString(rawBytes);                  case 2:                      byte[] asciiBytes = new byte[Length];                      for (int i = 0; i < Length; i++)                      {                          asciiBytes[i] = (byte) ((rawBytes[i * 2] << 4) | rawBytes[i * 2 + 1]);                      }                      return Encoding.ASCII.GetString(asciiBytes);                  default:                      throw new InvalidOperationException($"Can't get a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,GetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      return Encoding.ASCII.GetString(rawBytes);                  case 2:                      byte[] asciiBytes = new byte[Length];                      for (int i = 0; i < Length; i++)                      {                          asciiBytes[i] = (byte) ((rawBytes[i * 2] << 4) | rawBytes[i * 2 + 1]);                      }                      return Encoding.ASCII.GetString(asciiBytes);                  default:                      throw new InvalidOperationException($"Can't get a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,GetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      return Encoding.ASCII.GetString(rawBytes);                  case 2:                      byte[] asciiBytes = new byte[Length];                      for (int i = 0; i < Length; i++)                      {                          asciiBytes[i] = (byte) ((rawBytes[i * 2] << 4) | rawBytes[i * 2 + 1]);                      }                      return Encoding.ASCII.GetString(asciiBytes);                  default:                      throw new InvalidOperationException($"Can't get a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,GetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      return Encoding.ASCII.GetString(rawBytes);                  case 2:                      byte[] asciiBytes = new byte[Length];                      for (int i = 0; i < Length; i++)                      {                          asciiBytes[i] = (byte) ((rawBytes[i * 2] << 4) | rawBytes[i * 2 + 1]);                      }                      return Encoding.ASCII.GetString(asciiBytes);                  default:                      throw new InvalidOperationException($"Can't get a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,TrySetText,The following statement contains a magic number: text.Length > Length || text.Any(c => c < 32 || c > 126)
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,TrySetText,The following statement contains a magic number: text.Length > Length || text.Any(c => c < 32 || c > 126)
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,TrySetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      byte[] ascii = Encoding.ASCII.GetBytes(text);                      data.SetData(address' ascii);                      break;                  case 2:                      byte[] rawBytes = new byte[Length * 2];                      for (int i = 0; i < Length; i++)                      {                          rawBytes[i * 2] = (byte) (text[i] >> 4);                          rawBytes[i * 2 + 1] = (byte) (text[i] & 0xf);                      }                      data.SetData(address' rawBytes);                      break;                  default:                      throw new InvalidOperationException($"Can't set a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,TrySetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      byte[] ascii = Encoding.ASCII.GetBytes(text);                      data.SetData(address' ascii);                      break;                  case 2:                      byte[] rawBytes = new byte[Length * 2];                      for (int i = 0; i < Length; i++)                      {                          rawBytes[i * 2] = (byte) (text[i] >> 4);                          rawBytes[i * 2 + 1] = (byte) (text[i] & 0xf);                      }                      data.SetData(address' rawBytes);                      break;                  default:                      throw new InvalidOperationException($"Can't set a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,TrySetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      byte[] ascii = Encoding.ASCII.GetBytes(text);                      data.SetData(address' ascii);                      break;                  case 2:                      byte[] rawBytes = new byte[Length * 2];                      for (int i = 0; i < Length; i++)                      {                          rawBytes[i * 2] = (byte) (text[i] >> 4);                          rawBytes[i * 2 + 1] = (byte) (text[i] & 0xf);                      }                      data.SetData(address' rawBytes);                      break;                  default:                      throw new InvalidOperationException($"Can't set a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,TrySetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      byte[] ascii = Encoding.ASCII.GetBytes(text);                      data.SetData(address' ascii);                      break;                  case 2:                      byte[] rawBytes = new byte[Length * 2];                      for (int i = 0; i < Length; i++)                      {                          rawBytes[i * 2] = (byte) (text[i] >> 4);                          rawBytes[i * 2 + 1] = (byte) (text[i] & 0xf);                      }                      data.SetData(address' rawBytes);                      break;                  default:                      throw new InvalidOperationException($"Can't set a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Fields,StringField,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Fields\StringField.cs,TrySetText,The following statement contains a magic number: switch (bytesPerChar)              {                  case 1:                      byte[] ascii = Encoding.ASCII.GetBytes(text);                      data.SetData(address' ascii);                      break;                  case 2:                      byte[] rawBytes = new byte[Length * 2];                      for (int i = 0; i < Length; i++)                      {                          rawBytes[i * 2] = (byte) (text[i] >> 4);                          rawBytes[i * 2 + 1] = (byte) (text[i] & 0xf);                      }                      data.SetData(address' rawBytes);                      break;                  default:                      throw new InvalidOperationException($"Can't set a string with bytesPerChar of {bytesPerChar}");              }
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,FieldJson,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\FieldJson.cs,ToField,The following statement contains a magic number: return Type switch              {                  "boolean" => (IField) new BooleanField(BuildCommon(1))'                  "boolean32" => new BooleanField(BuildCommon(4))'                  "range8" => BuildNumericField(1)'                  "range16" => BuildNumericField(2)'                  "range32" => BuildNumericField(4)'                  "enum" => BuildEnumField(1)'                  "enum16" => BuildEnumField(2)'                  "enum32" => BuildEnumField(4)'                  "dynamicOverlay" => BuildDynamicOverlay()'                  "instrument" => new InstrumentField(BuildCommon(4)'                       ValidateNotNull(BankOffset' nameof(BankOffset)).Value'                      ValidateNotNull(VeditOffset' nameof(VeditOffset)).Value)'                  "musicalNote" => new EnumField(BuildCommon(4)' MusicalNoteValues' 0' 0)'                  "volume32" => new NumericField(BuildCommon(4)' -601' 60' 0' 10' null' 0' "dB"' (-601' "-INF"))'                  "string" => BuildStringField(1)'                  "string16" => BuildStringField(2)'                  "midi32" => new MidiNoteField(BuildCommon(4))'                  string text when text.StartsWith(ContainerPrefix) => BuildContainer()'                  _ => throw new InvalidOperationException($"Unknown field type: {Type}")              };
Magic Number,VDrumExplorer.Data.Json,HexInt32,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Json\HexInt32.cs,Parse,The following statement contains a magic number: reducedText = text.Substring(2);
Magic Number,VDrumExplorer.Data.Proto,AudioFormat,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\AudioFormat.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,VDrumExplorer.Data.Proto,AudioFormat,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\AudioFormat.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,VDrumExplorer.Data.Proto,AudioFormat,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\AudioFormat.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,VDrumExplorer.Data.Proto,AudioFormat,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\AudioFormat.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              Channels = input.ReadInt32();              break;            }            case 16: {              Bits = input.ReadInt32();              break;            }            case 24: {              Frequency = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,AudioFormat,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\AudioFormat.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              Channels = input.ReadInt32();              break;            }            case 16: {              Bits = input.ReadInt32();              break;            }            case 24: {              Frequency = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,AudioFormat,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\AudioFormat.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              Channels = input.ReadInt32();              break;            }            case 16: {              Bits = input.ReadInt32();              break;            }            case 24: {              Frequency = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,DataSegment,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DataSegment.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,VDrumExplorer.Data.Proto,DataSegment,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DataSegment.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,VDrumExplorer.Data.Proto,DataSegment,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DataSegment.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              Start = input.ReadInt32();              break;            }            case 18: {              Data = input.ReadBytes();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,DataSegment,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DataSegment.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              Start = input.ReadInt32();              break;            }            case 18: {              Data = input.ReadBytes();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              global::VDrumExplorer.Data.Proto.Module subBuilder = new global::VDrumExplorer.Data.Proto.Module();              if (fileCase_ == FileOneofCase.Module) {                subBuilder.MergeFrom(Module);              }              input.ReadMessage(subBuilder);              Module = subBuilder;              break;            }            case 18: {              global::VDrumExplorer.Data.Proto.Kit subBuilder = new global::VDrumExplorer.Data.Proto.Kit();              if (fileCase_ == FileOneofCase.Kit) {                subBuilder.MergeFrom(Kit);              }              input.ReadMessage(subBuilder);              Kit = subBuilder;              break;            }            case 26: {              global::VDrumExplorer.Data.Proto.ModuleAudio subBuilder = new global::VDrumExplorer.Data.Proto.ModuleAudio();              if (fileCase_ == FileOneofCase.ModuleAudio) {                subBuilder.MergeFrom(ModuleAudio);              }              input.ReadMessage(subBuilder);              ModuleAudio = subBuilder;              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              global::VDrumExplorer.Data.Proto.Module subBuilder = new global::VDrumExplorer.Data.Proto.Module();              if (fileCase_ == FileOneofCase.Module) {                subBuilder.MergeFrom(Module);              }              input.ReadMessage(subBuilder);              Module = subBuilder;              break;            }            case 18: {              global::VDrumExplorer.Data.Proto.Kit subBuilder = new global::VDrumExplorer.Data.Proto.Kit();              if (fileCase_ == FileOneofCase.Kit) {                subBuilder.MergeFrom(Kit);              }              input.ReadMessage(subBuilder);              Kit = subBuilder;              break;            }            case 26: {              global::VDrumExplorer.Data.Proto.ModuleAudio subBuilder = new global::VDrumExplorer.Data.Proto.ModuleAudio();              if (fileCase_ == FileOneofCase.ModuleAudio) {                subBuilder.MergeFrom(ModuleAudio);              }              input.ReadMessage(subBuilder);              ModuleAudio = subBuilder;              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              global::VDrumExplorer.Data.Proto.Module subBuilder = new global::VDrumExplorer.Data.Proto.Module();              if (fileCase_ == FileOneofCase.Module) {                subBuilder.MergeFrom(Module);              }              input.ReadMessage(subBuilder);              Module = subBuilder;              break;            }            case 18: {              global::VDrumExplorer.Data.Proto.Kit subBuilder = new global::VDrumExplorer.Data.Proto.Kit();              if (fileCase_ == FileOneofCase.Kit) {                subBuilder.MergeFrom(Kit);              }              input.ReadMessage(subBuilder);              Kit = subBuilder;              break;            }            case 26: {              global::VDrumExplorer.Data.Proto.ModuleAudio subBuilder = new global::VDrumExplorer.Data.Proto.ModuleAudio();              if (fileCase_ == FileOneofCase.ModuleAudio) {                subBuilder.MergeFrom(ModuleAudio);              }              input.ReadMessage(subBuilder);              ModuleAudio = subBuilder;              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(32);
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              Name = input.ReadString();              break;            }            case 16: {              ModelId = input.ReadInt32();              break;            }            case 24: {              FamilyCode = input.ReadInt32();              break;            }            case 32: {              FamilyNumberCode = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              Name = input.ReadString();              break;            }            case 16: {              ModelId = input.ReadInt32();              break;            }            case 24: {              FamilyCode = input.ReadInt32();              break;            }            case 32: {              FamilyNumberCode = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              Name = input.ReadString();              break;            }            case 16: {              ModelId = input.ReadInt32();              break;            }            case 24: {              FamilyCode = input.ReadInt32();              break;            }            case 32: {              FamilyNumberCode = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleIdentifier,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              Name = input.ReadString();              break;            }            case 16: {              ModelId = input.ReadInt32();              break;            }            case 24: {              FamilyCode = input.ReadInt32();              break;            }            case 32: {              FamilyNumberCode = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,Module,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,VDrumExplorer.Data.Proto,Module,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              segments_.AddEntriesFrom(input' _repeated_segments_codec);              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,Module,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              segments_.AddEntriesFrom(input' _repeated_segments_codec);              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,Kit,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,VDrumExplorer.Data.Proto,Kit,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(24);
Magic Number,VDrumExplorer.Data.Proto,Kit,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              segments_.AddEntriesFrom(input' _repeated_segments_codec);              break;            }            case 24: {              DefaultKitNumber = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,Kit,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              segments_.AddEntriesFrom(input' _repeated_segments_codec);              break;            }            case 24: {              DefaultKitNumber = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,Kit,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              segments_.AddEntriesFrom(input' _repeated_segments_codec);              break;            }            case 24: {              DefaultKitNumber = input.ReadInt32();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(10);
Magic Number,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(18);
Magic Number,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              if (format_ == null) {                Format = new global::VDrumExplorer.Data.Proto.AudioFormat();              }              input.ReadMessage(Format);              break;            }            case 26: {              if (durationPerInstrument_ == null) {                DurationPerInstrument = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(DurationPerInstrument);              break;            }            case 34: {              instrumentCaptures_.AddEntriesFrom(input' _repeated_instrumentCaptures_codec);              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              if (format_ == null) {                Format = new global::VDrumExplorer.Data.Proto.AudioFormat();              }              input.ReadMessage(Format);              break;            }            case 26: {              if (durationPerInstrument_ == null) {                DurationPerInstrument = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(DurationPerInstrument);              break;            }            case 34: {              instrumentCaptures_.AddEntriesFrom(input' _repeated_instrumentCaptures_codec);              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              if (format_ == null) {                Format = new global::VDrumExplorer.Data.Proto.AudioFormat();              }              input.ReadMessage(Format);              break;            }            case 26: {              if (durationPerInstrument_ == null) {                DurationPerInstrument = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(DurationPerInstrument);              break;            }            case 34: {              instrumentCaptures_.AddEntriesFrom(input' _repeated_instrumentCaptures_codec);              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,ModuleAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 10: {              if (identifier_ == null) {                Identifier = new global::VDrumExplorer.Data.Proto.ModuleIdentifier();              }              input.ReadMessage(Identifier);              break;            }            case 18: {              if (format_ == null) {                Format = new global::VDrumExplorer.Data.Proto.AudioFormat();              }              input.ReadMessage(Format);              break;            }            case 26: {              if (durationPerInstrument_ == null) {                DurationPerInstrument = new global::Google.Protobuf.WellKnownTypes.Duration();              }              input.ReadMessage(DurationPerInstrument);              break;            }            case 34: {              instrumentCaptures_.AddEntriesFrom(input' _repeated_instrumentCaptures_codec);              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,InstrumentAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(8);
Magic Number,VDrumExplorer.Data.Proto,InstrumentAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(16);
Magic Number,VDrumExplorer.Data.Proto,InstrumentAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,WriteTo,The following statement contains a magic number: output.WriteRawTag(26);
Magic Number,VDrumExplorer.Data.Proto,InstrumentAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              InstrumentId = input.ReadInt32();              break;            }            case 16: {              Preset = input.ReadBool();              break;            }            case 26: {              AudioData = input.ReadBytes();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,InstrumentAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              InstrumentId = input.ReadInt32();              break;            }            case 16: {              Preset = input.ReadBool();              break;            }            case 26: {              AudioData = input.ReadBytes();              break;            }          }
Magic Number,VDrumExplorer.Data.Proto,InstrumentAudio,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following statement contains a magic number: switch(tag) {            default:              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields' input);              break;            case 8: {              InstrumentId = input.ReadInt32();              break;            }            case 16: {              Preset = input.ReadBool();              break;            }            case 26: {              AudioData = input.ReadBytes();              break;            }          }
Missing Default,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,DrumFile,The following switch statement is missing a default case: switch (other.FileCase) {          case FileOneofCase.Module:            Module = other.Module.Clone();            break;          case FileOneofCase.Kit:            Kit = other.Kit.Clone();            break;          case FileOneofCase.ModuleAudio:            ModuleAudio = other.ModuleAudio.Clone();            break;        }
Missing Default,VDrumExplorer.Data.Proto,DrumFile,D:\research\architectureSmells\repos\jskeet_DemoCode\Drums\VDrumExplorer.Data\Proto\DrumFiles.g.cs,MergeFrom,The following switch statement is missing a default case: switch (other.FileCase) {          case FileOneofCase.Module:            if (Module == null) {              Module = new global::VDrumExplorer.Data.Proto.Module();            }            Module.MergeFrom(other.Module);            break;          case FileOneofCase.Kit:            if (Kit == null) {              Kit = new global::VDrumExplorer.Data.Proto.Kit();            }            Kit.MergeFrom(other.Kit);            break;          case FileOneofCase.ModuleAudio:            if (ModuleAudio == null) {              ModuleAudio = new global::VDrumExplorer.Data.Proto.ModuleAudio();            }            ModuleAudio.MergeFrom(other.ModuleAudio);            break;        }
