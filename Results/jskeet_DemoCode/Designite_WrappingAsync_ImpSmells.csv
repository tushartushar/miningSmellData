Implementation smell,Namespace,Class,File,Method,Description
Long Statement,WrappingAsync,AsyncExtensions,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\AsyncExtensions.cs,TransposeAnonymous,The length of the statement  "            Type constructedType = genericDefinition.MakeGenericType(type.GetGenericArguments().Select(x => x.GetGenericArguments()[0]).ToArray()); " is 135.
Magic Number,WrappingAsync,Service,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\Service.cs,GetWeightAsync,The following statement contains a magic number: await Task.Delay(100);
Magic Number,WrappingAsync,Service,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\Service.cs,GetWeightAsync,The following statement contains a magic number: return 50d;
Magic Number,WrappingAsync,Service,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\Service.cs,GetBirthdayAsync,The following statement contains a magic number: await Task.Delay(50);
Magic Number,WrappingAsync,Service,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\Service.cs,GetBirthdayAsync,The following statement contains a magic number: return new DateTime(1976' 6' 19);
Magic Number,WrappingAsync,Service,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\Service.cs,GetBirthdayAsync,The following statement contains a magic number: return new DateTime(1976' 6' 19);
Magic Number,WrappingAsync,Service,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\Service.cs,GetBirthdayAsync,The following statement contains a magic number: return new DateTime(1976' 6' 19);
Magic Number,WrappingAsync,Service,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\Service.cs,GetNameAsync,The following statement contains a magic number: await Task.Delay(200);
Missing Default,WrappingAsync,AsyncExtensions,D:\research\architectureSmells\repos\jskeet_DemoCode\Abusing CSharp\Code\WrappingAsync\AsyncExtensions.cs,TransposeAnonymous,The following switch statement is missing a default case: switch (task.Status)                  {                      case TaskStatus.RanToCompletion:                          var ctor = constructedType.GetConstructors()[0];                          var args = tasks.Select(t => ((dynamic)t).Result)                                          .ToArray();                          tcs.SetResult(ctor.Invoke(args));                          break;                      case TaskStatus.Faulted:                          tcs.SetException(task.Exception.InnerExceptions);                          break;                      case TaskStatus.Canceled:                          tcs.SetCanceled();                          break;                  }
