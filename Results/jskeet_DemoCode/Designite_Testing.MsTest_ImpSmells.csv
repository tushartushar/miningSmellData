Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,AssertThrows,The method has an empty catch block.
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorthAsync_AuthenticationFailure_ThrowsDelayed,The following statement contains a magic number: authService.Stub(x => x.AuthenticateUserAsync("jon"' "pass")).Return(Delayed<Guid?>(100' null));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_EmptyPortfolio,The following statement contains a magic number: authService.Stub(x => x.AuthenticateUserAsync("jon"' "pass")).Return(Delayed<Guid?>(100' guid));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_EmptyPortfolio,The following statement contains a magic number: portfolioService.Stub(x => x.GetPortfolioAsync(guid)).Return(Delayed(200' new List<StockHolding>()));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_SingleItem,The following statement contains a magic number: var portfolio = new List<StockHolding>              {                  new StockHolding("FOO"' 10)              };
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_SingleItem,The following statement contains a magic number: authService.Stub(x => x.AuthenticateUserAsync("jon"' "pass")).Return(Delayed<Guid?>(100' guid));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_SingleItem,The following statement contains a magic number: portfolioService.Stub(x => x.GetPortfolioAsync(guid)).Return(Delayed(200' portfolio));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_SingleItem,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("FOO")).Return(Delayed<decimal?>(300' 34.25m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_SingleItem,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("FOO")).Return(Delayed<decimal?>(300' 34.25m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_SingleItem,The following statement contains a magic number: Assert.AreEqual(10 * 34.25m' await broker.CalculateWorthAsync("jon"' "pass"));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_SingleItem,The following statement contains a magic number: Assert.AreEqual(10 * 34.25m' await broker.CalculateWorthAsync("jon"' "pass"));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: var portfolio = new List<StockHolding>              {                  new StockHolding("FOO"' 10)'                  new StockHolding("BAR"' 5)              };
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: var portfolio = new List<StockHolding>              {                  new StockHolding("FOO"' 10)'                  new StockHolding("BAR"' 5)              };
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: portfolioService.Stub(x => x.GetPortfolioAsync(guid)).Return(Delayed(100' portfolio));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("FOO")).Return(Delayed<decimal?>(200' 20m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("FOO")).Return(Delayed<decimal?>(200' 20m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("BAR")).Return(Delayed<decimal?>(100' 10m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("BAR")).Return(Delayed<decimal?>(100' 10m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: Assert.AreEqual(10 * 20m + 5 * 10m' await broker.CalculateWorthAsync("jon"' "pass"));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: Assert.AreEqual(10 * 20m + 5 * 10m' await broker.CalculateWorthAsync("jon"' "pass"));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: Assert.AreEqual(10 * 20m + 5 * 10m' await broker.CalculateWorthAsync("jon"' "pass"));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems,The following statement contains a magic number: Assert.AreEqual(10 * 20m + 5 * 10m' await broker.CalculateWorthAsync("jon"' "pass"));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: var portfolio = new List<StockHolding>              {                  new StockHolding("FOO"' 10)'                  new StockHolding("BAR"' 5)              };
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: var portfolio = new List<StockHolding>              {                  new StockHolding("FOO"' 10)'                  new StockHolding("BAR"' 5)              };
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: portfolioService.Stub(x => x.GetPortfolioAsync(guid)).Return(Delayed(100' portfolio));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("FOO")).Return(Delayed<decimal?>(200' 20m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("FOO")).Return(Delayed<decimal?>(200' 20m));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: priceService.Stub(x => x.LookupPriceAsync("BAR")).Return(Delayed<decimal?>(100' null));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: Assert.AreEqual(10 * 20m' await broker.CalculateWorthAsync("jon"' "pass"));
Magic Number,Testing.MsTest,StockBrokerTest,D:\research\architectureSmells\repos\jskeet_DemoCode\AsyncIntro\Code\Testing.MsTest\StockBrokerTest.cs,CalculateNetWorth_MultipleItems_IncludingNullValue,The following statement contains a magic number: Assert.AreEqual(10 * 20m' await broker.CalculateWorthAsync("jon"' "pass"));
