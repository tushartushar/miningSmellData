Implementation smell,Namespace,Class,File,Method,Description
Long Statement,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,TestApiQueryCanCallContactsEndpointWithOrElseAndAndAlsoOperator,The length of the statement  "            Assert.AreEqual("(((ContactStatus == \"ACTIVE\") OR (IsCustomer == true)) AND (ContactStatus == \"ARCHIVED\"))"' queryDesctipion.Where); " is 136.
Long Statement,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,TestApiQueryCanCallInvoicesEndpointWithUpdatedDateAndTypeFilterCombinedWithAndOperator,The length of the statement  "            var response = repository.Invoices.Where(i => i.UpdatedDateUTC > new DateTime(2010' 1' 1) && i.Type == "ACCPAY").ToList(); " is 122.
Long Statement,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,it_can_filter_on_inequality_of_the_model_id,The length of the statement  "            Assert.AreEqual("(InvoiceID != Guid('00000000-0000-0000-0000-000000000000'))"' integrationProxy.LastQueryDescription.Where); " is 124.
Long Statement,XeroApi.Tests,EventTimelineTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\EventTimelineTests.cs,it_returns_only_the_most_recent_event_timestamp_no_matter_what_order_they_are_added,The length of the statement  "            Assert.AreEqual(decemberEighth' timeline.GetLastEventDateAndTime()' "Unexpected event returned. Expected the most recent timestamp."); " is 134.
Long Statement,XeroApi.Tests,IntegrationProxyHelperTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\IntegrationProxyHelperTests.cs,TestIntegrationProxyHelperCanGenerateSimpleUri4,The length of the statement  "            Assert.AreEqual("https://api.xero.com/api.xro/2.0/Invoices/INV-123?WHERE=%28foo%20%3D%20bar%29&ORDER=InvoiceNumber%20DESC"' uri.AbsoluteUri); " is 141.
Long Statement,XeroApi.Tests,IntegrationProxyHelperTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\IntegrationProxyHelperTests.cs,TestIntegrationProxyHelperCanGenerateSimpleUri5,The length of the statement  "            Assert.AreEqual("https://api.xero.com/api.xro/2.0/Invoices?WHERE=%28foo%20%3D%20bar%29&ORDER=InvoiceNumber%20DESC"' uri.AbsoluteUri); " is 133.
Long Statement,XeroApi.Tests,PauseTimeTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\PauseTimeTests.cs,it_can_pause_time,The length of the statement  "            Assert.AreEqual(1000' stopwatch.ElapsedMilliseconds' 50' "Actual elapsed timespan is not within 50ms of the expected timespan"); " is 128.
Long Statement,XeroApi.Tests,SignatureTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\SignatureTests.cs,TestSignRequestToken,The length of the statement  "            Assert.That(oauthContext.Signature' Is.EqualTo("aIIAFPjD0uavubFeL/Hz4LSV6NsvAbrvfnPF6OcgGfhML5ezO0+E+tofLgp1SHbLyNFM7D1p/SJN1J4MY7T3HzvM8HX+3u5Q+Ui+en0/ewHZ+3ar6BA7r3zOYqDn8rfCGSnweia3fFYmjkeS8NvKShnewUu0jUFbnG4RXw8BiEk=")); " is 224.
Long Statement,XeroApi.Tests,SignatureTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\SignatureTests.cs,TestSignAccessToken,The length of the statement  "            Assert.That(oauthContext.Signature' Is.EqualTo("32vGleSAIeMbgW9E0pC+PUkyZ1Y05zuEd+FZwg+w4jZzj3E1zldbrGY5SnVpypZfjixWuHMtV4mwGwptwiTZRkrLBudWqJDEddvlwuIMY1j6WkQulz/IXzbGuPNgTya/KTEhQ5IExJXCKE1LZ9bNsMXBDpyi7/ayZe9ONqoVzS8=")); " is 224.
Long Statement,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_for_enough_time_to_maintain_one_event_per_second,The length of the statement  "            DateTime secondEventDateTime = firstEventDateTime.AddMilliseconds(400); // <-- Second event is 400ms after the first event. This should trigger a pause of 600ms. " is 161.
Long Statement,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_event_AFTER_pausing_for_the_current_event,The length of the statement  "            DateTime secondEventDateTime = firstEventDateTime.AddMilliseconds(400); // <-- Second event is 400ms after the first event. This should trigger a pause of 600ms. " is 161.
Long Statement,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,to_consumer_response_with_really_old_date_string_should_fail_validation,The length of the statement  "            Assert.IsTrue(ex.Message.Contains(expectedMessage)' string.Format("Exception message <{0}> is not as expected <{1}>"' ex.Message' expectedMessage)); " is 148.
Magic Number,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,TestApiQueryCanCallInvoicesEndpointWithUpdatedDateAndUrlFilterCombinedWithAndOperator,The following statement contains a magic number: var response = repository.Invoices.SingleOrDefault(i => i.UpdatedDateUTC > new DateTime(2010' 1' 1) && i.Url != null);
Magic Number,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,TestApiQueryCanCallInvoicesEndpointWithUpdatedDateAndUrlFilterCombinedWithAndOperator,The following statement contains a magic number: Assert.AreEqual(new DateTime(2010' 01' 01)' queryDesctipion.UpdatedSinceDate);
Magic Number,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,TestApiQueryCanCallInvoicesEndpointWithUpdatedDateAndTypeFilterCombinedWithAndOperator,The following statement contains a magic number: var response = repository.Invoices.Where(i => i.UpdatedDateUTC > new DateTime(2010' 1' 1) && i.Type == "ACCPAY").ToList();
Magic Number,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,TestApiQueryCanCallInvoicesEndpointWithUpdatedDateAndTypeFilterCombinedWithAndOperator,The following statement contains a magic number: Assert.AreEqual(new DateTime(2010' 01' 01)' queryDesctipion.UpdatedSinceDate);
Magic Number,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,it_can_filter_on_a_nullable_date_property_with_an_inline_value,The following statement contains a magic number: var response = repository.Invoices.Where(i => i.Date == new DateTime(2012' 01' 04)).ToList();
Magic Number,XeroApi.Tests,ApiQueryTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\ApiQueryTests.cs,it_can_filter_on_a_nullable_date_property_with_an_inline_value,The following statement contains a magic number: var response = repository.Invoices.Where(i => i.Date == new DateTime(2012' 01' 04)).ToList();
Magic Number,XeroApi.Tests,PauseTimeTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\PauseTimeTests.cs,it_can_pause_time,The following statement contains a magic number: pauseTime.Pause(TimeSpan.FromMilliseconds(1000));
Magic Number,XeroApi.Tests,PauseTimeTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\PauseTimeTests.cs,it_can_pause_time,The following statement contains a magic number: Assert.AreEqual(1000' stopwatch.ElapsedMilliseconds' 50' "Actual elapsed timespan is not within 50ms of the expected timespan");
Magic Number,XeroApi.Tests,PauseTimeTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\PauseTimeTests.cs,it_can_pause_time,The following statement contains a magic number: Assert.AreEqual(1000' stopwatch.ElapsedMilliseconds' 50' "Actual elapsed timespan is not within 50ms of the expected timespan");
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_doesnt_trigger_the_rate_limit_when_the_last_event_date_is_more_than_1_second_ago,The following statement contains a magic number: DateTime firstEventDateTime  = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_doesnt_trigger_the_rate_limit_when_the_last_event_date_is_more_than_1_second_ago,The following statement contains a magic number: DateTime firstEventDateTime  = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_doesnt_trigger_the_rate_limit_when_the_last_event_date_is_more_than_1_second_ago,The following statement contains a magic number: DateTime secondEventDateTime = new DateTime(2000' 1' 1' 12' 0' 2);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_doesnt_trigger_the_rate_limit_when_the_last_event_date_is_more_than_1_second_ago,The following statement contains a magic number: DateTime secondEventDateTime = new DateTime(2000' 1' 1' 12' 0' 2);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_doesnt_trigger_the_rate_limit_when_the_last_event_date_is_more_than_1_second_ago,The following statement contains a magic number: DateTime secondEventDateTime = new DateTime(2000' 1' 1' 12' 0' 2);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_doesnt_trigger_the_rate_limit_when_the_last_event_date_is_exactly_1_second_ago,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_doesnt_trigger_the_rate_limit_when_the_last_event_date_is_exactly_1_second_ago,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_when_the_last_event_date_is_less_than_1_second_ago,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_when_the_last_event_date_is_less_than_1_second_ago,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_when_the_last_event_date_is_less_than_1_second_ago,The following statement contains a magic number: DateTime secondEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0' 500);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_when_the_last_event_date_is_less_than_1_second_ago,The following statement contains a magic number: DateTime secondEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0' 500);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_when_the_last_event_date_is_less_than_1_second_ago,The following statement contains a magic number: DateTime secondEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0' 500);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_for_enough_time_to_maintain_one_event_per_second,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_for_enough_time_to_maintain_one_event_per_second,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_for_enough_time_to_maintain_one_event_per_second,The following statement contains a magic number: DateTime secondEventDateTime = firstEventDateTime.AddMilliseconds(400);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_does_trigger_the_rate_limit_for_enough_time_to_maintain_one_event_per_second,The following statement contains a magic number: pauseTime.AssertWasCalled(it => it.Pause(Arg<TimeSpan>.Is.Equal(TimeSpan.FromMilliseconds(600))));
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_event_AFTER_pausing_for_the_current_event,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_event_AFTER_pausing_for_the_current_event,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_event_AFTER_pausing_for_the_current_event,The following statement contains a magic number: DateTime secondEventDateTime = firstEventDateTime.AddMilliseconds(400);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_updated_timestamp_when_a_pause_was_done,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_updated_timestamp_when_a_pause_was_done,The following statement contains a magic number: DateTime firstEventDateTime = new DateTime(2000' 1' 1' 12' 0' 0);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_updated_timestamp_when_a_pause_was_done,The following statement contains a magic number: DateTime secondEventDateTime = firstEventDateTime.AddMilliseconds(200);
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_updated_timestamp_when_a_pause_was_done,The following statement contains a magic number: timeline.AssertWasCalled(it => it.RecordEvent(Arg<DateTime>.Is.Equal(secondEventDateTime.AddMilliseconds(800))));
Magic Number,XeroApi.Tests,TrickleRateLimiterTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\TrickleRateLimiterTests.cs,it_records_the_updated_timestamp_when_a_pause_was_done,The following statement contains a magic number: pauseTime.AssertWasCalled(it => it.Pause(Arg<TimeSpan>.Is.Equal(TimeSpan.FromMilliseconds(800))));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_parse_valid_IfModifiedSince_date,The following statement contains a magic number: Assert.AreEqual(new DateTime(2012' 04' 01' 23' 45' 0)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_parse_valid_IfModifiedSince_date,The following statement contains a magic number: Assert.AreEqual(new DateTime(2012' 04' 01' 23' 45' 0)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_parse_valid_IfModifiedSince_date,The following statement contains a magic number: Assert.AreEqual(new DateTime(2012' 04' 01' 23' 45' 0)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_parse_valid_IfModifiedSince_date,The following statement contains a magic number: Assert.AreEqual(new DateTime(2012' 04' 01' 23' 45' 0)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_parse_very_early_IfModifiedSince_date,The following statement contains a magic number: Assert.AreEqual(new DateTime(1753' 01' 01' 0' 0' 0)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: var oauthContext = new OAuthContext              {                  Headers = new NameValueCollection()'                   IfModifiedSince = new DateTime(1753'01'02'3'4'5)              };
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: var oauthContext = new OAuthContext              {                  Headers = new NameValueCollection()'                   IfModifiedSince = new DateTime(1753'01'02'3'4'5)              };
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: var oauthContext = new OAuthContext              {                  Headers = new NameValueCollection()'                   IfModifiedSince = new DateTime(1753'01'02'3'4'5)              };
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: var oauthContext = new OAuthContext              {                  Headers = new NameValueCollection()'                   IfModifiedSince = new DateTime(1753'01'02'3'4'5)              };
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: var oauthContext = new OAuthContext              {                  Headers = new NameValueCollection()'                   IfModifiedSince = new DateTime(1753'01'02'3'4'5)              };
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: Assert.AreEqual(new DateTime(1753' 01' 02' 3' 4' 5)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: Assert.AreEqual(new DateTime(1753' 01' 02' 3' 4' 5)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: Assert.AreEqual(new DateTime(1753' 01' 02' 3' 4' 5)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: Assert.AreEqual(new DateTime(1753' 01' 02' 3' 4' 5)' consumerRequest.ParseIfModifiedSince(oauthContext));
Magic Number,XeroApi.Tests.OAuth.Consumer,ConsumerRequestTests,D:\research\architectureSmells\repos\XeroAPI_XeroAPI.Net\source\XeroApi.Tests\OAuth\Consumer\ConsumerRequestTests.cs,it_can_read_IfModifiedSince_date_from_oauth_context_property,The following statement contains a magic number: Assert.AreEqual(new DateTime(1753' 01' 02' 3' 4' 5)' consumerRequest.ParseIfModifiedSince(oauthContext));
