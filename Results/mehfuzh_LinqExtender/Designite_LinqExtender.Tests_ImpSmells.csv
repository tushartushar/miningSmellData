Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LinqExtender.Tests,ExpressionVisitor,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 9
Magic Number,LinqExtender.Tests,CustomAttributeTest,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\CustomAttributeTest.cs,ShouldAssertPropertyNameAsSpeficiedInNameAttribute,The following statement contains a magic number: var query = from libary in context                          where libary.Id == 2                          select libary;
Magic Number,LinqExtender.Tests,ExecutionFixture,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExecutionFixture.cs,ShouldAssertExpectedResultFromGivenContext,The following statement contains a magic number: var query = from book in new FakeContext(GetBooks())                          where book.Id == 2                          select book;
Magic Number,LinqExtender.Tests,ExecutionFixture,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExecutionFixture.cs,ShouldAssertExpectedResultFromGivenContext,The following statement contains a magic number: Assert.AreEqual(2' query.First().Id);
Magic Number,LinqExtender.Tests,ExecutionFixture,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExecutionFixture.cs,ShouldAssertProjectionSelect,The following statement contains a magic number: var query = new FakeContext(GetBooks())                  .Where(book => book.Id == 2)                  .Select(r => new { r.Id' r.Title });
Magic Number,LinqExtender.Tests,ExecutionFixture,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExecutionFixture.cs,ShouldAssertProjectionSelect,The following statement contains a magic number: Assert.AreEqual(2' query.First().Id);
Magic Number,LinqExtender.Tests,ExecutionFixture,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExecutionFixture.cs,ShouldAssertTakeAndSkip,The following statement contains a magic number: var query = (from book in new FakeContext(GetBooks())                          where book.Id == 2                          select book).Take(1).Skip(0);
Magic Number,LinqExtender.Tests,ExecutionFixture,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExecutionFixture.cs,ShouldAssertTakeAndSkip,The following statement contains a magic number: Assert.AreEqual(2' query.First().Id);
Magic Number,LinqExtender.Tests,ExecutionFixture,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExecutionFixture.cs,GetBooks,The following statement contains a magic number: books.Add(new Book { Id = 2' Author = "John" });
Magic Number,LinqExtender.Tests,LinqQueryTest,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\LinqQueryTest.cs,ShouldAssertWhereWithNestedLeftLogicalExpression,The following statement contains a magic number: var query = from book in context                          where (book.Id == 1 && book.Author == "Charlie")                          || book.Id == 10                          select book;
Magic Number,LinqExtender.Tests,LinqQueryTest,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\LinqQueryTest.cs,ShouldAssertWhereWithtNestedRightLogicalExpression,The following statement contains a magic number: var query = from book in context                          where book.Id == 10 || (book.Id == 1 && book.Author == "Charlie")                          select book;
Magic Number,LinqExtender.Tests,LinqQueryTest,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\LinqQueryTest.cs,ShouldAssertWhereWithNestedLeftAndRightLogicaExpression,The following statement contains a magic number: var query = from book in context                          where (book.Id == 10 && book.Author == "Plarosi") || (book.Id == 1 && book.Author == "Charlie")                          select book;
Missing Default,LinqExtender.Tests,ExpressionVisitor,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\ExpressionVisitor.cs,Visit,The following switch statement is missing a default case: switch (expression.CodeType)              {                  case CodeType.BlockExpression:                      return VisitBlockExpression((Ast.BlockExpression)expression);                  case CodeType.TypeExpression:                      return VisitTypeExpression((Ast.TypeExpression)expression);                  case CodeType.LambdaExpresion:                      return VisitLambdaExpression((Ast.LambdaExpression)expression);                  case CodeType.LogicalExpression:                      return VisitLogicalExpression((Ast.LogicalExpression)expression);                  case CodeType.BinaryExpression:                      return VisitBinaryExpression((Ast.BinaryExpression)expression);                  case CodeType.LiteralExpression:                      return VisitLiteralExpression((Ast.LiteralExpression)expression);                  case CodeType.MemberExpression:                      return VisitMemberExpression((Ast.MemberExpression)expression);                  case CodeType.OrderbyExpression:                      return VisitOrderbyExpression((Ast.OrderbyExpression)expression);                  case CodeType.MethodCallExpression:                      return VisitMethodCallExpression((Ast.MethodCallExpression)expression);              }
Missing Default,LinqExtender.Tests,TextContext<T>,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\TextContext.cs,GetBinaryOperator,The following switch statement is missing a default case: switch (@operator)              {                  case BinaryOperator.Equal:                      return " = ";              }
Missing Default,LinqExtender.Tests,TextContext<T>,D:\research\architectureSmells\repos\mehfuzh_LinqExtender\Source\LinqExtender.Tests\TextContext.cs,WriteToken,The following switch statement is missing a default case: switch (token)              {                  case Token.LeftParenthesis:                      writer.Write("(");                      break;                  case Token.RightParentThesis:                      writer.Write(")");                      break;              }
