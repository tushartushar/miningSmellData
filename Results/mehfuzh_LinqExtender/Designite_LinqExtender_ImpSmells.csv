Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LinqExtender,Query<T>,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,ExtractDataFromExpression,Cyclomatic complexity of the method is 8
Complex Method,LinqExtender,Query<T>,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,FillBucket,Cyclomatic complexity of the method is 8
Long Parameter List,LinqExtender,BucketItem,C:\repos\mehfuzh_LinqExtender\Source\BucketItem.cs,BucketItem,The method has 8 parameters. Parameters: underlyingType' name' propertyName' propertyType' value' unique' queryOperator' queryVisible
Long Parameter List,LinqExtender,Queryable,C:\repos\mehfuzh_LinqExtender\Source\Queryable.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Statement,LinqExtender,ClassGenerator,C:\repos\mehfuzh_LinqExtender\Source\ClassGenerator.cs,BuildDynamicAssembly,The length of the statement  "            AssemblyBuilder createdAssembly =  AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName' AssemblyBuilderAccess.Run); " is 122.
Long Statement,LinqExtender,ClassGenerator,C:\repos\mehfuzh_LinqExtender\Source\ClassGenerator.cs,CreateType,The length of the statement  "                    this.typeBuilder = this.moduleBuilder.DefineType(parent.FullName' TypeAttributes.Class | TypeAttributes.Public' parent); " is 120.
Long Statement,LinqExtender,Queryable,C:\repos\mehfuzh_LinqExtender\Source\Queryable.cs,Select,The length of the statement  "            return CreateQuery<TSource' TResult' Func<TSource' TResult>>(source' currentMethod' selector' args) as IQueryable<TResult>; " is 123.
Long Statement,LinqExtender,Query<T>,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,FindTargetPropertyWhereUsed,The length of the statement  "                if (!property.PropertyType.IsPrimitive && property.PropertyType.FullName.IndexOf("System") == -1 && !property.PropertyType.IsEnum) " is 130.
Complex Conditional,LinqExtender,Query<T>,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,VisitBinary,The conditional expression  "expression.NodeType == ExpressionType.AndAlso                  || expression.NodeType == ExpressionType.And                  || expression.NodeType == ExpressionType.Or                  || expression.NodeType == ExpressionType.OrElse"  is complex.
Complex Conditional,LinqExtender,Query<T>,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,ExtractDataFromExpression,The conditional expression  "memberExpression.Member.DeclaringType != typeof(T) &&                  memberExpression.Member.DeclaringType != typeof(T).BaseType &&                  !memberExpression.Member.DeclaringType.IsInterface &&                  !memberExpression.Member.DeclaringType.IsAbstract"  is complex.
Empty Catch Block,LinqExtender,ProjectedQuery<T;S>,C:\repos\mehfuzh_LinqExtender\Source\ProjectedQuery.cs,ExectuteParent,The method has an empty catch block.
Empty Catch Block,LinqExtender,QueryObject<T>,C:\repos\mehfuzh_LinqExtender\Source\QueryObject.cs,FillBucket,The method has an empty catch block.
Magic Number,LinqExtender,Query<T>,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,VisitMethodCall,The following statement contains a magic number: if (methodName == MethodNames.Orderby || methodName == MethodNames.Orderbydesc || methodName == MethodNames.ThenBy)              {                  Buckets.Current.IsAsc = methodName == MethodNames.Orderbydesc ? false : true;                    var orderbyVisitor = new OrderbyVisitor();                    orderbyVisitor.Visit(expression);                    Buckets.Current.OrderByItems.Add(new Bucket.OrderByInfo(orderbyVisitor.Member' Buckets.Current.IsAsc));                                    return expression;              }              else              {                  if (expression.Arguments.Count == 2)                      return this.Visit(expression.Arguments[1]);              }
Magic Number,LinqExtender,Query<T>,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,GetCurrentNode,The following statement contains a magic number: if (parentNode == null && bucket.CurrentNode.Nodes.Count == 2)              {                  parentNode = bucket.CurrentNode;                  // child becomes parent.                  child.Id = Guid.NewGuid();                  parentNode.ParentId = child.Id;                  child.RootImpl = op;                  child.Nodes.Add(new TreeNode.Node { Value = parentNode });                  bucket.CurrentNode = child;                  currentNode = child;              }              else if (parentNode != null)              {                  child.Id = Buckets.Current.SyntaxStack.Peek().Id;                  child.RootImpl = op;                  child.ParentId = parentNode.Id;                  // make it a child.                  parentNode.Nodes.Add(new TreeNode.Node { Value = child });                  currentNode = child;              }              else              {                  bucket.CurrentNode.Id = Buckets.Current.SyntaxStack.Peek().Id;                  bucket.CurrentNode.RootImpl = op;                  currentNode = bucket.CurrentNode;              }
Magic Number,LinqExtender,OrderbyVisitor,C:\repos\mehfuzh_LinqExtender\Source\Query.cs,VisitMethodCall,The following statement contains a magic number: if (expression.Arguments.Count == 2)                      return this.Visit(expression.Arguments[1]);
Missing Default,LinqExtender,ExpressionVisitor,C:\repos\mehfuzh_LinqExtender\Source\ExpressionVisitor.cs,Visit,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Lambda:                      return VisitLamda((LambdaExpression) expression);                  case ExpressionType.ArrayLength:                  case ExpressionType.Convert:                  case ExpressionType.ConvertChecked:                  case ExpressionType.Negate:                  case ExpressionType.UnaryPlus:                  case ExpressionType.NegateChecked:                  case ExpressionType.Not:                  case ExpressionType.Quote:                  case ExpressionType.TypeAs:                      return this.VisitUnary((UnaryExpression)expression);                  case ExpressionType.Add:                  case ExpressionType.AddChecked:                  case ExpressionType.And:                  case ExpressionType.AndAlso:                  case ExpressionType.ArrayIndex:                  case ExpressionType.Coalesce:                  case ExpressionType.Divide:                  case ExpressionType.Equal:                  case ExpressionType.ExclusiveOr:                  case ExpressionType.GreaterThan:                  case ExpressionType.GreaterThanOrEqual:                  case ExpressionType.LeftShift:                  case ExpressionType.LessThan:                  case ExpressionType.LessThanOrEqual:                  case ExpressionType.Modulo:                  case ExpressionType.Multiply:                  case ExpressionType.MultiplyChecked:                  case ExpressionType.NotEqual:                  case ExpressionType.Or:                  case ExpressionType.OrElse:                  case ExpressionType.Power:                  case ExpressionType.RightShift:                  case ExpressionType.Subtract:                  case ExpressionType.SubtractChecked:                      return this.VisitBinary((BinaryExpression)expression);                  case ExpressionType.Call:                      return this.VisitMethodCall((MethodCallExpression)expression);                  case ExpressionType.Constant:                      return this.VisitConstant((ConstantExpression)expression);                  case ExpressionType.MemberAccess:                      return this.VisitMemberAccess((MemberExpression)expression);                  case ExpressionType.Parameter:                      return this.VisitParameter((ParameterExpression)expression);                  case ExpressionType.New:                      return this.VisitNew((NewExpression)expression);                        }
