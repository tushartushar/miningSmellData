Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DocumentationExamples,DictionaryShouldContainKeyAndValueExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\DictionaryShouldContainKeyAndValueExamples.cs,ShouldContainKeyAndValue,The length of the statement  "                var websters = new Dictionary<string' string> { { "Cromulent"' "I never heard the word before moving to Springfield." } }; " is 122.
Long Statement,DocumentationExamples,DictionaryShouldContainKeyAndValueExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\DictionaryShouldContainKeyAndValueExamples.cs,ShouldNotContainKeyAndValue,The length of the statement  "                var websters = new Dictionary<string' string> { { "Chazzwazzers"' "What Australians would have called a bull frog." } }; " is 120.
Long Statement,DocumentationExamples,DictionaryShouldContainKeyExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\DictionaryShouldContainKeyExamples.cs,ShouldNotContainKey,The length of the statement  "                var websters = new Dictionary<string' string> { { "Chazzwazzers"' "What Australians would have called a bull frog." } }; " is 120.
Long Statement,DocumentationExamples,ShouldMatchApprovedExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldMatchApprovedExamples.cs,ApprovedFileDoesNotExist,The length of the statement  "                c.WithScrubber(s => s.Replace("DocExampleWriter.Document.approved.txt"' "ShouldMatchApprovedExamples.ApprovedFileDoesNotExist.approved.txt")); " is 142.
Long Statement,DocumentationExamples,ShouldMatchApprovedExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldMatchApprovedExamples.cs,ApprovedFileDoesNotExist,The length of the statement  "                c.WithScrubber(s => s.Replace("DocExampleWriter.Document.received.txt"' "ShouldMatchApprovedExamples.ApprovedFileDoesNotExist.received.txt")); " is 142.
Long Statement,DocumentationExamples,ShouldMatchApprovedExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldMatchApprovedExamples.cs,ApprovedFileIsDifferent,The length of the statement  "                c.WithScrubber(s => s.Replace("DocExampleWriter.Document.Different.approved.txt"' "ShouldMatchApprovedExamples.ApprovedFileIsDifferent.approved.txt")); " is 151.
Long Statement,DocumentationExamples,ShouldMatchApprovedExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldMatchApprovedExamples.cs,ApprovedFileIsDifferent,The length of the statement  "                c.WithScrubber(s => s.Replace("DocExampleWriter.Document.Different.received.txt"' "ShouldMatchApprovedExamples.ApprovedFileIsDifferent.received.txt")); " is 151.
Magic Number,DocumentationExamples,EnumerableShouldAllBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldAllBeExamples.cs,ShouldAllBe,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldAllBe(m => m.Salary > 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldAllBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldAllBeExamples.cs,ShouldAllBe,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldAllBe(m => m.Salary > 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldAllBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldAllBeExamples.cs,ShouldAllBe,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldAllBe(m => m.Salary > 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldAllBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldAllBeExamples.cs,ShouldAllBe,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldAllBe(m => m.Salary > 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldContainExamples.cs,ShouldContain,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Kent Brockman"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { kentBrockman' homer };                    millionares.ShouldContain(mrBurns);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldContainExamples.cs,ShouldContain,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Kent Brockman"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { kentBrockman' homer };                    millionares.ShouldContain(mrBurns);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldContainExamples.cs,ShouldContain,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Kent Brockman"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { kentBrockman' homer };                    millionares.ShouldContain(mrBurns);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldContainExamples.cs,ShouldContain_Predicate,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var moe = new Person() { Name = "Moe"' Salary = 20000 };                  var barney = new Person() { Name = "Barney"' Salary = 0 };                  var millionares = new List<Person>() { homer' moe' barney };                    // Check if at least one element in the IEnumerable satisfies the predicate                  millionares.ShouldContain(m => m.Salary > 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldContainExamples.cs,ShouldContain_Predicate,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var moe = new Person() { Name = "Moe"' Salary = 20000 };                  var barney = new Person() { Name = "Barney"' Salary = 0 };                  var millionares = new List<Person>() { homer' moe' barney };                    // Check if at least one element in the IEnumerable satisfies the predicate                  millionares.ShouldContain(m => m.Salary > 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldContainExamples.cs,ShouldContain_Predicate,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var moe = new Person() { Name = "Moe"' Salary = 20000 };                  var barney = new Person() { Name = "Barney"' Salary = 0 };                  var millionares = new List<Person>() { homer' moe' barney };                    // Check if at least one element in the IEnumerable satisfies the predicate                  millionares.ShouldContain(m => m.Salary > 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldNotContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldNotContainExamples.cs,ShouldNotContain_Predicate,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldNotContain(m => m.Salary < 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldNotContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldNotContainExamples.cs,ShouldNotContain_Predicate,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldNotContain(m => m.Salary < 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldNotContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldNotContainExamples.cs,ShouldNotContain_Predicate,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldNotContain(m => m.Salary < 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,EnumerableShouldNotContainExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\EnumerableShouldNotContainExamples.cs,ShouldNotContain_Predicate,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr.Burns"' Salary = 3000000 };                  var kentBrockman = new Person() { Name = "Homer"' Salary = 3000000 };                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var millionares = new List<Person>() { mrBurns' kentBrockman' homer };                    millionares.ShouldNotContain(m => m.Salary < 1000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,Numeric,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  const decimal pi = (decimal)Math.PI;                  pi.ShouldBe(3.24m' 0.01m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,Numeric,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  const decimal pi = (decimal)Math.PI;                  pi.ShouldBe(3.24m' 0.01m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var date = new DateTime(2000' 6' 1);                  date.ShouldBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1));              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var date = new DateTime(2000' 6' 1);                  date.ShouldBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1));              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var date = new DateTime(2000' 6' 1);                  date.ShouldBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1));              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var date = new DateTime(2000' 6' 1);                  date.ShouldBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1));              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,TimeSpanExample,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var timeSpan = TimeSpan.FromHours(1);                  timeSpan.ShouldBe(timeSpan.Add(TimeSpan.FromHours(1.1d))' TimeSpan.FromHours(1));              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,EnumerablesOfNumerics,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var firstSet = new[] { 1.23m' 2.34m' 3.45001m };                  var secondSet = new[] { 1.4301m' 2.34m' 3.45m };                  firstSet.ShouldBe(secondSet' 0.1m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,EnumerablesOfNumerics,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var firstSet = new[] { 1.23m' 2.34m' 3.45001m };                  var secondSet = new[] { 1.4301m' 2.34m' 3.45m };                  firstSet.ShouldBe(secondSet' 0.1m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,EnumerablesOfNumerics,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var firstSet = new[] { 1.23m' 2.34m' 3.45001m };                  var secondSet = new[] { 1.4301m' 2.34m' 3.45m };                  firstSet.ShouldBe(secondSet' 0.1m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,EnumerablesOfNumerics,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var firstSet = new[] { 1.23m' 2.34m' 3.45001m };                  var secondSet = new[] { 1.4301m' 2.34m' 3.45m };                  firstSet.ShouldBe(secondSet' 0.1m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,EnumerablesOfNumerics,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var firstSet = new[] { 1.23m' 2.34m' 3.45001m };                  var secondSet = new[] { 1.4301m' 2.34m' 3.45m };                  firstSet.ShouldBe(secondSet' 0.1m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,EnumerablesOfNumerics,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var firstSet = new[] { 1.23m' 2.34m' 3.45001m };                  var secondSet = new[] { 1.4301m' 2.34m' 3.45m };                  firstSet.ShouldBe(secondSet' 0.1m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeExamples.cs,EnumerablesOfNumerics,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var firstSet = new[] { 1.23m' 2.34m' 3.45001m };                  var secondSet = new[] { 1.4301m' 2.34m' 3.45m };                  firstSet.ShouldBe(secondSet' 0.1m);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeGreaterThan,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr. Burns"' Salary = 30000 };                  mrBurns.Salary.ShouldBeGreaterThan(300000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeGreaterThan,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr. Burns"' Salary = 30000 };                  mrBurns.Salary.ShouldBeGreaterThan(300000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeLessThan,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 300000000 };                  homer.Salary.ShouldBeLessThan(30000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeLessThan,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 300000000 };                  homer.Salary.ShouldBeLessThan(30000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeGreaterThanOrEqualTo,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr. Burns"' Salary = 299999999 };                  mrBurns.Salary.ShouldBeGreaterThanOrEqualTo(300000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeGreaterThanOrEqualTo,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr. Burns"' Salary = 299999999 };                  mrBurns.Salary.ShouldBeGreaterThanOrEqualTo(300000000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeLessThanOrEqualTo,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30001 };                  homer.Salary.ShouldBeLessThanOrEqualTo(30000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeGreater_LessThanExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeGreater_LessThanExamples.cs,ShouldBeLessThanOrEqualTo,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30001 };                  homer.Salary.ShouldBeLessThanOrEqualTo(30000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeInRangeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeInRange.cs,ShouldBeInRange,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 300000000 };                  homer.Salary.ShouldBeInRange(30000' 40000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeInRangeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeInRange.cs,ShouldBeInRange,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 300000000 };                  homer.Salary.ShouldBeInRange(30000' 40000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeInRangeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeInRange.cs,ShouldBeInRange,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 300000000 };                  homer.Salary.ShouldBeInRange(30000' 40000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeInRangeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeInRange.cs,ShouldNotBeInRange,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr. Burns"' Salary = 30000 };                  mrBurns.Salary.ShouldNotBeInRange(30000' 40000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeInRangeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeInRange.cs,ShouldNotBeInRange,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr. Burns"' Salary = 30000 };                  mrBurns.Salary.ShouldNotBeInRange(30000' 40000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldBeInRangeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldBeInRange.cs,ShouldNotBeInRange,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var mrBurns = new Person() { Name = "Mr. Burns"' Salary = 30000 };                  mrBurns.Salary.ShouldNotBeInRange(30000' 40000);              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldCompleteInExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldCompleteInExamples.cs,ShouldCompleteIn,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  Should.CompleteIn(() => Thread.Sleep(TimeSpan.FromSeconds(2))' TimeSpan.FromSeconds(1)' "Some additional context");              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                      var date = new DateTime(2000' 6' 1);                      date.ShouldNotBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1.5));                  }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                      var date = new DateTime(2000' 6' 1);                      date.ShouldNotBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1.5));                  }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                      var date = new DateTime(2000' 6' 1);                      date.ShouldNotBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1.5));                  }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                      var date = new DateTime(2000' 6' 1);                      date.ShouldNotBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1.5));                  }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotBeExamples.cs,DateTime,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                      var date = new DateTime(2000' 6' 1);                      date.ShouldNotBe(new DateTime(2000' 6' 1' 1' 0' 1)' TimeSpan.FromHours(1.5));                  }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotBeExamples.cs,TimeSpanExample,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var timeSpan = TimeSpan.FromHours(1);                  timeSpan.ShouldNotBe(timeSpan.Add(TimeSpan.FromHours(1.1d))' TimeSpan.FromHours(1.5d));              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotBeExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotBeExamples.cs,TimeSpanExample,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var timeSpan = TimeSpan.FromHours(1);                  timeSpan.ShouldNotBe(timeSpan.Add(TimeSpan.FromHours(1.1d))' TimeSpan.FromHours(1.5d));              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotThrowExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotThrowExamples.cs,ShouldNotThrowAction,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var denominator = 0;                  Should.NotThrow(() =>                  {                      var y = homer.Salary / denominator;                  });              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldNotThrowExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldNotThrowExamples.cs,ShouldNotThrowFuncOfTask,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var denominator = 0;                  Should.NotThrow(() =>                  {                      var task = Task.Factory.StartNew(() => { var y = homer.Salary / denominator; });                      return task;                  });              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldThrowExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldThrowExamples.cs,ShouldThrowAction,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var denominator = 1;                  Should.Throw<DivideByZeroException>(() =>                  {                      var y = homer.Salary / denominator;                  });              }' _testOutputHelper);
Magic Number,DocumentationExamples,ShouldThrowExamples,D:\research\architectureSmells\repos1\shouldly_shouldly\src\DocumentationExamples\ShouldThrowExamples.cs,ShouldThrowFuncOfTask,The following statement contains a magic number: DocExampleWriter.Document(() =>              {                  var homer = new Person() { Name = "Homer"' Salary = 30000 };                  var denominator = 1;                  Should.Throw<DivideByZeroException>(() =>                  {                      var task = Task.Factory.StartNew(() => { var y = homer.Salary / denominator; });                      return task;                  });              }' _testOutputHelper);
