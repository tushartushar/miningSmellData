Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AppHarbor,AppHarborClient,C:\repos\appharbor_AppHarbor.NET\AppHarbor.Sdk\AppHarborClient.cs,GetAuthInfo,The following statement contains a magic number: var values = response.Content.Split('&')  				.Select(x => x.Split(new[] { '=' }' count: 2))  				.ToArray();
Magic Number,AppHarbor,AppHarborClient,C:\repos\appharbor_AppHarbor.NET\AppHarbor.Sdk\AppHarborClient.cs,GetAuthInfo,The following statement contains a magic number: if (values.Length == 2 && values.All(x => x.Length == 2))  			{  				var authInfoElements = values.ToDictionary(x => x[0]' x => x[1]);    				return new AuthInfo(authInfoElements["access_token"]' authInfoElements["token_type"]);  			}
Magic Number,AppHarbor,AppHarborClient,C:\repos\appharbor_AppHarbor.NET\AppHarbor.Sdk\AppHarborClient.cs,GetAuthInfo,The following statement contains a magic number: if (values.Length == 2 && values.All(x => x.Length == 2))  			{  				var authInfoElements = values.ToDictionary(x => x[0]' x => x[1]);    				return new AuthInfo(authInfoElements["access_token"]' authInfoElements["token_type"]);  			}
Magic Number,AppHarbor,AppHarborClient,C:\repos\appharbor_AppHarbor.NET\AppHarbor.Sdk\AppHarborClient.cs,GetCodeFromLocalHost,The following statement contains a magic number: using (var listener = new HttpListener())  			{  				string localHostUrl = string.Format(httpTemporaryListenAddresses);    				listener.Prefixes.Add(localHostUrl);  				listener.Start();    				using (Process.Start(GetAppHarborAuthorizationUrl(clientId' redirectUrl)))  				{  					while (true)  					{  						var start = DateTime.Now;  						var context = listener.GetContext(timeout);  						var usedTime = DateTime.Now.Subtract(start);  						timeout = timeout.Subtract(usedTime);    						if (context.Request.Url.AbsolutePath == "/Temporary_Listen_Addresses/")  						{  							code = context.Request.QueryString["code"];  							if (code == null)  							{  								throw new AuthenticationException("Access denied' no return code was returned");  							}    							var writer = new StreamWriter(context.Response.OutputStream);  							writer.WriteLine(CloseWindowResponse);  							writer.Flush();    							context.Response.Close();  							break;  						}    						context.Response.StatusCode = 404;  						context.Response.Close();  					}  				}  			}
