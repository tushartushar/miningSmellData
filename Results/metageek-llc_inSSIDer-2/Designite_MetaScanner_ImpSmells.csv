Implementation smell,Namespace,Class,File,Method,Description
Long Method,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The method has 178 lines of code.
Long Method,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The method has 171 lines of code.
Long Method,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The method has 489 lines of code.
Long Method,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The method has 266 lines of code.
Long Method,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The method has 508 lines of code.
Long Method,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The method has 591 lines of code.
Long Method,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The method has 154 lines of code.
Long Method,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,WriteGpx,The method has 124 lines of code.
Long Method,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The method has 154 lines of code.
Long Method,inSSIDer,Program,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Program.cs,Main,The method has 129 lines of code.
Long Method,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The method has 115 lines of code.
Long Method,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The method has 174 lines of code.
Long Method,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The method has 122 lines of code.
Complex Method,inSSIDer.Misc,ExprParser,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\ExprParser.cs,Fix,Cyclomatic complexity of the method is 10
Complex Method,inSSIDer.Scanning.Interfaces,ManagedScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\ManagedScanInterface.cs,GetNetworkData,Cyclomatic complexity of the method is 9
Complex Method,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,UpdateInterfaceListSelection,Cyclomatic complexity of the method is 9
Complex Method,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,Cyclomatic complexity of the method is 11
Complex Method,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawNetworks,Cyclomatic complexity of the method is 10
Complex Method,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,ExportButtonClick,Cyclomatic complexity of the method is 9
Complex Method,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,FilterData,Cyclomatic complexity of the method is 16
Complex Method,inSSIDer,Program,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Parameter List,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CreatePlacemark,The method has 6 parameters. Parameters: document' wp' visible' showLabel' paddleMarker' ssidLabel
Long Parameter List,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CreatePlacemark,The method has 9 parameters. Parameters: document' wp' visible' showLabel' paddleMarker' ssidLabel' latitude' longitude' elevation
Long Parameter List,inSSIDer.UI.Controls,SparkLineCell,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\SparkLineCell.cs,Paint,The method has 11 parameters. Parameters: graphics' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' paintParts
Long Parameter List,inSSIDer.UnhandledException,MapiHelperInterop,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,MAPISendMail,The method has 5 parameters. Parameters: session' hwnd' message' flg' rsv
Long Identifier,inSSIDer.Misc,DefaultColorScheme,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\DefaultColorScheme.cs,,The length of the parameter GraphHorizontalDottedLineColor is 30.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter aboutInSSIDerToolStripMenuItem is 30.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter inSSIDerForumsToolStripMenuItem is 31.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter checkForUpdatesToolStripMenuItem is 32.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter changeLogFilenameToolStripMenuItem is 34.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter startStopLoggingToolStripMenuItem is 33.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter convertLogToKMLToolStripMenuItem is 32.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter startNullScanningToolStripMenuItem is 34.
Long Identifier,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,,The length of the parameter stopNullScanningToolStripMenuItem is 33.
Long Statement,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CreatePlacemark,The length of the statement  "            xeIconStyle.AppendChild(CreateElementWithText(document' "scale"' KmlWriter.IconScale(wp.Extensions.Rssi).ToString(CultureInfo.InvariantCulture))); " is 146.
Long Statement,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CreatePlacemark,The length of the statement  "            xeMain.AppendChild(CreateElementWithText(document' "name"' ssidLabel ? wp.Extensions.Ssid + ": " + wp.Extensions.Rssi : wp.Extensions.Rssi.ToString(CultureInfo.InvariantCulture))); " is 180.
Long Statement,inSSIDer.Scanning.Interfaces,ManagedScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\ManagedScanInterface.cs,GetNetworkData,The length of the statement  "                availableNetworkList = _interface.GetAvailableNetworkList(Wlan.WlanGetAvailableNetworkFlags.IncludeAllManualHiddenProfiles); " is 124.
Long Statement,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The length of the statement  "                path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) }); " is 176.
Long Statement,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The length of the statement  "                path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) }); " is 180.
Long Statement,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The length of the statement  "                path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) }); " is 180.
Long Statement,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The length of the statement  "                path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) }); " is 184.
Long Statement,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The length of the statement  "                path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) }); " is 180.
Long Statement,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The length of the statement  "                path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) }); " is 184.
Long Statement,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawBars,The length of the statement  "                g.FillRectangle(_lgb' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp)); " is 129.
Long Statement,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawBars,The length of the statement  "                    g.FillRectangle(new SolidBrush(Color.FromArgb(145' Color.Gray))' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp)); " is 172.
Long Statement,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The length of the statement  "            y = ((Height - TopMargin - BottomMargin) / 2f) + g.MeasureString("Signal-to-Noise Ratio [dB]"/*Localizer.GetString("AmplitudedBm")*/' Font).Width / 2 + TopMargin; " is 162.
Long Statement,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The length of the statement  "            g.DrawRectangle(Pens.Gray' LeftMargin+2' TopMargin' Width - LeftMargin - RightMargin' Height - TopMargin - BottomMargin); " is 121.
Long Statement,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The length of the statement  "                    x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset " is 138.
Long Statement,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,UpdateView,The length of the statement  "                    lblSatCount.Text = "Satellites (U/V): " + _scanner.GpsControl.MyGpsData.SatellitesUsed + "/" + _scanner.GpsControl.SatellitesVisible; " is 133.
Long Statement,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The length of the statement  "            this.lblNoGps.Font = new System.Drawing.Font("Microsoft Sans Serif"' 15.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 159.
Long Statement,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The length of the statement  "            this.gpsGraph1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 145.
Long Statement,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderItemTextNew,The length of the statement  "                if (((e.TextDirection != ToolStripTextDirection.Horizontal) && (textRectangle.Width > 0)) && (textRectangle.Height > 0)) " is 120.
Long Statement,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderItemTextNew,The length of the statement  "                            bitmap.RotateFlip((e.TextDirection == ToolStripTextDirection.Vertical90) ? RotateFlipType.Rotate90FlipNone : RotateFlipType.Rotate270FlipNone); " is 143.
Long Statement,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,NetworkInterfaceDropDown_DropDownItemClicked,The length of the statement  "                NetworkInterfaceDropDown.Text = MaxTextLength > -1 && clickedItem.Text.Length > MaxTextLength ? clickedItem.Text.Remove(MaxTextLength - 1) + "..." : clickedItem.Text; " is 166.
Long Statement,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,UpdateInterfaceListSelection,The length of the statement  "                NetworkInterfaceDropDown.Text = MaxTextLength > -1 && _scanner.Interface.Description.Length > MaxTextLength ? _scanner.Interface.Description.Remove(MaxTextLength - 1) + "..." : _scanner.Interface.Description; " is 208.
Long Statement,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,UpdateInterfaceListSelection,The length of the statement  "                    if (item.Text.StartsWith(NetworkInterfaceDropDown.Text.Replace("..."' "")' StringComparison.InvariantCultureIgnoreCase)) " is 120.
Long Statement,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,UpdateInterfaceListSelection,The length of the statement  "                    NetworkInterfaceDropDown.Text = MaxTextLength > -1 && text.Length > MaxTextLength ? text.Remove(MaxTextLength - 1) + "..." : text; " is 130.
Long Statement,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,UpdateSelection,The length of the statement  "                    NetworkInterfaceDropDown.Text = MaxTextLength > -1 && _scanner.Interface.Description.Length > MaxTextLength ? _scanner.Interface.Description.Remove(MaxTextLength - 1) + "..." : _scanner.Interface.Description; " is 208.
Long Statement,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NetworkInterfaceSelector)); " is 144.
Long Statement,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The length of the statement  "            this.NetworkInterfaceDropDown.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.NetworkInterfaceDropDown_DropDownItemClicked); " is 162.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The length of the statement  "            e.Paint(e.CellBounds' DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ContentBackground); " is 139.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The length of the statement  "            //e.Paint(e.CellBounds' /*DataGridViewPaintParts.Background | */DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground /*| DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground*/); " is 265.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_SortCompare,The length of the statement  "                if (Convert.ToDouble(e.CellValue1' CultureInfo.InvariantCulture) > Convert.ToDouble(e.CellValue2' CultureInfo.InvariantCulture)) { e.SortResult = 1; } " is 150.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_SortCompare,The length of the statement  "                else if (Convert.ToDouble(e.CellValue1' CultureInfo.InvariantCulture) < Convert.ToDouble(e.CellValue2' CultureInfo.InvariantCulture)) { e.SortResult = -1; } " is 156.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(25))))' ((int)(((byte)(25))))' ((int)(((byte)(25))))); " is 134.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(202))))' ((int)(((byte)(202))))' ((int)(((byte)(202))))); " is 137.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.scannerGrid.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.DisableResizing; " is 124.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(210))))' ((int)(((byte)(210))))' ((int)(((byte)(210))))); " is 137.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.scannerGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64))))); " is 128.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.scannerGrid.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.scannerView_CellMouseClick); " is 127.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.scannerGrid.CellPainting += new System.Windows.Forms.DataGridViewCellPaintingEventHandler(this.scannerView_CellPainting); " is 126.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.scannerGrid.ColumnHeaderMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.ScannerGridColumnHeaderMouseClick); " is 142.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.scannerGrid.ColumnWidthChanged += new System.Windows.Forms.DataGridViewColumnEventHandler(this.ScannerViewColumnWidthChanged); " is 131.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.scannerGrid.SortCompare += new System.Windows.Forms.DataGridViewSortCompareEventHandler(this.scannerView_SortCompare); " is 123.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            dataGridViewCellStyle6.Font = new System.Drawing.Font("Lucida Console"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 161.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.dataGridViewTextBoxColumn4.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader; " is 126.
Long Statement,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The length of the statement  "            this.dataGridViewTextBoxColumn8.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader; " is 126.
Long Statement,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawTimeLabels,The length of the statement  "            for (DateTime i = MaxTime - TimeSpan.FromTicks(MaxTime.Ticks % _secPerTick.Ticks); i > _minTime; i -= TimeSpan.FromMinutes(1)) " is 126.
Long Statement,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormAbout)); " is 129.
Long Statement,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The length of the statement  "            this.copyrightLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51))))); " is 131.
Long Statement,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The length of the statement  "            this.linkLabel.DisabledLinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0))))); " is 134.
Long Statement,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The length of the statement  "            this.linkLabel.LinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0))))); " is 126.
Long Statement,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The length of the statement  "            this.linkLabel.VisitedLinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0))))); " is 133.
Long Statement,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The length of the statement  "            this.versionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51))))); " is 129.
Long Statement,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The length of the statement  "            this.pSpacer.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 140.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,OnClosing,The length of the statement  "            //(Settings.Default.gpxLastInputFiles ?? (Settings.Default.gpxLastInputFiles = new StringCollection())).AddRange(openFile.FileNames); " is 133.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,ExportButtonClick,The length of the statement  "                MessageBox.Show(string.Format("{0}\r\n\r\n{1}"' ex.Message' Localizer.GetString("ErrorExportDirectory"))' Localizer.GetString("Error")); " is 136.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormLogConverter)); " is 136.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.grayGroupBox3.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.grayGroupBox3.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.grayGroupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.grayGroupBox2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.grayGroupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 146.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.grayGroupBox1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.btnChangeInFiles.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.btnChangeInFiles.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.btnChangeOutdir.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.btnChangeOutdir.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 162.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.txtOutDir.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.txtOutDir.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29))))); " is 126.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.txtInFiles.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The length of the statement  "            this.txtInFiles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29))))); " is 127.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,ChangeLogFilenameToolStripMenuItemClick,The length of the statement  "            if (sdlgLog.ShowDialog(this) == DialogResult.OK && _scanner.Logger != null) _scanner.Logger.Filename = sdlgLog.FileName; " is 120.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,CheckForUpdateThread,The length of the statement  "            if (VersionInfo.CheckForAvailableUpdate(@"http://www.metageek.net/misc/versions/inssider.txt"' Settings.Default.VersionIgnoreThisVersion' userInitiated)) " is 153.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,CheckForUpdateThread,The length of the statement  "                        Settings.Default.VersionNextUpdateCheck = DateTime.Now + TimeSpan.FromDays(Settings.Default.VersionDaysBetweenUpdateReminders); " is 127.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,detailsTabControl_MouseDown,The length of the statement  "                TabPage tp = detailsTabControl.TabPages.Cast<TabPage>().Where((tab' i) => detailsTabControl.GetTabRect(i).Contains(e.Location)).First(); " is 136.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InSsiDerForumsToolStripMenuItemClick,The length of the statement  "                LinkHelper.OpenLink("http://metageek.net/forums/forumdisplay.php?4615-inSSIDer"' Settings.Default.AnalyticsMedium' "HelpMenuForum"); " is 132.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,ScannerScanComplete,The length of the statement  "                Invoke(new DelVoidCall(() => apCountLabel.Text = string.Format("{0} / {1} AP(s)"' _scanner.Cache.Count' _scanner.Cache.TotalCount))); " is 133.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormMain)); " is 128.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The length of the statement  "            this.nextTabToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Tab))); " is 144.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The length of the statement  "            this.prevTabToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)(((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Shift) " is 144.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The length of the statement  "            this.scannerView.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255))))); " is 131.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The length of the statement  "            this.filtersView.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(50))))' ((int)(((byte)(50))))' ((int)(((byte)(50))))); " is 128.
Long Statement,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The length of the statement  "            this.networkInterfaceSelector1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 161.
Long Statement,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,InitializeComponent,The length of the statement  "            this.txtDebug.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The length of the statement  "                            wp.Latitude = Convert.ToDouble(string.IsNullOrEmpty(tempVal) ? "0" : tempVal' CultureInfo.InvariantCulture.NumberFormat); " is 121.
Long Statement,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The length of the statement  "                            wp.Longitude = Convert.ToDouble(string.IsNullOrEmpty(tempVal) ? "0" : tempVal' CultureInfo.InvariantCulture.NumberFormat); " is 122.
Long Statement,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,WriteGpx,The length of the statement  "                //xtw.WriteRaw(@"<gpx version=""1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://www.topografix.com/GPX/1/0"" xmlns:topografix=""http://www.topografix.com/GPX/Private/TopoGrafix/0/1"" xsi:schemaLocation=""http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.topografix.com/GPX/Private/TopoGrafix/0/1 http://www.topografix.com/GPX/Private/TopoGrafix/0/1/topografix.xsd"">"); " is 435.
Long Statement,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The length of the statement  "                        wp.Latitude = Convert.ToDouble(string.IsNullOrEmpty(tempVal) ? "0" : tempVal' CultureInfo.InvariantCulture.NumberFormat); " is 121.
Long Statement,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The length of the statement  "                        wp.Longitude = Convert.ToDouble(string.IsNullOrEmpty(tempVal) ? "0" : tempVal' CultureInfo.InvariantCulture.NumberFormat); " is 122.
Long Statement,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,WriteAccessPointKml,The length of the statement  "                    //String tempName = String.Join(""' lastWp.Extensions.Ssid.Split(Path.GetInvalidFileNameChars()' StringSplitOptions.RemoveEmptyEntries)); " is 137.
Long Statement,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,WriteSummaryKml,The length of the statement  "            doc.LoadXml("<?xml version=\"1.0\" encoding=\"UTF-8\"?><kml xmlns=\"http://www.opengis.net/kml/2.2\"><Document><name>Summary</name></Document></kml>"); " is 151.
Long Statement,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,WriteSubItems,The length of the statement  "                //The point with the highest signal strength goes directly in the folder while all the other points go in the RSSI folder " is 121.
Long Statement,inSSIDer,Program,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Program.cs,Main,The length of the statement  "                Log.WriteLine(string.Format("Exception message:\r\n\r\n{0}\r\n\r\nStack trace:\r\n{1}"' error.Message' error.StackTrace)); " is 122.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.labelTitle.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 143.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.labelTitle.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.labelExceptionDate.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.labelCaption.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.buttonNotSend.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.buttonSend.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.buttonSend.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.buttonCopy.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 148.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.label1.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 139.
Long Statement,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 135.
Long Statement,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,CheckForAvailableUpdate,The length of the statement  "                else if (Application.ProductVersion.Length > 0 && _latestVersion.Length > 0 && CompareVersions(_latestVersion' Application.ProductVersion)) " is 139.
Long Statement,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VersionUpdateForm)); " is 137.
Long Statement,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The length of the statement  "            this.installedVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204))))); " is 145.
Long Statement,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The length of the statement  "            this.latestVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204))))); " is 138.
Long Statement,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The length of the statement  "            this.latestVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204))))); " is 142.
Long Statement,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The length of the statement  "            this.installedVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204))))); " is 141.
Complex Conditional,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The conditional expression  "!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60)"  is complex.
Complex Conditional,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_SortCompare,The conditional expression  "cell1 != null && cell1.Length > 0 && cell2 != null && cell2.Length > 0"  is complex.
Empty Catch Block,inSSIDer.Scanning,NetworkScannerN,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\NetworkScannerN.cs,ScanThreadFunc,The method has an empty catch block.
Empty Catch Block,inSSIDer.Scanning.Interfaces,ManagedScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\ManagedScanInterface.cs,GetNetworkData,The method has an empty catch block.
Empty Catch Block,inSSIDer.Scanning.Interfaces,ManagedScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\ManagedScanInterface.cs,GetNetworkData,The method has an empty catch block.
Empty Catch Block,inSSIDer.Scanning.Interfaces,ManagedScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\ManagedScanInterface.cs,ScanNetworks,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,UpdateView,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,UpdateView,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,UpdateInterfaceList,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,WlanClient_InterfaceAddedEvent,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,UpdateGrid,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,UpdateGrid,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,UpdateGrid,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,Cache_DataReset,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,Cache_DataReset,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawNetworks,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawNetworks,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,LinkToWebsite,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,CheckForUpdateThread,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,CopyHtmlToTemp,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,GpsStatTimerElapsed,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InSsiDerForumsToolStripMenuItemClick,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,ScannerScanComplete,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,t_Elapsed,The method has an empty catch block.
Empty Catch Block,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,t_Elapsed,The method has an empty catch block.
Empty Catch Block,inSSIDer.FileIO,GpxDataLogger,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxDataLogger.cs,Start,The method has an empty catch block.
Empty Catch Block,inSSIDer.FileIO,GpxDataLogger,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxDataLogger.cs,Stop,The method has an empty catch block.
Empty Catch Block,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The method has an empty catch block.
Empty Catch Block,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,WriteGpx,The method has an empty catch block.
Empty Catch Block,inSSIDer.FileIO,GpxIO,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\GpxIO.cs,ReadGpx,The method has an empty catch block.
Empty Catch Block,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,WriteAccessPointKml,The method has an empty catch block.
Empty Catch Block,inSSIDer.HTML,Download,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\Download.cs,DownloadFile,The method has an empty catch block.
Empty Catch Block,inSSIDer,Program,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Program.cs,InitializeExceptionHandler,The method has an empty catch block.
Empty Catch Block,inSSIDer,Program,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyGpsSettings,The method has an empty catch block.
Empty Catch Block,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyScannerViewSettings,The method has an empty catch block.
Empty Catch Block,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyScannerViewSettings,The method has an empty catch block.
Empty Catch Block,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyScannerViewSettings,The method has an empty catch block.
Empty Catch Block,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,SaveGpsSettings,The method has an empty catch block.
Empty Catch Block,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,SaveScannerViewSettings,The method has an empty catch block.
Empty Catch Block,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,CheckForAvailableUpdate,The method has an empty catch block.
Empty Catch Block,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,GetVersionPageText,The method has an empty catch block.
Magic Number,inSSIDer.Misc,SignalBars,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalBars.cs,GetImage,The following statement contains a magic number: if (rssi >= -54)              {                  return secure ? Resources.Signal5E : Resources.Signal5;              }              else if(rssi >= -59)              {                  return secure ? Resources.Signal4E : Resources.Signal4;              }              else if (rssi >= -69)              {                  return secure ? Resources.Signal3E : Resources.Signal3;              }              else if (rssi >= -79)              {                  return secure ? Resources.Signal2E : Resources.Signal2;              }              else if (rssi >= -89)              {                  return secure ? Resources.Signal1E : Resources.Signal1;              }              else              {                  return secure ? Resources.Signal0E : Resources.Signal0;              }
Magic Number,inSSIDer.Misc,SignalBars,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalBars.cs,GetImage,The following statement contains a magic number: if (rssi >= -54)              {                  return secure ? Resources.Signal5E : Resources.Signal5;              }              else if(rssi >= -59)              {                  return secure ? Resources.Signal4E : Resources.Signal4;              }              else if (rssi >= -69)              {                  return secure ? Resources.Signal3E : Resources.Signal3;              }              else if (rssi >= -79)              {                  return secure ? Resources.Signal2E : Resources.Signal2;              }              else if (rssi >= -89)              {                  return secure ? Resources.Signal1E : Resources.Signal1;              }              else              {                  return secure ? Resources.Signal0E : Resources.Signal0;              }
Magic Number,inSSIDer.Misc,SignalBars,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalBars.cs,GetImage,The following statement contains a magic number: if (rssi >= -54)              {                  return secure ? Resources.Signal5E : Resources.Signal5;              }              else if(rssi >= -59)              {                  return secure ? Resources.Signal4E : Resources.Signal4;              }              else if (rssi >= -69)              {                  return secure ? Resources.Signal3E : Resources.Signal3;              }              else if (rssi >= -79)              {                  return secure ? Resources.Signal2E : Resources.Signal2;              }              else if (rssi >= -89)              {                  return secure ? Resources.Signal1E : Resources.Signal1;              }              else              {                  return secure ? Resources.Signal0E : Resources.Signal0;              }
Magic Number,inSSIDer.Misc,SignalBars,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalBars.cs,GetImage,The following statement contains a magic number: if (rssi >= -54)              {                  return secure ? Resources.Signal5E : Resources.Signal5;              }              else if(rssi >= -59)              {                  return secure ? Resources.Signal4E : Resources.Signal4;              }              else if (rssi >= -69)              {                  return secure ? Resources.Signal3E : Resources.Signal3;              }              else if (rssi >= -79)              {                  return secure ? Resources.Signal2E : Resources.Signal2;              }              else if (rssi >= -89)              {                  return secure ? Resources.Signal1E : Resources.Signal1;              }              else              {                  return secure ? Resources.Signal0E : Resources.Signal0;              }
Magic Number,inSSIDer.Misc,SignalBars,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalBars.cs,GetImage,The following statement contains a magic number: if (rssi >= -54)              {                  return secure ? Resources.Signal5E : Resources.Signal5;              }              else if(rssi >= -59)              {                  return secure ? Resources.Signal4E : Resources.Signal4;              }              else if (rssi >= -69)              {                  return secure ? Resources.Signal3E : Resources.Signal3;              }              else if (rssi >= -79)              {                  return secure ? Resources.Signal2E : Resources.Signal2;              }              else if (rssi >= -89)              {                  return secure ? Resources.Signal1E : Resources.Signal1;              }              else              {                  return secure ? Resources.Signal0E : Resources.Signal0;              }
Magic Number,inSSIDer.Misc,SignalColor,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalColor.cs,InitColors,The following statement contains a magic number: Dictionary<int' Color> defs = new Dictionary<int' Color>                                                {                                                    {UpperBounds' Color.LimeGreen}'                                                    {-50' Color.LimeGreen}'                                                    {-55' Color.GreenYellow}'                                                    {-60' Color.Yellow}'                                                    {-70' Color.Orange}'                                                    {-80' Color.OrangeRed}'                                                    {LowerBounds' Color.Red}                                                };
Magic Number,inSSIDer.Misc,SignalColor,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalColor.cs,InitColors,The following statement contains a magic number: Dictionary<int' Color> defs = new Dictionary<int' Color>                                                {                                                    {UpperBounds' Color.LimeGreen}'                                                    {-50' Color.LimeGreen}'                                                    {-55' Color.GreenYellow}'                                                    {-60' Color.Yellow}'                                                    {-70' Color.Orange}'                                                    {-80' Color.OrangeRed}'                                                    {LowerBounds' Color.Red}                                                };
Magic Number,inSSIDer.Misc,SignalColor,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalColor.cs,InitColors,The following statement contains a magic number: Dictionary<int' Color> defs = new Dictionary<int' Color>                                                {                                                    {UpperBounds' Color.LimeGreen}'                                                    {-50' Color.LimeGreen}'                                                    {-55' Color.GreenYellow}'                                                    {-60' Color.Yellow}'                                                    {-70' Color.Orange}'                                                    {-80' Color.OrangeRed}'                                                    {LowerBounds' Color.Red}                                                };
Magic Number,inSSIDer.Misc,SignalColor,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalColor.cs,InitColors,The following statement contains a magic number: Dictionary<int' Color> defs = new Dictionary<int' Color>                                                {                                                    {UpperBounds' Color.LimeGreen}'                                                    {-50' Color.LimeGreen}'                                                    {-55' Color.GreenYellow}'                                                    {-60' Color.Yellow}'                                                    {-70' Color.Orange}'                                                    {-80' Color.OrangeRed}'                                                    {LowerBounds' Color.Red}                                                };
Magic Number,inSSIDer.Misc,SignalColor,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalColor.cs,InitColors,The following statement contains a magic number: Dictionary<int' Color> defs = new Dictionary<int' Color>                                                {                                                    {UpperBounds' Color.LimeGreen}'                                                    {-50' Color.LimeGreen}'                                                    {-55' Color.GreenYellow}'                                                    {-60' Color.Yellow}'                                                    {-70' Color.Orange}'                                                    {-80' Color.OrangeRed}'                                                    {LowerBounds' Color.Red}                                                };
Magic Number,inSSIDer.Misc,SignalColor,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SignalColor.cs,InitColors,The following statement contains a magic number: for (int i = 0; i >= -100; i--)              {                  //If the current point is equal to a defined point' use that one.                  if(defs.ContainsKey(i))                  {                      _colors.Add(i' defs[i]);                      continue;                  }                  //Find which borders the current value lies between                  foreach (int key in defs.Keys)                  {                      if (key > i)                      {                          b1 = key;                      }                      if(key < i)                      {                          b2 = key;                          break;                      }                  }                    //We have the bounderies set' continue                  upC = defs[b1];                  lowC = defs[b2];                    //Find the inverse distance from the current point' i' to the boundries                  distU = Math.Abs(1f / (b1 - i));                  distL = Math.Abs(1f / (b2 - i));                    //Solve Red                  acc1 = (distU * upC.R) + (distL * lowC.R);                  acc2 = distU + distL;                    r = (int)(acc1 / acc2);                    //Solve Green                  acc1 = (distU * upC.G) + (distL * lowC.G);                  acc2 = distU + distL;                    g = (int)(acc1 / acc2);                    //Solve Blue                  acc1 = (distU * upC.B) + (distL * lowC.B);                  acc2 = distU + distL;                    b = (int)(acc1 / acc2);                    //Set the color                  curC = Color.FromArgb(r' g' b);                    //Add the color to the dictionary                  _colors.Add(i' curC);              }
Magic Number,inSSIDer.Misc,ExprParser,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\ExprParser.cs,Fix,The following statement contains a magic number: try              {                  char[] chars = exp.ToCharArray();                  List<char> chrList = new List<char>();                  //&&|\s&&\s|\s&&|&&\s                    //char lastChar = '\0';                  //bool addchr;                    for (int i = 0; i < chars.Length; i++)                  {                      //addchr = true;                      if (chars[i] == '&' && chars[i + 1] == '&')                      {                          if (chars[i - 1] != ' ' && chars[i - 1] != '"')                          {                              chrList.Add(' ');                              chrList.Add('&');                              chrList.Add('&');                              i += 2;                              if (chars[i] != ' ')                              {                                  chrList.Add(' ');                              }                          }                          else if (chars[i + 2] != ' ')                          {                              chrList.Add('&');                              chrList.Add('&');                              chrList.Add(' ');                              i += 2;                              //addchr = false;                          }                      }                      //if (!addchr) continue;                      chrList.Add(chars[i]);                  }                  string output = new string(chrList.ToArray());                    //Fix names                  string[] p = output.Split(new[] { " && " }' StringSplitOptions.RemoveEmptyEntries);                  StringBuilder sb = new StringBuilder();                  string sep = "";                  foreach (string s in p)                  {                      //Are we in a quote?                      bool inQ = false;                        //Replace all spaces inside of quotes with placeholders                      for (int i = 0; i < chars.Length; i++)                      {                          if (chars[i] == '"') inQ = !inQ;                          else if (inQ && chars[i] == ' ')                          {                              chars[i] = '|';                          }                      }                      string s2 = new string(chars);                        string[] p2 = s2.Trim().Split(' ');                      //Replace space placeholders with spaces                      p2[2] = p2[2].Replace('|'' ' ');                        string oldp20;                      p2[0] = p2[0].ToLower();                      foreach (KeyValuePair<string' string> prop in Prop)                      {                          oldp20 = p2[0];                          p2[0] = p2[0].Replace(prop.Key' prop.Value);                          if (p2[0] != oldp20) break;                      }                      sb.Append(sep);                      sb.Append(p2[0]);                        lastSection = "MSG:Error near \"" + p2[0] + "\"";                        sb.Append(' ');                      sb.Append(p2[1]);                        lastSection.TrimEnd('"');                      lastSection += " " + p2[1] + "\"";                        sb.Append(' ');                      sb.Append(p2[2]);                      sep = " && ";                    }                    return sb.ToString();              }              catch              {                  return lastSection;              }
Magic Number,inSSIDer.Misc,ExprParser,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\ExprParser.cs,Fix,The following statement contains a magic number: try              {                  char[] chars = exp.ToCharArray();                  List<char> chrList = new List<char>();                  //&&|\s&&\s|\s&&|&&\s                    //char lastChar = '\0';                  //bool addchr;                    for (int i = 0; i < chars.Length; i++)                  {                      //addchr = true;                      if (chars[i] == '&' && chars[i + 1] == '&')                      {                          if (chars[i - 1] != ' ' && chars[i - 1] != '"')                          {                              chrList.Add(' ');                              chrList.Add('&');                              chrList.Add('&');                              i += 2;                              if (chars[i] != ' ')                              {                                  chrList.Add(' ');                              }                          }                          else if (chars[i + 2] != ' ')                          {                              chrList.Add('&');                              chrList.Add('&');                              chrList.Add(' ');                              i += 2;                              //addchr = false;                          }                      }                      //if (!addchr) continue;                      chrList.Add(chars[i]);                  }                  string output = new string(chrList.ToArray());                    //Fix names                  string[] p = output.Split(new[] { " && " }' StringSplitOptions.RemoveEmptyEntries);                  StringBuilder sb = new StringBuilder();                  string sep = "";                  foreach (string s in p)                  {                      //Are we in a quote?                      bool inQ = false;                        //Replace all spaces inside of quotes with placeholders                      for (int i = 0; i < chars.Length; i++)                      {                          if (chars[i] == '"') inQ = !inQ;                          else if (inQ && chars[i] == ' ')                          {                              chars[i] = '|';                          }                      }                      string s2 = new string(chars);                        string[] p2 = s2.Trim().Split(' ');                      //Replace space placeholders with spaces                      p2[2] = p2[2].Replace('|'' ' ');                        string oldp20;                      p2[0] = p2[0].ToLower();                      foreach (KeyValuePair<string' string> prop in Prop)                      {                          oldp20 = p2[0];                          p2[0] = p2[0].Replace(prop.Key' prop.Value);                          if (p2[0] != oldp20) break;                      }                      sb.Append(sep);                      sb.Append(p2[0]);                        lastSection = "MSG:Error near \"" + p2[0] + "\"";                        sb.Append(' ');                      sb.Append(p2[1]);                        lastSection.TrimEnd('"');                      lastSection += " " + p2[1] + "\"";                        sb.Append(' ');                      sb.Append(p2[2]);                      sep = " && ";                    }                    return sb.ToString();              }              catch              {                  return lastSection;              }
Magic Number,inSSIDer.Misc,ExprParser,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\ExprParser.cs,Fix,The following statement contains a magic number: try              {                  char[] chars = exp.ToCharArray();                  List<char> chrList = new List<char>();                  //&&|\s&&\s|\s&&|&&\s                    //char lastChar = '\0';                  //bool addchr;                    for (int i = 0; i < chars.Length; i++)                  {                      //addchr = true;                      if (chars[i] == '&' && chars[i + 1] == '&')                      {                          if (chars[i - 1] != ' ' && chars[i - 1] != '"')                          {                              chrList.Add(' ');                              chrList.Add('&');                              chrList.Add('&');                              i += 2;                              if (chars[i] != ' ')                              {                                  chrList.Add(' ');                              }                          }                          else if (chars[i + 2] != ' ')                          {                              chrList.Add('&');                              chrList.Add('&');                              chrList.Add(' ');                              i += 2;                              //addchr = false;                          }                      }                      //if (!addchr) continue;                      chrList.Add(chars[i]);                  }                  string output = new string(chrList.ToArray());                    //Fix names                  string[] p = output.Split(new[] { " && " }' StringSplitOptions.RemoveEmptyEntries);                  StringBuilder sb = new StringBuilder();                  string sep = "";                  foreach (string s in p)                  {                      //Are we in a quote?                      bool inQ = false;                        //Replace all spaces inside of quotes with placeholders                      for (int i = 0; i < chars.Length; i++)                      {                          if (chars[i] == '"') inQ = !inQ;                          else if (inQ && chars[i] == ' ')                          {                              chars[i] = '|';                          }                      }                      string s2 = new string(chars);                        string[] p2 = s2.Trim().Split(' ');                      //Replace space placeholders with spaces                      p2[2] = p2[2].Replace('|'' ' ');                        string oldp20;                      p2[0] = p2[0].ToLower();                      foreach (KeyValuePair<string' string> prop in Prop)                      {                          oldp20 = p2[0];                          p2[0] = p2[0].Replace(prop.Key' prop.Value);                          if (p2[0] != oldp20) break;                      }                      sb.Append(sep);                      sb.Append(p2[0]);                        lastSection = "MSG:Error near \"" + p2[0] + "\"";                        sb.Append(' ');                      sb.Append(p2[1]);                        lastSection.TrimEnd('"');                      lastSection += " " + p2[1] + "\"";                        sb.Append(' ');                      sb.Append(p2[2]);                      sep = " && ";                    }                    return sb.ToString();              }              catch              {                  return lastSection;              }
Magic Number,inSSIDer.Misc,ExprParser,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\ExprParser.cs,Fix,The following statement contains a magic number: try              {                  char[] chars = exp.ToCharArray();                  List<char> chrList = new List<char>();                  //&&|\s&&\s|\s&&|&&\s                    //char lastChar = '\0';                  //bool addchr;                    for (int i = 0; i < chars.Length; i++)                  {                      //addchr = true;                      if (chars[i] == '&' && chars[i + 1] == '&')                      {                          if (chars[i - 1] != ' ' && chars[i - 1] != '"')                          {                              chrList.Add(' ');                              chrList.Add('&');                              chrList.Add('&');                              i += 2;                              if (chars[i] != ' ')                              {                                  chrList.Add(' ');                              }                          }                          else if (chars[i + 2] != ' ')                          {                              chrList.Add('&');                              chrList.Add('&');                              chrList.Add(' ');                              i += 2;                              //addchr = false;                          }                      }                      //if (!addchr) continue;                      chrList.Add(chars[i]);                  }                  string output = new string(chrList.ToArray());                    //Fix names                  string[] p = output.Split(new[] { " && " }' StringSplitOptions.RemoveEmptyEntries);                  StringBuilder sb = new StringBuilder();                  string sep = "";                  foreach (string s in p)                  {                      //Are we in a quote?                      bool inQ = false;                        //Replace all spaces inside of quotes with placeholders                      for (int i = 0; i < chars.Length; i++)                      {                          if (chars[i] == '"') inQ = !inQ;                          else if (inQ && chars[i] == ' ')                          {                              chars[i] = '|';                          }                      }                      string s2 = new string(chars);                        string[] p2 = s2.Trim().Split(' ');                      //Replace space placeholders with spaces                      p2[2] = p2[2].Replace('|'' ' ');                        string oldp20;                      p2[0] = p2[0].ToLower();                      foreach (KeyValuePair<string' string> prop in Prop)                      {                          oldp20 = p2[0];                          p2[0] = p2[0].Replace(prop.Key' prop.Value);                          if (p2[0] != oldp20) break;                      }                      sb.Append(sep);                      sb.Append(p2[0]);                        lastSection = "MSG:Error near \"" + p2[0] + "\"";                        sb.Append(' ');                      sb.Append(p2[1]);                        lastSection.TrimEnd('"');                      lastSection += " " + p2[1] + "\"";                        sb.Append(' ');                      sb.Append(p2[2]);                      sep = " && ";                    }                    return sb.ToString();              }              catch              {                  return lastSection;              }
Magic Number,inSSIDer.Misc,ExprParser,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\ExprParser.cs,Fix,The following statement contains a magic number: try              {                  char[] chars = exp.ToCharArray();                  List<char> chrList = new List<char>();                  //&&|\s&&\s|\s&&|&&\s                    //char lastChar = '\0';                  //bool addchr;                    for (int i = 0; i < chars.Length; i++)                  {                      //addchr = true;                      if (chars[i] == '&' && chars[i + 1] == '&')                      {                          if (chars[i - 1] != ' ' && chars[i - 1] != '"')                          {                              chrList.Add(' ');                              chrList.Add('&');                              chrList.Add('&');                              i += 2;                              if (chars[i] != ' ')                              {                                  chrList.Add(' ');                              }                          }                          else if (chars[i + 2] != ' ')                          {                              chrList.Add('&');                              chrList.Add('&');                              chrList.Add(' ');                              i += 2;                              //addchr = false;                          }                      }                      //if (!addchr) continue;                      chrList.Add(chars[i]);                  }                  string output = new string(chrList.ToArray());                    //Fix names                  string[] p = output.Split(new[] { " && " }' StringSplitOptions.RemoveEmptyEntries);                  StringBuilder sb = new StringBuilder();                  string sep = "";                  foreach (string s in p)                  {                      //Are we in a quote?                      bool inQ = false;                        //Replace all spaces inside of quotes with placeholders                      for (int i = 0; i < chars.Length; i++)                      {                          if (chars[i] == '"') inQ = !inQ;                          else if (inQ && chars[i] == ' ')                          {                              chars[i] = '|';                          }                      }                      string s2 = new string(chars);                        string[] p2 = s2.Trim().Split(' ');                      //Replace space placeholders with spaces                      p2[2] = p2[2].Replace('|'' ' ');                        string oldp20;                      p2[0] = p2[0].ToLower();                      foreach (KeyValuePair<string' string> prop in Prop)                      {                          oldp20 = p2[0];                          p2[0] = p2[0].Replace(prop.Key' prop.Value);                          if (p2[0] != oldp20) break;                      }                      sb.Append(sep);                      sb.Append(p2[0]);                        lastSection = "MSG:Error near \"" + p2[0] + "\"";                        sb.Append(' ');                      sb.Append(p2[1]);                        lastSection.TrimEnd('"');                      lastSection += " " + p2[1] + "\"";                        sb.Append(' ');                      sb.Append(p2[2]);                      sep = " && ";                    }                    return sb.ToString();              }              catch              {                  return lastSection;              }
Magic Number,inSSIDer.Misc,ExprParser,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\ExprParser.cs,Fix,The following statement contains a magic number: try              {                  char[] chars = exp.ToCharArray();                  List<char> chrList = new List<char>();                  //&&|\s&&\s|\s&&|&&\s                    //char lastChar = '\0';                  //bool addchr;                    for (int i = 0; i < chars.Length; i++)                  {                      //addchr = true;                      if (chars[i] == '&' && chars[i + 1] == '&')                      {                          if (chars[i - 1] != ' ' && chars[i - 1] != '"')                          {                              chrList.Add(' ');                              chrList.Add('&');                              chrList.Add('&');                              i += 2;                              if (chars[i] != ' ')                              {                                  chrList.Add(' ');                              }                          }                          else if (chars[i + 2] != ' ')                          {                              chrList.Add('&');                              chrList.Add('&');                              chrList.Add(' ');                              i += 2;                              //addchr = false;                          }                      }                      //if (!addchr) continue;                      chrList.Add(chars[i]);                  }                  string output = new string(chrList.ToArray());                    //Fix names                  string[] p = output.Split(new[] { " && " }' StringSplitOptions.RemoveEmptyEntries);                  StringBuilder sb = new StringBuilder();                  string sep = "";                  foreach (string s in p)                  {                      //Are we in a quote?                      bool inQ = false;                        //Replace all spaces inside of quotes with placeholders                      for (int i = 0; i < chars.Length; i++)                      {                          if (chars[i] == '"') inQ = !inQ;                          else if (inQ && chars[i] == ' ')                          {                              chars[i] = '|';                          }                      }                      string s2 = new string(chars);                        string[] p2 = s2.Trim().Split(' ');                      //Replace space placeholders with spaces                      p2[2] = p2[2].Replace('|'' ' ');                        string oldp20;                      p2[0] = p2[0].ToLower();                      foreach (KeyValuePair<string' string> prop in Prop)                      {                          oldp20 = p2[0];                          p2[0] = p2[0].Replace(prop.Key' prop.Value);                          if (p2[0] != oldp20) break;                      }                      sb.Append(sep);                      sb.Append(p2[0]);                        lastSection = "MSG:Error near \"" + p2[0] + "\"";                        sb.Append(' ');                      sb.Append(p2[1]);                        lastSection.TrimEnd('"');                      lastSection += " " + p2[1] + "\"";                        sb.Append(' ');                      sb.Append(p2[2]);                      sep = " && ";                    }                    return sb.ToString();              }              catch              {                  return lastSection;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ComputeRssi,The following statement contains a magic number: if (linkQuality > 100)                  linkQuality = 100;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ComputeRssi,The following statement contains a magic number: if (linkQuality > 100)                  linkQuality = 100;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ComputeRssi,The following statement contains a magic number: return (int)(.5 * linkQuality - 100);
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ComputeRssi,The following statement contains a magic number: return (int)(.5 * linkQuality - 100);
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 2400000) && (frequency < 2484000))                  retVal = (frequency - 2407000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 2400000) && (frequency < 2484000))                  retVal = (frequency - 2407000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 2400000) && (frequency < 2484000))                  retVal = (frequency - 2407000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 2400000) && (frequency < 2484000))                  retVal = (frequency - 2407000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency >= 2484000) && (frequency <= 2495000))                  retVal = 14;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency >= 2484000) && (frequency <= 2495000))                  retVal = 14;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency >= 2484000) && (frequency <= 2495000))                  retVal = 14;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 5000000) && (frequency < 5900000))                  retVal = (frequency - 5000000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 5000000) && (frequency < 5900000))                  retVal = (frequency - 5000000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 5000000) && (frequency < 5900000))                  retVal = (frequency - 5000000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToChannel,The following statement contains a magic number: if ((frequency > 5000000) && (frequency < 5900000))                  retVal = (frequency - 5000000) / 5000;
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToMbs,The following statement contains a magic number: for (int i = 0; i < rates.Length; ++i)              {                  if (rates[i] > 0)                      rateList.Add((rates[i] & 0x7FFF) * 0.5);              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToMbs,The following statement contains a magic number: for (int i = 0; i < rates.Length; ++i)              {                  if (rates[i] > 0)                      rateList.Add((rates[i] & 0x7F) * 0.5);              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,IsXp,The following statement contains a magic number: return (Environment.OSVersion.Version.Major == 5) &&                     (Environment.OSVersion.Version.Minor >= 1);
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,StringToByteArray,The following statement contains a magic number: byte[] bytes = new byte[numberChars / 2];
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,StringToByteArray,The following statement contains a magic number: for (int i = 0; i < numberChars; i += 2)                  bytes[i / 2] = Convert.ToByte(hex.Substring(i' 2)' 16);
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if ((channel >= 1) && (channel <= 13))              {                  return (channel * 5) + 2407;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if ((channel >= 1) && (channel <= 13))              {                  return (channel * 5) + 2407;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if ((channel >= 1) && (channel <= 13))              {                  return (channel * 5) + 2407;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if (channel == 14)              {                  return 2484;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if (channel == 14)              {                  return 2484;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if (channel >= 36)              {                  return (channel * 5) + 5000;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if (channel >= 36)              {                  return (channel * 5) + 5000;              }
Magic Number,inSSIDer.Misc,Utilities,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\Utilities.cs,ConvertToFrequency,The following statement contains a magic number: if (channel >= 36)              {                  return (channel * 5) + 5000;              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Misc,XmlHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\XmlHelper.cs,CleanString,The following statement contains a magic number: for (int j = 0; j < input.Length; j++)              {                  byte charByte = (byte)input[j];                  // If it's not a standard ascii character or if its the & or < symbols                  if (!(charByte >= 32 && charByte <= 126 && charByte != 38 && charByte != 60))                  {                      switch (charByte)                      {                          // no ampersands                          case 38:                              input = input.Substring(0' j) + "&amp;" + input.Substring(j + 1);                              j += 4;                              break;                          // no less thans                          case 60:                              input = input.Substring(0' j) + "&lt;" + input.Substring(j + 1);                              j += 3;                              break;                          // all other weird characters change directly to unicode                          default:                              byte[] tempByte = Encoding.Unicode.GetBytes(new[] { input[j] });                              string unicodeValue = System.Convert.ToString(tempByte[0] + (tempByte[1] << 8)' CultureInfo.InvariantCulture);                              string output = "&amp;#" + unicodeValue + ";";                              input = input.Substring(0' j) + output + input.Substring(j + 1);                              j += output.Length - 1;                              break;                      }                  }              }
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,Initialize,The following statement contains a magic number: Logger = new GpxDataLogger { AutoSave = true' AutoSaveInterval = TimeSpan.FromSeconds(10) };
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,GenerateFakeMacAddress,The following statement contains a magic number: byte[] outp = new byte[6];
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,GenerateFakeRssi,The following statement contains a magic number: int rssi = lastRssi + random.Next(-4' 5);
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,GenerateFakeRssi,The following statement contains a magic number: int rssi = lastRssi + random.Next(-4' 5);
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,GenerateFakeRssi,The following statement contains a magic number: if (rssi < -95) rssi = -95;
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,GenerateFakeRssi,The following statement contains a magic number: if (rssi < -95) rssi = -95;
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,GenerateFakeRssi,The following statement contains a magic number: if (rssi > -20) rssi = -20;
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,GenerateFakeRssi,The following statement contains a magic number: if (rssi > -20) rssi = -20;
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,TNullScanElapsed,The following statement contains a magic number: if(_usedData.Count == 0)              {                  for (int i = 0; i < numNull; i++)                  {                      _usedData.Add(new NullNetData                                        {                                            Mac = GenerateFakeMacAddress()'                                            Channel = (uint) random.Next(1' 14)'                                            Ssid = "Fake SSID"'                                            Rssi = random.Next(-90' -20)                                        });                  }                  return;              }
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,TNullScanElapsed,The following statement contains a magic number: if(_usedData.Count == 0)              {                  for (int i = 0; i < numNull; i++)                  {                      _usedData.Add(new NullNetData                                        {                                            Mac = GenerateFakeMacAddress()'                                            Channel = (uint) random.Next(1' 14)'                                            Ssid = "Fake SSID"'                                            Rssi = random.Next(-90' -20)                                        });                  }                  return;              }
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,TNullScanElapsed,The following statement contains a magic number: if(_usedData.Count == 0)              {                  for (int i = 0; i < numNull; i++)                  {                      _usedData.Add(new NullNetData                                        {                                            Mac = GenerateFakeMacAddress()'                                            Channel = (uint) random.Next(1' 14)'                                            Ssid = "Fake SSID"'                                            Rssi = random.Next(-90' -20)                                        });                  }                  return;              }
Magic Number,inSSIDer.Scanning,ScanController,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\ScanController.cs,TNullScanElapsed,The following statement contains a magic number: for (int i = 0; i < numNull; i++)              {                  NetworkData ndTemp = new NetworkData(DateTime.Now'                                                       _usedData[i].Mac'                                                       "WPA2-Enterprise"'                                                       _usedData[i].Ssid'                                                       _usedData[i].Channel'                                                       _usedData[i].Rssi'                                                       50'                                                       "1/2/5.5/6/12/24/36/48/54"'                                                       "Fake");                  //generate new rssi                  _usedData[i].Rssi = GenerateFakeRssi(_usedData[i].Rssi);                  networkDataList.Add(ndTemp);              }
Magic Number,inSSIDer.Scanning,NetworkScannerN,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\NetworkScannerN.cs,Stop,The following statement contains a magic number: if (MyScanThread != null)              {                  //Give the terminate signal                  MyTerminateEvent.Set();                  //If the thread isn't stopped in 1 second' kill it.                  if (!MyScanThread.Join(1000))                  {                      MyScanThread.Abort();                  }                  MyScanThread = null;                    //MyTerminateEvent.Reset();                  MyScanThrottleEvent.Set();              }
Magic Number,inSSIDer.Scanning,NetworkScannerN,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\NetworkScannerN.cs,ScanThreadFunc,The following statement contains a magic number: while (true)              {                  //Wait for the terminate signal' the scan complete signal' or 3 seconds                  //WaitHandle.WaitAll()                  try                  {                      int num = WaitHandle.WaitAny(MyWaitHandleArray' 3000);                      if (num != WaitHandle.WaitTimeout && (num != 1))                      {                          //Stop the scanning loop                          break;                      }                  }                  catch (MissingMethodException)                  {                      MessageBox.Show("Could not start scanning' please check for .NET Framework service pack update");                      return;                  }                    //Scan speed throttling                  WaitHandle.WaitAll(SpeedWait);                    try                  {                      lock (scanInterface)                      {                          IEnumerable<NetworkData> dataList = scanInterface.GetNetworkData();                          OnNewNetworkData(dataList);                            scanInterface.ScanNetworks();                            //Start the wait                          SpeedTimer.Start();                      }                  }                  catch (Win32Exception)                  {                  }              }
Magic Number,inSSIDer.Scanning.Interfaces,NdisScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\NdisScanInterface.cs,GetNetworkData,The following statement contains a magic number: if (exArray != null)              {                  foreach (NdisWlanBssidEx ex in exArray)                  {                      NetworkData data2 = new NetworkData(ex.MacAddress);                      data2.Channel = Utilities.ConvertToChannel(ex.Configuration.DSConfig);                      NetworkData item = data2;                        if (item.MyMacAddress.MyValue == 0)                          continue;                        if ((ex.IELength <= ex.IEs.Length) && (ex.IELength > 28))                      {                          byte[] ies = new byte[ex.IELength];                          Array.Copy(ex.IEs' 0' ies' 0' ex.IELength);                                item.NSettings = IeParser.Parse(ies);                              item.IsTypeN = item.NSettings != null;                              if (item.NSettings != null)                              {                                  //Add the extended 802.11N rates                                  item.Rates.AddRange(item.NSettings.Rates.Where(f => !item.Rates.Contains(f)));                                  item.Rates.Sort();                              }                          //}                      }                      Utilities.ConvertToMbs(ex.SupportedRates' item.Rates' item.IsTypeN);                      item.Rssi = ex.Rssi;                      item.SignalQuality = 0;                      string str = Encoding.ASCII.GetString(ex.Ssid' 0' (int)ex.SsidLength);                      if (str != null)                      {                          str = str.Trim();                      }                      item.Ssid = str;                      item.Security = Ndis.GetSecurityString(ex);                      item.NetworkType = Utilities.FindValueString(Utilities.InfrastructureText' (int)ex.InfrastructureMode);                        //Check to see if this AP is the connected one                      item.Connected = item.MyMacAddress.Bytes.SequenceEqual(connectedBssid);                        list.Add(item);                  }              }
Magic Number,inSSIDer.Scanning.Interfaces,ManagedScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\ManagedScanInterface.cs,GetNetworkData,The following statement contains a magic number: if ((networkBssList != null) && (availableNetworkList != null))              {                  //Get connected to AP                  Wlan.WlanAssociationAttributes connectedAP = new Wlan.WlanAssociationAttributes();                  try                  {                      if (_interface.CurrentConnection.isState == Wlan.WlanInterfaceState.Connected)                      {                          connectedAP = _interface.CurrentConnection.wlanAssociationAttributes;                      }                  }                  catch (NullReferenceException) { /*Hopefully it will work next time*/ }                    Wlan.WlanAvailableNetwork foundNetwork = new Wlan.WlanAvailableNetwork();                  foreach (Wlan.WlanBssEntryN entry in networkBssList)                  {                      string ssid = Encoding.ASCII.GetString(entry.BaseEntry.dot11Ssid.SSID' 0'                                                             (int)entry.BaseEntry.dot11Ssid.SSIDLength);                      if (FindNetwork(ssid' availableNetworkList' ref foundNetwork))                      {                            NetworkData item = new NetworkData(entry.BaseEntry.dot11Bssid);                          item.IsTypeN = (entry.BaseEntry.dot11BssPhyType == Wlan.Dot11PhyType.Ht);                          if (item.IsTypeN && entry.IEs != null && entry.IEs.Length > 0)                          {                              item.NSettings = IeParser.Parse(entry.IEs);                              if (item.NSettings == null)                                  return null;                                //Add the extended 802.11N rates                              item.Rates.AddRange(item.NSettings.Rates.Where(f => !item.Rates.Contains(f)));                              item.Rates.Sort();                          }                            Utilities.ConvertToMbs(entry.BaseEntry.wlanRateSet.Rates' item.Rates);                                                    item.IsTypeN = entry.BaseEntry.dot11BssPhyType == Wlan.Dot11PhyType.Ht;                          int num = Utilities.ComputeRssi(entry.BaseEntry.linkQuality);                          item.Rssi = (entry.BaseEntry.rssi > num) ? entry.BaseEntry.rssi : num;                            // tyler's fix                          // Sometimes there is an issue where the RSSI will become overly positive                          // (e.g. going from -96 to +160)' so subtracting 256 will fix it.                          if (item.Rssi > 0)                              item.Rssi -= 256;                                                                     item.Ssid = ssid;                          item.Channel = Utilities.ConvertToChannel(entry.BaseEntry.chCenterFrequency);                          item.NetworkType = Utilities.ConvertToString(entry.BaseEntry.dot11BssType);                          item.Security = Utilities.CreateSecurityString(foundNetwork.dot11DefaultAuthAlgorithm'                                                                       foundNetwork.dot11DefaultCipherAlgorithm);                          item.SignalQuality = foundNetwork.wlanSignalQuality;                            //Check to see if this AP is the connected one                          item.Connected = item.MyMacAddress.CompareToPhysicalAddress(connectedAP.Dot11Bssid);                            list.Add(item);                      }                  }              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,CustomTabControl,The following statement contains a magic number: if (_displayManager.Equals(TabControlDisplayManager.Custom)) {                  SetStyle(ControlStyles.UserPaint' true);                  ItemSize = new Size(0' 15);                  Padding = new Point(0'0);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,GetPath,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)' new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top) });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)' new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4) });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);                  path.AddLine(rect.Right' rect.Top' rect.Left' rect.Top);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: Brush buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(120'120'120)'                      LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: Brush buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(120'120'120)'                      LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: Brush buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(120'120'120)'                      LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: Brush buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(120'120'120)'                      LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: Brush buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(120'120'120)'                      LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: Brush buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(120'120'120)'                      LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: if (index == SelectedIndex)              {                  buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(180'180'180)'                      LinearGradientMode.Vertical);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: if (index == SelectedIndex)              {                  buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(180'180'180)'                      LinearGradientMode.Vertical);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: if (index == SelectedIndex)              {                  buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(180'180'180)'                      LinearGradientMode.Vertical);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: if (index == SelectedIndex)              {                  buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(180'180'180)'                      LinearGradientMode.Vertical);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: if (index == SelectedIndex)              {                  buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(180'180'180)'                      LinearGradientMode.Vertical);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBackground,The following statement contains a magic number: if (index == SelectedIndex)              {                  buttonBrush =                  new LinearGradientBrush(                      rect'                      Color.FromArgb(160'160'160)'                      Color.FromArgb(180'180'180)'                      LinearGradientMode.Vertical);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabBorder,The following statement contains a magic number: if (index == SelectedIndex)              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 4);                  path.AddCurve(new[]                                    {                                        new Point(rect.Left' rect.Top + 4)' new Point(rect.Left + 1' rect.Top + 2)'                                        new Point(rect.Left + 2' rect.Top + 1)' new Point(rect.Left + 4' rect.Top)                                    });                  path.AddLine(rect.Left + 4' rect.Top' rect.Right - 4' rect.Top);                  path.AddCurve(new[]                                    {                                        new Point(rect.Right - 4' rect.Top)' new Point(rect.Right - 2' rect.Top + 1)'                                        new Point(rect.Right - 1' rect.Top + 2)' new Point(rect.Right' rect.Top + 4)                                    });                  path.AddLine(rect.Right' rect.Top + 4' rect.Right' rect.Bottom);              }              else              {                  path.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + 6);                  path.AddCurve(new[] { new Point(rect.Left' rect.Top + 6)' new Point(rect.Left + 1' rect.Top + 4)' new Point(rect.Left + 2' rect.Top + 3)' new Point(rect.Left + 4' rect.Top + 2) });                  path.AddLine(rect.Left + 4' rect.Top + 2' rect.Right - 4' rect.Top + 2);                  path.AddCurve(new[] { new Point(rect.Right - 4' rect.Top + 2)' new Point(rect.Right - 2' rect.Top + 3)' new Point(rect.Right - 1' rect.Top + 4)' new Point(rect.Right' rect.Top + 6) });                  path.AddLine(rect.Right' rect.Top + 6' rect.Right' rect.Bottom);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabImage,The following statement contains a magic number: if (tabImage != null)              {                  Rectangle rect = GetTabRect(index);                  graph.DrawImage(tabImage' rect.Left + (int)(rect.Width * 0.08)' 6' rect.Height - 4' rect.Height - 4);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabImage,The following statement contains a magic number: if (tabImage != null)              {                  Rectangle rect = GetTabRect(index);                  graph.DrawImage(tabImage' rect.Left + (int)(rect.Width * 0.08)' 6' rect.Height - 4' rect.Height - 4);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabImage,The following statement contains a magic number: if (tabImage != null)              {                  Rectangle rect = GetTabRect(index);                  graph.DrawImage(tabImage' rect.Left + (int)(rect.Width * 0.08)' 6' rect.Height - 4' rect.Height - 4);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabImage,The following statement contains a magic number: if (tabImage != null)              {                  Rectangle rect = GetTabRect(index);                  graph.DrawImage(tabImage' rect.Left + (int)(rect.Width * 0.08)' 6' rect.Height - 4' rect.Height - 4);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabText,The following statement contains a magic number: Rectangle rect2 = new Rectangle(rect.Left' rect.Top' rect.Width - (int)(rect.Width * 0.08)' rect.Height);
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabText,The following statement contains a magic number: if(ImageList == null)              {                  rect2 = new Rectangle(rect.Left-6' rect.Top+1' rect.Width - (int)(rect.Width * 0.08)' rect.Height);              }
Magic Number,inSSIDer.UI.Controls,CustomTabControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\CustomTabControl.cs,PaintTabText,The following statement contains a magic number: if(ImageList == null)              {                  rect2 = new Rectangle(rect.Left-6' rect.Top+1' rect.Width - (int)(rect.Width * 0.08)' rect.Height);              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,GpsGraph,The following statement contains a magic number: TopMargin = 5;
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,GpsGraph,The following statement contains a magic number: LeftMargin = 50;
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,GpsGraph,The following statement contains a magic number: BottomMargin = 20;
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,GpsGraph,The following statement contains a magic number: RightMargin = 5;
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,CreateBrush,The following statement contains a magic number: ColorBlend cb = new ColorBlend(7)                                  {                                      Colors = new[]                                                   {                                                       Color.Green' Color.Green' Color.YellowGreen' Color.Yellow'                                                       Color.Orange' Color.OrangeRed'                                                       Color.Red                                                   }'                                      Positions = new[] {0' 0.5f' 0.55f' 0.7f' 0.8f' 0.9f' 1f}                                  };
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawBars,The following statement contains a magic number: for (int i = 0; i < numBars; i++)              {                  satTemp = _lastSats[i];                  if (satTemp.Snr < 0) satTemp.Snr = 0;                  x += 2;                    recBar = new RectangleF(x' TopMargin' barWidth' Height - TopMargin - BottomMargin);                    //SNR                  g.FillRectangle(_lgb' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp));                    //Gray out the unused satellites a little                  if(!satTemp.IsUsed)                  {                      g.FillRectangle(new SolidBrush(Color.FromArgb(145' Color.Gray))' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp));                  }                    g.DrawString(satTemp.Snr.ToString("F0")' Font' satTemp.IsUsed ? Brushes.White : Brushes.DarkGray' recBar' sfCenter);                    recId = new RectangleF(x' Height - BottomMargin' barWidth' BottomMargin);                    //Draw ID                  g.DrawString(satTemp.Id.ToString()' Font' satTemp.IsUsed ? Brushes.White : Brushes.DarkGray' recId' sfCenter);                    //Tyler: I did this becuase there is no DrawRectangle method that accepts a RectangleF                  g.DrawRectangles(Pens.DimGray' new[] { recBar });                    x += barWidth;                    x += 2;              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawBars,The following statement contains a magic number: for (int i = 0; i < numBars; i++)              {                  satTemp = _lastSats[i];                  if (satTemp.Snr < 0) satTemp.Snr = 0;                  x += 2;                    recBar = new RectangleF(x' TopMargin' barWidth' Height - TopMargin - BottomMargin);                    //SNR                  g.FillRectangle(_lgb' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp));                    //Gray out the unused satellites a little                  if(!satTemp.IsUsed)                  {                      g.FillRectangle(new SolidBrush(Color.FromArgb(145' Color.Gray))' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp));                  }                    g.DrawString(satTemp.Snr.ToString("F0")' Font' satTemp.IsUsed ? Brushes.White : Brushes.DarkGray' recBar' sfCenter);                    recId = new RectangleF(x' Height - BottomMargin' barWidth' BottomMargin);                    //Draw ID                  g.DrawString(satTemp.Id.ToString()' Font' satTemp.IsUsed ? Brushes.White : Brushes.DarkGray' recId' sfCenter);                    //Tyler: I did this becuase there is no DrawRectangle method that accepts a RectangleF                  g.DrawRectangles(Pens.DimGray' new[] { recBar });                    x += barWidth;                    x += 2;              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawBars,The following statement contains a magic number: for (int i = 0; i < numBars; i++)              {                  satTemp = _lastSats[i];                  if (satTemp.Snr < 0) satTemp.Snr = 0;                  x += 2;                    recBar = new RectangleF(x' TopMargin' barWidth' Height - TopMargin - BottomMargin);                    //SNR                  g.FillRectangle(_lgb' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp));                    //Gray out the unused satellites a little                  if(!satTemp.IsUsed)                  {                      g.FillRectangle(new SolidBrush(Color.FromArgb(145' Color.Gray))' x' (Height - BottomMargin) - (float)(satTemp.Snr * _pxPerAmp)' barWidth' (float)(satTemp.Snr * _pxPerAmp));                  }                    g.DrawString(satTemp.Snr.ToString("F0")' Font' satTemp.IsUsed ? Brushes.White : Brushes.DarkGray' recBar' sfCenter);                    recId = new RectangleF(x' Height - BottomMargin' barWidth' BottomMargin);                    //Draw ID                  g.DrawString(satTemp.Id.ToString()' Font' satTemp.IsUsed ? Brushes.White : Brushes.DarkGray' recId' sfCenter);                    //Tyler: I did this becuase there is no DrawRectangle method that accepts a RectangleF                  g.DrawRectangles(Pens.DimGray' new[] { recBar });                    x += barWidth;                    x += 2;              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: for (int i = 0; i < 100; i+=10)              {                  y = Height - BottomMargin - (i * _pxPerAmp);                  g.DrawLine(Pens.Gray' x' y' x + 4' y);                    g.DrawString(i.ToString()' Font' Brushes.White' x - 2' y-6'sfRight);              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: for (int i = 0; i < 100; i+=10)              {                  y = Height - BottomMargin - (i * _pxPerAmp);                  g.DrawLine(Pens.Gray' x' y' x + 4' y);                    g.DrawString(i.ToString()' Font' Brushes.White' x - 2' y-6'sfRight);              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: for (int i = 0; i < 100; i+=10)              {                  y = Height - BottomMargin - (i * _pxPerAmp);                  g.DrawLine(Pens.Gray' x' y' x + 4' y);                    g.DrawString(i.ToString()' Font' Brushes.White' x - 2' y-6'sfRight);              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: for (int i = 0; i < 100; i+=10)              {                  y = Height - BottomMargin - (i * _pxPerAmp);                  g.DrawLine(Pens.Gray' x' y' x + 4' y);                    g.DrawString(i.ToString()' Font' Brushes.White' x - 2' y-6'sfRight);              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: for (int i = 0; i < 100; i+=10)              {                  y = Height - BottomMargin - (i * _pxPerAmp);                  g.DrawLine(Pens.Gray' x' y' x + 4' y);                    g.DrawString(i.ToString()' Font' Brushes.White' x - 2' y-6'sfRight);              }
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: y = ((Height - TopMargin - BottomMargin) / 2f) + g.MeasureString("Signal-to-Noise Ratio [dB]"/*Localizer.GetString("AmplitudedBm")*/' Font).Width / 2 + TopMargin;
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: PointF rotationPoint = new PointF(8' y);
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: matrix.RotateAt(270' rotationPoint);
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: g.DrawString("Signal-to-Noise Ratio [dB]"/*Localizer.GetString("AmplitudedBm")*/' Font' Brushes.White' 8' y);
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: matrix.RotateAt(90' rotationPoint);
Magic Number,inSSIDer.UI.Controls,GpsGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsGraph.cs,DrawGrid,The following statement contains a magic number: g.DrawRectangle(Pens.Gray' LeftMargin+2' TopMargin' Width - LeftMargin - RightMargin' Height - TopMargin - BottomMargin);
Magic Number,inSSIDer.UI.Controls,SparkLineCell,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\SparkLineCell.cs,Paint,The following statement contains a magic number: if (rowIndex >= 0)              {                    int[] sparks;                  if (value is int[])                  {                      sparks = (int[])value;                        if (sparks.Length > 0)                      {                          // let the base class draw the numeric contents                          cellStyle.ForeColor = SignalColor.GetColorThreshold(sparks[sparks.Length - 1]);                          base.Paint(graphics' clipBounds' cellBounds' rowIndex' cellState' sparks[sparks.Length - 1]'                                     sparks[sparks.Length - 1].ToString()' errorText' cellStyle' advancedBorderStyle' DataGridViewPaintParts.All);                      }                        using (Pen pen = new Pen(Color.Red))                      {                          float x0 = cellBounds.X + cellBounds.Width - RightPadding;                          float xStepSize = ((cellBounds.Width - LeftPadding - RightPadding) / (float)AccessPoint.MaxDataPoints);                            for (int i = sparks.Length - 1; i >= 0; i--)                          {                              float x = cellBounds.X + cellBounds.Width - RightPadding - (sparks.Length - i) * xStepSize;                                // calculating Y value of each point... use range of -100 to -25 dBm                              float y = cellBounds.Y + (-25f - sparks[i]) * ((float)cellBounds.Height / 75);                                if (y < cellBounds.Y)                              {                                  y = cellBounds.Y;                              }                              if (y > cellBounds.Y + cellBounds.Height - 1)                              {                                  y = cellBounds.Y + cellBounds.Height - 1;                              }                                pen.Color = SignalColor.GetColorThreshold(sparks[i]);                              graphics.DrawLine(pen' x0' y' x' y);                                if (i == sparks.Length - 1)                              {                                  // draw a dot at the last point to signify it is current..                                  pen.Color = Color.White;                                  graphics.DrawLine(pen' x0' y' x' y);                              }                                x0 = x;                          }                      }                  }                  else                  {                      // let the base class draw the numeric contents                      base.Paint(graphics' clipBounds' cellBounds' rowIndex' cellState' null'                          null' errorText' cellStyle' advancedBorderStyle' DataGridViewPaintParts.All);                    }              }              // paint the header row.              else              {                  base.Paint(graphics' clipBounds' cellBounds' rowIndex' cellState' value'                      formattedValue' errorText' cellStyle' advancedBorderStyle' paintParts);              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: MinFrequency = 2400;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: MaxFrequency = 2495;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: MinAmplitude = -100;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: MaxAmplitude = -10;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: BottomMargin = 20;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: TopMargin = 10;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: LeftMargin = 55;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,ChannelView,The following statement contains a magic number: RightMargin = 10;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: var y = (_graphHeight / 2f) + graphics.MeasureString(Localizer.GetString("AmplitudedBm")' Font).Width / 2 + TopMargin;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: var rotationPoint = new PointF(8' y);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: matrix.RotateAt(270' rotationPoint);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(Localizer.GetString("AmplitudedBm")' Font' brush' 8' y);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: matrix.RotateAt(90' rotationPoint);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(MinAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7' sfAmp);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(MinAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7' sfAmp);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: int y = Height - BottomMargin + 5;
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawLabels,The following statement contains a magic number: if (_band == BandType.Band2400MHz)              {                  for (int channel = 0; channel < 14; channel++)                  {                      freq = 2412 + (5 * channel);                      if (channel == 13)                      {                          freq += 7;                      }                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));	// 11 for middle of channel' 1 for 2401 MHz offset                      brush.Color = DefaultColorScheme.GraphForeColor;                        if (channel < 9)                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 4' y);                      }                      else                      {                          graphics.DrawString((channel + 1).ToString()' Font' brush' x - 8' y);                      }                  }              }              else              {                  for (int channel = 36; channel <= 165; )                  {                      freq = 5000 + (5 * channel);                        x = LeftMargin + (int)(_pixelsPerMHz * (freq - MinFrequency) + (_pixelsPerMHz * 0.5f));                      if (channel <= 64 || channel >= 149)                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                      else                      {                          brush.Color = DefaultColorScheme.GraphAxisLabelDimColor;                          graphics.DrawString((channel).ToString()' Font' brush' x - (channel > 99 ? 8 : 4)' y);                      }                        switch (channel)                      {                          case 64:                              channel = 100;                              break;                          case 140:                              channel = 149;                              break;                          default:                              channel += 4;                              break;                      }                  }              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,DrawNetworks,The following statement contains a magic number: try              {                  if (_sc == null) return;                  AccessPoint[] networks = _sc.Cache.GetAccessPoints();                  if (networks.Length == 0) return;                  SolidBrush brush = new SolidBrush(Color.Red);                    //TODO: Is this lock really needed?                  lock (networks)                  {                      try                      {                          foreach (AccessPoint ap in networks)                          {                              //Skip APs that aren't in the visible band                              if(Band == BandType.Band2400MHz && ap.Channel > 14) continue;                              if(Band == BandType.Band5000MHz && ap.Channel <= 14) continue;                                if (!ap.Graph) continue;                              //if (!network.Visible) continue;                              int x = LeftMargin +                                      (int)                                      ((Utilities.ConvertToFrequency(ap.Channel) - MinFrequency)*_pixelsPerMHz);                              int y = DbToY(ap.LastData.Rssi);                                //Dims when inactive for 6 seconds                              //network.Age < 255 ? 255 - network.Age : 0                              Pen pen = Pens.White;                              try                              {                                  pen = new Pen(                                      Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor)' 2);                              }                              catch (ArgumentException)                              {                                }                              if (ap.Highlight)                              {                                  pen.Width = 4;                              }                                switch (ap.Security)                              {                                  case "Open":                                      pen.DashStyle = DashStyle.Dot;                                      break;                                    case "WEP":                                      pen.DashStyle = DashStyle.Dash;                                      break;                                    default:                                      pen.DashStyle = DashStyle.Solid;                                      break;                              }                                int halfChannelWidthMhz;                              if (ap.Channel > 14)                              {                                  halfChannelWidthMhz = 10;                                  x += (int) (3*_pixelsPerMHz);                              }                              else if (ap.Channel <= 14 || ap.MaxRate >= 20)                              {                                  halfChannelWidthMhz = 10;                              }                              else                              {                                  halfChannelWidthMhz = 11;                              }                                float floorY = TopMargin + _graphHeight;                                //Size the SSID string                              SizeF stringSize = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                                // 802.11b arch shape                              if ((ap.MaxRate <= 20) && (Utilities.ConvertToFrequency(ap.Channel) < 2500))                              {                                  //Debug.WriteLine("Draw 802.11b arch"' "ChannelView Draw");                                  PointF[] points = new PointF[3];                                  points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  points[1] = new PointF(x' y);                                  points[2] = new PointF(x + (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                  graphics.DrawCurve(pen' points' 1);                                    //Set SSID label to center on a non 40MHz channel                                  x = x - (int)(stringSize.Width / 2f);                              }                                  // 802.11a/g/n plateau shape                              else                              {                                  //Debug.WriteLine("Draw 802.11a/g/n plateau"' "ChannelView Draw");                                  PointF[] points = new PointF[5];                                    float quarterY = (floorY - y)/4;                                  if (ap.IsN && ap.NSettings != null && ap.NSettings.Is40Mhz)                                  {                                      //Debug.WriteLine("40MHz 802.11n channel"' "ChannelView Draw");                                      //Extend for 40Mhz channel                                      if (ap.NSettings.SecondaryChannelLower)                                      {                                          //Debug.WriteLine("Secondary channel lower"' "ChannelView Draw");                                          points[0] = new PointF(x - ((halfChannelWidthMhz*3)*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - (((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' points[2].Y - 5);                                          points[4] = new PointF(                                              x - (((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                          points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                          points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for lower channel bonded 40MHZ channel                                          x = (x - (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                      else                                      {                                          //Debug.WriteLine("Secondary channel higher"' "ChannelView Draw");                                          points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                          points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                                 floorY - quarterY);                                          points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 floorY - (2*quarterY));                                          points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                                 points[2].Y - 5);                                          points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                          graphics.DrawCurve(pen' points' 0.3f);                                            PointF topleft = points[4];                                            points[0].X = x + (halfChannelWidthMhz*3)*_pixelsPerMHz;                                          points[1].X = x + ((halfChannelWidthMhz*3) - 1)*_pixelsPerMHz;                                          points[2].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[3].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          points[4].X = x + ((halfChannelWidthMhz*3) - 1.5f)*_pixelsPerMHz;                                          graphics.DrawCurve(pen' points' 0.2f);                                            graphics.DrawLine(pen' points[4]' topleft);                                            //Set the SSID location for upper channel bonded 40MHZ channel                                          x = (x + (int)(halfChannelWidthMhz * _pixelsPerMHz)) - (int)(stringSize.Width / 2f);                                      }                                  }                                  else if ((ap.NSettings == null) ? true : !ap.NSettings.Is40Mhz)// draw a 20MHz channe;                                  {                                      //Debug.WriteLine("20MHz channel"' "ChannelView Draw");                                      points[0] = new PointF(x - (halfChannelWidthMhz*_pixelsPerMHz)' floorY);                                      points[1] = new PointF(x - ((halfChannelWidthMhz - 1)*_pixelsPerMHz)'                                                             floorY - quarterY);                                      points[2] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             floorY - (2*quarterY));                                      points[3] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)'                                                             points[2].Y - 5);                                      points[4] = new PointF(x - ((halfChannelWidthMhz - 1.5f)*_pixelsPerMHz)' y);                                      graphics.DrawCurve(pen' points' 0.3f);                                        PointF topleft = points[4];                                        points[0].X = x + halfChannelWidthMhz*_pixelsPerMHz;                                      points[1].X = x + (halfChannelWidthMhz - 1)*_pixelsPerMHz;                                      points[2].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[3].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      points[4].X = x + (halfChannelWidthMhz - 1.5f)*_pixelsPerMHz;                                      graphics.DrawCurve(pen' points' 0.2f);                                        graphics.DrawLine(pen' points[4]' topleft);                                        //Set SSID label to center on a non 40MHz channel                                      x = x - (int)(stringSize.Width / 2f);                                  }                              }                              y -= 15;                                //Debug.WriteLine("Draw SSID"' "ChannelView Draw");                              brush.Color = Color.FromArgb(ap.Age * 20 < 255 ? 255 - (ap.Age * 20) : 0' ap.MyColor);                              graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' brush' x' y);                              //}                          }                      }                      catch (InvalidOperationException)                      {                          // occurs when collection is changed...                      }                  }              }              catch(ArgumentException)              {                }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,UpdateGraphDimensions,The following statement contains a magic number: if (_pixelsPerDbm < 1.1)              {                  _amplitudeLabelSpacing = 20;              }              else if (_pixelsPerDbm < 3.3)              {                  _amplitudeLabelSpacing = 10;              }              else if (_pixelsPerDbm < 6.5)              {                  _amplitudeLabelSpacing = 5;              }              else if (_pixelsPerDbm >= 6.5)              {                  _amplitudeLabelSpacing = 2;              }
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 200);
Magic Number,inSSIDer.UI.Controls,ChannelView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ChannelView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 200);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLat.Location = new System.Drawing.Point(33' 28);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLat.Location = new System.Drawing.Point(33' 28);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLat.Size = new System.Drawing.Size(48' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLat.Size = new System.Drawing.Size(48' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLon.Location = new System.Drawing.Point(24' 41);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLon.Location = new System.Drawing.Point(24' 41);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLon.Size = new System.Drawing.Size(57' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblLon.Size = new System.Drawing.Size(57' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Location = new System.Drawing.Point(6' 54);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Location = new System.Drawing.Point(6' 54);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Size = new System.Drawing.Size(75' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblSpeed.Size = new System.Drawing.Size(75' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblAlt.Location = new System.Drawing.Point(36' 67);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblAlt.Location = new System.Drawing.Point(36' 67);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblAlt.Size = new System.Drawing.Size(45' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblAlt.Size = new System.Drawing.Size(45' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPdop.Location = new System.Drawing.Point(41' 80);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPdop.Location = new System.Drawing.Point(41' 80);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPdop.Size = new System.Drawing.Size(40' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPdop.Size = new System.Drawing.Size(40' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblHdop.Location = new System.Drawing.Point(40' 93);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblHdop.Location = new System.Drawing.Point(40' 93);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblHdop.Size = new System.Drawing.Size(41' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblHdop.Size = new System.Drawing.Size(41' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblVdop.Location = new System.Drawing.Point(41' 106);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblVdop.Location = new System.Drawing.Point(41' 106);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblVdop.Size = new System.Drawing.Size(40' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblVdop.Size = new System.Drawing.Size(40' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblFixType.Location = new System.Drawing.Point(31' 119);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblFixType.Location = new System.Drawing.Point(31' 119);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblFixType.Size = new System.Drawing.Size(50' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblFixType.Size = new System.Drawing.Size(50' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPortName.Location = new System.Drawing.Point(5' 5);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPortName.Location = new System.Drawing.Point(5' 5);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPortName.Margin = new System.Windows.Forms.Padding(5);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPortName.Size = new System.Drawing.Size(77' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblPortName.Size = new System.Drawing.Size(77' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblNoGps.Location = new System.Drawing.Point(5' 144);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblNoGps.Location = new System.Drawing.Point(5' 144);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblNoGps.Size = new System.Drawing.Size(58' 25);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblNoGps.Size = new System.Drawing.Size(58' 25);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblNoGps.TabIndex = 2;
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblSatCount.Location = new System.Drawing.Point(0' 132);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblSatCount.Size = new System.Drawing.Size(81' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.lblSatCount.Size = new System.Drawing.Size(81' 13);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.gpsGraph1.Location = new System.Drawing.Point(192' 0);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.gpsGraph1.Size = new System.Drawing.Size(608' 196);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.gpsGraph1.Size = new System.Drawing.Size(608' 196);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.gpsGraph1.TabIndex = 3;
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(800' 196);
Magic Number,inSSIDer.UI.Controls,GpsMon,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GpsMon.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(800' 196);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: Brush gradientBrush = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                            Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: Brush gradientBrush = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                            Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: Brush gradientBrush = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                            Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: Brush gradientBrush = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                            Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: Brush gradientBrush = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                            Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: Brush gradientBrush = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                            Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black'0'0'5'5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black'0'0'5'5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush'0'0'10'10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush'0'0'10'10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' rect.Height-5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' rect.Height-5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' rect.Height-5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' 0' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' 0' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' 0' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width -5' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width -5' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width -5' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' rect.Width - 11' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' rect.Width - 11' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' rect.Width - 11' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(gradientBrush' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: rect.Width -= 4;
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: rect.Height -= 4;
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: rect.Offset(2'2);
Magic Number,inSSIDer.UI.Controls,GrayButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayButton.cs,OnPaint,The following statement contains a magic number: rect.Offset(2'2);
Magic Number,inSSIDer.UI.Controls,GrayGroupBox,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayGroupBox.cs,OnPaint,The following statement contains a magic number: borderRect.Y += tSize.Height / 2;
Magic Number,inSSIDer.UI.Controls,GrayGroupBox,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayGroupBox.cs,OnPaint,The following statement contains a magic number: borderRect.Height -= tSize.Height / 2;
Magic Number,inSSIDer.UI.Controls,GrayGroupBox,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayGroupBox.cs,OnPaint,The following statement contains a magic number: textRect.X += 6;
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: LinearGradientBrush lgb = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                                Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: LinearGradientBrush lgb = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                                Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: LinearGradientBrush lgb = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                                Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: LinearGradientBrush lgb = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                                Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: LinearGradientBrush lgb = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                                Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: LinearGradientBrush lgb = new LinearGradientBrush(rect' Color.FromArgb(175' 175' 175)'                                                                Color.FromArgb(130' 130' 130)' LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' 0' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' 0' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' 0' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' 0' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' 0' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' 0' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' 0' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' rect.Width - 11' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' rect.Width - 11' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' rect.Width - 11' 0' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillRectangle(Brushes.Black' rect.Width - 5' rect.Height - 5' 5' 5);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: pevent.Graphics.FillEllipse(lgb' rect.Width - 11' rect.Height - 11' 10' 10);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: rect.Width -= 4;
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: rect.Height -= 4;
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: rect.Offset(2' 2);
Magic Number,inSSIDer.UI.Controls,GrayRadioButton,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayRadioButton.cs,OnPaint,The following statement contains a magic number: rect.Offset(2' 2);
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSeparator,The following statement contains a magic number: if (e.Vertical)              {                  int x = e.Item.Width / 2;                    // draw main separator line                  e.Graphics.DrawLine(pen' x' 6' x' e.Item.Height - 6);                    // draw the shadow line                  pen.Color = _lightHeaderColor;                  x += 1;                  e.Graphics.DrawLine(pen' x' 7' x' e.Item.Height - 5);              }              else              {                  int y = e.Item.Height / 2;                    e.Graphics.DrawLine(pen' 4' y' e.Item.Width - 4' y);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: if (e.Item.Selected)              {                  Pen pen = new Pen(_separatorColor);                    e.Graphics.FillRectangle(brush' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawRectangle(pen' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawLine(pen' e.Item.Width - 12' 1' e.Item.Width - 12' e.Item.Height - 2);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: if (e.Item.Selected)              {                  Pen pen = new Pen(_separatorColor);                    e.Graphics.FillRectangle(brush' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawRectangle(pen' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawLine(pen' e.Item.Width - 12' 1' e.Item.Width - 12' e.Item.Height - 2);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: if (e.Item.Selected)              {                  Pen pen = new Pen(_separatorColor);                    e.Graphics.FillRectangle(brush' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawRectangle(pen' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawLine(pen' e.Item.Width - 12' 1' e.Item.Width - 12' e.Item.Height - 2);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: if (e.Item.Selected)              {                  Pen pen = new Pen(_separatorColor);                    e.Graphics.FillRectangle(brush' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawRectangle(pen' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawLine(pen' e.Item.Width - 12' 1' e.Item.Width - 12' e.Item.Height - 2);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: if (e.Item.Selected)              {                  Pen pen = new Pen(_separatorColor);                    e.Graphics.FillRectangle(brush' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawRectangle(pen' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawLine(pen' e.Item.Width - 12' 1' e.Item.Width - 12' e.Item.Height - 2);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: if (e.Item.Selected)              {                  Pen pen = new Pen(_separatorColor);                    e.Graphics.FillRectangle(brush' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawRectangle(pen' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawLine(pen' e.Item.Width - 12' 1' e.Item.Width - 12' e.Item.Height - 2);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: if (e.Item.Selected)              {                  Pen pen = new Pen(_separatorColor);                    e.Graphics.FillRectangle(brush' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawRectangle(pen' 1' 1' e.Item.Width-2' e.Item.Height-2);                  e.Graphics.DrawLine(pen' e.Item.Width - 12' 1' e.Item.Width - 12' e.Item.Height - 2);              }
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: Point[] points = new Point[3];
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: int y = e.Item.Height / 2;
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: int x = e.Item.Width - 3;
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: points[0] = new Point(x - 5' y);
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: points[2] = new Point(x - 3' y+3);
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: points[2] = new Point(x - 3' y+3);
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderSplitButtonBackground,The following statement contains a magic number: points[2] = new Point(x - 3' y+3);
Magic Number,inSSIDer.UI.Controls,GrayToolStripRenderer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GrayToolStripRenderer.cs,OnRenderToolStripBackground,The following statement contains a magic number: LinearGradientBrush backgroundBrush = new LinearGradientBrush(                     e.ToolStrip.ClientRectangle'                     _lightHeaderColor'                     _darkHeaderColor'                     90'                     true);
Magic Number,inSSIDer.UI.Controls,GripSplitContainer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\GripSplitContainer.cs,OnPaint,The following statement contains a magic number: int x = (SplitterRectangle.Width - Properties.Resources.longGripOff.Width) / 2;
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,Initialize,The following statement contains a magic number: if (Utilities.IsXp())              {                  _myTimer = new System.Timers.Timer { Interval = 5000.0' Enabled = true };                  _myTimer.Elapsed += MyTimer_Elapsed;              }              else              {                  InterfaceManager.Instance.InterfaceAdded += WlanClient_InterfaceAddedEvent;                  InterfaceManager.Instance.InterfaceRemoved += WlanClient_InterfaceRemoveEvent;              }
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.MyToolStrip.Size = new System.Drawing.Size(212' 25);
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.MyToolStrip.Size = new System.Drawing.Size(212' 25);
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.ScanButton.Size = new System.Drawing.Size(51' 22);
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.ScanButton.Size = new System.Drawing.Size(51' 22);
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.NetworkInterfaceDropDown.Size = new System.Drawing.Size(127' 22);
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.NetworkInterfaceDropDown.Size = new System.Drawing.Size(127' 22);
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(212' 25);
Magic Number,inSSIDer.UI.Controls,NetworkInterfaceSelector,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\NetworkInterfaceSelector.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(212' 25);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,UpdateGrid,The following statement contains a magic number: if (InvokeRequired)              {                  try                  {                      Invoke(new UpdateGridDelegate(UpdateGrid));                  }                  catch (InvalidOperationException) { }                  catch (NullReferenceException) { }              }              else              {                  try                  {                      lock (scannerGrid)                      {                            //Clear non-existent rows                          CleanRows();                            foreach (var ap in _sc.Cache.GetAccessPoints())                          {                              var row = FindRow(ap);                              if (row == null)                              {                                  //Add a new Row                                  var newrow = new DataGridViewRow();                                  newrow.CreateCells(scannerGrid' ap.GetData());                                    scannerGrid.Rows.Add(newrow);                                    newrow.Cells["checkColumn"].Style.BackColor = ap.MyColor;                                  newrow.Cells["checkColumn"].Style.SelectionBackColor = ap.MyColor;                                  newrow.Cells["maxrateColumn"].ToolTipText = ap.SupportedRates;                                    //Check for indeterminate state of checkbox                                  if (selectAllNetworksCheckBox.CheckState == CheckState.Indeterminate)                                  {                                      //If at least one AP is unchecked' don't check this one                                      newrow.Cells["checkColumn"].Value = false;                                      ap.Graph = false;                                  }                                    //Connection State                                  if (ap.Connected)                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Bold);                              }                              else                              {                                  //Update vendor if null. This has happend before                                  if (row.Cells["vendorColumn"].Value == null)                                      row.Cells["vendorColumn"].Value = ap.Vendor;                                    //It is possible that the SSID of the AP has changed                                  row.Cells["ssidColumn"].Value = ap.Ssid;                                    row.Cells["maxrateColumn"].Value = ap.MaxRate;                                    //Update the channel                                  row.Cells["channelColumn"].Value = ap.IsN && ap.NSettings != null &&                                                                     ap.NSettings.Is40Mhz                                                                         ? ap.NSettings.SecondaryChannelLower                                                                               ? ap.Channel + " + " + (ap.Channel - 4)                                                                               : ap.Channel + " + " + (ap.Channel + 4)                                                                         : ap.Channel.ToString();                                    //Update the RSSI                                  //row.Cells["rssiColumn"].Value = ap.Age > 10 ? -100 : ap.LastData.Rssi;                                    // RWW Switching to SparklineColumn                                  row.Cells["rssiColumn"].Value = ap.Spark;                                    //Update the timestamp                                  row.Cells["ageColumn"].Value = ap.LastSeenTimestamp.ToLongTimeString();                                    //Update Location                                  row.Cells["latColumn"].Value = ap.GpsData.Latitude.ToString("F6");                                  row.Cells["lonColumn"].Value = ap.GpsData.Longitude.ToString("F6");                                    //Connection State                                  if (ap.Connected)                                  {                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Bold);                                  }                                  else                                  {                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Regular);                                      if (row.Index % 2 == 0)                                      {                                          row.DefaultCellStyle.BackColor = scannerGrid.DefaultCellStyle.BackColor;                                          row.DefaultCellStyle.SelectionBackColor =                                              scannerGrid.DefaultCellStyle.SelectionBackColor;                                      }                                      else                                      {                                          row.DefaultCellStyle.BackColor =                                              scannerGrid.AlternatingRowsDefaultCellStyle.BackColor;                                          row.DefaultCellStyle.SelectionBackColor =                                              scannerGrid.AlternatingRowsDefaultCellStyle.SelectionBackColor;                                      }                                  }                              }                          }                      }                  }                  catch (Exception)                  {                    }              }
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,UpdateGrid,The following statement contains a magic number: if (InvokeRequired)              {                  try                  {                      Invoke(new UpdateGridDelegate(UpdateGrid));                  }                  catch (InvalidOperationException) { }                  catch (NullReferenceException) { }              }              else              {                  try                  {                      lock (scannerGrid)                      {                            //Clear non-existent rows                          CleanRows();                            foreach (var ap in _sc.Cache.GetAccessPoints())                          {                              var row = FindRow(ap);                              if (row == null)                              {                                  //Add a new Row                                  var newrow = new DataGridViewRow();                                  newrow.CreateCells(scannerGrid' ap.GetData());                                    scannerGrid.Rows.Add(newrow);                                    newrow.Cells["checkColumn"].Style.BackColor = ap.MyColor;                                  newrow.Cells["checkColumn"].Style.SelectionBackColor = ap.MyColor;                                  newrow.Cells["maxrateColumn"].ToolTipText = ap.SupportedRates;                                    //Check for indeterminate state of checkbox                                  if (selectAllNetworksCheckBox.CheckState == CheckState.Indeterminate)                                  {                                      //If at least one AP is unchecked' don't check this one                                      newrow.Cells["checkColumn"].Value = false;                                      ap.Graph = false;                                  }                                    //Connection State                                  if (ap.Connected)                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Bold);                              }                              else                              {                                  //Update vendor if null. This has happend before                                  if (row.Cells["vendorColumn"].Value == null)                                      row.Cells["vendorColumn"].Value = ap.Vendor;                                    //It is possible that the SSID of the AP has changed                                  row.Cells["ssidColumn"].Value = ap.Ssid;                                    row.Cells["maxrateColumn"].Value = ap.MaxRate;                                    //Update the channel                                  row.Cells["channelColumn"].Value = ap.IsN && ap.NSettings != null &&                                                                     ap.NSettings.Is40Mhz                                                                         ? ap.NSettings.SecondaryChannelLower                                                                               ? ap.Channel + " + " + (ap.Channel - 4)                                                                               : ap.Channel + " + " + (ap.Channel + 4)                                                                         : ap.Channel.ToString();                                    //Update the RSSI                                  //row.Cells["rssiColumn"].Value = ap.Age > 10 ? -100 : ap.LastData.Rssi;                                    // RWW Switching to SparklineColumn                                  row.Cells["rssiColumn"].Value = ap.Spark;                                    //Update the timestamp                                  row.Cells["ageColumn"].Value = ap.LastSeenTimestamp.ToLongTimeString();                                    //Update Location                                  row.Cells["latColumn"].Value = ap.GpsData.Latitude.ToString("F6");                                  row.Cells["lonColumn"].Value = ap.GpsData.Longitude.ToString("F6");                                    //Connection State                                  if (ap.Connected)                                  {                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Bold);                                  }                                  else                                  {                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Regular);                                      if (row.Index % 2 == 0)                                      {                                          row.DefaultCellStyle.BackColor = scannerGrid.DefaultCellStyle.BackColor;                                          row.DefaultCellStyle.SelectionBackColor =                                              scannerGrid.DefaultCellStyle.SelectionBackColor;                                      }                                      else                                      {                                          row.DefaultCellStyle.BackColor =                                              scannerGrid.AlternatingRowsDefaultCellStyle.BackColor;                                          row.DefaultCellStyle.SelectionBackColor =                                              scannerGrid.AlternatingRowsDefaultCellStyle.SelectionBackColor;                                      }                                  }                              }                          }                      }                  }                  catch (Exception)                  {                    }              }
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,UpdateGrid,The following statement contains a magic number: if (InvokeRequired)              {                  try                  {                      Invoke(new UpdateGridDelegate(UpdateGrid));                  }                  catch (InvalidOperationException) { }                  catch (NullReferenceException) { }              }              else              {                  try                  {                      lock (scannerGrid)                      {                            //Clear non-existent rows                          CleanRows();                            foreach (var ap in _sc.Cache.GetAccessPoints())                          {                              var row = FindRow(ap);                              if (row == null)                              {                                  //Add a new Row                                  var newrow = new DataGridViewRow();                                  newrow.CreateCells(scannerGrid' ap.GetData());                                    scannerGrid.Rows.Add(newrow);                                    newrow.Cells["checkColumn"].Style.BackColor = ap.MyColor;                                  newrow.Cells["checkColumn"].Style.SelectionBackColor = ap.MyColor;                                  newrow.Cells["maxrateColumn"].ToolTipText = ap.SupportedRates;                                    //Check for indeterminate state of checkbox                                  if (selectAllNetworksCheckBox.CheckState == CheckState.Indeterminate)                                  {                                      //If at least one AP is unchecked' don't check this one                                      newrow.Cells["checkColumn"].Value = false;                                      ap.Graph = false;                                  }                                    //Connection State                                  if (ap.Connected)                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Bold);                              }                              else                              {                                  //Update vendor if null. This has happend before                                  if (row.Cells["vendorColumn"].Value == null)                                      row.Cells["vendorColumn"].Value = ap.Vendor;                                    //It is possible that the SSID of the AP has changed                                  row.Cells["ssidColumn"].Value = ap.Ssid;                                    row.Cells["maxrateColumn"].Value = ap.MaxRate;                                    //Update the channel                                  row.Cells["channelColumn"].Value = ap.IsN && ap.NSettings != null &&                                                                     ap.NSettings.Is40Mhz                                                                         ? ap.NSettings.SecondaryChannelLower                                                                               ? ap.Channel + " + " + (ap.Channel - 4)                                                                               : ap.Channel + " + " + (ap.Channel + 4)                                                                         : ap.Channel.ToString();                                    //Update the RSSI                                  //row.Cells["rssiColumn"].Value = ap.Age > 10 ? -100 : ap.LastData.Rssi;                                    // RWW Switching to SparklineColumn                                  row.Cells["rssiColumn"].Value = ap.Spark;                                    //Update the timestamp                                  row.Cells["ageColumn"].Value = ap.LastSeenTimestamp.ToLongTimeString();                                    //Update Location                                  row.Cells["latColumn"].Value = ap.GpsData.Latitude.ToString("F6");                                  row.Cells["lonColumn"].Value = ap.GpsData.Longitude.ToString("F6");                                    //Connection State                                  if (ap.Connected)                                  {                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Bold);                                  }                                  else                                  {                                      row.DefaultCellStyle.Font = new Font(Font.FontFamily' Font.Size' FontStyle.Regular);                                      if (row.Index % 2 == 0)                                      {                                          row.DefaultCellStyle.BackColor = scannerGrid.DefaultCellStyle.BackColor;                                          row.DefaultCellStyle.SelectionBackColor =                                              scannerGrid.DefaultCellStyle.SelectionBackColor;                                      }                                      else                                      {                                          row.DefaultCellStyle.BackColor =                                              scannerGrid.AlternatingRowsDefaultCellStyle.BackColor;                                          row.DefaultCellStyle.SelectionBackColor =                                              scannerGrid.AlternatingRowsDefaultCellStyle.SelectionBackColor;                                      }                                  }                              }                          }                      }                  }                  catch (Exception)                  {                    }              }
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,ScannerViewUpdateHeaderCheckBoxPos,The following statement contains a magic number: selectAllNetworksCheckBox.Size = new Size(13' 13);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,ScannerViewUpdateHeaderCheckBoxPos,The following statement contains a magic number: selectAllNetworksCheckBox.Size = new Size(13' 13);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,ScannerViewUpdateHeaderCheckBoxPos,The following statement contains a magic number: rect.X += 3;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,ScannerViewUpdateHeaderCheckBoxPos,The following statement contains a magic number: rect.Y += 5;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The following statement contains a magic number: LinearGradientBrush gradientBrush = new LinearGradientBrush(                  e.CellBounds'                  Color.FromArgb(202' 202' 202)'                  Color.FromArgb(158' 158' 158)'                  LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The following statement contains a magic number: LinearGradientBrush gradientBrush = new LinearGradientBrush(                  e.CellBounds'                  Color.FromArgb(202' 202' 202)'                  Color.FromArgb(158' 158' 158)'                  LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The following statement contains a magic number: LinearGradientBrush gradientBrush = new LinearGradientBrush(                  e.CellBounds'                  Color.FromArgb(202' 202' 202)'                  Color.FromArgb(158' 158' 158)'                  LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The following statement contains a magic number: LinearGradientBrush gradientBrush = new LinearGradientBrush(                  e.CellBounds'                  Color.FromArgb(202' 202' 202)'                  Color.FromArgb(158' 158' 158)'                  LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The following statement contains a magic number: LinearGradientBrush gradientBrush = new LinearGradientBrush(                  e.CellBounds'                  Color.FromArgb(202' 202' 202)'                  Color.FromArgb(158' 158' 158)'                  LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellPainting,The following statement contains a magic number: LinearGradientBrush gradientBrush = new LinearGradientBrush(                  e.CellBounds'                  Color.FromArgb(202' 202' 202)'                  Color.FromArgb(158' 158' 158)'                  LinearGradientMode.Vertical);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(25))))' ((int)(((byte)(25))))' ((int)(((byte)(25)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(25))))' ((int)(((byte)(25))))' ((int)(((byte)(25)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(25))))' ((int)(((byte)(25))))' ((int)(((byte)(25)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(202))))' ((int)(((byte)(202))))' ((int)(((byte)(202)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(202))))' ((int)(((byte)(202))))' ((int)(((byte)(202)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(202))))' ((int)(((byte)(202))))' ((int)(((byte)(202)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(210))))' ((int)(((byte)(210))))' ((int)(((byte)(210)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(210))))' ((int)(((byte)(210))))' ((int)(((byte)(210)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: dataGridViewCellStyle4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(210))))' ((int)(((byte)(210))))' ((int)(((byte)(210)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.scannerGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.scannerGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.scannerGrid.GridColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.scannerGrid.RowHeadersWidth = 50;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.scannerGrid.Size = new System.Drawing.Size(972' 329);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.scannerGrid.Size = new System.Drawing.Size(972' 329);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.scannerGrid.TabIndex = 4;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.checkColumn.MinimumWidth = 20;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.checkColumn.Width = 20;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.macColumn.MinimumWidth = 130;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.macColumn.Width = 130;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.ssidColumn.MaxInputLength = 32;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.ssidColumn.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.rssiColumn.MinimumWidth = 50;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.rssiColumn.Width = 82;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.channelColumn.MinimumWidth = 50;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.channelColumn.Width = 50;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.vendorColumn.MinimumWidth = 80;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.securityColumn.MinimumWidth = 80;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.maxrateColumn.MinimumWidth = 60;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.networktypeColumn.MinimumWidth = 100;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.firstseenColumn.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.ageColumn.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.latColumn.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.lonColumn.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.cmsColumns.Size = new System.Drawing.Size(149' 268);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.cmsColumns.Size = new System.Drawing.Size(149' 268);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.mACAddressToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.mACAddressToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.sSIDToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.sSIDToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.rSSIToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.rSSIToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.channelToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.channelToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.vendorToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.vendorToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.securityToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.securityToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.maxRateToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.maxRateToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.networkTypeToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.networkTypeToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.firstSeenToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.firstSeenToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.lastSeenToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.lastSeenToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.latitudeToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.latitudeToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.longitudeToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.longitudeToolStripMenuItem.Size = new System.Drawing.Size(148' 22);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn2.MinimumWidth = 130;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn2.Width = 130;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn3.MaxInputLength = 32;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn3.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.sparkLineColumn1.MinimumWidth = 50;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.sparkLineColumn1.Width = 82;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn4.MinimumWidth = 50;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn5.MinimumWidth = 80;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn6.MinimumWidth = 80;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn7.MinimumWidth = 60;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn8.MinimumWidth = 100;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn9.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn10.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn11.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.dataGridViewTextBoxColumn12.MinimumWidth = 70;
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(972' 329);
Magic Number,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(972' 329);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,TimeGraph,The following statement contains a magic number: MinAmplitude = -100;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,TimeGraph,The following statement contains a magic number: MaxAmplitude = -10;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,TimeGraph,The following statement contains a magic number: BottomMargin = 20;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,TimeGraph,The following statement contains a magic number: TopMargin = 10;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,TimeGraph,The following statement contains a magic number: LeftMargin = 55;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,TimeGraph,The following statement contains a magic number: RightMargin = 20;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,AdjustRightMargin,The following statement contains a magic number: RightMargin = 15 + (int)minSize.Width + 10 + 15 + 18;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,AdjustRightMargin,The following statement contains a magic number: RightMargin = 15 + (int)minSize.Width + 10 + 15 + 18;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,AdjustRightMargin,The following statement contains a magic number: RightMargin = 15 + (int)minSize.Width + 10 + 15 + 18;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,AdjustRightMargin,The following statement contains a magic number: RightMargin = 15 + (int)minSize.Width + 10 + 15 + 18;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,ColorFade,The following statement contains a magic number: return Color.FromArgb(Math.Min(age*20 < 255 ? 255 - (age*20) : 0' 255)' color);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,ColorFade,The following statement contains a magic number: return Color.FromArgb(Math.Min(age*20 < 255 ? 255 - (age*20) : 0' 255)' color);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,ColorFade,The following statement contains a magic number: return Color.FromArgb(Math.Min(age*20 < 255 ? 255 - (age*20) : 0' 255)' color);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,ColorFade,The following statement contains a magic number: return Color.FromArgb(Math.Min(age*20 < 255 ? 255 - (age*20) : 0' 255)' color);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,ColorFade,The following statement contains a magic number: return Color.FromArgb(Math.Min(age*20 < 255 ? 255 - (age*20) : 0' 255)' color);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: var y = (_graphHeight / 2f) + graphics.MeasureString(Localizer.GetString("AmplitudedBm")' Font).Width / 2 + TopMargin;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: var rotationPoint = new PointF(8' y);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: matrix.RotateAt(270' rotationPoint);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(Localizer.GetString("AmplitudedBm")' Font' brush' 8' y);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: matrix.RotateAt(90' rotationPoint);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  //Get the color                  //Left side                  sfAmp.Alignment = StringAlignment.Far;                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    //Rgiht side                    sfAmp.Alignment = StringAlignment.Near;                  // amplitude label                  //y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);                    //Neutral                      labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  //Get the color                  //Left side                  sfAmp.Alignment = StringAlignment.Far;                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    //Rgiht side                    sfAmp.Alignment = StringAlignment.Near;                  // amplitude label                  //y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);                    //Neutral                      labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  //Get the color                  //Left side                  sfAmp.Alignment = StringAlignment.Far;                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    //Rgiht side                    sfAmp.Alignment = StringAlignment.Near;                  // amplitude label                  //y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);                    //Neutral                      labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  //Get the color                  //Left side                  sfAmp.Alignment = StringAlignment.Far;                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    //Rgiht side                    sfAmp.Alignment = StringAlignment.Near;                  // amplitude label                  //y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);                    //Neutral                      labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  //Get the color                  //Left side                  sfAmp.Alignment = StringAlignment.Far;                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    //Rgiht side                    sfAmp.Alignment = StringAlignment.Near;                  // amplitude label                  //y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);                    //Neutral                      labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  //Get the color                  //Left side                  sfAmp.Alignment = StringAlignment.Far;                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    //Rgiht side                    sfAmp.Alignment = StringAlignment.Near;                  // amplitude label                  //y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);                    //Neutral                      labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: while (labelAmplitude < maxAmpToLabel)              {                  //Get the color                  //Left side                  sfAmp.Alignment = StringAlignment.Far;                  // amplitude label                  y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7'sfAmp);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);                    //Rgiht side                    sfAmp.Alignment = StringAlignment.Near;                  // amplitude label                  //y = TopMargin + _graphHeight - ((labelAmplitude - MinAmplitude) * _pixelsPerDbm);                  graphics.DrawString(labelAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);                    // draw the horizontal graph lines                  pen.Color = DefaultColorScheme.GraphHorizontalDottedLineColor;                  pen.DashStyle = DashStyle.Dot;                  graphics.DrawLine(pen' LeftMargin' y' LeftMargin + _graphWidth' y);                    // Tick marks next to amplitude labels                  pen.Color = DefaultColorScheme.GraphTickColor;                  pen.DashStyle = DashStyle.Solid;                  graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);                    //Neutral                      labelAmplitude += _amplitudeLabelSpacing;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawLine(pen' LeftMargin - 3' y' LeftMargin + 1' y);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(MinAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7' sfAmp);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(MinAmplitude.ToString()' Font' brush' LeftMargin - 5' y - 7' sfAmp);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawLine(pen' Width - RightMargin + 2' y' Width - RightMargin - 2' y);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(MinAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawGrid,The following statement contains a magic number: graphics.DrawString(MinAmplitude.ToString()' Font' brush' Width - RightMargin + 3' y - 7' sfAmp);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  //Meassure the SSIDs to find the longest                  SizeF tempSz = graphics.MeasureString(ap.Ssid' ap.Highlight ? _boldFont : Font);                  if (tempSz.Width > szString.Width) szString.Width = tempSz.Width;                  if (tempSz.Height > szString.Height) szString.Height = tempSz.Height;                  szBox.Height += (int)tempSz.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: szBox.Height += 5;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: graphics.FillRectangle(brush' Width - RightMargin + 30' TopMargin - 1' szString.Width + 15' szBox.Height);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: graphics.FillRectangle(brush' Width - RightMargin + 30' TopMargin - 1' szString.Width + 15' szBox.Height);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: graphics.DrawRectangle(pen' Width - RightMargin + 30' TopMargin - 1' szString.Width + 15' szBox.Height);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: graphics.DrawRectangle(pen' Width - RightMargin + 30' TopMargin - 1' szString.Width + 15' szBox.Height);
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: var y = TopMargin + 5;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: var x = Width - RightMargin + 30;
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawLabels,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())              {                  if (!ap.Graph) continue;                  if (y + szString.Height > Height - BottomMargin - TopMargin)                  {                      graphics.DrawString("..."' Font' b' x + 10' y - (szString.Height /2));                      break;                  }                  graphics.DrawString(ap.Ssid' ap.Highlight ? _boldFont : Font' b' x + 10' y);                  graphics.FillRectangle(new SolidBrush(ap.MyColor)' x + 5' y + 5' 5' 3);                  y += (int)szString.Height + 2;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawNetworks,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())                  {                      tPoints.Clear();                      if (ap.MyNetworkDataCollection.Count < 2) continue;                      try                      {                          if (!ap.Graph) continue;                      }                      catch (Exception)                      {                        }                        data = ap.GetDataUntilTime(_minTime);                        float[] pts = new float[data.Length];                      Color[] cols = new Color[data.Length];                        DateTime lastAp = data[0].MyTimestamp;                        for (int i = 0; i < data.Length; i++)                      {                          double tot1 = (data[i].MyTimestamp - lastAp).TotalSeconds;                          double tot2 = (data[data.Length - 1].MyTimestamp - lastAp).TotalSeconds;                          int toti1 = (int)tot1;                          int toti2 = (int)tot2;                            pts[i] = (toti1 / (float)toti2);                          cols[i] = ColorFade(ap.MyColor' data[i].Age);                      }                        //Fix min and max pos.                      if (pts[0] > 0f) pts[0] = 0f;                      if (pts[pts.Length - 1] < 1f) pts[pts.Length - 1] = 1f;                        try                      {                          pen.Width = ap.Highlight ? 4 : 1;                          var psl = new List<Point>();                          foreach (var nd in data)                          {                              psl.Add(new Point(TimeToX(nd.MyTimestamp)+1' DbToY(nd.Rssi)));                          }                          var ps = psl.ToArray();                            var lgb = new LinearGradientBrush(new Point(ps[0].X' 0)' new Point(ps[ps.Length -1].X' 0)' Color.White'                                                                            Color.White)                                                        {                                                            InterpolationColors =                                                                new ColorBlend {Colors = cols' Positions = pts}                                                        };                            pen.Brush = lgb;                            graphics.DrawLines(pen' ps);                        }                      catch(Exception)                      {                        }                  }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawNetworks,The following statement contains a magic number: foreach (var ap in _scanner.Cache.GetAccessPoints())                  {                      tPoints.Clear();                      if (ap.MyNetworkDataCollection.Count < 2) continue;                      try                      {                          if (!ap.Graph) continue;                      }                      catch (Exception)                      {                        }                        data = ap.GetDataUntilTime(_minTime);                        float[] pts = new float[data.Length];                      Color[] cols = new Color[data.Length];                        DateTime lastAp = data[0].MyTimestamp;                        for (int i = 0; i < data.Length; i++)                      {                          double tot1 = (data[i].MyTimestamp - lastAp).TotalSeconds;                          double tot2 = (data[data.Length - 1].MyTimestamp - lastAp).TotalSeconds;                          int toti1 = (int)tot1;                          int toti2 = (int)tot2;                            pts[i] = (toti1 / (float)toti2);                          cols[i] = ColorFade(ap.MyColor' data[i].Age);                      }                        //Fix min and max pos.                      if (pts[0] > 0f) pts[0] = 0f;                      if (pts[pts.Length - 1] < 1f) pts[pts.Length - 1] = 1f;                        try                      {                          pen.Width = ap.Highlight ? 4 : 1;                          var psl = new List<Point>();                          foreach (var nd in data)                          {                              psl.Add(new Point(TimeToX(nd.MyTimestamp)+1' DbToY(nd.Rssi)));                          }                          var ps = psl.ToArray();                            var lgb = new LinearGradientBrush(new Point(ps[0].X' 0)' new Point(ps[ps.Length -1].X' 0)' Color.White'                                                                            Color.White)                                                        {                                                            InterpolationColors =                                                                new ColorBlend {Colors = cols' Positions = pts}                                                        };                            pen.Brush = lgb;                            graphics.DrawLines(pen' ps);                        }                      catch(Exception)                      {                        }                  }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawTimeLabels,The following statement contains a magic number: for (DateTime i = MaxTime - TimeSpan.FromTicks(MaxTime.Ticks % _secPerTick.Ticks); i > _minTime; i -= TimeSpan.FromMinutes(1))              {                  x = TimeToX(i);                  y = Height - BottomMargin;                  //Draw the tick                  graphics.DrawLine(pen' x' y' x' y + 3);                    label = i.ToShortTimeString();                  label = label.Replace(" AM"' "").Replace(" PM"' "");                  szString = graphics.MeasureString(label' Font);                  rect = new RectangleF(x - (szString.Width/2)' y + 4' szString.Width' szString.Height);                    graphics.DrawString(label' Font' bLabel' rect);              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawTimeLabels,The following statement contains a magic number: for (DateTime i = MaxTime - TimeSpan.FromTicks(MaxTime.Ticks % _secPerTick.Ticks); i > _minTime; i -= TimeSpan.FromMinutes(1))              {                  x = TimeToX(i);                  y = Height - BottomMargin;                  //Draw the tick                  graphics.DrawLine(pen' x' y' x' y + 3);                    label = i.ToShortTimeString();                  label = label.Replace(" AM"' "").Replace(" PM"' "");                  szString = graphics.MeasureString(label' Font);                  rect = new RectangleF(x - (szString.Width/2)' y + 4' szString.Width' szString.Height);                    graphics.DrawString(label' Font' bLabel' rect);              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,DrawTimeLabels,The following statement contains a magic number: for (DateTime i = MaxTime - TimeSpan.FromTicks(MaxTime.Ticks % _secPerTick.Ticks); i > _minTime; i -= TimeSpan.FromMinutes(1))              {                  x = TimeToX(i);                  y = Height - BottomMargin;                  //Draw the tick                  graphics.DrawLine(pen' x' y' x' y + 3);                    label = i.ToShortTimeString();                  label = label.Replace(" AM"' "").Replace(" PM"' "");                  szString = graphics.MeasureString(label' Font);                  rect = new RectangleF(x - (szString.Width/2)' y + 4' szString.Width' szString.Height);                    graphics.DrawString(label' Font' bLabel' rect);              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Controls,TimeGraph,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\TimeGraph.cs,UpdateGraphDimensions,The following statement contains a magic number: if ((Height > 0) && (Width > 0))              {                    _graphWidth = (Width - LeftMargin - RightMargin);                  _graphHeight = (Height - TopMargin - BottomMargin);                    float viewableRange = MaxAmplitude - MinAmplitude + 1;                  _pixelsPerDbm = _graphHeight / viewableRange;                    if (_pixelsPerDbm < 1.1)                  {                      _amplitudeLabelSpacing = 20;                  }                  else if (_pixelsPerDbm < 3.3)                  {                      _amplitudeLabelSpacing = 10;                  }                  else if (_pixelsPerDbm < 6.5)                  {                      _amplitudeLabelSpacing = 5;                  }                  else if (_pixelsPerDbm >= 6.5)                  {                      _amplitudeLabelSpacing = 2;                  }                    viewableRange = (float)TimeSpan.TotalSeconds;                  _pixelsPerSecond = _graphWidth / viewableRange;              }
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.copyrightLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.copyrightLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.copyrightLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel.DisabledLinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel.DisabledLinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel.LinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel.LinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel.VisitedLinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.linkLabel.VisitedLinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(51))))' ((int)(((byte)(0)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.versionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.versionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51)))));
Magic Number,inSSIDer.UI.Forms,FormAbout,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmAbout.cs,InitializeComponent,The following statement contains a magic number: this.versionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(51))))' ((int)(((byte)(51))))' ((int)(((byte)(51)))));
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,SaveButtonClick,The following statement contains a magic number: _gpsC.PortDataBits = cbDataBits.SelectedIndex + 5;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,SetData,The following statement contains a magic number: cbDataBits.SelectedIndex = _gpsC.PortDataBits - 5;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(59' 135);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(59' 135);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Margin = new System.Windows.Forms.Padding(50' 10' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Margin = new System.Windows.Forms.Padding(50' 10' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Margin = new System.Windows.Forms.Padding(50' 10' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Margin = new System.Windows.Forms.Padding(50' 10' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 3;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(207' 135);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Location = new System.Drawing.Point(207' 135);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Margin = new System.Windows.Forms.Padding(3' 10' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Margin = new System.Windows.Forms.Padding(3' 10' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Margin = new System.Windows.Forms.Padding(3' 10' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Margin = new System.Windows.Forms.Padding(3' 10' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.TabIndex = 3;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.gbSerialPort.Location = new System.Drawing.Point(9' 9);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.gbSerialPort.Location = new System.Drawing.Point(9' 9);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.gbSerialPort.Margin = new System.Windows.Forms.Padding(0' 0' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.gbSerialPort.Margin = new System.Windows.Forms.Padding(0' 0' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.gbSerialPort.Size = new System.Drawing.Size(324' 113);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.gbSerialPort.Size = new System.Drawing.Size(324' 113);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.gbSerialPort.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(6' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(6' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(66' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(66' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 7;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(169' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(169' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(53' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(53' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 7;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(166' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(166' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(56' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(56' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 7;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(16' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(16' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(56' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(56' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 7;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbHandshake.Location = new System.Drawing.Point(78' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbHandshake.Location = new System.Drawing.Point(78' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbHandshake.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbHandshake.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbHandshake.TabIndex = 6;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbParity.Location = new System.Drawing.Point(228' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbParity.Location = new System.Drawing.Point(228' 82);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbParity.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbParity.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbParity.TabIndex = 6;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbDataBits.Location = new System.Drawing.Point(228' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbDataBits.Location = new System.Drawing.Point(228' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbDataBits.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbDataBits.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbDataBits.TabIndex = 6;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbStopBits.Location = new System.Drawing.Point(78' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbStopBits.Location = new System.Drawing.Point(78' 55);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbStopBits.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbStopBits.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbStopBits.TabIndex = 6;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.pSpacer.Location = new System.Drawing.Point(6' 48);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.pSpacer.Location = new System.Drawing.Point(6' 48);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.pSpacer.Size = new System.Drawing.Size(312' 1);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.pSpacer.TabIndex = 4;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbPortname.Location = new System.Drawing.Point(78' 23);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbPortname.Location = new System.Drawing.Point(78' 23);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbPortname.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbPortname.Size = new System.Drawing.Size(84' 21);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.cbPortname.TabIndex = 3;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Increment = new decimal(new int[] {              300'              0'              0'              0});
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Location = new System.Drawing.Point(228' 24);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Location = new System.Drawing.Point(228' 24);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Maximum = new decimal(new int[] {              128000'              0'              0'              0});
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Minimum = new decimal(new int[] {              300'              0'              0'              0});
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Size = new System.Drawing.Size(84' 20);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Size = new System.Drawing.Size(84' 20);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.numBaudrate.Value = new decimal(new int[] {              4800'              0'              0'              0});
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(166' 24);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(166' 24);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(56' 20);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(56' 20);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(14' 26);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(14' 26);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(58' 13);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(58' 13);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 0);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(119' 13);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(119' 13);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(341' 171);
Magic Number,inSSIDer.UI.Forms,FormGpsCfg,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmGpsCfg.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(341' 171);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(59' 430);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(59' 430);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Margin = new System.Windows.Forms.Padding(50' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Margin = new System.Windows.Forms.Padding(50' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Margin = new System.Windows.Forms.Padding(50' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Margin = new System.Windows.Forms.Padding(50' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 7;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(241' 430);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(241' 430);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Margin = new System.Windows.Forms.Padding(3' 3' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Margin = new System.Windows.Forms.Padding(3' 3' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Margin = new System.Windows.Forms.Padding(3' 3' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Margin = new System.Windows.Forms.Padding(3' 3' 50' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.TabIndex = 7;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Location = new System.Drawing.Point(12' 248);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Location = new System.Drawing.Point(12' 248);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Size = new System.Drawing.Size(351' 161);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.Size = new System.Drawing.Size(351' 161);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox3.TabIndex = 6;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(241' 134);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(241' 134);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(20' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(20' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 10;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(225' 108);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(225' 108);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(32' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(32' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 10;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(150' 85);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(150' 85);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(111' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(111' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 10;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Location = new System.Drawing.Point(174' 132);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Location = new System.Drawing.Point(174' 132);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Minimum = new decimal(new int[] {              100'              0'              0'              -2147483648});
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Minimum = new decimal(new int[] {              100'              0'              0'              -2147483648});
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Size = new System.Drawing.Size(60' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Size = new System.Drawing.Size(60' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.TabIndex = 9;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Value = new decimal(new int[] {              20'              0'              0'              -2147483648});
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSignal.Value = new decimal(new int[] {              20'              0'              0'              -2147483648});
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Location = new System.Drawing.Point(159' 106);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Location = new System.Drawing.Point(159' 106);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Maximum = new decimal(new int[] {              1000'              0'              0'              0});
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Size = new System.Drawing.Size(60' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.Size = new System.Drawing.Size(60' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numMaxSpeed.TabIndex = 9;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Location = new System.Drawing.Point(84' 83);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Location = new System.Drawing.Point(84' 83);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Margin = new System.Windows.Forms.Padding(0' 3' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Size = new System.Drawing.Size(60' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Size = new System.Drawing.Size(60' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.TabIndex = 9;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.numSatCount.Value = new decimal(new int[] {              4'              0'              0'              0});
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 19);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 19);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Margin = new System.Windows.Forms.Padding(3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(109' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(109' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSignal.Location = new System.Drawing.Point(9' 133);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSignal.Location = new System.Drawing.Point(9' 133);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSignal.Size = new System.Drawing.Size(162' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSignal.Size = new System.Drawing.Size(162' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSignal.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lbldataq.Location = new System.Drawing.Point(6' 0);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lbldataq.Size = new System.Drawing.Size(65' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lbldataq.Size = new System.Drawing.Size(65' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSpeed.Location = new System.Drawing.Point(9' 107);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSpeed.Location = new System.Drawing.Point(9' 107);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSpeed.Size = new System.Drawing.Size(147' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSpeed.Size = new System.Drawing.Size(147' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chMaxSpeed.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSsatCount.Location = new System.Drawing.Point(9' 84);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSsatCount.Location = new System.Drawing.Point(9' 84);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSsatCount.Size = new System.Drawing.Size(72' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSsatCount.Size = new System.Drawing.Size(72' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSsatCount.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSFixLost.Location = new System.Drawing.Point(9' 61);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSFixLost.Location = new System.Drawing.Point(9' 61);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSFixLost.Size = new System.Drawing.Size(162' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSFixLost.Size = new System.Drawing.Size(162' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSFixLost.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSLockup.Location = new System.Drawing.Point(9' 38);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSLockup.Location = new System.Drawing.Point(9' 38);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSLockup.Size = new System.Drawing.Size(235' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSLockup.Size = new System.Drawing.Size(235' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chGPSLockup.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Location = new System.Drawing.Point(12' 189);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Location = new System.Drawing.Point(12' 189);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Size = new System.Drawing.Size(351' 53);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.Size = new System.Drawing.Size(351' 53);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox2.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lblVis.Location = new System.Drawing.Point(6' 0);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lblVis.Size = new System.Drawing.Size(65' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lblVis.Size = new System.Drawing.Size(65' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chShowRssiMarkers.Location = new System.Drawing.Point(9' 22);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chShowRssiMarkers.Location = new System.Drawing.Point(9' 22);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chShowRssiMarkers.Size = new System.Drawing.Size(186' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chShowRssiMarkers.Size = new System.Drawing.Size(186' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chShowRssiMarkers.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Location = new System.Drawing.Point(12' 12);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Padding = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Size = new System.Drawing.Size(351' 171);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.Size = new System.Drawing.Size(351' 171);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.grayGroupBox1.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.cmbOrganize.Location = new System.Drawing.Point(140' 134);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.cmbOrganize.Location = new System.Drawing.Point(140' 134);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.cmbOrganize.Size = new System.Drawing.Size(121' 21);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.cmbOrganize.Size = new System.Drawing.Size(121' 21);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.cmbOrganize.TabIndex = 7;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(71' 137);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(71' 137);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(63' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(63' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 6;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportComp.Location = new System.Drawing.Point(9' 111);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportComp.Location = new System.Drawing.Point(9' 111);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportComp.Size = new System.Drawing.Size(168' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportComp.Size = new System.Drawing.Size(168' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportComp.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lblFiles.Location = new System.Drawing.Point(6' 0);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lblFiles.Size = new System.Drawing.Size(28' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.lblFiles.Size = new System.Drawing.Size(28' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportEachAp.Location = new System.Drawing.Point(9' 88);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportEachAp.Location = new System.Drawing.Point(9' 88);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportEachAp.Size = new System.Drawing.Size(230' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportEachAp.Size = new System.Drawing.Size(230' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportEachAp.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Location = new System.Drawing.Point(315' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Location = new System.Drawing.Point(315' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Size = new System.Drawing.Size(29' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.Size = new System.Drawing.Size(29' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeInFiles.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportSummary.Location = new System.Drawing.Point(9' 65);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportSummary.Location = new System.Drawing.Point(9' 65);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportSummary.Size = new System.Drawing.Size(121' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportSummary.Size = new System.Drawing.Size(121' 17);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.chExportSummary.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(22' 15);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(22' 15);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(55' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(55' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Location = new System.Drawing.Point(315' 39);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Location = new System.Drawing.Point(315' 39);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Margin = new System.Windows.Forms.Padding(3' 3' 4' 3);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Size = new System.Drawing.Size(29' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.Size = new System.Drawing.Size(29' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.btnChangeOutdir.TabIndex = 4;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 39);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 39);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(71' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(71' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29)))));
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29)))));
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29)))));
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.Location = new System.Drawing.Point(83' 39);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.Location = new System.Drawing.Point(83' 39);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.Size = new System.Drawing.Size(226' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.Size = new System.Drawing.Size(226' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtOutDir.TabIndex = 3;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29)))));
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29)))));
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(29))))' ((int)(((byte)(29))))' ((int)(((byte)(29)))));
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.Location = new System.Drawing.Point(83' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.Location = new System.Drawing.Point(83' 13);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.Size = new System.Drawing.Size(226' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.Size = new System.Drawing.Size(226' 20);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.txtInFiles.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(375' 474);
Magic Number,inSSIDer.UI.Forms,FormLogConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmLogConverter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(375' 474);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,Initalize,The following statement contains a magic number: _gpsStatTimer = new Timer(1000);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,FormatSizeString,The following statement contains a magic number: if (sizeInBytes >= 1024)//Greater than or equal to a kilobyte              {                  if (sizeInBytes >= 1048576)//Greater than or equal to a megabyte                  {                      if (sizeInBytes >= 1073741824)//Greater than or equal to a gigabyte                      {                          output = (sizeInBytes / 1073741824d).ToString("F2") + "GB";                      }                      else                      {                          output = (sizeInBytes / 1048576d).ToString("F2") + "MB";                      }                  }                  else                  {                      output = (sizeInBytes / 1024d).ToString("F2") + "KB";                  }              }              else              {                  output = sizeInBytes + "B";              }
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,FormatSizeString,The following statement contains a magic number: if (sizeInBytes >= 1024)//Greater than or equal to a kilobyte              {                  if (sizeInBytes >= 1048576)//Greater than or equal to a megabyte                  {                      if (sizeInBytes >= 1073741824)//Greater than or equal to a gigabyte                      {                          output = (sizeInBytes / 1073741824d).ToString("F2") + "GB";                      }                      else                      {                          output = (sizeInBytes / 1048576d).ToString("F2") + "MB";                      }                  }                  else                  {                      output = (sizeInBytes / 1024d).ToString("F2") + "KB";                  }              }              else              {                  output = sizeInBytes + "B";              }
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,FormatSizeString,The following statement contains a magic number: if (sizeInBytes >= 1024)//Greater than or equal to a kilobyte              {                  if (sizeInBytes >= 1048576)//Greater than or equal to a megabyte                  {                      if (sizeInBytes >= 1073741824)//Greater than or equal to a gigabyte                      {                          output = (sizeInBytes / 1073741824d).ToString("F2") + "GB";                      }                      else                      {                          output = (sizeInBytes / 1048576d).ToString("F2") + "MB";                      }                  }                  else                  {                      output = (sizeInBytes / 1024d).ToString("F2") + "KB";                  }              }              else              {                  output = sizeInBytes + "B";              }
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,NetworkInterfaceSelector1SizeChanged,The following statement contains a magic number: gpsStatToolStripMenuItem.Margin = new Padding(0' 0' networkInterfaceSelector1.Width + 5' 0);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,StartStopLoggingToolStripMenuItemClick,The following statement contains a magic number: if (_scanner.Logger == null)              {                  _scanner.Logger = new GpxDataLogger { AutoSave = true' AutoSaveInterval = TimeSpan.FromSeconds(10) };              }
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.mainMenu.GripMargin = new System.Windows.Forms.Padding(2);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.mainMenu.Size = new System.Drawing.Size(1008' 24);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.mainMenu.Size = new System.Drawing.Size(1008' 24);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.configureGPSToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.configureGPSToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator6.Size = new System.Drawing.Size(181' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator6.Size = new System.Drawing.Size(181' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.changeLogFilenameToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.changeLogFilenameToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.startStopLoggingToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.startStopLoggingToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.convertLogToKMLToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.convertLogToKMLToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator5.Size = new System.Drawing.Size(181' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator5.Size = new System.Drawing.Size(181' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.exportToNS1ToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.exportToNS1ToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(181' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(181' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.crashToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.crashToolStripMenuItem.Size = new System.Drawing.Size(184' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.viewToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.viewToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.normalModeToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.normalModeToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.fullscreenToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.fullscreenToolStripMenuItem.Size = new System.Drawing.Size(152' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.shortcutsToolStripMenuItem.Size = new System.Drawing.Size(69' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.shortcutsToolStripMenuItem.Size = new System.Drawing.Size(69' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.nextTabToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.nextTabToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.prevTabToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.prevTabToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.inSSIDerForumsToolStripMenuItem.Size = new System.Drawing.Size(170' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.inSSIDerForumsToolStripMenuItem.Size = new System.Drawing.Size(170' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size(167' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator3.Size = new System.Drawing.Size(167' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdatesToolStripMenuItem.Size = new System.Drawing.Size(170' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdatesToolStripMenuItem.Size = new System.Drawing.Size(170' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator4.Size = new System.Drawing.Size(167' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator4.Size = new System.Drawing.Size(167' 6);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.aboutInSSIDerToolStripMenuItem.Size = new System.Drawing.Size(170' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.aboutInSSIDerToolStripMenuItem.Size = new System.Drawing.Size(170' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsStatToolStripMenuItem.Margin = new System.Windows.Forms.Padding(0' 0' 186' 0);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsStatToolStripMenuItem.Size = new System.Drawing.Size(83' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsStatToolStripMenuItem.Size = new System.Drawing.Size(83' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.developerToolStripMenuItem.Size = new System.Drawing.Size(72' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.developerToolStripMenuItem.Size = new System.Drawing.Size(72' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.startNullScanningToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.startNullScanningToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.stopNullScanningToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.stopNullScanningToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Location = new System.Drawing.Point(0' 538);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Size = new System.Drawing.Size(1008' 24);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip.Size = new System.Drawing.Size(1008' 24);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.apCountLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.apCountLabel.Size = new System.Drawing.Size(100' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsToolStripStatusLabel.Margin = new System.Windows.Forms.Padding(0' 3' 5' 2);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsToolStripStatusLabel.Margin = new System.Windows.Forms.Padding(0' 3' 5' 2);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsToolStripStatusLabel.Margin = new System.Windows.Forms.Padding(0' 3' 5' 2);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsToolStripStatusLabel.Size = new System.Drawing.Size(118' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsToolStripStatusLabel.Size = new System.Drawing.Size(118' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.locationToolStripStatusLabel.Size = new System.Drawing.Size(320' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.locationToolStripStatusLabel.Size = new System.Drawing.Size(320' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.loggingToolStripStatusLabel.Size = new System.Drawing.Size(86' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.loggingToolStripStatusLabel.Size = new System.Drawing.Size(86' 19);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Location = new System.Drawing.Point(0' 24);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Panel1MinSize = 69;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Panel2MinSize = 150;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Size = new System.Drawing.Size(1008' 514);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.Size = new System.Drawing.Size(1008' 514);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.SplitterDistance = 245;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gripContainer1.SplitterWidth = 7;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.scannerView.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.scannerView.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.scannerView.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(255)))));
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.scannerView.Location = new System.Drawing.Point(0' 66);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.scannerView.Size = new System.Drawing.Size(1008' 179);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.scannerView.Size = new System.Drawing.Size(1008' 179);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.filtersView.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(50))))' ((int)(((byte)(50))))' ((int)(((byte)(50)))));
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.filtersView.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(50))))' ((int)(((byte)(50))))' ((int)(((byte)(50)))));
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.filtersView.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(50))))' ((int)(((byte)(50))))' ((int)(((byte)(50)))));
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.filtersView.MaximumSize = new System.Drawing.Size(0' 66);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.filtersView.Padding = new System.Windows.Forms.Padding(3);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.filtersView.Size = new System.Drawing.Size(1008' 66);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.filtersView.Size = new System.Drawing.Size(1008' 66);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.detailsTabControl.ItemSize = new System.Drawing.Size(0' 25);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.detailsTabControl.Size = new System.Drawing.Size(1008' 262);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.detailsTabControl.Size = new System.Drawing.Size(1008' 262);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabNews.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabNews.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabNews.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabNews.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabNews.TabIndex = 5;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.htmlControl.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.htmlControl.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.htmlControl.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.htmlControl.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabTimeGraph.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabTimeGraph.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabTimeGraph.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabTimeGraph.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.MaxTime = new System.DateTime(2010' 7' 28' 12' 8' 7' 739);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.MaxTime = new System.DateTime(2010' 7' 28' 12' 8' 7' 739);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.MaxTime = new System.DateTime(2010' 7' 28' 12' 8' 7' 739);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.MaxTime = new System.DateTime(2010' 7' 28' 12' 8' 7' 739);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.MaxTime = new System.DateTime(2010' 7' 28' 12' 8' 7' 739);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.MaxTime = new System.DateTime(2010' 7' 28' 12' 8' 7' 739);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.MaxTime = new System.DateTime(2010' 7' 28' 12' 8' 7' 739);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.RightMargin = 32;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.timeGraph1.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab24Chan.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab24Chan.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab24Chan.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab24Chan.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chanView24.RightMargin = 20;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chanView24.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chanView24.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab58Chan.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab58Chan.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab58Chan.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab58Chan.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tab58Chan.TabIndex = 4;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chanView58.RightMargin = 20;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chanView58.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.chanView58.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabGps.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabGps.Location = new System.Drawing.Point(4' 29);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabGps.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabGps.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.tabGps.TabIndex = 3;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsMon1.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.gpsMon1.Size = new System.Drawing.Size(1000' 229);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.networkInterfaceSelector1.Location = new System.Drawing.Point(827' -1);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.networkInterfaceSelector1.Size = new System.Drawing.Size(181' 25);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.networkInterfaceSelector1.Size = new System.Drawing.Size(181' 25);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.networkInterfaceSelector1.TabIndex = 2;
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1008' 562);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1008' 562);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(700' 500);
Magic Number,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(700' 500);
Magic Number,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,InitializeComponent,The following statement contains a magic number: this.txtDebug.MaxLength = 2147483647;
Magic Number,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,InitializeComponent,The following statement contains a magic number: this.txtDebug.Size = new System.Drawing.Size(495' 422);
Magic Number,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,InitializeComponent,The following statement contains a magic number: this.txtDebug.Size = new System.Drawing.Size(495' 422);
Magic Number,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(495' 422);
Magic Number,inSSIDer.UI.Forms,frmTest,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmTest.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(495' 422);
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,FilterData,The following statement contains a magic number: foreach (IGrouping<string' Waypoint> waypoint in gp)              {                  //Console.WriteLine(waypoint.Key);                  //currentMac = waypoint.Key;                  foreach (Waypoint wp in waypoint)                  {                      //If the point is already ignored' skip it                      if(wp.Ignore) continue;                      //Ignore the point of the GPS seemed to have been locked up                      if (args.GpsLockedUp)                      {                          if (wp != null)                          {                              Waypoint[] ps = waypoint.Where(wpt => wpt != wp && !wp.Ignore && wpt.Time.Equals(wp.Time)).ToArray();                              if (ps.Count() > 0)                              {                                  //I'm just using this to set ignore on all bad points                                  ps.All(tr => tr.Ignore = true);                              }                          }                      }                        //GPS fix filter                      if(args.GpsFixLost)                      {                          if(wp.Fix != "2d" || wp.Fix != "3d" || wp.Fix != "dgps")                          {                              wp.Ignore = true;                          }                      }                        //Minimum number of satellites                      if(args.MinimumSatsVisible > -1)                      {                          if(wp.SatCount < args.MinimumSatsVisible)                              wp.Ignore = true;                      }                        //Maximum speed filter                      //Perhaps they're guilty about exceeding the speed limit' or perhaps the signal strength measurement losses accuracy?                      if(args.MaximumSpeedKmh > -1)                      {                          //If the speed isn't avalible' ignore this point?                          if(string.IsNullOrEmpty(wp.Cmt)) wp.Ignore = true;                          else                          {                              try                              {                                  double speed = double.Parse(wp.Cmt' CultureInfo.InvariantCulture.NumberFormat);                                  if (speed > args.MaximumSpeedKmh) wp.Ignore = true;                              }                              catch(Exception)                              {                                  //If something went wrong' ignore the point.                                  wp.Ignore = true;                              }                          }                      }                        //Ignore high signal strengths                      if(args.MaxSignal > -101)                      {                          if(wp.Extensions.Rssi > args.MaxSignal)                              wp.Ignore = true;                      }                  }              }
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionColor,The following statement contains a magic number: switch(EncryptionIndex(encryption))              {                  case 1: //Green                      return "ff00ff00";                  case 2: //Yellow                      return "ff00ffff";                  case 3: //Orange                  case 4: //WPA-TKIP -> WPA-Personal is orange                      return "ff00aaff";                  case 5: //Red                      return "ff0000ff";                  default:                      return "ffffffff";              }
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionColor,The following statement contains a magic number: switch(EncryptionIndex(encryption))              {                  case 1: //Green                      return "ff00ff00";                  case 2: //Yellow                      return "ff00ffff";                  case 3: //Orange                  case 4: //WPA-TKIP -> WPA-Personal is orange                      return "ff00aaff";                  case 5: //Red                      return "ff0000ff";                  default:                      return "ffffffff";              }
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionColor,The following statement contains a magic number: switch(EncryptionIndex(encryption))              {                  case 1: //Green                      return "ff00ff00";                  case 2: //Yellow                      return "ff00ffff";                  case 3: //Orange                  case 4: //WPA-TKIP -> WPA-Personal is orange                      return "ff00aaff";                  case 5: //Red                      return "ff0000ff";                  default:                      return "ffffffff";              }
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionColor,The following statement contains a magic number: switch(EncryptionIndex(encryption))              {                  case 1: //Green                      return "ff00ff00";                  case 2: //Yellow                      return "ff00ffff";                  case 3: //Orange                  case 4: //WPA-TKIP -> WPA-Personal is orange                      return "ff00aaff";                  case 5: //Red                      return "ff0000ff";                  default:                      return "ffffffff";              }
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionIndex,The following statement contains a magic number: if (encryption.Contains("WEP"))                  return 2;
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionIndex,The following statement contains a magic number: if (encryption.Contains("WPA-Personal"))                  return 4;
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionIndex,The following statement contains a magic number: if (encryption.Contains("WPA2") || encryption.Contains("RSNA"))                  return 5;
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,EncryptionIndex,The following statement contains a magic number: if (encryption.Contains("WPA"))                  return 3;
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,IconScale,The following statement contains a magic number: return ((100 + rssi) / 15.0);
Magic Number,inSSIDer.FileIO,KmlWriter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\KmlWriter.cs,IconScale,The following statement contains a magic number: return ((100 + rssi) / 15.0);
Magic Number,inSSIDer.FileIO,Ns1Writer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\NS1Writer.cs,Write,The following statement contains a magic number: foreach (AccessPoint ap in points)              {                  //Length of the SSID                  bData.Add((byte)ap.Ssid.Length);                    //The SSID                  bData.AddRange(Encoding.ASCII.GetBytes(ap.Ssid));                    //The MAC address                  bData.AddRange(ap.MacAddress.Bytes);                    //RSSI                  bData.AddRange(BitConverter.GetBytes(ap.LastData.Rssi));                    //Noise - not reported                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //SNR - not reported                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //802.11 capability flags. This just shows if the AP uses WEP and/or is AdHoc                  if(ap.Security.ToLower() != "open")                  {                      if(ap.NetworkType != "Infrastructure") bData.AddRange(new byte[] { 0x12' 0x00' 0x00' 0x00 });                      else bData.AddRange(new byte[] { 0x11' 0x00' 0x00' 0x00 });                  }                  else                  {                      if (ap.NetworkType != "Infrastructure") bData.AddRange(new byte[] { 0x02' 0x00' 0x00' 0x00 });                      else bData.AddRange(new byte[] { 0x01' 0x00' 0x00' 0x00 });                  }                    //Beacon interval - not reported' just use 100 msec.                  bData.AddRange(BitConverter.GetBytes((uint)100));                    //First seen time                  bData.AddRange(BitConverter.GetBytes(ap.FirstSeenTimestamp.ToFileTime()));                    //Last seen time                  bData.AddRange(BitConverter.GetBytes(ap.LastSeenTimestamp.ToFileTime()));                    //Latitude                  bData.AddRange(BitConverter.GetBytes(ap.GpsData.Latitude));                    //Longitude                  bData.AddRange(BitConverter.GetBytes(ap.GpsData.Longitude));                    //No APDATA entries.                  //TODO: add this                  bData.AddRange(BitConverter.GetBytes(0));                    //Length of name. Not used                  bData.Add(0);                    //No Name bytes                    //Bit field Channel activity. Not Used.                  bData.AddRange(BitConverter.GetBytes((long)0));                    //Channel                  bData.AddRange(BitConverter.GetBytes((int)ap.Channel));                    //IP address. Not used.                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //Min. signal'dBm                  bData.AddRange(BitConverter.GetBytes(-100));                    //Max noise.                  bData.AddRange(BitConverter.GetBytes(0));                    //Speed                  bData.AddRange(BitConverter.GetBytes(((int)ap.MaxRate) * 10));                    //IP subnet address. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //IP netmask. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //Misc flags. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //IElength. Not used/Not needed.                  bData.AddRange(BitConverter.GetBytes((uint)0));              }
Magic Number,inSSIDer.FileIO,Ns1Writer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\NS1Writer.cs,Write,The following statement contains a magic number: foreach (AccessPoint ap in points)              {                  //Length of the SSID                  bData.Add((byte)ap.Ssid.Length);                    //The SSID                  bData.AddRange(Encoding.ASCII.GetBytes(ap.Ssid));                    //The MAC address                  bData.AddRange(ap.MacAddress.Bytes);                    //RSSI                  bData.AddRange(BitConverter.GetBytes(ap.LastData.Rssi));                    //Noise - not reported                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //SNR - not reported                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //802.11 capability flags. This just shows if the AP uses WEP and/or is AdHoc                  if(ap.Security.ToLower() != "open")                  {                      if(ap.NetworkType != "Infrastructure") bData.AddRange(new byte[] { 0x12' 0x00' 0x00' 0x00 });                      else bData.AddRange(new byte[] { 0x11' 0x00' 0x00' 0x00 });                  }                  else                  {                      if (ap.NetworkType != "Infrastructure") bData.AddRange(new byte[] { 0x02' 0x00' 0x00' 0x00 });                      else bData.AddRange(new byte[] { 0x01' 0x00' 0x00' 0x00 });                  }                    //Beacon interval - not reported' just use 100 msec.                  bData.AddRange(BitConverter.GetBytes((uint)100));                    //First seen time                  bData.AddRange(BitConverter.GetBytes(ap.FirstSeenTimestamp.ToFileTime()));                    //Last seen time                  bData.AddRange(BitConverter.GetBytes(ap.LastSeenTimestamp.ToFileTime()));                    //Latitude                  bData.AddRange(BitConverter.GetBytes(ap.GpsData.Latitude));                    //Longitude                  bData.AddRange(BitConverter.GetBytes(ap.GpsData.Longitude));                    //No APDATA entries.                  //TODO: add this                  bData.AddRange(BitConverter.GetBytes(0));                    //Length of name. Not used                  bData.Add(0);                    //No Name bytes                    //Bit field Channel activity. Not Used.                  bData.AddRange(BitConverter.GetBytes((long)0));                    //Channel                  bData.AddRange(BitConverter.GetBytes((int)ap.Channel));                    //IP address. Not used.                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //Min. signal'dBm                  bData.AddRange(BitConverter.GetBytes(-100));                    //Max noise.                  bData.AddRange(BitConverter.GetBytes(0));                    //Speed                  bData.AddRange(BitConverter.GetBytes(((int)ap.MaxRate) * 10));                    //IP subnet address. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //IP netmask. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //Misc flags. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //IElength. Not used/Not needed.                  bData.AddRange(BitConverter.GetBytes((uint)0));              }
Magic Number,inSSIDer.FileIO,Ns1Writer,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\FileIO\NS1Writer.cs,Write,The following statement contains a magic number: foreach (AccessPoint ap in points)              {                  //Length of the SSID                  bData.Add((byte)ap.Ssid.Length);                    //The SSID                  bData.AddRange(Encoding.ASCII.GetBytes(ap.Ssid));                    //The MAC address                  bData.AddRange(ap.MacAddress.Bytes);                    //RSSI                  bData.AddRange(BitConverter.GetBytes(ap.LastData.Rssi));                    //Noise - not reported                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //SNR - not reported                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //802.11 capability flags. This just shows if the AP uses WEP and/or is AdHoc                  if(ap.Security.ToLower() != "open")                  {                      if(ap.NetworkType != "Infrastructure") bData.AddRange(new byte[] { 0x12' 0x00' 0x00' 0x00 });                      else bData.AddRange(new byte[] { 0x11' 0x00' 0x00' 0x00 });                  }                  else                  {                      if (ap.NetworkType != "Infrastructure") bData.AddRange(new byte[] { 0x02' 0x00' 0x00' 0x00 });                      else bData.AddRange(new byte[] { 0x01' 0x00' 0x00' 0x00 });                  }                    //Beacon interval - not reported' just use 100 msec.                  bData.AddRange(BitConverter.GetBytes((uint)100));                    //First seen time                  bData.AddRange(BitConverter.GetBytes(ap.FirstSeenTimestamp.ToFileTime()));                    //Last seen time                  bData.AddRange(BitConverter.GetBytes(ap.LastSeenTimestamp.ToFileTime()));                    //Latitude                  bData.AddRange(BitConverter.GetBytes(ap.GpsData.Latitude));                    //Longitude                  bData.AddRange(BitConverter.GetBytes(ap.GpsData.Longitude));                    //No APDATA entries.                  //TODO: add this                  bData.AddRange(BitConverter.GetBytes(0));                    //Length of name. Not used                  bData.Add(0);                    //No Name bytes                    //Bit field Channel activity. Not Used.                  bData.AddRange(BitConverter.GetBytes((long)0));                    //Channel                  bData.AddRange(BitConverter.GetBytes((int)ap.Channel));                    //IP address. Not used.                  bData.AddRange(BitConverter.GetBytes(0).Reverse());                    //Min. signal'dBm                  bData.AddRange(BitConverter.GetBytes(-100));                    //Max noise.                  bData.AddRange(BitConverter.GetBytes(0));                    //Speed                  bData.AddRange(BitConverter.GetBytes(((int)ap.MaxRate) * 10));                    //IP subnet address. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //IP netmask. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //Misc flags. Not used.                  bData.AddRange(BitConverter.GetBytes((uint)0));                    //IElength. Not used/Not needed.                  bData.AddRange(BitConverter.GetBytes((uint)0));              }
Magic Number,inSSIDer.HTML,Download,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\Download.cs,DownloadFile,The following statement contains a magic number: try              {                  // Create a request for the specified remote file name                  WebRequest request = WebRequest.Create(remoteFilename);                  // Send the request to the server and retrieve the                  // WebResponse object                  response = request.GetResponse();                  if (response != null)                  {                      // Once the WebResponse object has been retrieved'                      // get the stream object associated with the response's data                      remoteStream = response.GetResponseStream();                        // Create the local file                      localStream = File.Create(localFilename);                        // Allocate a 1k buffer                      byte[] buffer = new byte[1024];                      int bytesRead;                        // Simple do/while loop to read from stream until                      // no bytes are returned                      do                      {                          // Read data (up to 1k) from the stream                          bytesRead = remoteStream.Read(buffer' 0' buffer.Length);                            // Write the data to the local file                          localStream.Write(buffer' 0' bytesRead);                            // Increment total bytes processed                          bytesProcessed += bytesRead;                      } while (bytesRead > 0);                  }              }              catch (WebException)              {                  //Just eat it' it's not important              }              //catch (System.Configuration.ConfigurationException)              //{              //    //Eat it too              //}              finally              {                  // Close the response and streams objects here                  // to make sure they're closed even if an exception                  // is thrown at some point                  if (response != null) response.Close();                  if (remoteStream != null) remoteStream.Close();                  if (localStream != null) localStream.Close();              }
Magic Number,inSSIDer.HTML,HtmlControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\HtmlControl.cs,UpdateFile,The following statement contains a magic number: if ((UpdateIntervalDays > 0) && (UpdateUrl != string.Empty))              {                    // Skip if it's not time to update the file yet                  if (forceUpdate || (DateTime.Now - File.GetLastWriteTime(LocalFileName)).TotalDays > UpdateIntervalDays)                  {                      string rssFile = Path.ChangeExtension(LocalFileName' "rss");                        try                      {                            // BackgroundWorker runs UpdateFile()                          // and then runs RunWorkerCompleted()                          BackgroundWorker bw = new BackgroundWorker();                          bw.RunWorkerCompleted += (s' e) =>                                                       {                                                           int count = 0;                                                           Stop();                                                           while (IsBusy && count < 4)                                                           {                                                               //Simply to prevent high CPU usage.                                                               Thread.Sleep(300);                                                               Stop();                                                               count++;                                                           }                                                           if (e.Error == null && count < 4)                                                           {                                                               //Refresh();                                                               Navigate(LocalFileName);                                                           }                                                       };                          bw.DoWork += (s' e) => Download.UpdateFile(rssFile' UpdateUrl);                          bw.RunWorkerAsync();                      }                      catch (COMException)                      {                          // thrown on some machines.. no good solution found online...                          displayingFile = false;                      }                  }              }
Magic Number,inSSIDer.HTML,HtmlControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\HtmlControl.cs,UpdateFile,The following statement contains a magic number: if ((UpdateIntervalDays > 0) && (UpdateUrl != string.Empty))              {                    // Skip if it's not time to update the file yet                  if (forceUpdate || (DateTime.Now - File.GetLastWriteTime(LocalFileName)).TotalDays > UpdateIntervalDays)                  {                      string rssFile = Path.ChangeExtension(LocalFileName' "rss");                        try                      {                            // BackgroundWorker runs UpdateFile()                          // and then runs RunWorkerCompleted()                          BackgroundWorker bw = new BackgroundWorker();                          bw.RunWorkerCompleted += (s' e) =>                                                       {                                                           int count = 0;                                                           Stop();                                                           while (IsBusy && count < 4)                                                           {                                                               //Simply to prevent high CPU usage.                                                               Thread.Sleep(300);                                                               Stop();                                                               count++;                                                           }                                                           if (e.Error == null && count < 4)                                                           {                                                               //Refresh();                                                               Navigate(LocalFileName);                                                           }                                                       };                          bw.DoWork += (s' e) => Download.UpdateFile(rssFile' UpdateUrl);                          bw.RunWorkerAsync();                      }                      catch (COMException)                      {                          // thrown on some machines.. no good solution found online...                          displayingFile = false;                      }                  }              }
Magic Number,inSSIDer.HTML,HtmlControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\HtmlControl.cs,UpdateFile,The following statement contains a magic number: if ((UpdateIntervalDays > 0) && (UpdateUrl != string.Empty))              {                    // Skip if it's not time to update the file yet                  if (forceUpdate || (DateTime.Now - File.GetLastWriteTime(LocalFileName)).TotalDays > UpdateIntervalDays)                  {                      string rssFile = Path.ChangeExtension(LocalFileName' "rss");                        try                      {                            // BackgroundWorker runs UpdateFile()                          // and then runs RunWorkerCompleted()                          BackgroundWorker bw = new BackgroundWorker();                          bw.RunWorkerCompleted += (s' e) =>                                                       {                                                           int count = 0;                                                           Stop();                                                           while (IsBusy && count < 4)                                                           {                                                               //Simply to prevent high CPU usage.                                                               Thread.Sleep(300);                                                               Stop();                                                               count++;                                                           }                                                           if (e.Error == null && count < 4)                                                           {                                                               //Refresh();                                                               Navigate(LocalFileName);                                                           }                                                       };                          bw.DoWork += (s' e) => Download.UpdateFile(rssFile' UpdateUrl);                          bw.RunWorkerAsync();                      }                      catch (COMException)                      {                          // thrown on some machines.. no good solution found online...                          displayingFile = false;                      }                  }              }
Magic Number,inSSIDer.HTML,HtmlControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\HtmlControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(480' 257);
Magic Number,inSSIDer.HTML,HtmlControl,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\HtmlControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(480' 257);
Magic Number,inSSIDer.HTML,LinkHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\LinkHelper.cs,OpenLink,The following statement contains a magic number: StringBuilder urlBuilder = new StringBuilder(url' 100);
Magic Number,inSSIDer.HTML,LinkHelper,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\LinkHelper.cs,OpenLink,The following statement contains a magic number: try              {                  Process.Start(urlBuilder.ToString());              }              catch (Win32Exception noBrowser)              {                  if (noBrowser.ErrorCode == -2147467259)                      MessageBox.Show(noBrowser.Message);              }              catch (Exception)              {                  MessageBox.Show(@"Unable to open web browser.\nPlease visit " + url' @"Error");              }
Magic Number,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyMainFormSettings,The following statement contains a magic number: if (!desktopArea.Contains(windowArea))              {                  if (windowArea.Height > desktopArea.Height)                      windowArea.Height = desktopArea.Height;                    if (windowArea.Width > desktopArea.Width)                      windowArea.Width = desktopArea.Width;                    if (windowArea.Left < desktopArea.Left || windowArea.Right > desktopArea.Right)                      windowArea.X = desktopArea.Left + ((desktopArea.Width - windowArea.Width) / 2);                    if (windowArea.Top < desktopArea.Top || windowArea.Bottom > desktopArea.Bottom)                      windowArea.Y = desktopArea.Top + ((desktopArea.Height - windowArea.Height) / 2);              }
Magic Number,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyMainFormSettings,The following statement contains a magic number: if (!desktopArea.Contains(windowArea))              {                  if (windowArea.Height > desktopArea.Height)                      windowArea.Height = desktopArea.Height;                    if (windowArea.Width > desktopArea.Width)                      windowArea.Width = desktopArea.Width;                    if (windowArea.Left < desktopArea.Left || windowArea.Right > desktopArea.Right)                      windowArea.X = desktopArea.Left + ((desktopArea.Width - windowArea.Width) / 2);                    if (windowArea.Top < desktopArea.Top || windowArea.Bottom > desktopArea.Bottom)                      windowArea.Y = desktopArea.Top + ((desktopArea.Height - windowArea.Height) / 2);              }
Magic Number,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyMiniFormSettings,The following statement contains a magic number: if (!desktopArea.Contains(windowArea))              {                  if (windowArea.Height > desktopArea.Height)                      windowArea.Height = desktopArea.Height;                    if (windowArea.Width > desktopArea.Width)                      windowArea.Width = desktopArea.Width;                    if (windowArea.Left < desktopArea.Left || windowArea.Right > desktopArea.Right)                      windowArea.X = desktopArea.Left + ((desktopArea.Width - windowArea.Width) / 2);                    if (windowArea.Top < desktopArea.Top || windowArea.Bottom > desktopArea.Bottom)                      windowArea.Y = desktopArea.Top + ((desktopArea.Height - windowArea.Height) / 2);              }
Magic Number,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyMiniFormSettings,The following statement contains a magic number: if (!desktopArea.Contains(windowArea))              {                  if (windowArea.Height > desktopArea.Height)                      windowArea.Height = desktopArea.Height;                    if (windowArea.Width > desktopArea.Width)                      windowArea.Width = desktopArea.Width;                    if (windowArea.Left < desktopArea.Left || windowArea.Right > desktopArea.Right)                      windowArea.X = desktopArea.Left + ((desktopArea.Width - windowArea.Width) / 2);                    if (windowArea.Top < desktopArea.Top || windowArea.Bottom > desktopArea.Bottom)                      windowArea.Y = desktopArea.Top + ((desktopArea.Height - windowArea.Height) / 2);              }
Magic Number,inSSIDer,SettingsMgr,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Misc\SettingsMgr.cs,ApplyScannerViewSettings,The following statement contains a magic number: try              {                  //The string is like this:                  //<ColumnName>'<index>'<visible>|<ColumnName>'<index>'<visible>|<ColumnName>'<index>'<visible>|etc.                  string[] parts;                  foreach (string piece in Settings.Default.gridOrder.Split('|'))                  {                      parts = piece.Split(''');                      if (view != null)                      {                          view.scannerGrid.Columns[parts[0]].DisplayIndex = Convert.ToInt32(parts[1]);                          view.scannerGrid.Columns[parts[0]].Visible = parts[2] == "True";                      }                  }              }              catch (NullReferenceException)              {                  //Something went wrong' ignore              }              catch (IndexOutOfRangeException)              {                  //Something went wrong' ignore              }              catch (FormatException)              {                  //Something went wrong' ignore              }
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_AllocAttachments,The following statement contains a magic number: if ((_files.Count <= 0) || (_files.Count > 5))              {                  return IntPtr.Zero;              }
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEFailure = 2;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiELoginFailure = 3;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEDiskFull = 4;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEInsufficientMemory = 5;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEBlkTooSmall = 6;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiETooManySessions = 8;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiETooManyFiles = 9;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiETooManyRecipients = 10;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEAttachmentNotFound = 11;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEAttachmentOpenFailure = 12;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEAttachmentWriteFailure = 13;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEUnknownRecipient = 14;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEBadReciptype = 15;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiENoMessages = 16;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEInvalidMessage = 17;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiETextTooLarge = 18;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEInvalidSession = 19;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiETypeNotSupported = 20;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEAmbiguousRecipient = 21;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEMessageInUse = 22;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiENetworkFailure = 23;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEInvalidEditfields = 24;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEInvalidRecips = 25;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiENotSupported = 26;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiENoLibrary = 999;
Magic Number,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following statement contains a magic number: const int mapiEInvalidParameter = 998;
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(396' 81);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.panelTop.Size = new System.Drawing.Size(396' 81);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Location = new System.Drawing.Point(18' 56);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Location = new System.Drawing.Point(18' 56);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Size = new System.Drawing.Size(360' 13);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.Size = new System.Drawing.Size(360' 13);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Location = new System.Drawing.Point(0' 81);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(396' 2);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.panelDevider.Size = new System.Drawing.Size(396' 2);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExceptionDate.Location = new System.Drawing.Point(12' 90);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExceptionDate.Location = new System.Drawing.Point(12' 90);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExceptionDate.Size = new System.Drawing.Size(384' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExceptionDate.Size = new System.Drawing.Size(384' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelExceptionDate.TabIndex = 2;
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Location = new System.Drawing.Point(13' 113);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Location = new System.Drawing.Point(13' 113);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Size = new System.Drawing.Size(387' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.Size = new System.Drawing.Size(387' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelCaption.TabIndex = 3;
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 136);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 136);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(387' 29);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(387' 29);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.TabIndex = 4;
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Location = new System.Drawing.Point(166' 222);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Location = new System.Drawing.Point(166' 222);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNotSend.Size = new System.Drawing.Size(75' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSend.Location = new System.Drawing.Point(247' 222);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSend.Location = new System.Drawing.Point(247' 222);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSend.Size = new System.Drawing.Size(131' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSend.Size = new System.Drawing.Size(131' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLinkTitle.Location = new System.Drawing.Point(13' 173);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLinkTitle.Location = new System.Drawing.Point(13' 173);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLinkTitle.Size = new System.Drawing.Size(252' 13);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLinkTitle.Size = new System.Drawing.Size(252' 13);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLinkTitle.TabIndex = 7;
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Location = new System.Drawing.Point(262' 173);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Location = new System.Drawing.Point(262' 173);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Size = new System.Drawing.Size(55' 13);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.Size = new System.Drawing.Size(55' 13);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelData.TabIndex = 8;
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCopy.Location = new System.Drawing.Point(15' 222);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCopy.Location = new System.Drawing.Point(15' 222);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCopy.Size = new System.Drawing.Size(107' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCopy.Size = new System.Drawing.Size(107' 23);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCopy.TabIndex = 9;
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 4);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 4);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(204' 46);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(204' 46);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(396' 257);
Magic Number,inSSIDer.UnhandledException,UnhandledExDlgForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\UnhandledExDlgForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(396' 257);
Magic Number,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,CheckForAvailableUpdate,The following statement contains a magic number: try              {                  GetVersionPageText(versionUrl' 2);                    if (!userInitiated && _latestVersion.Equals(ignoreVersion))                  {                  }                  else if (Application.ProductVersion.Length > 0 && _latestVersion.Length > 0 && CompareVersions(_latestVersion' Application.ProductVersion))                  {                      return true;                  }              }              catch (Exception)              {              }
Magic Number,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,GetVersionNumbers,The following statement contains a magic number: int[] result = new int[4];
Magic Number,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,GetVersionPageText,The following statement contains a magic number: request.Timeout = 1000 * timeoutInSeconds;
Magic Number,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,GetVersionPageText,The following statement contains a magic number: try              {                  using (Stream stream = request.GetResponse().GetResponseStream())                  using (StreamReader streamreader = new StreamReader(stream))                  {                      while (!streamreader.EndOfStream && ((line = streamreader.ReadLine()) != null))                      {                          char[] parms = { ':' };                          String[] tokens = line.Split(parms' 2);                            switch (tokens[0])                          {                              case "Version":                                  _latestVersion = tokens[1].Trim();                                  break;                                case "URL":                                  _downloadUrl = tokens[1].Trim();                                  break;                                case "Description":                                  _versionDescription = streamreader.ReadToEnd();                                  break;                          }                      }                  }                  // Close the response to free resources.                  request.GetResponse().Close();              }              catch (WebException)              {              }
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.downloadButton.Location = new System.Drawing.Point(293' 248);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.downloadButton.Location = new System.Drawing.Point(293' 248);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.downloadButton.Size = new System.Drawing.Size(99' 23);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.downloadButton.Size = new System.Drawing.Size(99' 23);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.Location = new System.Drawing.Point(15' 16);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.Location = new System.Drawing.Point(15' 16);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.Size = new System.Drawing.Size(87' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.Size = new System.Drawing.Size(87' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionNameLabel.TabIndex = 8;
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.Location = new System.Drawing.Point(108' 38);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.Location = new System.Drawing.Point(108' 38);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.Size = new System.Drawing.Size(58' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.Size = new System.Drawing.Size(58' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionLabel.TabIndex = 11;
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.Location = new System.Drawing.Point(15' 38);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.Location = new System.Drawing.Point(15' 38);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.Size = new System.Drawing.Size(77' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.Size = new System.Drawing.Size(77' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.latestVersionNameLabel.TabIndex = 9;
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204))))' ((int)(((byte)(204))))' ((int)(((byte)(204)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.Location = new System.Drawing.Point(108' 16);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.Location = new System.Drawing.Point(108' 16);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.Size = new System.Drawing.Size(52' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.Size = new System.Drawing.Size(52' 13);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.installedVersionLabel.TabIndex = 10;
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.descriptionTextBox.Location = new System.Drawing.Point(16' 68);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.descriptionTextBox.Location = new System.Drawing.Point(16' 68);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.descriptionTextBox.Size = new System.Drawing.Size(376' 162);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.descriptionTextBox.Size = new System.Drawing.Size(376' 162);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.descriptionTextBox.TabIndex = 12;
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.remindLaterButton.Location = new System.Drawing.Point(156' 248);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.remindLaterButton.Location = new System.Drawing.Point(156' 248);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.remindLaterButton.Size = new System.Drawing.Size(110' 23);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.remindLaterButton.Size = new System.Drawing.Size(110' 23);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.remindLaterButton.TabIndex = 13;
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.ignoreVersionButton.Location = new System.Drawing.Point(16' 248);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.ignoreVersionButton.Location = new System.Drawing.Point(16' 248);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.ignoreVersionButton.Size = new System.Drawing.Size(113' 23);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.ignoreVersionButton.Size = new System.Drawing.Size(113' 23);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.ignoreVersionButton.TabIndex = 14;
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(36))))' ((int)(((byte)(36))))' ((int)(((byte)(36)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(36))))' ((int)(((byte)(36))))' ((int)(((byte)(36)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(36))))' ((int)(((byte)(36))))' ((int)(((byte)(36)))));
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(419' 293);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(419' 293);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(425' 321);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(425' 321);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 50);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 50);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 50);
Magic Number,inSSIDer.Version,VersionUpdateForm,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionUpdateForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 50);
Missing Default,inSSIDer.Scanning.Interfaces,ManagedScanInterface,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Scanning\Interfaces\ManagedScanInterface.cs,WlanApi_WlanNotification,The following switch statement is missing a default case: switch (((Wlan.WlanNotificationCodeAcm)notifyData.NotificationCode))                      {                          case Wlan.WlanNotificationCodeAcm.ScanComplete:                          case Wlan.WlanNotificationCodeAcm.ScanFail:                              OnScanComplete();                              break;                      }
Missing Default,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,MacAddressToolStripMenuItemClick,The following switch statement is missing a default case: switch ((sender as ToolStripMenuItem).Name)              {                  case "mACAddressToolStripMenuItem":                      scannerGrid.Columns["macColumn"].Visible = mACAddressToolStripMenuItem.Checked;                      break;                  case "sSIDToolStripMenuItem":                      scannerGrid.Columns["ssidColumn"].Visible = sSIDToolStripMenuItem.Checked;                      break;                  case "rSSIToolStripMenuItem":                      scannerGrid.Columns["rssiColumn"].Visible = rSSIToolStripMenuItem.Checked;                      break;                  case "channelToolStripMenuItem":                      scannerGrid.Columns["channelColumn"].Visible = channelToolStripMenuItem.Checked;                      break;                  case "vendorToolStripMenuItem":                      scannerGrid.Columns["vendorColumn"].Visible = vendorToolStripMenuItem.Checked;                      break;                  case "securityToolStripMenuItem":                      scannerGrid.Columns["securityColumn"].Visible = securityToolStripMenuItem.Checked;                      break;                  case "maxRateToolStripMenuItem":                      scannerGrid.Columns["maxrateColumn"].Visible = maxRateToolStripMenuItem.Checked;                      break;                  case "networkTypeToolStripMenuItem":                      scannerGrid.Columns["networktypeColumn"].Visible = networkTypeToolStripMenuItem.Checked;                      break;                  case "firstSeenToolStripMenuItem":                      scannerGrid.Columns["firstseenColumn"].Visible = firstSeenToolStripMenuItem.Checked;                      break;                  case "lastSeenToolStripMenuItem":                      scannerGrid.Columns["ageColumn"].Visible = lastSeenToolStripMenuItem.Checked;                      break;                  case "latitudeToolStripMenuItem":                      scannerGrid.Columns["latColumn"].Visible = latitudeToolStripMenuItem.Checked;                      break;                  case "longitudeToolStripMenuItem":                      scannerGrid.Columns["lonColumn"].Visible = longitudeToolStripMenuItem.Checked;                      break;              }
Missing Default,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,scannerView_CellMouseClick,The following switch statement is missing a default case: switch (e.ColumnIndex)              {                  case 1:                      if (e.Button == MouseButtons.Left)                      {                          //if((int) scannerView.Rows[e.RowIndex].Cells["idColumn"].Value > 20)                          //    Console.WriteLine("Hi");                          AccessPoint ap =                              _sc.Cache.GetAccessPointByMacAddress(scannerGrid.Rows[e.RowIndex].Cells["macColumn"].Value.ToString());                          if (ap == null) break;                          ap.Graph = !ap.Graph;                            scannerGrid.Rows[e.RowIndex].Cells["checkColumn"].Value = ap.Graph;                      }                      OnRequireRefresh();                      break;              }
Missing Default,inSSIDer.UI.Controls,ScannerView,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Controls\ScannerView.cs,SelectAllNetworksCheckBoxCheckedChanged,The following switch statement is missing a default case: switch (selectAllNetworksCheckBox.CheckState)              {                  case CheckState.Unchecked:                      foreach (AccessPoint ap in _sc.Cache.GetAccessPoints())                      {                          ap.Graph = false;                      }                      //Update data grid                      foreach (DataGridViewRow row in scannerGrid.Rows)                      {                          row.Cells["checkColumn"].Value = false;                      }                      OnRequireRefresh();                      break;                  case CheckState.Checked:                      foreach (AccessPoint ap in _sc.Cache.GetAccessPoints())                      {                          ap.Graph = true;                      }                      //Update data grid                      foreach (DataGridViewRow row in scannerGrid.Rows)                      {                          row.Cells["checkColumn"].Value = true;                      }                      OnRequireRefresh();                      break;              }
Missing Default,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,CheckForUpdateThread,The following switch statement is missing a default case: switch (VersionInfo.ShowUpdateDialog())                  {                      case DialogResult.OK:                          try                          {                              LinkHelper.OpenLink(VersionInfo.DownloadUrl' Settings.Default.AnalyticsMedium' @"CheckUpdateForm");                          }                          catch (Win32Exception) { }                          break;                      case DialogResult.Cancel:                          Settings.Default.VersionNextUpdateCheck = DateTime.Now + TimeSpan.FromDays(Settings.Default.VersionDaysBetweenUpdateReminders);                          break;                      case DialogResult.Ignore:                          Settings.Default.VersionIgnoreThisVersion = VersionInfo.LatestVersion;                          break;                  }
Missing Default,inSSIDer.UI.Forms,FormMain,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UI\Forms\frmMain.cs,SystemEvents_PowerModeChanged,The following switch statement is missing a default case: switch (e.Mode)              {                  case PowerModes.Suspend:                      networkInterfaceSelector1.StopScan();                      break;              }
Missing Default,inSSIDer.HTML,RssConverter,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\HTML\RssConverter.cs,ItemToHtml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "title":                          title = reader.ReadString();                          break;                      case "link":                          link = reader.ReadString();                          break;                      case "description":                          description = reader.ReadString();                          break;                        // Ignore tags we aren't using                      case "pubDate":                      case "comments":                      case "guid":                      case "category":                          reader.ReadString();                          break;                  }
Missing Default,inSSIDer,Program,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Program.cs,Main,The following switch statement is missing a default case: switch (Switching)                  {                      case Utilities.SwitchMode.None:                          //We're not switching' close program                          break;                      case Utilities.SwitchMode.ToMain:                          //We're switching to the main form                          Debug.WriteLine("Switch to main form");                          form = new FormMain(scanner);                          SettingsMgr.ApplyMainFormSettings((Form)form);                          break;                  }
Missing Default,inSSIDer.UnhandledException,MapiMailMessage,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\UnhandledException\MapiMailMessage.cs,_LogErrorMapi,The following switch statement is missing a default case: switch (errorCode)              {                  case mapiUserAbort:                      error = "User Aborted.";                      break;                  case mapiEFailure:                      error = "MAPI Failure.";                      break;                  case mapiELoginFailure:                      error = "Login Failure.";                      break;                  case mapiEDiskFull:                      error = "MAPI Disk full.";                      break;                  case mapiEInsufficientMemory:                      error = "MAPI Insufficient memory.";                      break;                  case mapiEBlkTooSmall:                      error = "MAPI Block too small.";                      break;                  case mapiETooManySessions:                      error = "MAPI Too many sessions.";                      break;                  case mapiETooManyFiles:                      error = "MAPI too many files.";                      break;                  case mapiETooManyRecipients:                      error = "MAPI too many recipients.";                      break;                  case mapiEAttachmentNotFound:                      error = "MAPI Attachment not found.";                      break;                  case mapiEAttachmentOpenFailure:                      error = "MAPI Attachment open failure.";                      break;                  case mapiEAttachmentWriteFailure:                      error = "MAPI Attachment Write Failure.";                      break;                  case mapiEUnknownRecipient:                      error = "MAPI Unknown recipient.";                      break;                  case mapiEBadReciptype:                      error = "MAPI Bad recipient type.";                      break;                  case mapiENoMessages:                      error = "MAPI No messages.";                      break;                  case mapiEInvalidMessage:                      error = "MAPI Invalid message.";                      break;                  case mapiETextTooLarge:                      error = "MAPI Text too large.";                      break;                  case mapiEInvalidSession:                      error = "MAPI Invalid session.";                      break;                  case mapiETypeNotSupported:                      error = "MAPI Type not supported.";                      break;                  case mapiEAmbiguousRecipient:                      error = "MAPI Ambiguous recipient.";                      break;                  case mapiEMessageInUse:                      error = "MAPI Message in use.";                      break;                  case mapiENetworkFailure:                      error = "MAPI Network failure.";                      break;                  case mapiEInvalidEditfields:                      error = "MAPI Invalid edit fields.";                      break;                  case mapiEInvalidRecips:                      error = "MAPI Invalid Recipients.";                      break;                  case mapiENotSupported:                      error = "MAPI Not supported.";                      break;                  case mapiENoLibrary:                      error = "MAPI No Library.";                      break;                  case mapiEInvalidParameter:                      error = "MAPI Invalid parameter.";                      break;              }
Missing Default,inSSIDer.Version,VersionInfo,C:\repos\metageek-llc_inSSIDer-2\MetaScanner\Version\VersionInfo.cs,GetVersionPageText,The following switch statement is missing a default case: switch (tokens[0])                          {                              case "Version":                                  _latestVersion = tokens[1].Trim();                                  break;                                case "URL":                                  _downloadUrl = tokens[1].Trim();                                  break;                                case "Description":                                  _versionDescription = streamreader.ReadToEnd();                                  break;                          }
