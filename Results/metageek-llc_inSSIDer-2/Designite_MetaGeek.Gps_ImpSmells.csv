Implementation smell,Namespace,Class,File,Method,Description
Long Method,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,UpdateGps,The method has 108 lines of code.
Complex Method,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGPGSA,Cyclomatic complexity of the method is 10
Complex Method,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,Cyclomatic complexity of the method is 8
Complex Method,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,Cyclomatic complexity of the method is 8
Complex Method,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,Cyclomatic complexity of the method is 9
Long Statement,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The length of the statement  "                SatelliteTime = new DateTime(SatelliteTime.Year' SatelliteTime.Month' SatelliteTime.Day' utcHours' utcMinutes' utcSeconds' utcMilliseconds); " is 140.
Complex Conditional,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The conditional expression  "rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != """  is complex.
Empty Catch Block,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,ClosePort,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,ClosePort,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,UpdateGps,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGPGSA,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseCoordinates,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The method has an empty catch block.
Empty Catch Block,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpvtg,The method has an empty catch block.
Magic Number,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,GpsController,The following statement contains a magic number: MaxTimeout = 90;
Magic Number,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,Start,The following statement contains a magic number: if(_gpsThread != null)              {                  //Stop old thread                  _terminate.Set();                  if (!_gpsThread.Join(1000))                  {                      _gpsThread.Abort();                  }              }
Magic Number,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,OpenPort,The following statement contains a magic number: try              {                  _port = new SerialPort(PortName' PortBaudrate' PortParity' PortDataBits' PortStopBits)                              {                                  Handshake = PortHandshake'                                  ReadTimeout = 500                              };                  _port.Open();                  // Some GPSes require this (GPS2Blue)                 _port.DtrEnable = true;                 _port.RtsEnable = true;                  HasTalked = false;                  return true;              }              catch (Exception)              {                  return false;              }
Magic Number,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,TerminateThread,The following statement contains a magic number: if (!_gpsThread.Join(1000))              {                  _gpsThread.Abort();              }
Magic Number,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,UpdateGps,The following statement contains a magic number: while(true)              {                  try                  {                      int eventIdx = WaitHandle.WaitAny(_waitHandles' 100' false);                      if (eventIdx == WaitHandle.WaitTimeout)                      {                          if (_port != null && _port.IsOpen)                          {                              string sentence = string.Empty;                              try                              {                                  //Console.WriteLine(_port.ReadExisting());                                  sentence = _port.ReadLine();                                  timeoutCounter = 0;                                  HasTalked = true;                                  TimedOut = false;                              }                              //TODO: Find out why ArgumentOutOfRangeException gets thrown and catch if necessary                              catch (ArithmeticException)                              {                                  // TODO: wtf??                              }                              catch (TimeoutException)                              {                                  //TODO: make GPS keep listening and just notify that no GPS is found' check cables and make sure the GPS is powered on                                  // Give up after the maximum timeout is reached                                  // The read timeout is 500ms' so the number of timeouts to seconds is a ratio of 2 timeouts for 1 second                                  if (!HasTalked && MaxTimeout <= timeoutCounter)                                  {                                      InvokeGpsTimeout();                                      //Reset the timeout count                                      //Stop();                                      break;                                  }                                  timeoutCounter++;                              }                              catch (IOException)                              {                                  ClosePort();                                  break;                              }                                //Process sentence                              NmeaParser.SentenceType type = _nmea.Parse(sentence);                                switch (type)                              {                                  case NmeaParser.SentenceType.Gprmc:                                      MyGpsData.Latitude = _nmea.Latitude;                                      MyGpsData.Longitude = _nmea.Longitude;                                      MyGpsData.Speed = _nmea.Speed;                                      MyGpsData.SatelliteTime = _nmea.SatelliteTime;                                      MyGpsData.Course = _nmea.Course;                                      MyGpsData.MagVar = _nmea.MagVar;                                        HasFix = _nmea.HasFix;                                      Time = _nmea.Timestamp;                                        InvokeGpsLocationUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpgsv:                                      Satellites = _nmea.Satellites;                                      SatellitesVisible = _nmea.SatelliteCount;                                      InvokeGpsStatUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpgsa:                                      MyGpsData.Pdop = _nmea.Pdop;                                      MyGpsData.Hdop = _nmea.Hdop;                                      MyGpsData.Vdop = _nmea.Vdop;                                      MyGpsData.SatellitesUsed = _nmea.SatellitesUsed;                                        InvokeGpsStatUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpgga:                                      MyGpsData.Latitude = _nmea.Latitude;                                      MyGpsData.Longitude = _nmea.Longitude;                                      MyGpsData.Altitude = _nmea.Altitude;                                        Time = _nmea.Timestamp;                                        InvokeGpsLocationUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpvtg:                                      MyGpsData.Speed = _nmea.Speed;                                      break;                                    default:                                      //gpsConnected = false;                                      break;                              }                          }                          else                          {                              // The port was previously closed due to being out of sync' reopen                              Thread.Sleep(500);                              ClosePort();                              OpenPort();                          }                            InvokeGpsUpdated();                      }                      else //Terminate was signaled                      {                          break;                      }                  }                  catch (ObjectDisposedException)                  {                      break;                  }              }
Magic Number,MetaGeek.Gps,GpsController,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\GpsControllerN.cs,UpdateGps,The following statement contains a magic number: while(true)              {                  try                  {                      int eventIdx = WaitHandle.WaitAny(_waitHandles' 100' false);                      if (eventIdx == WaitHandle.WaitTimeout)                      {                          if (_port != null && _port.IsOpen)                          {                              string sentence = string.Empty;                              try                              {                                  //Console.WriteLine(_port.ReadExisting());                                  sentence = _port.ReadLine();                                  timeoutCounter = 0;                                  HasTalked = true;                                  TimedOut = false;                              }                              //TODO: Find out why ArgumentOutOfRangeException gets thrown and catch if necessary                              catch (ArithmeticException)                              {                                  // TODO: wtf??                              }                              catch (TimeoutException)                              {                                  //TODO: make GPS keep listening and just notify that no GPS is found' check cables and make sure the GPS is powered on                                  // Give up after the maximum timeout is reached                                  // The read timeout is 500ms' so the number of timeouts to seconds is a ratio of 2 timeouts for 1 second                                  if (!HasTalked && MaxTimeout <= timeoutCounter)                                  {                                      InvokeGpsTimeout();                                      //Reset the timeout count                                      //Stop();                                      break;                                  }                                  timeoutCounter++;                              }                              catch (IOException)                              {                                  ClosePort();                                  break;                              }                                //Process sentence                              NmeaParser.SentenceType type = _nmea.Parse(sentence);                                switch (type)                              {                                  case NmeaParser.SentenceType.Gprmc:                                      MyGpsData.Latitude = _nmea.Latitude;                                      MyGpsData.Longitude = _nmea.Longitude;                                      MyGpsData.Speed = _nmea.Speed;                                      MyGpsData.SatelliteTime = _nmea.SatelliteTime;                                      MyGpsData.Course = _nmea.Course;                                      MyGpsData.MagVar = _nmea.MagVar;                                        HasFix = _nmea.HasFix;                                      Time = _nmea.Timestamp;                                        InvokeGpsLocationUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpgsv:                                      Satellites = _nmea.Satellites;                                      SatellitesVisible = _nmea.SatelliteCount;                                      InvokeGpsStatUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpgsa:                                      MyGpsData.Pdop = _nmea.Pdop;                                      MyGpsData.Hdop = _nmea.Hdop;                                      MyGpsData.Vdop = _nmea.Vdop;                                      MyGpsData.SatellitesUsed = _nmea.SatellitesUsed;                                        InvokeGpsStatUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpgga:                                      MyGpsData.Latitude = _nmea.Latitude;                                      MyGpsData.Longitude = _nmea.Longitude;                                      MyGpsData.Altitude = _nmea.Altitude;                                        Time = _nmea.Timestamp;                                        InvokeGpsLocationUpdated();                                      break;                                    case NmeaParser.SentenceType.Gpvtg:                                      MyGpsData.Speed = _nmea.Speed;                                      break;                                    default:                                      //gpsConnected = false;                                      break;                              }                          }                          else                          {                              // The port was previously closed due to being out of sync' reopen                              Thread.Sleep(500);                              ClosePort();                              OpenPort();                          }                            InvokeGpsUpdated();                      }                      else //Terminate was signaled                      {                          break;                      }                  }                  catch (ObjectDisposedException)                  {                      break;                  }              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGPGSA,The following statement contains a magic number: try              {                  string[] Words = GetWords(sentence);                    string rawMode1a = Words[1];                  string rawMode1b = Words[2];                    int[] satIDs_ = new int[MaxChannels];                  int idx = 3;                  int satCount = 0;                    for (int i = 0; i < MaxChannels; i++)                  {                      try                      {                          if (Words[idx] != string.Empty)                          {                              satIDs_[i] = Convert.ToInt32(Words[idx]);                              satCount++;                          }                          else                          {                              satIDs_[i] = int.MaxValue;                          }                      }                      catch (FormatException)                      {                          satIDs_[i] = int.MaxValue;                      }                      idx++;                  }                    SatIDs = satIDs_.Where(i => i < int.MaxValue).ToArray(); //new int[satCount];                    if (Satellites != null)                  {                      Satellites.ForEach(sat => sat.IsUsed = false);                      Satellites.ForEach(sat => sat.IsUsed = SatIDs.Contains(sat.Id));                    }                    string rawPdop = Words[idx];                  string rawHdop = Words[idx + 1];                  string rawVdop = Words[idx + 2];                    if (rawMode1a == "M")                  {                      IsForced2D3D = true;                  }                  if (rawMode1a == "A")                  {                      IsForced2D3D = false;                  }                    if (rawMode1b != "")                  {                      FixMode = Convert.ToInt32(rawMode1b);                  }                  if (rawPdop != "")                      Pdop = Convert.ToDouble(rawPdop' CultureInfo.InvariantCulture);                  if (rawHdop != "")                      Hdop = Convert.ToDouble(rawHdop' CultureInfo.InvariantCulture);                  if (rawVdop != "")                      Vdop = Convert.ToDouble(rawVdop' CultureInfo.InvariantCulture);                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGPGSA,The following statement contains a magic number: try              {                  string[] Words = GetWords(sentence);                    string rawMode1a = Words[1];                  string rawMode1b = Words[2];                    int[] satIDs_ = new int[MaxChannels];                  int idx = 3;                  int satCount = 0;                    for (int i = 0; i < MaxChannels; i++)                  {                      try                      {                          if (Words[idx] != string.Empty)                          {                              satIDs_[i] = Convert.ToInt32(Words[idx]);                              satCount++;                          }                          else                          {                              satIDs_[i] = int.MaxValue;                          }                      }                      catch (FormatException)                      {                          satIDs_[i] = int.MaxValue;                      }                      idx++;                  }                    SatIDs = satIDs_.Where(i => i < int.MaxValue).ToArray(); //new int[satCount];                    if (Satellites != null)                  {                      Satellites.ForEach(sat => sat.IsUsed = false);                      Satellites.ForEach(sat => sat.IsUsed = SatIDs.Contains(sat.Id));                    }                    string rawPdop = Words[idx];                  string rawHdop = Words[idx + 1];                  string rawVdop = Words[idx + 2];                    if (rawMode1a == "M")                  {                      IsForced2D3D = true;                  }                  if (rawMode1a == "A")                  {                      IsForced2D3D = false;                  }                    if (rawMode1b != "")                  {                      FixMode = Convert.ToInt32(rawMode1b);                  }                  if (rawPdop != "")                      Pdop = Convert.ToDouble(rawPdop' CultureInfo.InvariantCulture);                  if (rawHdop != "")                      Hdop = Convert.ToDouble(rawHdop' CultureInfo.InvariantCulture);                  if (rawVdop != "")                      Vdop = Convert.ToDouble(rawVdop' CultureInfo.InvariantCulture);                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGPGSA,The following statement contains a magic number: try              {                  string[] Words = GetWords(sentence);                    string rawMode1a = Words[1];                  string rawMode1b = Words[2];                    int[] satIDs_ = new int[MaxChannels];                  int idx = 3;                  int satCount = 0;                    for (int i = 0; i < MaxChannels; i++)                  {                      try                      {                          if (Words[idx] != string.Empty)                          {                              satIDs_[i] = Convert.ToInt32(Words[idx]);                              satCount++;                          }                          else                          {                              satIDs_[i] = int.MaxValue;                          }                      }                      catch (FormatException)                      {                          satIDs_[i] = int.MaxValue;                      }                      idx++;                  }                    SatIDs = satIDs_.Where(i => i < int.MaxValue).ToArray(); //new int[satCount];                    if (Satellites != null)                  {                      Satellites.ForEach(sat => sat.IsUsed = false);                      Satellites.ForEach(sat => sat.IsUsed = SatIDs.Contains(sat.Id));                    }                    string rawPdop = Words[idx];                  string rawHdop = Words[idx + 1];                  string rawVdop = Words[idx + 2];                    if (rawMode1a == "M")                  {                      IsForced2D3D = true;                  }                  if (rawMode1a == "A")                  {                      IsForced2D3D = false;                  }                    if (rawMode1b != "")                  {                      FixMode = Convert.ToInt32(rawMode1b);                  }                  if (rawPdop != "")                      Pdop = Convert.ToDouble(rawPdop' CultureInfo.InvariantCulture);                  if (rawHdop != "")                      Hdop = Convert.ToDouble(rawHdop' CultureInfo.InvariantCulture);                  if (rawVdop != "")                      Vdop = Convert.ToDouble(rawVdop' CultureInfo.InvariantCulture);                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseCoordinates,The following statement contains a magic number: if (rawLatitude != string.Empty)              {                  try                  {                      double latHours = double.Parse(rawLatitude.Substring(0' 2)' NmeaCultureInfo);                      double latMinutes = double.Parse(rawLatitude.Substring(2)' NmeaCultureInfo);                        Latitude = latHours + latMinutes/60;                        if (rawNSindicator == "S")                      {                          Latitude = -Latitude;                      }                        //Longitude                      double lonHours = double.Parse(rawLongitude.Substring(0' 3)' NmeaCultureInfo);                      double lonMinutes = double.Parse(rawLongitude.Substring(3)' NmeaCultureInfo);                        Longitude = lonHours + lonMinutes/60;                        if (rawEWindicator == "W")                      {                          Longitude = -Longitude;                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseCoordinates,The following statement contains a magic number: if (rawLatitude != string.Empty)              {                  try                  {                      double latHours = double.Parse(rawLatitude.Substring(0' 2)' NmeaCultureInfo);                      double latMinutes = double.Parse(rawLatitude.Substring(2)' NmeaCultureInfo);                        Latitude = latHours + latMinutes/60;                        if (rawNSindicator == "S")                      {                          Latitude = -Latitude;                      }                        //Longitude                      double lonHours = double.Parse(rawLongitude.Substring(0' 3)' NmeaCultureInfo);                      double lonMinutes = double.Parse(rawLongitude.Substring(3)' NmeaCultureInfo);                        Longitude = lonHours + lonMinutes/60;                        if (rawEWindicator == "W")                      {                          Longitude = -Longitude;                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseCoordinates,The following statement contains a magic number: if (rawLatitude != string.Empty)              {                  try                  {                      double latHours = double.Parse(rawLatitude.Substring(0' 2)' NmeaCultureInfo);                      double latMinutes = double.Parse(rawLatitude.Substring(2)' NmeaCultureInfo);                        Latitude = latHours + latMinutes/60;                        if (rawNSindicator == "S")                      {                          Latitude = -Latitude;                      }                        //Longitude                      double lonHours = double.Parse(rawLongitude.Substring(0' 3)' NmeaCultureInfo);                      double lonMinutes = double.Parse(rawLongitude.Substring(3)' NmeaCultureInfo);                        Longitude = lonHours + lonMinutes/60;                        if (rawEWindicator == "W")                      {                          Longitude = -Longitude;                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseCoordinates,The following statement contains a magic number: if (rawLatitude != string.Empty)              {                  try                  {                      double latHours = double.Parse(rawLatitude.Substring(0' 2)' NmeaCultureInfo);                      double latMinutes = double.Parse(rawLatitude.Substring(2)' NmeaCultureInfo);                        Latitude = latHours + latMinutes/60;                        if (rawNSindicator == "S")                      {                          Latitude = -Latitude;                      }                        //Longitude                      double lonHours = double.Parse(rawLongitude.Substring(0' 3)' NmeaCultureInfo);                      double lonMinutes = double.Parse(rawLongitude.Substring(3)' NmeaCultureInfo);                        Longitude = lonHours + lonMinutes/60;                        if (rawEWindicator == "W")                      {                          Longitude = -Longitude;                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseCoordinates,The following statement contains a magic number: if (rawLatitude != string.Empty)              {                  try                  {                      double latHours = double.Parse(rawLatitude.Substring(0' 2)' NmeaCultureInfo);                      double latMinutes = double.Parse(rawLatitude.Substring(2)' NmeaCultureInfo);                        Latitude = latHours + latMinutes/60;                        if (rawNSindicator == "S")                      {                          Latitude = -Latitude;                      }                        //Longitude                      double lonHours = double.Parse(rawLongitude.Substring(0' 3)' NmeaCultureInfo);                      double lonMinutes = double.Parse(rawLongitude.Substring(3)' NmeaCultureInfo);                        Longitude = lonHours + lonMinutes/60;                        if (rawEWindicator == "W")                      {                          Longitude = -Longitude;                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseCoordinates,The following statement contains a magic number: if (rawLatitude != string.Empty)              {                  try                  {                      double latHours = double.Parse(rawLatitude.Substring(0' 2)' NmeaCultureInfo);                      double latMinutes = double.Parse(rawLatitude.Substring(2)' NmeaCultureInfo);                        Latitude = latHours + latMinutes/60;                        if (rawNSindicator == "S")                      {                          Latitude = -Latitude;                      }                        //Longitude                      double lonHours = double.Parse(rawLongitude.Substring(0' 3)' NmeaCultureInfo);                      double lonMinutes = double.Parse(rawLongitude.Substring(3)' NmeaCultureInfo);                        Longitude = lonHours + lonMinutes/60;                        if (rawEWindicator == "W")                      {                          Longitude = -Longitude;                      }                  }                  catch (Exception)                  {                  }              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgga,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    if (words.Length >= 15)                  {                      string rawUtCtime = words[1];                      string rawLatitude = words[2];                      string rawNsIndicator = words[3];                      string rawLongitude = words[4];                      string rawEwIndicator = words[5];                      string rawPositionFix = words[6];                      string rawSatellitesUsed = words[7];                      string rawHdop = words[8];                      string rawAltitude = words[9];                      //string rawAltitudeUnits = words[10];                      string rawGeoidSeperation = words[11];                      //string rawSeperationUnits = words[12];                      string rawDgpsAge = words[13];                      string rawDgpsStationId = words[14];                        ParseTime(rawUtCtime' "");                      ParseCoordinates(rawLongitude' rawLatitude' rawNsIndicator' rawEwIndicator);                        if (!string.IsNullOrEmpty(rawSatellitesUsed))                      {                          SatellitesUsed = int.Parse(rawSatellitesUsed' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawAltitude))                      {                          Altitude = double.Parse(rawAltitude' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawGeoidSeperation))                      {                          GeoIdSeperation = double.Parse(rawGeoidSeperation' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsAge))                      {                          DgpsAge = double.Parse(rawDgpsAge' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawDgpsStationId))                      {                          Dgpsid = int.Parse(rawDgpsStationId' NmeaCultureInfo);                      }                        if (!string.IsNullOrEmpty(rawPositionFix))                      {                          PositionFix = int.Parse(rawPositionFix' NmeaCultureInfo);                      }                        result = true;                  }              }              catch (Exception)              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpgsv,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawNumberOfMessages = words[1];                  string rawSequenceNumber = words[2];                  string rawSatellitesInView = words[3];                  SatelliteCount = int.Parse(rawSatellitesInView' NmeaCultureInfo);                    if (rawSequenceNumber == "1")                  {                      Satellites.Clear();                      _allSatellitesLoaded = false;                  }                    if (rawSequenceNumber == rawNumberOfMessages)                  {                      _allSatellitesLoaded = true;                  }                    int index = 4;                    if (words.Length < 16) { return false; }                    while (index <= 16 && words.Length > index + 4 && words[index] != "")                  {                      Satellite tempSatellite = new Satellite();                      string id = words[index];                      if (id != "")                      {                          int.TryParse(id' NumberStyles.Integer' NmeaCultureInfo' out tempSatellite.Id);                      }                        string elevation = words[index + 1];                      if (elevation != "")                      {                            tempSatellite.Elevation = double.Parse(elevation' NmeaCultureInfo);                      }                        string azimuth = words[index + 2];                      if (azimuth != "")                      {                          tempSatellite.Azimuth = Convert.ToDouble(azimuth' CultureInfo.InvariantCulture);                      }                        string snr = words[index + 3];                      tempSatellite.Snr = snr == "" ? 0 : Convert.ToDouble(snr' CultureInfo.InvariantCulture);                        index = index + 4;                        Satellites.Add(tempSatellite);                  }                    result = true;              }              catch              { }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    string rawUtCtime = words[1];                  string rawStatus = words[2];                  string rawLatitude = words[3];                  string rawNSindicator = words[4];                  string rawLongitude = words[5];                  string rawEWindicator = words[6];                  string rawSpeedinKnots = words[7];                  string rawCourse = words[8];                  string rawUtCdate = words[9];                  string rawMagneticVariationDegrees = words[10];                  string rawMagneticVariationEw = words[11];                  //string rawChecksum = words[12];                    //GET OUR POSITION. LATITUDE & LONGITUDE                  //If we have all the necessary information                  if (rawLatitude != "" && rawNSindicator != "" && rawLongitude != "" && rawEWindicator != "")                  {                      ParseCoordinates(rawLongitude' rawLatitude' rawNSindicator' rawEWindicator);                  }                    //DATE TIME                  //If we have the information                  if (rawUtCtime != "" && rawUtCdate != "")                  {                      ParseTime(rawUtCtime' rawUtCdate);                  }                    // SPEED                  //If we have the information                  if (rawSpeedinKnots != "")                  {                      // Convert to Kilometres per hour                      Speed = double.Parse(rawSpeedinKnots' NmeaCultureInfo)*KphPerKnot;                  }                    // BEARING/COURSE                  //If we have the information                  if (rawCourse != "")                  {                      // Indicate that the sentence was recognized                      Course = double.Parse(rawCourse' NmeaCultureInfo);                  }                    // SATELLITE FIX                  //If we have the information                  if (rawStatus != "")                  {                      switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }                  }                    //MAGNETIC VARIATION                  //if we have the information                  if (rawMagneticVariationDegrees != "" & rawMagneticVariationEw != "")                  {                      MagVar = double.Parse(rawMagneticVariationDegrees' NmeaCultureInfo);                        if (rawMagneticVariationEw == "W")                      {                          MagVar = -MagVar;                      }                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGpvtg,The following statement contains a magic number: try              {                  string[] words = GetWords(sentence);                    //string rawCourseTrue = words[1];                  //string rawReferenceTrue = words[2];                  //string rawCourseMag = words[3];                  //string rawReferenceMag = words[4];                  //string rawSpeedKnots = words[5];                  string rawSpeedKph = words[7];                    if (rawSpeedKph != "")                  {                      Speed = double.Parse(rawSpeedKph' NmeaCultureInfo);                  }                    result = true;              }              catch              {              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: int y2K = todayTime.Year / 100;
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: int utcHours = int.Parse(rawUtCtime.Substring(0' 2)' NmeaCultureInfo);
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: int utcMinutes = int.Parse(rawUtCtime.Substring(2' 2)' NmeaCultureInfo);
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: int utcMinutes = int.Parse(rawUtCtime.Substring(2' 2)' NmeaCultureInfo);
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: int utcSeconds = int.Parse(rawUtCtime.Substring(4' 2)' NmeaCultureInfo);
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: int utcSeconds = int.Parse(rawUtCtime.Substring(4' 2)' NmeaCultureInfo);
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCtime.Length > 7)              {                  utcMilliseconds = int.Parse(rawUtCtime.Substring(7)' NmeaCultureInfo);              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCtime.Length > 7)              {                  utcMilliseconds = int.Parse(rawUtCtime.Substring(7)' NmeaCultureInfo);              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCdate != "")              {                  int dd = int.Parse(rawUtCdate.Substring(0' 2)' NmeaCultureInfo);                  int mm = int.Parse(rawUtCdate.Substring(2' 2)' NmeaCultureInfo);                  int yy = int.Parse(rawUtCdate.Substring(4' 2)' NmeaCultureInfo);                  SatelliteTime = new DateTime(y2K * 100 + yy' mm' dd' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }              else              {                  SatelliteTime = new DateTime(SatelliteTime.Year' SatelliteTime.Month' SatelliteTime.Day' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCdate != "")              {                  int dd = int.Parse(rawUtCdate.Substring(0' 2)' NmeaCultureInfo);                  int mm = int.Parse(rawUtCdate.Substring(2' 2)' NmeaCultureInfo);                  int yy = int.Parse(rawUtCdate.Substring(4' 2)' NmeaCultureInfo);                  SatelliteTime = new DateTime(y2K * 100 + yy' mm' dd' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }              else              {                  SatelliteTime = new DateTime(SatelliteTime.Year' SatelliteTime.Month' SatelliteTime.Day' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCdate != "")              {                  int dd = int.Parse(rawUtCdate.Substring(0' 2)' NmeaCultureInfo);                  int mm = int.Parse(rawUtCdate.Substring(2' 2)' NmeaCultureInfo);                  int yy = int.Parse(rawUtCdate.Substring(4' 2)' NmeaCultureInfo);                  SatelliteTime = new DateTime(y2K * 100 + yy' mm' dd' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }              else              {                  SatelliteTime = new DateTime(SatelliteTime.Year' SatelliteTime.Month' SatelliteTime.Day' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCdate != "")              {                  int dd = int.Parse(rawUtCdate.Substring(0' 2)' NmeaCultureInfo);                  int mm = int.Parse(rawUtCdate.Substring(2' 2)' NmeaCultureInfo);                  int yy = int.Parse(rawUtCdate.Substring(4' 2)' NmeaCultureInfo);                  SatelliteTime = new DateTime(y2K * 100 + yy' mm' dd' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }              else              {                  SatelliteTime = new DateTime(SatelliteTime.Year' SatelliteTime.Month' SatelliteTime.Day' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCdate != "")              {                  int dd = int.Parse(rawUtCdate.Substring(0' 2)' NmeaCultureInfo);                  int mm = int.Parse(rawUtCdate.Substring(2' 2)' NmeaCultureInfo);                  int yy = int.Parse(rawUtCdate.Substring(4' 2)' NmeaCultureInfo);                  SatelliteTime = new DateTime(y2K * 100 + yy' mm' dd' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }              else              {                  SatelliteTime = new DateTime(SatelliteTime.Year' SatelliteTime.Month' SatelliteTime.Day' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }
Magic Number,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseTime,The following statement contains a magic number: if (rawUtCdate != "")              {                  int dd = int.Parse(rawUtCdate.Substring(0' 2)' NmeaCultureInfo);                  int mm = int.Parse(rawUtCdate.Substring(2' 2)' NmeaCultureInfo);                  int yy = int.Parse(rawUtCdate.Substring(4' 2)' NmeaCultureInfo);                  SatelliteTime = new DateTime(y2K * 100 + yy' mm' dd' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }              else              {                  SatelliteTime = new DateTime(SatelliteTime.Year' SatelliteTime.Month' SatelliteTime.Day' utcHours' utcMinutes' utcSeconds' utcMilliseconds);              }
Missing Default,MetaGeek.Gps,NmeaParser,C:\repos\metageek-llc_inSSIDer-2\MetaGeek.Gps\NmeaParser.cs,ParseGprmc,The following switch statement is missing a default case: switch (rawStatus)                      {                          case "A":                              HasFix = true;                              break;                          case "V":                              HasFix = false;                              break;                      }
