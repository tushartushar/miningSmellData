Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NxBRE.StressTests,Stresser,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Run,The length of the statement  "					if ((switched) && (ie.Label == RULES[0])) throw new Exception("Thread should have switched' but is still: " + ie.Label); " is 120.
Long Statement,NxBRE.StressTests,Stresser,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Run,The length of the statement  "					Console.WriteLine("Stresser {0} Dead (bumps: {2} - ActiveRule:{3} - label:{4})"' stresserID' switched' bumps' ActiveRule' ie.Label); " is 132.
Complex Conditional,NxBRE.StressTests,Stresser,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Run,The conditional expression  "((ie.Label == "multiply") && (result != (7+a*b))) ||  						    ((ie.Label == "add") && (result != (3+a+b))) ||  						    ((ie.Label == "subtract") && (result != (11+a-b)))"  is complex.
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) csharpBinder = Boolean.Parse(args[2]);
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Main,The following statement contains a magic number: if (args.Length > 2) csharpBinder = Boolean.Parse(args[2]);
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: if (HOT_SWAP) {  				switchRuleBaseTimer = new Timer(new TimerCallback(SwitchRuleBase)' null' DURATION*500' Timeout.Infinite);  				if (binder) switchBinder = new Timer(new TimerCallback(SwitchBinder)' null' DURATION*250' DURATION*500);  			}
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: if (HOT_SWAP) {  				switchRuleBaseTimer = new Timer(new TimerCallback(SwitchRuleBase)' null' DURATION*500' Timeout.Infinite);  				if (binder) switchBinder = new Timer(new TimerCallback(SwitchBinder)' null' DURATION*250' DURATION*500);  			}
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: if (HOT_SWAP) {  				switchRuleBaseTimer = new Timer(new TimerCallback(SwitchRuleBase)' null' DURATION*500' Timeout.Infinite);  				if (binder) switchBinder = new Timer(new TimerCallback(SwitchBinder)' null' DURATION*250' DURATION*500);  			}
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: stopTests = new Timer(new TimerCallback(StopTests)' null' DURATION*1000' Timeout.Infinite);
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: Thread.Sleep(1000+DURATION*1000);
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: Thread.Sleep(1000+DURATION*1000);
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: while(running) Thread.Sleep(500);
Magic Number,NxBRE.StressTests,MainClass,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,RunTests,The following statement contains a magic number: Console.Out.WriteLine("{0} hits' {1} errors in {2} msec"'  	                  hits'  	                  errors'  	                  (long)(DateTime.Now.Ticks - iniTime)/10000);
Magic Number,NxBRE.StressTests,Stresser,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Run,The following statement contains a magic number: try {  					while(mc.running) {  						mc.hits++;  						bumps++;  						a = mc.rnd.Next(1' 1+LIMIT);  						b = mc.rnd.Next(1' 1+LIMIT);  						  						ie.NewWorkingMemory(WorkingMemoryTypes.Isolated);  						  						if ((ie.Label != "subtract") && (binder)) {  							Hashtable bo = new Hashtable();  							bo.Add(ie.Label + "-a"' a);  							bo.Add(ie.Label + "-b"' b);  							ie.Process(bo);  						}  						else {  							ie.Assert(new Fact("values"' new Individual(a)' new Individual(b)));  							ie.Process();  						}  						  						if (ie.FactsCount != 2) throw new Exception("Got wrong fact count: " + ie.FactsCount);  						result = (int)ie.GetFact("result").GetPredicateValue(0);  						  						if (((ie.Label == "multiply") && (result != (7+a*b))) ||  						    ((ie.Label == "add") && (result != (3+a+b))) ||  						    ((ie.Label == "subtract") && (result != (11+a-b)))) {  							mc.errors++;  							//Console.Write("[{0}?{1}={2}:{3}]  "' a' b' result' ie.Label);  						}  						else  							if ((ie.Label != "multiply") && (ie.Label != "add") && (ie.Label != "subtract"))  								throw new Exception("Unknown label: " + ie.Label);  								  						if (HOT_SWAP) ie.DisposeIsolatedMemory();  						  					}  					  					if ((switched) && (ie.Label == RULES[0])) throw new Exception("Thread should have switched' but is still: " + ie.Label);  					  					//Console.WriteLine("Stresser {0} Stopped (bumps: {3} - label:{2})"' stresserID' switched' ie.Label' bumps);  				} catch (Exception e) {  					mc.errors++;  					Console.WriteLine("Stresser {0} Dead (bumps: {2} - ActiveRule:{3} - label:{4})"' stresserID' switched' bumps' ActiveRule' ie.Label);  					Console.WriteLine(e);  				}
Magic Number,NxBRE.StressTests,Stresser,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Run,The following statement contains a magic number: try {  					while(mc.running) {  						mc.hits++;  						bumps++;  						a = mc.rnd.Next(1' 1+LIMIT);  						b = mc.rnd.Next(1' 1+LIMIT);  						  						ie.NewWorkingMemory(WorkingMemoryTypes.Isolated);  						  						if ((ie.Label != "subtract") && (binder)) {  							Hashtable bo = new Hashtable();  							bo.Add(ie.Label + "-a"' a);  							bo.Add(ie.Label + "-b"' b);  							ie.Process(bo);  						}  						else {  							ie.Assert(new Fact("values"' new Individual(a)' new Individual(b)));  							ie.Process();  						}  						  						if (ie.FactsCount != 2) throw new Exception("Got wrong fact count: " + ie.FactsCount);  						result = (int)ie.GetFact("result").GetPredicateValue(0);  						  						if (((ie.Label == "multiply") && (result != (7+a*b))) ||  						    ((ie.Label == "add") && (result != (3+a+b))) ||  						    ((ie.Label == "subtract") && (result != (11+a-b)))) {  							mc.errors++;  							//Console.Write("[{0}?{1}={2}:{3}]  "' a' b' result' ie.Label);  						}  						else  							if ((ie.Label != "multiply") && (ie.Label != "add") && (ie.Label != "subtract"))  								throw new Exception("Unknown label: " + ie.Label);  								  						if (HOT_SWAP) ie.DisposeIsolatedMemory();  						  					}  					  					if ((switched) && (ie.Label == RULES[0])) throw new Exception("Thread should have switched' but is still: " + ie.Label);  					  					//Console.WriteLine("Stresser {0} Stopped (bumps: {3} - label:{2})"' stresserID' switched' ie.Label' bumps);  				} catch (Exception e) {  					mc.errors++;  					Console.WriteLine("Stresser {0} Dead (bumps: {2} - ActiveRule:{3} - label:{4})"' stresserID' switched' bumps' ActiveRule' ie.Label);  					Console.WriteLine(e);  				}
Magic Number,NxBRE.StressTests,Stresser,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Run,The following statement contains a magic number: try {  					while(mc.running) {  						mc.hits++;  						bumps++;  						a = mc.rnd.Next(1' 1+LIMIT);  						b = mc.rnd.Next(1' 1+LIMIT);  						  						ie.NewWorkingMemory(WorkingMemoryTypes.Isolated);  						  						if ((ie.Label != "subtract") && (binder)) {  							Hashtable bo = new Hashtable();  							bo.Add(ie.Label + "-a"' a);  							bo.Add(ie.Label + "-b"' b);  							ie.Process(bo);  						}  						else {  							ie.Assert(new Fact("values"' new Individual(a)' new Individual(b)));  							ie.Process();  						}  						  						if (ie.FactsCount != 2) throw new Exception("Got wrong fact count: " + ie.FactsCount);  						result = (int)ie.GetFact("result").GetPredicateValue(0);  						  						if (((ie.Label == "multiply") && (result != (7+a*b))) ||  						    ((ie.Label == "add") && (result != (3+a+b))) ||  						    ((ie.Label == "subtract") && (result != (11+a-b)))) {  							mc.errors++;  							//Console.Write("[{0}?{1}={2}:{3}]  "' a' b' result' ie.Label);  						}  						else  							if ((ie.Label != "multiply") && (ie.Label != "add") && (ie.Label != "subtract"))  								throw new Exception("Unknown label: " + ie.Label);  								  						if (HOT_SWAP) ie.DisposeIsolatedMemory();  						  					}  					  					if ((switched) && (ie.Label == RULES[0])) throw new Exception("Thread should have switched' but is still: " + ie.Label);  					  					//Console.WriteLine("Stresser {0} Stopped (bumps: {3} - label:{2})"' stresserID' switched' ie.Label' bumps);  				} catch (Exception e) {  					mc.errors++;  					Console.WriteLine("Stresser {0} Dead (bumps: {2} - ActiveRule:{3} - label:{4})"' stresserID' switched' bumps' ActiveRule' ie.Label);  					Console.WriteLine(e);  				}
Magic Number,NxBRE.StressTests,Stresser,C:\repos\ddossot_NxBRE\StressTests\InferenceEngineMultiThreading\Main.cs,Run,The following statement contains a magic number: try {  					while(mc.running) {  						mc.hits++;  						bumps++;  						a = mc.rnd.Next(1' 1+LIMIT);  						b = mc.rnd.Next(1' 1+LIMIT);  						  						ie.NewWorkingMemory(WorkingMemoryTypes.Isolated);  						  						if ((ie.Label != "subtract") && (binder)) {  							Hashtable bo = new Hashtable();  							bo.Add(ie.Label + "-a"' a);  							bo.Add(ie.Label + "-b"' b);  							ie.Process(bo);  						}  						else {  							ie.Assert(new Fact("values"' new Individual(a)' new Individual(b)));  							ie.Process();  						}  						  						if (ie.FactsCount != 2) throw new Exception("Got wrong fact count: " + ie.FactsCount);  						result = (int)ie.GetFact("result").GetPredicateValue(0);  						  						if (((ie.Label == "multiply") && (result != (7+a*b))) ||  						    ((ie.Label == "add") && (result != (3+a+b))) ||  						    ((ie.Label == "subtract") && (result != (11+a-b)))) {  							mc.errors++;  							//Console.Write("[{0}?{1}={2}:{3}]  "' a' b' result' ie.Label);  						}  						else  							if ((ie.Label != "multiply") && (ie.Label != "add") && (ie.Label != "subtract"))  								throw new Exception("Unknown label: " + ie.Label);  								  						if (HOT_SWAP) ie.DisposeIsolatedMemory();  						  					}  					  					if ((switched) && (ie.Label == RULES[0])) throw new Exception("Thread should have switched' but is still: " + ie.Label);  					  					//Console.WriteLine("Stresser {0} Stopped (bumps: {3} - label:{2})"' stresserID' switched' ie.Label' bumps);  				} catch (Exception e) {  					mc.errors++;  					Console.WriteLine("Stresser {0} Dead (bumps: {2} - ActiveRule:{3} - label:{4})"' stresserID' switched' bumps' ActiveRule' ie.Label);  					Console.WriteLine(e);  				}
