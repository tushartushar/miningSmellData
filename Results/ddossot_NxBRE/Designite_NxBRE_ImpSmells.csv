Implementation smell,Namespace,Class,File,Method,Description
Long Method,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The method has 107 lines of code.
Long Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The method has 100 lines of code.
Long Method,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The method has 121 lines of code.
Complex Method,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,Cyclomatic complexity of the method is 14
Complex Method,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,Process,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,LoadFactories,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessXML,Cyclomatic complexity of the method is 30
Complex Method,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessConditionNode,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,Cyclomatic complexity of the method is 12
Complex Method,NxBRE.InferenceEngine.Core,Agenda,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\Agenda.cs,Schedule,Cyclomatic complexity of the method is 14
Complex Method,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Assert,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Populate,Cyclomatic complexity of the method is 14
Complex Method,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,Cyclomatic complexity of the method is 21
Complex Method,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,ProcessAnd,Cyclomatic complexity of the method is 17
Complex Method,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,ProcessOr,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.InferenceEngine.Core,MutexManager,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\MutexManager.cs,AnalyzeImplications,Cyclomatic complexity of the method is 16
Complex Method,NxBRE.InferenceEngine.Core,PreconditionManager,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\PreconditionManager.cs,AnalyzeImplications,Cyclomatic complexity of the method is 14
Complex Method,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,Cyclomatic complexity of the method is 25
Complex Method,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveRuleBase,Cyclomatic complexity of the method is 12
Complex Method,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadFacts,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,Cyclomatic complexity of the method is 18
Complex Method,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,Cyclomatic complexity of the method is 31
Complex Method,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ExtractImplications,Cyclomatic complexity of the method is 20
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,AnalyzeRelationResolution,Cyclomatic complexity of the method is 14
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,BuildPredicate,Cyclomatic complexity of the method is 21
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,Cyclomatic complexity of the method is 24
Complex Method,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,BuildPredicate,Cyclomatic complexity of the method is 15
Complex Method,NxBRE.InferenceEngine.IO,RuleML091NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML091NafDatalogAdapter.cs,BuildDomRulebase,Cyclomatic complexity of the method is 15
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,Cyclomatic complexity of the method is 63
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,Cyclomatic complexity of the method is 13
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,Cyclomatic complexity of the method is 46
Complex Method,NxBRE.InferenceEngine.Rules,Implication,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,Cyclomatic complexity of the method is 12
Complex Method,NxBRE.InferenceEngine.Rules,Atom,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,Atom,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.Rules,Atom,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,PredicatesMatch,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.InferenceEngine.Rules,AtomGroup,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,AtomGroup,Cyclomatic complexity of the method is 14
Complex Method,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,Call,Cyclomatic complexity of the method is 17
Complex Method,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,CallMethodWithByRefParametersOrThrow,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.Util,Xml,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,GetSchemaTypeFromClr,Cyclomatic complexity of the method is 20
Complex Method,NxBRE.Util,Xml,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,FromClr,Cyclomatic complexity of the method is 47
Complex Method,NxBRE.Util,Xml,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,ToClr,Cyclomatic complexity of the method is 47
Complex Method,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,LoadClass,Cyclomatic complexity of the method is 12
Long Parameter List,NxBRE.FlowEngine.Core,AbstractBRERuleMetaData,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\AbstractBRERuleMetaData.cs,AbstractBRERuleMetaData,The method has 5 parameters.
Long Parameter List,NxBRE.FlowEngine.Core,BRERuleMetaDataImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\BRERuleMetaDataImpl.cs,BRERuleMetaDataImpl,The method has 5 parameters.
Long Parameter List,NxBRE.InferenceEngine.Core,FactEnumeratorFactory,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,NewFactListPredicateMatchingEnumerator,The method has 5 parameters.
Long Parameter List,NxBRE.InferenceEngine.IO,RuleML091NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML091NafDatalogAdapter.cs,BuildDomRulebase,The method has 5 parameters.
Long Parameter List,NxBRE.InferenceEngine.IO,AccumulatingExtendedRuleBaseAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AccumulatingExtendedRuleBaseAdapter.cs,BuildDomRulebase,The method has 5 parameters.
Long Parameter List,NxBRE.InferenceEngine.Rules,Function,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Function.cs,Function,The method has 5 parameters.
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 6 parameters.
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 7 parameters.
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 6 parameters.
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 7 parameters.
Long Parameter List,NxBRE.InferenceEngine.Rules,AtomFunction,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomFunction.cs,AtomFunction,The method has 5 parameters.
Long Parameter List,NxBRE.InferenceEngine.Rules,AtomFunction,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomFunction.cs,AtomFunction,The method has 6 parameters.
Long Parameter List,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,CallMethodWithByRefParametersOrThrow,The method has 5 parameters.
Long Identifier,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,ParseOperatorCall,The length of the parameter indexOfFirstOpeningParenthesis is 30.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,The length of the statement  "			Logger.FlowEngineSource.TraceEvent (TraceEventType.Critical' 0' "Business Rules provided by external entity\nObject passed to init() must not be Null"); " is 152.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,The length of the statement  "			Logger.FlowEngineSource.TraceEvent (TraceEventType.Critical' 0' "Business Rules provided by external entity\nObject passed to init() must be of type System.Xml.XPath.XPathDocument or NxBRE.FlowEngine.IO.IRulesDriver and not " + aObj.GetType ()); " is 245.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,Process,The length of the statement  "		Logger.FlowEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE v" + Reflection.NXBRE_VERSION + " Flow Engine Processing" + ((setId == null) ? String.Empty : " Set: " + setId) + ((wasRunning) ? " (Re-entrant)" : String.Empty)); " is 237.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,Process,The length of the statement  "		Logger.FlowEngineSource.TraceEvent (TraceEventType.Information' 0' "BRE Terminated" + pie.Message + ((setId == null) ? String.Empty : " Set: " + setId) + ((wasRunning) ? " (Re-entrant)" : String.Empty)); " is 203.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,Process,The length of the statement  "		Logger.FlowEngineSource.TraceEvent (TraceEventType.Information' 0' "BRE Finished" + ((setId == null) ? String.Empty : " Set: " + setId) + ((wasRunning) ? " (Re-entrant)" : String.Empty)); " is 187.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,LoadFactories,The length of the statement  "							Logger.FlowEngineSource.TraceEvent (TraceEventType.Verbose' 0' "BRE RuleFactory " + id + " loaded and added to RuleContext"); " is 125.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessXML,The length of the statement  "			selectedNodes = aNode.Select ("*[count(ancestor-or-self::" + SET + ")=0] | " + SET + "[@" + SET_ATTRS.ID + "='" + aSetId + "']/*"); " is 131.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "					Logger.FlowEngineSource.TraceData (TraceEventType.Critical' 0' new BREException ("Specified BREOperator " + operatorId + " not of type BREOperator or objects being compared are not" + " of the same type.\n" + "Left Object Name:" + leftId + "\nLeft Object Type:" + left.GetType ().FullName + "\nRight Object Name:" + rightId + "\nRight Object Type:" + right.GetType ().FullName + "\n"' ice)); " is 391.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "					Logger.FlowEngineSource.TraceData (TraceEventType.Critical' 0' new BREException ("Error when processing BREOperator " + operatorId + ".\n" + "Left Object Name:" + leftId + "\nLeft Object:" + left + "\nRight Object Name:" + rightId + "\nRight Object:" + right + "\n"' e)); " is 271.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "			Logger.FlowEngineSource.TraceData (TraceEventType.Critical' 0' new BREException ("Operator could not be loaded from BRERuleContext")); " is 134.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessInvokeSetNode,The length of the statement  "			Logger.FlowEngineSource.TraceData (TraceEventType.Critical' 0' new BREException ("Can not invoke a set with no Id: " + aNode.OuterXml)); " is 136.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoRule,The length of the statement  "				Logger.FlowEngineSource.TraceData (TraceEventType.Error' 0' new BREException ("Factory Id " + id + " defined' but not found in RuleContext")); " is 142.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoRule,The length of the statement  "			Logger.FlowEngineSource.TraceData (TraceEventType.Critical' 0' new BREException ("Object in RuleContext not of correct type. " + cce.ToString ())); " is 147.
Long Statement,NxBRE.FlowEngine,BREImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoRule,The length of the statement  "			Logger.FlowEngineSource.TraceData (TraceEventType.Error' 0' new BREException ("Error when processing RuleFactory id: " + id' e)); " is 129.
Long Statement,NxBRE.FlowEngine.Core,BackwardChainer,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\BackwardChainer.cs,ValidateXmlDocumentRules,The length of the statement  "	if (flowEngine.XmlDocumentRules.CreateNavigator ().Select ("//Rule[not(ancestor::Set) and not(starts-with(@id''#'))] | //Retract[not(ancestor::Set)]").Count != 0) { " is 164.
Long Statement,NxBRE.FlowEngine.Core,BackwardChainer,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\BackwardChainer.cs,GetSetIdsFromTargetObjectId,The length of the statement  "		XPathNodeIterator setIdAttributes = flowEngine.XmlDocumentRules.CreateNavigator ().Select ("//Set[.//Rule[@id='" + objectId + "']/@id | .//Retract[@id='" + objectId + "']]/@id"); " is 178.
Long Statement,NxBRE.FlowEngine.Core,BackwardChainer,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\BackwardChainer.cs,GetSourceObjectIdsFromSetId,The length of the statement  "		XPathNodeIterator setIdAttributes = flowEngine.XmlDocumentRules.CreateNavigator ().Select ("//Set[@id='" + setId + "']//Condition/Compare/@leftId | //Set[@id='" + setId + "']//Condition/Compare/@rightId"); " is 205.
Long Statement,NxBRE.FlowEngine.Core,AbstractBRERuleContext,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\AbstractBRERuleContext.cs,ToString,The length of the statement  "	return "*** Stack ***\n" + AddEnumeration (internalCallStack.GetEnumerator ()) + "\n*** Factories ***\n" + AddEnumeration (factories.GetEnumerator ()) + "\n*** Operators ***\n" + AddEnumeration (operators.GetEnumerator ()) + "\n*** Results ***\n" + AddEnumeration (results.GetEnumerator ()); " is 291.
Long Statement,NxBRE.FlowEngine.Core,AbstractBRERuleMetaData,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\AbstractBRERuleMetaData.cs,ToString,The length of the statement  "	sb.Append ("ID Type : ").Append (id.GetType ().FullName).Append ("\n").Append ("ID Str  : ").Append (id.ToString ()).Append ("\n").Append ("Factory : ").Append (factory.ToString ()).Append ("\n").Append ("Stack Loc: ").Append (stackLoc); " is 237.
Long Statement,NxBRE.FlowEngine.Core,AbstractBRERuleMetaData,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\AbstractBRERuleMetaData.cs,ToString,The length of the statement  "		sb.Append ("\n").Append ("Step Type: ").Append (step.GetType ().FullName).Append ("\n").Append ("Step Str: ").Append (step.ToString ()); " is 136.
Long Statement,NxBRE.FlowEngine.Core,AbstractBRERuleResult,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\AbstractBRERuleResult.cs,ToString,The length of the statement  "		sb.Append ("Result Type: ").Append (result.GetType ().FullName).Append ("\nResult Str : ").Append (result.ToString ()).Append ("\n"); " is 133.
Long Statement,NxBRE.FlowEngine.Core,BRERuleContextImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\BRERuleContextImpl.cs,Clone,The length of the statement  "	return new BRERuleContextImpl (new Stack (internalCallStack)' new Hashtable (factories)' new Hashtable (operators)' new Hashtable (results)); " is 141.
Long Statement,NxBRE.FlowEngine.Rules,InstanceOf,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Rules\InstanceOf.cs,ExecuteComparison,The length of the statement  "			Logger.FlowEngineSource.TraceEvent (TraceEventType.Warning' 0' "InstanceOf can not execute comparison with context: " + aBRC + "\n parameters: " + Misc.IDictionaryToString (aMap) + "\n first object: " + aObj + "\n second object: " + aCompareTo + "\n stacktrace: " + e.StackTrace); " is 280.
Long Statement,NxBRE.FlowEngine.Rules,ObjectLookup,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Rules\ObjectLookup.cs,ExecuteRule,The length of the statement  "			return Reflection.ObjectCall (ruleContext.GetResult (arguments [OBJECTID]).Result' (string)arguments [MEMBER]' GetArguments (arguments)); " is 137.
Long Statement,NxBRE.InferenceEngine.Core,Agenda,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\Agenda.cs,PrepareExecution,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Execution prepared: " + Misc.IListToString<Implication> (scheduledImplication)); " is 149.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Modify,The length of the statement  "			if ((currentFact.Label != null) && (currentFact.Label != String.Empty) && ((newFact.Label == null) || (newFact.Label == String.Empty))) " is 135.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Populate,The length of the statement  "					StringBuilder sb = new StringBuilder ("Error evaluating formula ").Append (members [i]).Append (" in atom: ").Append (targetAtom.Type).Append (".\r\n  Arguments:"); " is 164.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "FactBase.Select: " + filter + " - Excluding: " + Misc.IListToString ((IList)excludedFacts)); " is 161.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "	// if the predicate map does not contain an entry for the filter signature or if this entry is empty' return empty result " is 121.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Filter with no Ind or Fun -> Return all facts matching signature: " + filter.Signature); " is 157.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "							Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Matched predicateValue: " + predicateValue + " [" + predicateValue.GetType () + "]"); " is 154.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "								Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Smallest list of size: " + smallestList + " at position: " + positionOfSmallestList); " is 154.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "One member filter and got resultList -> Return facts immediatly"); " is 135.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "No resultList -> Used the list matching the signature' which contains: " + resultList.Count); " is 162.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "	return FactEnumeratorFactory.NewFactListPredicateMatchingEnumerator (resultList' filter' strictTyping' ignoredPredicates' excludedFacts); " is 137.
Long Statement,NxBRE.InferenceEngine.Core,ImplicationBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\ImplicationBase.cs,Add,The length of the statement  "		throw new BREException ("When adding: " + implication + " the knowledge base detected a duplicated with: " + implications [indexOfDuplicate]); " is 142.
Long Statement,NxBRE.InferenceEngine.Core,MutexManager,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\MutexManager.cs,AnalyzeImplications,The length of the statement  "				throw new BREException ("Implication " + implication.Label + " tries to Mutex the missing implication " + implication.Mutex); " is 125.
Long Statement,NxBRE.InferenceEngine.Core,PreconditionManager,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\PreconditionManager.cs,AnalyzeImplications,The length of the statement  "				throw new BREException ("Implication " + implication.Label + " is preconditionned by the missing implication " + implication.Precondition); " is 139.
Long Statement,NxBRE.InferenceEngine.Core,PreconditionManager,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\PreconditionManager.cs,AnalyzeImplications,The length of the statement  "				throw new BREException ("Implication " + implication.Label + " is preconditionned by the mutexed implication " + preconditionImplication.Label); " is 144.
Long Statement,NxBRE.InferenceEngine.Core,RulesUtil,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\RulesUtil.cs,Resolve,The length of the statement  "		if ((atom.Members [i] is Function) || ((fully) && (atom.Members [i] is Individual) && (!(factToResolve.Members [i].Value is System.String)))) { " is 143.
Long Statement,NxBRE.InferenceEngine.Core,FactEnumeratorFactory,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,NewFactListExcludingEnumerator,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "NewFactListExcludingEnumerator: factList.Count=" + factList.Count + " - excludedFacts.Count=" + (excludedFacts != null ? excludedFacts.Count : 0)); " is 216.
Long Statement,NxBRE.InferenceEngine.Core,FactEnumeratorFactory,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,NewFactListPredicateMatchingEnumerator,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "NewFactListPredicateMatchingEnumerator: factList.Count=" + factList.Count + " - filter=" + filter + " - strictTyping=" + strictTyping + " - ignoredPredicates=" + Misc.IListToString ((System.Collections.IList)ignoredPredicates) + " - excludedFacts.Count=" + (excludedFacts != null ? excludedFacts.Count : 0)); " is 377.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Loading Started' using adapter " + adapter.GetType ().FullName); " is 170.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				Logger.InferenceEngineSource.TraceEvent (TraceEventType.Warning' 0' "NxBRE interprets no-direction directive as forward chaining."); " is 132.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				Logger.InferenceEngineSource.TraceEvent (TraceEventType.Warning' 0' "NxBRE interprets bidirectional as forward chaining."); " is 123.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Loaded " + integrityQueries.Count + " IntegrityQueries"); " is 126.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Loading Finished"); " is 125.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveRuleBase,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Saving Started' using adapter " + adapter.GetType ().FullName); " is 169.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveRuleBase,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Saving Finished"); " is 124.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadFacts,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Facts Loading Started' using adapter " + adapter.GetType ().FullName); " is 166.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadFacts,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Added " + (WM.FB.Count - initialFactsCount) + " new Facts"); " is 129.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadFacts,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Facts Loading Finished"); " is 121.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveFacts,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Facts Saving Started' using adapter " + adapter.GetType ().FullName); " is 165.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveFacts,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Facts Saving Finished"); " is 120.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,Process,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE v" + Reflection.NXBRE_VERSION + " Inference Engine Processing Started"); " is 151.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,Process,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Processing: " + (businessObjects == null ? "null" : businessObjects.Count.ToString ()) + " business objects and rules of type: " + ruleType); " is 210.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessPerfomatives,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Processing performatives: " + (performativeAssertions == null ? "null" : performativeAssertions.Count.ToString ())); " is 185.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds"); " is 178.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The length of the statement  "				Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected"); " is 239.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds"); " is 179.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "(Starting) " + ((WM.Type == WorkingMemoryTypes.Global) ? "Global" : "Isolated") + "Working Memory contains: " + WM.FB.Count + " facts' " + IB.Count + " implications' " + QB.Count + " queries."); " is 263.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Iteration #" + iteration + ": " + agenda.Count + " implications in agenda' with " + positiveImplications.Count + " positive."); " is 196.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "			if ((firedImplication.MutexChain != null) && (!positiveImplications.Contains (firedImplication)) && (Misc.AreIntersecting (firedImplication.MutexChain' positiveImplications))) { " is 177.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "			if ((firedImplication != null) && (firedImplication.PreconditionImplication != null) && (!positiveImplications.Contains (firedImplication.PreconditionImplication))) { " is 166.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "					Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Negative Precondition: " + firedImplication.Label); " is 120.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "					Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Fired Implication: " + firedImplication.ToString () + " returned: " + resultsCount); " is 153.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Execution Time: " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds"); " is 180.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "(Finishing) " + ((WM.Type == WorkingMemoryTypes.Global) ? "Global" : "Isolated") + "Working Memory contains: " + WM.FB.Count + " facts' " + IB.Count + " implications' " + QB.Count + " queries."); " is 264.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Counting Implication '" + implication.Label + "' counted: " + processResults.Count); " is 153.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "			throw new BREException ("Strict counting implication rejected the assertion due to lack of variable predicate: " + implication.Deduction); " is 138.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "				NewFactHandler (new NewFactEventArgs (deductedFact' EventContextFactory.NewEventContext (processResults' implication))); " is 120.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' (result ? "Asserted" : "Ignored Assertion of ") + " Fact: " + deductedFact.ToString ()); " is 156.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "							DeleteFactHandler (new NewFactEventArgs (deductedFact' EventContextFactory.NewEventContext (processResult' implication))); " is 122.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "						Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' (result ? "Retracted" : "Ignored Retraction of ") + " Fact: " + deductedFact.ToString ()); " is 158.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "						Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' (result ? "Asserted" : "Ignored Assertion of ") + " Fact: " + deductedFact.ToString ()); " is 156.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "				Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Modifying Implication '" + implication.Label + "' will target matches of: " + modificationTargetLookup); " is 173.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "			foreach (Fact factToModify in FactBase.ExtractAllFacts (WM.FB.ProcessAtomGroup (new AtomGroup (AtomGroup.LogicalOperator.And' modificationTargetLookup)))) { " is 156.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "				Fact deductedFact = BuildFact (implication.Deduction' FactBase.EnrichResults (processResult' modificationTargetLookup' factToModify)); " is 134.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "							ModifyFactHandler (new NewFactEventArgs (factToModify' deductedFact' EventContextFactory.NewEventContext (processResult' implication))); " is 136.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "						Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' (result ? "Modified" : "Ignored Modification of ") + " Fact: " + factToModify.ToString ()); " is 159.
Long Statement,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "No Action Implication '" + implication.Label + "' matched: " + processResults.Count); " is 154.
Long Statement,NxBRE.InferenceEngine.IO,AbstractBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractBinder.cs,AnalyzeIndividualPredicate,The length of the statement  "			return new Function (Function.FunctionResolutionType.Binder' (string)individual.Value' this' m.Groups [1].Captures [0].ToString ()' (string[])arguments.ToArray (typeof(string))); " is 178.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ExtractImplications,The length of the statement  "		result.Add (new Implication (ip.label' ip.priority' ip.mutex' ip.precondition' GetAtom (head_atom.Current' false' true' false)' query.AtomGroup' action)); " is 154.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,GetAtom,The length of the statement  "	if ((relationResolution.type == AtomFunction.RelationResolutionType.NxBRE) || (relationResolution.type == AtomFunction.RelationResolutionType.Binder)) { " is 152.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,GetAtom,The length of the statement  "		return new AtomFunction (relationResolution.type' negative' new ExpressionRelater (relationResolution.atomRelation' predicatesArray)' relationResolution.atomRelation' predicatesArray); " is 184.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,GetAtomGroupContent,The length of the statement  "			result.Add (NewAtomGroup (AtomGroup.LogicalOperator.And' GetAtomGroupContent (currentBodyAtom.SelectChildren (XPathNodeType.Element)))); " is 136.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,GetAtomGroupContent,The length of the statement  "			result.Add (NewAtomGroup (AtomGroup.LogicalOperator.Or' GetAtomGroupContent (currentBodyAtom.SelectChildren (XPathNodeType.Element)))); " is 135.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,WriteAtomGroup,The length of the statement  "		XmlElement op = Document.CreateElement ((atomGroup.Operator == AtomGroup.LogicalOperator.And) ? andElement : orElement' DatalogNamespaceURL); " is 141.
Long Statement,NxBRE.InferenceEngine.IO,FlowEngineBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,EvaluateFERIOperator,The length of the statement  "		throw new BREException (values.Length + " is not a valid number of arguments for: " + functionName + "' only 2 is supported."); " is 127.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,CreateDocumentElement,The length of the statement  "	Document.LoadXml ("<RuleML xmlns='" + DatalogNamespaceURL + "' xsi:schemaLocation='" + DatalogNamespaceURL + " " + DatalogSchema + "' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xs='http://www.w3.org/2001/XMLSchema'/>"); " is 236.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,SetAttributes,The length of the statement  "	if ((syntax != SaveFormatAttributes.Compact) && (syntax != SaveFormatAttributes.Standard) && (syntax != SaveFormatAttributes.Expanded)) " is 135.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,The length of the statement  "		XPathNodeIterator directionAttributes = Navigator.Select (BuildXPathExpression ("//dl:*/@direction|//dl:*/@mapDirection")); " is 123.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,BuildPredicate,The length of the statement  "				predicate = new Function (Function.FunctionResolutionType.Binder' predicateValue' new ExpressionEvaluator (predicateValue)' String.Empty' String.Empty); " is 152.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,BuildPredicate,The length of the statement  "			predicate = new Function (Function.FunctionResolutionType.NxBRE' predicateValue' null' (string)operatorCall.First' (string)operatorCall.Second); " is 144.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The length of the statement  "			predicate.SetAttribute ("uri"' (((Formula)pre).ResolutionType == Formula.FormulaResolutionType.Binder) ? "nxbre://binder" : "nxbre://expression"); " is 146.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The length of the statement  "			predicate.SetAttribute ("uri"' (function.ResolutionType == Function.FunctionResolutionType.NxBRE) ? "nxbre://operator" : (IsExpressionBinder (function.Binder) ? "nxbre://expression" : "nxbre://binder")); " is 203.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteImplication,The length of the statement  "	ImplicationProperties ip = new ImplicationProperties (implication.Label' implication.Priority' implication.Mutex' implication.Precondition' action); " is 148.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,CreateDocumentElement,The length of the statement  "	Document.LoadXml ("<rulebase xmlns='" + DatalogNamespaceURL + "' xsi:schemaLocation='" + DatalogNamespaceURL + " " + DatalogSchema + "' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'/>"); " is 194.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,BuildPredicate,The length of the statement  "				predicate = new Function (Function.FunctionResolutionType.Binder' predicateValue' new ExpressionEvaluator (predicateValue)' String.Empty' String.Empty); " is 152.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,BuildPredicate,The length of the statement  "			predicate = new Function (Function.FunctionResolutionType.NxBRE' predicateValue' null' (string)operatorCall.First' (string)operatorCall.Second); " is 144.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,WriteAtom,The length of the statement  "				predicate.InnerText = "expr:System.Convert.To" + predicateValue.GetType ().Name + "(\"" + predicateValue.ToString () + "\")"; " is 125.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,WriteAtom,The length of the statement  "				throw new BREException (predicateValue.GetType ().FullName + " is not IConvertible hence can not be persisted as a typed fact: " + atom); " is 137.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,WriteImplication,The length of the statement  "	ImplicationProperties ip = new ImplicationProperties (implication.Label' implication.Priority' implication.Mutex' implication.Precondition' action); " is 148.
Long Statement,NxBRE.InferenceEngine.IO,RuleML091NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML091NafDatalogAdapter.cs,WriteIntegrityQuery,The length of the statement  "	WriteImplication (target' new Implication (query.Label' ImplicationPriority.Medium' String.Empty' String.Empty' IGNORED_DEDUCTION' query.AtomGroup)); " is 149.
Long Statement,NxBRE.InferenceEngine.IO,AccumulatingExtendedRuleBaseAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AccumulatingExtendedRuleBaseAdapter.cs,Dispose,The length of the statement  "		BuildDomRulebase (accumulatedFactsAssertions' accumulatedQueries' accumulatedImplications' accumulatedEquivalents' accumulatedIntegrityQueries); " is 144.
Long Statement,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,Rules,The length of the statement  "	sw.Write ("<rulebase xmlns=\"http://www.ruleml.org/0.86/xsd\" xsi:schemaLocation=\"http://www.ruleml.org/0.86/xsd ruleml-0_86-nafdatalog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""); " is 201.
Long Statement,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The length of the statement  "		if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) { " is 134.
Long Statement,NxBRE.InferenceEngine.Rules,Formula,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Formula.cs,Evaluate,The length of the statement  "			evaluator = Compilation.NewEvaluator (expression' DEFAULT_EXPRESSION_PLACEHOLDER' DEFAULT_NUMERIC_ARGUMENT_PATTERN' arguments); " is 127.
Long Statement,NxBRE.InferenceEngine.Rules,Function,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Function.cs,EvaluateNxBREOperator,The length of the statement  "		throw new BREException ("Only one argument must be passed to " + operatorName + " because the evaluated individual provides the other one."); " is 141.
Long Statement,NxBRE.InferenceEngine.Rules,Implication,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,ToString,The length of the statement  "	string result = "Implication[Action:" + Action + ";Label:" + Label + ";Priority:" + Priority + ";Salience:" + Salience + ";Mutex:" + Mutex + ";Precondition:" + Precondition + "; \n" + AtomGroup + " -> " + Deduction + "]"; " is 221.
Long Statement,NxBRE.InferenceEngine.Rules,Atom,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,PredicatesMatch,The length of the statement  "			if ((predicates [position] is Individual) && (atom.predicates [position] is Function) && (!((Function)atom.predicates [position]).Evaluate ((Individual)predicates [position]))) { " is 178.
Long Statement,NxBRE.InferenceEngine.Rules,Atom,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,PredicatesMatch,The length of the statement  "			} else if ((predicates [position] is Function) && (atom.predicates [position] is Individual) && (!((Function)predicates [position]).Evaluate ((Individual)atom.predicates [position]))) { " is 185.
Long Statement,NxBRE.InferenceEngine.Rules,Atom,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,PredicatesMatch,The length of the statement  "			} else if ((predicates [position] is Function) && (atom.predicates [position] is Function) && (!(predicates [position].Equals (atom.predicates [position])))) { " is 159.
Long Statement,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GetEmbeddedResourceStream,The length of the statement  "		Logger.UtilSource.TraceEvent (TraceEventType.Verbose' 0' "Fetching resource '" + fullResourceName + "' from assembly manifest"); " is 128.
Long Statement,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,Get,The length of the statement  "			Logger.UtilSource.TraceEvent (TraceEventType.Information' 0' "Can not find setting key: '" + settingKey + "'' using default value: '" + defaultValue + "' (Exception message: " + e.Message + ")"); " is 195.
Long Statement,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GetEnum,The length of the statement  "		throw new BREException ("Configuration exception when parsing enum value of type: '" + enumType.ToString () + "' for setting key: '" + settingKey + "'"' e); " is 156.
Long Statement,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GroupFinal,The length of the statement  "		if ((arguments [i] != null) && (arguments [i + 1] != null) && (arguments [i].GetType () == arguments [i + 1].GetType ())) { " is 123.
Long Statement,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,ParseOperatorCall,The length of the statement  "	string operatorArgument = source.Substring (indexOfFirstOpeningParenthesis + 1' indexOfLastClosingParenthesis - indexOfFirstOpeningParenthesis - 1); " is 148.
Long Statement,NxBRE.Util,PseudoCodeRenderer,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\PseudoCodeRenderer.cs,Render,The length of the statement  "	XmlReader reader = Xml.NewValidatingReader (new XmlTextReader (ruleFileURI)' ValidationType.Schema' "xBusinessRules.xsd"); " is 122.
Long Statement,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,CastToStrongType,The length of the statement  "	if ((pair.First.GetType ().GetInterface ("System.IConvertible"' false) != null) && (pair.Second.GetType ().GetInterface ("System.IConvertible"' false) != null)) { " is 162.
Long Statement,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,Call,The length of the statement  "				throw new TargetException (nbOfProvidedArgs + " argument(s) provided for field " + target + "." + name + " when 1 expected"); " is 125.
Long Statement,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,Call,The length of the statement  "			object[] reArgValues = Parameter.GroupFinal (argValues' mi.GetParameters ().Length' mi.GetParameters () [mi.GetParameters ().Length - 1].ParameterType); " is 152.
Long Statement,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,Call,The length of the statement  "	return CallMethodWithByRefParametersOrThrow (type' target' name' argValues' new TargetException ("Can not find member " + type.FullName + "." + name + Misc.ArrayToString (types) + " for values " + Misc.ArrayToString (argValues))); " is 230.
Long Statement,NxBRE.Util,Xml,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,NewValidatingReader,The length of the statement  "		Logger.UtilSource.TraceEvent (TraceEventType.Verbose' 0' "Instantiating new validating reader with validation: " + validationType + " and XSDs " + Misc.ArrayToString (xsdResourceName)); " is 185.
Long Statement,NxBRE.Util,Xml,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,NewValidatingReader,The length of the statement  "		throw new BREException ("Validation type should be DTD' Schema or None. If Schema' a schema resource name must be passed."); " is 124.
Long Statement,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,NewEvaluator,The length of the statement  "	string code = "class Evaluator:NxBRE.Util.IEvaluator { " + SecurityAttribute + " public object Run() {return (" + PrepareExpression (expression) + ");}}"; " is 154.
Long Statement,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,NewEvaluator,The length of the statement  "	string code = "class Evaluator:NxBRE.Util.IListEvaluator { " + SecurityAttribute + " public object Run(System.Collections.IList values) {return (" + Regex.Replace (PrepareExpression (expression)' placeHolderRegexpPattern' new MatchEvaluator (new ListVariableReplacer (variableNames' values).ReplaceListVariable)) + ");}}"; " is 322.
Long Statement,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,NewEvaluator,The length of the statement  "	string code = "class Evaluator:NxBRE.Util.IDictionaryEvaluator { " + SecurityAttribute + " public object Run(System.Collections.IDictionary values) {return (" + Regex.Replace (PrepareExpression (expression)' placeHolderRegexpPattern' new MatchEvaluator (new DictionaryVariableReplacer (arguments' numericArgumentPattern).ReplaceDictionaryVariable)) + ");}}"; " is 358.
Long Statement,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,LoadClass,The length of the statement  "	if (!nxbreAssemblyLoaded && ((ReferenceLinkMode == ReferenceLinkModes.NxBRE) || (ReferenceLinkMode == ReferenceLinkModes.Full))) { " is 130.
Long Statement,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,AddReferencedAssembly,The length of the statement  "		if ((assemblyLocation != null) && (assemblyLocation != String.Empty) && (!compilerParameters.ReferencedAssemblies.Contains (assemblyLocation))) " is 143.
Long Statement,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,AddReferencedAssembly,The length of the statement  "			Logger.UtilSource.TraceEvent (TraceEventType.Information' 0' "Error when adding a reference to: '" + assemblyLocation + "' (Exception message: " + e.Message + ")"); " is 164.
Long Statement,NxBRE.Util,HashSet,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\HashSet.cs,Add,The length of the statement  "		throw new ArgumentException ("New item: " + item.ToString () + " [#" + item.GetHashCode () + "] - Conflicting existing item: " + content [item] + " [#" + content [item].GetHashCode () + "]"' ae); " is 195.
Long Statement,NxBRE.InferenceEngine.Registry,FileRegistry,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,WaitUntilFileCanBeRead,The length of the statement  "				Logger.InferenceEngineSource.TraceEvent (TraceEventType.Verbose' 0' "Ponderating " + configuration.FileLockedPonderatingTime + "ms because the following file can not read: " + fullFileName); " is 190.
Complex Conditional,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Modify,The conditional expression  "(currentFact.Label != null) && (currentFact.Label != String.Empty) && ((newFact.Label == null) || (newFact.Label == String.Empty))"  is complex.
Complex Conditional,NxBRE.InferenceEngine.Core,RulesUtil,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\RulesUtil.cs,Resolve,The conditional expression  "(atom.Members [i] is Function) || ((fully) && (atom.Members [i] is Individual) && (!(factToResolve.Members [i].Value is System.String)))"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The conditional expression  "(forceDataTyping) && (!(pre.Value is string)) && ((sourceType == null) || (sourceType == String.Empty))"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The conditional expression  "(ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The conditional expression  "(ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The conditional expression  "(ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')"  is complex.
Empty Catch Block,NxBRE.Util,Reflection,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,Call,The method has an empty catch block.
Magic Number,NxBRE.InferenceEngine.Core,FactBase,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,FilterDistinct,The following statement contains a magic number: foreach (IList<PositiveMatchResult> processResult in processResults) {  	IList<Fact> row = new List<Fact> ();  	long rowLongHashCode = 17;  	foreach (PositiveMatchResult pmr in processResult) {  		// naf atom dummy results are skipped  		if (!(pmr.Fact is FactBase.NegativeFact)) {  			row.Add (pmr.Fact);  			rowLongHashCode = unchecked(37L * rowLongHashCode + pmr.Fact.GetHashCode ());  		}  	}  	// add only new rows to perform a "select distinct"  	if (!resultSet.ContainsKey (rowLongHashCode))  		resultSet.Add (rowLongHashCode' new ReadOnlyCollection<Fact> (row));  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (businessObjects == null) {  	InferUntilNoNewFact ();  } else if (Binder == null) {  	throw new BREException ("NxBRE Inference Engine needs a Binder to process business objects");  } else if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (businessObjects == null) {  	InferUntilNoNewFact ();  } else if (Binder == null) {  	throw new BREException ("NxBRE Inference Engine needs a Binder to process business objects");  } else if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (businessObjects == null) {  	InferUntilNoNewFact ();  } else if (Binder == null) {  	throw new BREException ("NxBRE Inference Engine needs a Binder to process business objects");  } else if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Binder == null) {  	throw new BREException ("NxBRE Inference Engine needs a Binder to process business objects");  } else if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Binder == null) {  	throw new BREException ("NxBRE Inference Engine needs a Binder to process business objects");  } else if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Binder == null) {  	throw new BREException ("NxBRE Inference Engine needs a Binder to process business objects");  } else if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Binder.BindingType == BindingTypes.BeforeAfter) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.BeforeProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  	bool binderIterate = true;  	ArrayList positiveImplications = new ArrayList ();  	while (binderIterate) {  		binderIterate = false;  		InferUntilNoNewFact ();  		WM.FB.ModifiedFlag = false;  		iniTime = DateTime.Now.Ticks;  		Binder.AfterProcess ();  		binderIterate = WM.FB.ModifiedFlag;  		if (Logger.IsInferenceEngineInformation)  			Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  	}  } else if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Logger.IsInferenceEngineInformation)  	Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: while (binderIterate) {  	binderIterate = false;  	InferUntilNoNewFact ();  	WM.FB.ModifiedFlag = false;  	iniTime = DateTime.Now.Ticks;  	Binder.AfterProcess ();  	binderIterate = WM.FB.ModifiedFlag;  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Logger.IsInferenceEngineInformation)  	Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds with " + (binderIterate ? "" : "no ") + "new fact(s) detected");  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Binder.BindingType == BindingTypes.Control) {  	long iniTime = DateTime.Now.Ticks;  	Binder.BusinessObjects = businessObjects;  	Binder.ControlProcess ();  	if (Logger.IsInferenceEngineInformation)  		Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  } else {  	throw new BREException ("Unexpected behaviour: BOs=" + businessObjects + " ; Binder=" + Binder);  }  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: if (Logger.IsInferenceEngineInformation)  	Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The following statement contains a magic number: Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The following statement contains a magic number: if (Logger.IsInferenceEngineInformation)  	Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Execution Time: " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  
Magic Number,NxBRE.InferenceEngine,IEImpl,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The following statement contains a magic number: Logger.InferenceEngineSource.TraceEvent (TraceEventType.Information' 0' "NxBRE Inference Engine Execution Time: " + (long)(DateTime.Now.Ticks - iniTime) / 10000 + " milliseconds");  
Magic Number,NxBRE.InferenceEngine.IO,AbstractBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractBinder.cs,AnalyzeIndividualPredicate,The following statement contains a magic number: if (individual.Value is string) {  	// Match the regular expression pattern against a text string.  	Match m = RegexFunction.Match ((string)individual.Value);  	if (m.Success) {  		// Create a function predicate with   		ArrayList arguments = new ArrayList ();  		foreach (Capture c2 in m.Groups [2].Captures)  			arguments.Add (c2.ToString ().Trim ());  		return new Function (Function.FunctionResolutionType.Binder' (string)individual.Value' this' m.Groups [1].Captures [0].ToString ()' (string[])arguments.ToArray (typeof(string)));  	}  }  
Magic Number,NxBRE.InferenceEngine.IO,AbstractBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractBinder.cs,AnalyzeIndividualPredicate,The following statement contains a magic number: if (m.Success) {  	// Create a function predicate with   	ArrayList arguments = new ArrayList ();  	foreach (Capture c2 in m.Groups [2].Captures)  		arguments.Add (c2.ToString ().Trim ());  	return new Function (Function.FunctionResolutionType.Binder' (string)individual.Value' this' m.Groups [1].Captures [0].ToString ()' (string[])arguments.ToArray (typeof(string)));  }  
Magic Number,NxBRE.InferenceEngine.IO,AbstractBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractBinder.cs,AnalyzeIndividualPredicate,The following statement contains a magic number: foreach (Capture c2 in m.Groups [2].Captures)  	arguments.Add (c2.ToString ().Trim ());  
Magic Number,NxBRE.InferenceEngine.IO,FlowEngineBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,EvaluateFERIOperator,The following statement contains a magic number: if (values.Length != 2)  	throw new BREException (values.Length + " is not a valid number of arguments for: " + functionName + "' only 2 is supported.");  
Magic Number,NxBRE.InferenceEngine.IO,FlowEngineBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,EvaluateFERIOperator,The following statement contains a magic number: if (functionName.ToLower ().StartsWith ("nxbre:"))  	operatorType += functionName.Substring (6).Split (Parameter.PARENTHESIS) [0];  else  	operatorType += functionName.Split (Parameter.PARENTHESIS) [0];  
Magic Number,NxBRE.InferenceEngine.IO,FlowEngineBinder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,EvaluateFERIOperator,The following statement contains a magic number: operatorType += functionName.Substring (6).Split (Parameter.PARENTHESIS) [0];  
Magic Number,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,The following statement contains a magic number: if (AdapterState == State.Read) {  	// estimate the global direction: ie consistent direction attributes (empty are ignored)  	globalDirection = String.Empty;  	XPathNodeIterator directionAttributes = Navigator.Select (BuildXPathExpression ("//dl:*/@direction|//dl:*/@mapDirection"));  	while (directionAttributes.MoveNext ()) {  		string direction = directionAttributes.Current.Value;  		if ((direction != String.Empty) && (direction != "bidirectional")) {  			if (globalDirection == String.Empty) {  				globalDirection = direction;  			} else if (direction != globalDirection) {  				globalDirection = "inconsistent";  				break;  			}  		}  	}  	// load equivalent atom definitions  	equivalents = new List<Equivalent> ();  	XPathNodeIterator equivalentElements = Navigator.Select (EquivalentElementXPath);  	while (equivalentElements.MoveNext ()) {  		// extract label' if any  		XPathNodeIterator labelIterator = equivalentElements.Current.Select (BuildXPathExpression ("dl:oid/dl:Ind"));  		string label = (labelIterator.MoveNext ()) ? labelIterator.Current.Value : String.Empty;  		XPathNodeIterator equivalentAtoms = equivalentElements.Current.Select (BuildXPathExpression (".//dl:Atom"));  		if (equivalentAtoms.Count != 2)  			throw new BREException ("An Equivalent group should contain exactly 2 atoms and not " + equivalentAtoms.Count);  		equivalentAtoms.MoveNext ();  		Atom firstAtom = GetAtom (equivalentAtoms.Current' false' false' false);  		equivalentAtoms.MoveNext ();  		Atom secondAtom = GetAtom (equivalentAtoms.Current' false' false' false);  		equivalents.Add (new Equivalent (label' firstAtom' secondAtom));  	}  }  
Magic Number,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,The following statement contains a magic number: while (equivalentElements.MoveNext ()) {  	// extract label' if any  	XPathNodeIterator labelIterator = equivalentElements.Current.Select (BuildXPathExpression ("dl:oid/dl:Ind"));  	string label = (labelIterator.MoveNext ()) ? labelIterator.Current.Value : String.Empty;  	XPathNodeIterator equivalentAtoms = equivalentElements.Current.Select (BuildXPathExpression (".//dl:Atom"));  	if (equivalentAtoms.Count != 2)  		throw new BREException ("An Equivalent group should contain exactly 2 atoms and not " + equivalentAtoms.Count);  	equivalentAtoms.MoveNext ();  	Atom firstAtom = GetAtom (equivalentAtoms.Current' false' false' false);  	equivalentAtoms.MoveNext ();  	Atom secondAtom = GetAtom (equivalentAtoms.Current' false' false' false);  	equivalents.Add (new Equivalent (label' firstAtom' secondAtom));  }  
Magic Number,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,The following statement contains a magic number: if (equivalentAtoms.Count != 2)  	throw new BREException ("An Equivalent group should contain exactly 2 atoms and not " + equivalentAtoms.Count);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "notOperator expected";  	break;  case 2:  	s = "andOperator expected";  	break;  case 3:  	s = "orOperator expected";  	break;  case 4:  	s = "imply expected";  	break;  case 5:  	s = "argsep expected";  	break;  case 6:  	s = "openBracket expected";  	break;  case 7:  	s = "closeBracket expected";  	break;  case 8:  	s = "tok expected";  	break;  case 9:  	s = "openParen expected";  	break;  case 10:  	s = "closeParen expected";  	break;  case 11:  	s = "\";\" expected";  	break;  case 12:  	s = "\"[\" expected";  	break;  case 13:  	s = "\"]\" expected";  	break;  case 14:  	s = "\"+\" expected";  	break;  case 15:  	s = "\"?\" expected";  	break;  case 16:  	s = "??? expected";  	break;  case 17:  	s = "invalid andRelation";  	break;  case 18:  	s = "invalid orRelation";  	break;  case 19:  	s = "invalid arg";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,Get,The following statement contains a magic number: for (; ;) {  	t = la;  	la = scanner.Scan ();  	if (la.kind <= maxT) {  		++errDist;  		break;  	}  	if (la.kind == 17) {  		if (la.val.Equals ("#DIRECTION_FORWARD"))  			direction = "forward";  		else if (la.val.Equals ("#DIRECTION_BACKWARD"))  			direction = "backward";  		else if (la.val.Equals ("#DIRECTION_BIDIRECTIONAL"))  			direction = "bidirectional";  		else  			errors.Error (t.line' t.col' "unknown pragma :" + la.val);  	}  	la = t;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,Get,The following statement contains a magic number: if (la.kind == 17) {  	if (la.val.Equals ("#DIRECTION_FORWARD"))  		direction = "forward";  	else if (la.val.Equals ("#DIRECTION_BACKWARD"))  		direction = "backward";  	else if (la.val.Equals ("#DIRECTION_BIDIRECTIONAL"))  		direction = "bidirectional";  	else  		errors.Error (t.line' t.col' "unknown pragma :" + la.val);  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: if (la.kind == 12) {  	header (out impName);  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: if (StartOf (2)) {  	if (IsAnd ()) {  		andRelation (ref atomListInXml' ref numberOfAtoms);  	} else if (IsOr ()) {  		orRelation (ref atomListInXml' ref numberOfAtoms);  	} else {  		atom (ref atomListInXml' ref numberOfAtoms' ref isFact);  	}  	if (la.kind == 4) {  		Get ();  		atom (ref headAtom' ref numberOfAtomsInHead' ref isFact);  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: if (StartOf (2)) {  	if (IsAnd ()) {  		andRelation (ref atomListInXml' ref numberOfAtoms);  	} else if (IsOr ()) {  		orRelation (ref atomListInXml' ref numberOfAtoms);  	} else {  		atom (ref atomListInXml' ref numberOfAtoms' ref isFact);  	}  	if (la.kind == 4) {  		Get ();  		atom (ref headAtom' ref numberOfAtomsInHead' ref isFact);  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: if (la.kind == 4) {  	Get ();  	atom (ref headAtom' ref numberOfAtomsInHead' ref isFact);  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: Expect (11);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: Expect (12);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: while (la.kind == 8) {  	Get ();  	if (label.Equals ("")) {  		label = t.val;  	} else {  		label += " " + t.val;  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: while (la.kind == 5 || la.kind == 11) {  	if (la.kind == 11) {  		Get ();  	} else {  		Get ();  	}  	label += t.val;  	isThereSeparator = true;  	while (la.kind == 8) {  		Get ();  		if (isThereSeparator)  			label += t.val;  		else  			label += " " + t.val;  		isThereSeparator = false;  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: while (la.kind == 5 || la.kind == 11) {  	if (la.kind == 11) {  		Get ();  	} else {  		Get ();  	}  	label += t.val;  	isThereSeparator = true;  	while (la.kind == 8) {  		Get ();  		if (isThereSeparator)  			label += t.val;  		else  			label += " " + t.val;  		isThereSeparator = false;  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: while (la.kind == 5 || la.kind == 11) {  	if (la.kind == 11) {  		Get ();  	} else {  		Get ();  	}  	label += t.val;  	isThereSeparator = true;  	while (la.kind == 8) {  		Get ();  		if (isThereSeparator)  			label += t.val;  		else  			label += " " + t.val;  		isThereSeparator = false;  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: while (la.kind == 5 || la.kind == 11) {  	if (la.kind == 11) {  		Get ();  	} else {  		Get ();  	}  	label += t.val;  	isThereSeparator = true;  	while (la.kind == 8) {  		Get ();  		if (isThereSeparator)  			label += t.val;  		else  			label += " " + t.val;  		isThereSeparator = false;  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: if (la.kind == 11) {  	Get ();  } else {  	Get ();  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: while (la.kind == 8) {  	Get ();  	if (isThereSeparator)  		label += t.val;  	else  		label += " " + t.val;  	isThereSeparator = false;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: Expect (13);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (la.kind == 9) {  	Get ();  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: while (la.kind == 2) {  	Get ();  	if (IsOr ()) {  		orRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (17);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: while (la.kind == 2) {  	Get ();  	if (IsOr ()) {  		orRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (17);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: while (la.kind == 2) {  	Get ();  	if (IsOr ()) {  		orRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (17);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: while (la.kind == 2) {  	Get ();  	if (IsOr ()) {  		orRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (17);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (IsOr ()) {  	orRelation (ref rhPartInXml' ref numberOfAtoms);  } else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (17);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (IsOr ()) {  	orRelation (ref rhPartInXml' ref numberOfAtoms);  } else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (17);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (IsOr ()) {  	orRelation (ref rhPartInXml' ref numberOfAtoms);  } else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (17);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (17);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (17);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (17);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: SynErr (17);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (la.kind == 9) {  	Get ();  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	if (IsAnd ()) {  		andRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (18);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	if (IsAnd ()) {  		andRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (18);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	if (IsAnd ()) {  		andRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (18);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: while (la.kind == 3) {  	Get ();  	if (IsAnd ()) {  		andRelation (ref rhPartInXml' ref numberOfAtoms);  	} else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  		atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  	} else  		SynErr (18);  	rhInXml += rhPartInXml;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (IsAnd ()) {  	andRelation (ref rhPartInXml' ref numberOfAtoms);  } else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (18);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (IsAnd ()) {  	andRelation (ref rhPartInXml' ref numberOfAtoms);  } else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (18);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (IsAnd ()) {  	andRelation (ref rhPartInXml' ref numberOfAtoms);  } else if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (18);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (18);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (18);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (la.kind == 1 || la.kind == 8 || la.kind == 14) {  	atom (ref rhPartInXml' ref numberOfAtoms' ref isFact);  } else  	SynErr (18);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: SynErr (18);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: if (la.kind == 10) {  	Get ();  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: if (la.kind == 1 || la.kind == 14) {  	if (la.kind == 1) {  		Get ();  		isNAF = true;  	} else {  		Get ();  		isFact = true;  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: Expect (6);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: if (name == String.Empty) {  	SynErr (6);  	throw new InvalidDataException ("Bad HRF syntax: impossible to locate atom members!");  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: SynErr (6);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: while (la.kind == 5) {  	Get ();  	arg (out name' out isThereVar);  	if (isThereVar) {  		atomInXml = atomInXml + "<var>" + name + "</var>";  	} else {  		atomInXml = atomInXml + "<ind>" + name + "</ind>";  	}  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: Expect (7);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,identifier,The following statement contains a magic number: Expect (8);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,identifier,The following statement contains a magic number: while (la.kind == 8) {  	Get ();  	name = name + " " + t.val;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 15) {  	Get ();  	identifier (out name);  	xmlArg = name;  	isThereVar = true;  } else if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 15) {  	Get ();  	identifier (out name);  	xmlArg = name;  	isThereVar = true;  } else if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 15) {  	Get ();  	identifier (out name);  	xmlArg = name;  	isThereVar = true;  } else if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 15) {  	Get ();  	identifier (out name);  	xmlArg = name;  	isThereVar = true;  } else if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 15) {  	Get ();  	identifier (out name);  	xmlArg = name;  	isThereVar = true;  } else if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 15) {  	Get ();  	identifier (out name);  	xmlArg = name;  	isThereVar = true;  } else if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 15) {  	Get ();  	identifier (out name);  	xmlArg = name;  	isThereVar = true;  } else if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 8) {  	identifier (out fctName);  	while (la.kind == 11) {  		Get ();  		identifier (out id);  		fctName += ";" + id;  	}  	if (la.kind == 9) {  		Get ();  		arg (out name' out isThereVar);  		argList = name;  		while (la.kind == 5) {  			Get ();  			arg (out name' out isThereVar);  			argList = argList + "'" + name;  		}  		Expect (10);  	}  	xmlArg = fctName;  	if (!argList.Equals ("")) {  		xmlArg += '(' + argList + ')';  	}  } else  	SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: while (la.kind == 11) {  	Get ();  	identifier (out id);  	fctName += ";" + id;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 9) {  	Get ();  	arg (out name' out isThereVar);  	argList = name;  	while (la.kind == 5) {  		Get ();  		arg (out name' out isThereVar);  		argList = argList + "'" + name;  	}  	Expect (10);  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 9) {  	Get ();  	arg (out name' out isThereVar);  	argList = name;  	while (la.kind == 5) {  		Get ();  		arg (out name' out isThereVar);  		argList = argList + "'" + name;  	}  	Expect (10);  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: if (la.kind == 9) {  	Get ();  	arg (out name' out isThereVar);  	argList = name;  	while (la.kind == 5) {  		Get ();  		arg (out name' out isThereVar);  		argList = argList + "'" + name;  	}  	Expect (10);  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: while (la.kind == 5) {  	Get ();  	arg (out name' out isThereVar);  	argList = argList + "'" + name;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: Expect (10);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: SynErr (19);  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore [9] = true;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore [10] = true;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore [13] = true;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore [32] = true;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Comment0,The following statement contains a magic number: if (ch == '*') {  	NextCh ();  	for (; ;) {  		if (ch == '*') {  			NextCh ();  			if (ch == '/') {  				level--;  				if (level == 0) {  					oldEols = line - line0;  					NextCh ();  					return true;  				}  				NextCh ();  			}  		} else if (ch == EOF)  			return false;  		else  			NextCh ();  	}  } else {  	if (ch == EOL) {  		line--;  		lineStart = lineStart0;  	}  	pos = pos - 2;  	buffer.Pos = pos + 1;  	NextCh ();  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Comment0,The following statement contains a magic number: pos = pos - 2;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 2;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '>') {  	buf.Append (ch);  	NextCh ();  	goto case 5;  } else {  	t.kind = noSym;  	goto done;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: goto case 5;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 4;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 5;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 6;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 7;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  	buf.Append (ch);  	NextCh ();  	goto case 9;  } else {  	t.kind = 8;  	goto done;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  	buf.Append (ch);  	NextCh ();  	goto case 9;  } else {  	t.kind = 8;  	goto done;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  	buf.Append (ch);  	NextCh ();  	goto case 9;  } else {  	t.kind = 8;  	goto done;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: goto case 9;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 8;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 9;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 10;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  	buf.Append (ch);  	NextCh ();  	goto case 13;  } else {  	t.kind = noSym;  	goto done;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: goto case 13;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  	buf.Append (ch);  	NextCh ();  	goto case 13;  } else {  	t.kind = 17;  	goto done;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  	buf.Append (ch);  	NextCh ();  	goto case 13;  } else {  	t.kind = 17;  	goto done;  }  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: goto case 13;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 17;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 11;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 12;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 13;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 14;  
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 15;  
Magic Number,NxBRE.InferenceEngine.Rules,AtomGroup,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,GetMemberSortedIndex,The following statement contains a magic number: if (runningMembers [originalIndex] is AtomFunction)  	return 3 * runningMembers.Length + originalIndex;  else if ((runningMembers [originalIndex] is Atom) && ((Atom)runningMembers [originalIndex]).Negative)  	return 2 * runningMembers.Length + originalIndex;  else if (runningMembers [originalIndex] is AtomGroup)  	return runningMembers.Length + originalIndex;  else  	return originalIndex;  
Magic Number,NxBRE.InferenceEngine.Rules,AtomGroup,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,GetMemberSortedIndex,The following statement contains a magic number: if (runningMembers [originalIndex] is AtomFunction)  	return 3 * runningMembers.Length + originalIndex;  else if ((runningMembers [originalIndex] is Atom) && ((Atom)runningMembers [originalIndex]).Negative)  	return 2 * runningMembers.Length + originalIndex;  else if (runningMembers [originalIndex] is AtomGroup)  	return runningMembers.Length + originalIndex;  else  	return originalIndex;  
Magic Number,NxBRE.InferenceEngine.Rules,AtomGroup,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,GetMemberSortedIndex,The following statement contains a magic number: return 3 * runningMembers.Length + originalIndex;  
Magic Number,NxBRE.InferenceEngine.Rules,AtomGroup,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,GetMemberSortedIndex,The following statement contains a magic number: if ((runningMembers [originalIndex] is Atom) && ((Atom)runningMembers [originalIndex]).Negative)  	return 2 * runningMembers.Length + originalIndex;  else if (runningMembers [originalIndex] is AtomGroup)  	return runningMembers.Length + originalIndex;  else  	return originalIndex;  
Magic Number,NxBRE.InferenceEngine.Rules,AtomGroup,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,GetMemberSortedIndex,The following statement contains a magic number: return 2 * runningMembers.Length + originalIndex;  
Magic Number,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GroupFinal,The following statement contains a magic number: if (arguments.Length < 2)  	return arguments;  
Magic Number,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GroupFinal,The following statement contains a magic number: for (int i = arguments.Length - 2; i >= 0; i--) {  	if ((arguments [i] != null) && (arguments [i + 1] != null) && (arguments [i].GetType () == arguments [i + 1].GetType ())) {  		posLastSame = i;  	} else {  		break;  	}  }  
Magic Number,NxBRE.Util,Parameter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GroupFinal,The following statement contains a magic number: if ((numberToGroup) < 2)  	return arguments;  
Magic Number,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,PrepareExpression,The following statement contains a magic number: if (expression.StartsWith ("expr:"))  	return expression.Substring (5);  else  	return expression;  
Magic Number,NxBRE.Util,Compilation,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,PrepareExpression,The following statement contains a magic number: return expression.Substring (5);  
Magic Number,NxBRE.Util,HashCodeBuilder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\HashCodeBuilder.cs,HashCodeBuilder,The following statement contains a magic number: hashCode = 17;  
Magic Number,NxBRE.Util,HashCodeBuilder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\HashCodeBuilder.cs,Append,The following statement contains a magic number: if (o != null)  	hashCode = unchecked(37 * hashCode + o.GetHashCode ());  
Magic Number,NxBRE.Util,HashCodeBuilder,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\Util\HashCodeBuilder.cs,Append,The following statement contains a magic number: hashCode = unchecked(37 * hashCode + o.GetHashCode ());  
Magic Number,NxBRE.InferenceEngine.Registry,FileRegistryConfiguration,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistryConfiguration.cs,FileRegistryConfiguration,The following statement contains a magic number: this.fileLockedPonderatingTimeField = 500;  
Missing Default,NxBRE.InferenceEngine.IO,CompositeRuleBaseAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\CompositeRuleBaseAdapter.cs,GetAdaptersList,The following switch statement is missing a default case: switch (listType) {  case AdapterListType.Fact:  	return (IList<T>)adapter.Facts;  case AdapterListType.Implication:  	return (IList<T>)adapter.Implications;  case AdapterListType.Query:  	return (IList<T>)adapter.Queries;  }  
Missing Default,NxBRE.InferenceEngine.IO,CompositeRuleBaseAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\CompositeRuleBaseAdapter.cs,GetAdaptersList,The following switch statement is missing a default case: switch (listType) {  case AdapterListType.Retraction:  	return (IList<T>)extendedAdapter.Retractions;  case AdapterListType.IntegrityQuery:  	return (IList<T>)extendedAdapter.IntegrityQueries;  case AdapterListType.Equivalent:  	return (IList<T>)extendedAdapter.Equivalents;  case AdapterListType.Assertion:  	return (IList<T>)extendedAdapter.Assertions;  }  
Missing Default,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The following switch statement is missing a default case: switch (((AtomFunction)atom).ResolutionType) {  case AtomFunction.RelationResolutionType.Binder:  	rel.SetAttribute ("uri"' "nxbre://binder");  	break;  case AtomFunction.RelationResolutionType.NxBRE:  	rel.SetAttribute ("uri"' "nxbre://operator");  	break;  case AtomFunction.RelationResolutionType.Expression:  	rel.SetAttribute ("uri"' "nxbre://expression");  	break;  }  
Missing Default,NxBRE.InferenceEngine.IO.Hrf086,Scanner,F:\newReposMay17\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following switch statement is missing a default case: switch (state) {  case -1: {  	t.kind = eofSym;  	goto done;  }  // NextCh already done /* pdt */  case 0: {  	t.kind = noSym;  	goto done;  }  // NextCh already done  case 1: {  	t.kind = 1;  	goto done;  }  case 2: {  	t.kind = 2;  	goto done;  }  case 3: {  	t.kind = 3;  	goto done;  }  case 4:  	if (ch == '>') {  		buf.Append (ch);  		NextCh ();  		goto case 5;  	} else {  		t.kind = noSym;  		goto done;  	}  case 5: {  	t.kind = 4;  	goto done;  }  case 6: {  	t.kind = 5;  	goto done;  }  case 7: {  	t.kind = 6;  	goto done;  }  case 8: {  	t.kind = 7;  	goto done;  }  case 9:  	if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 9;  	} else {  		t.kind = 8;  		goto done;  	}  case 10: {  	t.kind = 9;  	goto done;  }  case 11: {  	t.kind = 10;  	goto done;  }  case 12:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = noSym;  		goto done;  	}  case 13:  	if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {  		buf.Append (ch);  		NextCh ();  		goto case 13;  	} else {  		t.kind = 17;  		goto done;  	}  case 14: {  	t.kind = 11;  	goto done;  }  case 15: {  	t.kind = 12;  	goto done;  }  case 16: {  	t.kind = 13;  	goto done;  }  case 17: {  	t.kind = 14;  	goto done;  }  case 18: {  	t.kind = 15;  	goto done;  }  }  
