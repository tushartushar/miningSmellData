Implementation smell,Namespace,Class,File,Method,Description
Long Method,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessXML,The method has 125 lines of code.
Long Method,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The method has 133 lines of code.
Long Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,BuildPredicate,The method has 102 lines of code.
Long Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The method has 125 lines of code.
Long Method,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,FromClr,The method has 105 lines of code.
Complex Method,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,Cyclomatic complexity of the method is 13
Complex Method,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,LoadFactories,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessXML,Cyclomatic complexity of the method is 27
Complex Method,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessConditionNode,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.InferenceEngine.Core,Agenda,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\Agenda.cs,Schedule,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Assert,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Populate,Cyclomatic complexity of the method is 12
Complex Method,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,Cyclomatic complexity of the method is 21
Complex Method,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,ProcessAnd,Cyclomatic complexity of the method is 16
Complex Method,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,ProcessOr,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.Core,MutexManager,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\MutexManager.cs,AnalyzeImplications,Cyclomatic complexity of the method is 12
Complex Method,NxBRE.InferenceEngine.Core,PreconditionManager,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\PreconditionManager.cs,AnalyzeImplications,Cyclomatic complexity of the method is 13
Complex Method,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,Cyclomatic complexity of the method is 21
Complex Method,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,Cyclomatic complexity of the method is 18
Complex Method,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,Cyclomatic complexity of the method is 31
Complex Method,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ExtractImplications,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,BuildPredicate,Cyclomatic complexity of the method is 18
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,NewAtomGroup,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,Cyclomatic complexity of the method is 18
Complex Method,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,BuildPredicate,Cyclomatic complexity of the method is 10
Complex Method,NxBRE.InferenceEngine.IO,RuleML091NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML091NafDatalogAdapter.cs,BuildDomRulebase,Cyclomatic complexity of the method is 11
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,Cyclomatic complexity of the method is 21
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,Cyclomatic complexity of the method is 13
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Comment0,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,Cyclomatic complexity of the method is 26
Complex Method,NxBRE.InferenceEngine.Rules,Implication,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,Cyclomatic complexity of the method is 12
Complex Method,NxBRE.InferenceEngine.Rules,Atom,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,Atom,Cyclomatic complexity of the method is 8
Complex Method,NxBRE.InferenceEngine.Rules,Atom,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,PredicatesMatch,Cyclomatic complexity of the method is 11
Complex Method,NxBRE.InferenceEngine.Rules,Atom,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,IsIntersecting,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.InferenceEngine.Rules,AtomGroup,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,AtomGroup,Cyclomatic complexity of the method is 13
Complex Method,NxBRE.Util,Reflection,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,Call,Cyclomatic complexity of the method is 17
Complex Method,NxBRE.Util,Reflection,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,CallMethodWithByRefParametersOrThrow,Cyclomatic complexity of the method is 9
Complex Method,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,GetSchemaTypeFromClr,Cyclomatic complexity of the method is 19
Complex Method,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,FromClr,Cyclomatic complexity of the method is 28
Complex Method,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,ToClr,Cyclomatic complexity of the method is 21
Complex Method,NxBRE.Util,Compilation,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,LoadClass,Cyclomatic complexity of the method is 11
Complex Method,NxBRE.InferenceEngine.Registry,CachedEngine,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,LoadRules,Cyclomatic complexity of the method is 14
Long Parameter List,NxBRE.FlowEngine.Core,AbstractBRERuleMetaData,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\AbstractBRERuleMetaData.cs,AbstractBRERuleMetaData,The method has 5 parameters. Parameters: aId' aFactory' aParams' aStackLoc' aStep
Long Parameter List,NxBRE.FlowEngine.Core,BRERuleMetaDataImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\BRERuleMetaDataImpl.cs,BRERuleMetaDataImpl,The method has 5 parameters. Parameters: aId' aFactory' aParams' aStackLoc' aStep
Long Parameter List,NxBRE.InferenceEngine.Core,FactEnumeratorFactory,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,NewFactListPredicateMatchingEnumerator,The method has 5 parameters. Parameters: factList' filter' strictTyping' ignoredPredicates' excludedFacts
Long Parameter List,NxBRE.InferenceEngine.Core,FactListPredicateMatchingEnumerator,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,FactListPredicateMatchingEnumerator,The method has 5 parameters. Parameters: factList' filter' strictTyping' ignoredPredicates' excludedFacts
Long Parameter List,NxBRE.InferenceEngine.IO,ImplicationProperties,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ImplicationProperties,The method has 5 parameters. Parameters: label' priority' mutex' precondition' action
Long Parameter List,NxBRE.InferenceEngine.IO,ImplicationProperties,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ImplicationProperties,The method has 5 parameters. Parameters: label' priority' mutex' precondition' action
Long Parameter List,NxBRE.InferenceEngine.IO,FEBErrorListener,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,NxBRE.InferenceEngine.IO,FEBErrorListener,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,NxBRE.InferenceEngine.IO,FEBErrorListener,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,NxBRE.InferenceEngine.IO,FEBErrorListener,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,NxBRE.InferenceEngine.IO,RuleML091NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML091NafDatalogAdapter.cs,BuildDomRulebase,The method has 5 parameters. Parameters: facts' queries' implications' equivalents' integrityQueries
Long Parameter List,NxBRE.InferenceEngine.IO,AccumulatingExtendedRuleBaseAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AccumulatingExtendedRuleBaseAdapter.cs,BuildDomRulebase,The method has 5 parameters. Parameters: facts' queries' implications' equivalents' integrityQueries
Long Parameter List,NxBRE.InferenceEngine.Rules,Function,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Function.cs,Function,The method has 5 parameters. Parameters: resolutionType' predicate' bob' name' arguments
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 6 parameters. Parameters: label' priority' mutex' precondition' deduction' atomGroup
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 7 parameters. Parameters: label' priority' mutex' precondition' deduction' atomGroup' action
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 6 parameters. Parameters: label' priority' mutex' precondition' deduction' atomGroup
Long Parameter List,NxBRE.InferenceEngine.Rules,Implication,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Implication.cs,Implication,The method has 7 parameters. Parameters: label' priority' mutex' precondition' deduction' atomGroup' action
Long Parameter List,NxBRE.InferenceEngine.Rules,AtomFunction,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomFunction.cs,AtomFunction,The method has 5 parameters. Parameters: resolutionType' negative' bob' type' members
Long Parameter List,NxBRE.InferenceEngine.Rules,AtomFunction,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomFunction.cs,AtomFunction,The method has 6 parameters. Parameters: resolutionType' negative' bob' type' members' functionSignature
Long Parameter List,NxBRE.Util,Reflection,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,CallMethodWithByRefParametersOrThrow,The method has 5 parameters. Parameters: type' target' methodName' args' te
Long Identifier,NxBRE.InferenceEngine.Rules,Formula,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Formula.cs,,The length of the parameter DEFAULT_EXPRESSION_PLACEHOLDER is 30.
Long Identifier,NxBRE.InferenceEngine.Rules,Formula,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Formula.cs,,The length of the parameter DEFAULT_NUMERIC_ARGUMENT_PATTERN is 32.
Long Identifier,NxBRE.Util,Parameter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,ParseOperatorCall,The length of the parameter indexOfFirstOpeningParenthesis is 30.
Long Identifier,NxBRE.InferenceEngine.Registry,CachedEngine,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,LoadRules,The length of the parameter visualBasicBinderConfiguration is 30.
Long Identifier,NxBRE.InferenceEngine.Registry,FileRegistryConfiguration,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistryConfiguration.cs,,The length of the parameter fileLockedPonderatingTimeField is 30.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,The length of the statement  "				if (Logger.IsFlowEngineError) Logger.FlowEngineSource.TraceEvent(TraceEventType.Error' 0' "BRE already running: a violent Stop will be tried!"); " is 144.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,The length of the statement  "				if (Logger.IsInferenceEngineInformation) Logger.FlowEngineSource.TraceEvent(TraceEventType.Information' 0' "BRE Starting..."); " is 126.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,The length of the statement  "				if (Logger.IsFlowEngineCritical) Logger.FlowEngineSource.TraceEvent(TraceEventType.Critical' 0' "Business Rules provided by external entity\nObject passed to init() must not be Null"); " is 184.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,The length of the statement  "				if (Logger.IsFlowEngineCritical) Logger.FlowEngineSource.TraceEvent(TraceEventType.Critical' 0' "Business Rules provided by external entity\nObject passed to init() must be of type System.Xml.XPath.XPathDocument or NxBRE.FlowEngine.IO.IRulesDriver and not " + aObj.GetType()); " is 276.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoInit,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.FlowEngineSource.TraceEvent(TraceEventType.Information' 0' "BRE Initializing..."); " is 130.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,Reset,The length of the statement  "				if (Logger.IsFlowEngineError) Logger.FlowEngineSource.TraceEvent(TraceEventType.Error' 0' "BRE already running: a violent Stop will be tried!"); " is 144.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,Reset,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.FlowEngineSource.TraceEvent(TraceEventType.Information' 0' "BRE has been reset."); " is 130.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,LoadFactories,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.FlowEngineSource.TraceEvent(TraceEventType.Information' 0' "BRE Loading RuleFactories..."); " is 139.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,LoadFactories,The length of the statement  "							if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Found Factory: " + factory + " Id: " + id); " is 138.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,LoadFactories,The length of the statement  "							if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loading Factory: " + id); " is 120.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,LoadFactories,The length of the statement  "								if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "BRE RuleFactory " + id + " loaded and added to RuleContext"); " is 156.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessXML,The length of the statement  "			if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Element Node: " + nodeName); " is 123.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,GetOperator,The length of the statement  "				if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loading Operator: " + operatorId); " is 129.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "					if (Logger.IsFlowEngineError) Logger.FlowEngineSource.TraceEvent(TraceEventType.Error' 0' "RuleResult " + leftId + " not found in RuleContext"); " is 144.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "					if (Logger.IsFlowEngineError) Logger.FlowEngineSource.TraceEvent(TraceEventType.Error' 0' "RuleResult " + rightId + " not found in RuleContext"); " is 145.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "					if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Retrieved results for comparison"); " is 130.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "						if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "BREOperator " + operatorId + " executing"); " is 138.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "				if (Logger.IsFlowEngineCritical) Logger.FlowEngineSource.TraceData(TraceEventType.Critical' 0' new BREException("Operator could not be loaded from BRERuleContext")); " is 165.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessCompareNode,The length of the statement  "			if (Logger.IsFlowEngineVerbose) Logger.FlowEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Compare result: " + resultBool); " is 127.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessInvokeSetNode,The length of the statement  "				if (Logger.IsFlowEngineCritical) Logger.FlowEngineSource.TraceData(TraceEventType.Critical' 0' new BREException("Can not invoke a set with no Id: " + aNode.OuterXml)); " is 167.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,ProcessInvokeSetNode,The length of the statement  "				if (Logger.IsFlowEngineCritical) Logger.FlowEngineSource.TraceData(TraceEventType.Critical' 0' new BREException("Error when invoking set Id: " + id)); " is 150.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoRule,The length of the statement  "					if (Logger.IsFlowEngineError) Logger.FlowEngineSource.TraceData(TraceEventType.Error' 0' new BREException("Factory Id " + id + " defined' but not found in RuleContext")); " is 170.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoRule,The length of the statement  "				if (Logger.IsFlowEngineCritical) Logger.FlowEngineSource.TraceData(TraceEventType.Critical' 0' new BREException("Object in RuleContext not of correct type. " + cce.ToString())); " is 177.
Long Statement,NxBRE.FlowEngine,BREImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\BREImpl.cs,DoRule,The length of the statement  "				if (Logger.IsFlowEngineError) Logger.FlowEngineSource.TraceData(TraceEventType.Error' 0' new BREException("Error when processing RuleFactory id: " + id' e)); " is 157.
Long Statement,NxBRE.FlowEngine.Core,BackwardChainer,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\BackwardChainer.cs,ValidateXmlDocumentRules,The length of the statement  "			if (flowEngine.XmlDocumentRules.CreateNavigator().Select("//Rule[not(ancestor::Set) and not(starts-with(@id''#'))] | //Retract[not(ancestor::Set)]").Count != 0) { " is 162.
Long Statement,NxBRE.FlowEngine.Core,AbstractBRERuleResult,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Core\AbstractBRERuleResult.cs,ToString,The length of the statement  "			if (result != null) sb.Append("Result Type: ").Append(result.GetType().FullName).Append("\nResult Str : ").Append(result.ToString()).Append("\n"); " is 146.
Long Statement,NxBRE.FlowEngine.IO,XSLTRulesFileDriver,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\IO\XSLTRulesFileDriver.cs,GetXSLT,The length of the statement  "				if (Logger.IsFlowEngineInformation) Logger.FlowEngineSource.TraceEvent(TraceEventType.Information' 0' "XSLTRulesFileDriver loading " + xslFileURI); " is 147.
Long Statement,NxBRE.FlowEngine.IO,XSLTRulesFileDriver,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\IO\XSLTRulesFileDriver.cs,GetReader,The length of the statement  "			if (Logger.IsFlowEngineInformation) Logger.FlowEngineSource.TraceEvent(TraceEventType.Information' 0' "XSLTRulesFileDriver loading " + xmlSource); " is 146.
Long Statement,NxBRE.FlowEngine.IO,BusinessRulesFileDriver,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\IO\BusinessRulesFileDriver.cs,GetReader,The length of the statement  "			if (Logger.IsFlowEngineInformation) Logger.FlowEngineSource.TraceEvent(TraceEventType.Information' 0' "BusinessRulesFileDriver loading " + xmlSource); " is 150.
Long Statement,NxBRE.FlowEngine.Rules,Exception,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Rules\Exception.cs,ExecuteRule,The length of the statement  "			if (Logger.IsFlowEngineRuleBaseError) Logger.FlowEngineRuleBaseSource.TraceData(TraceEventType.Error' 0' breRuleException); " is 123.
Long Statement,NxBRE.FlowEngine.Rules,FatalException,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\FlowEngine\Rules\FatalException.cs,ExecuteRule,The length of the statement  "			if (Logger.IsFlowEngineRuleBaseCritical) Logger.FlowEngineRuleBaseSource.TraceData(TraceEventType.Critical' 0' breRuleFatalException); " is 134.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Assert,The length of the statement  "					if ((!strictTyping) && (!(individualValue is string))) StoreFactForIndividualValue(fact' position' individualValue.ToString()); " is 127.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "			// if the predicate map does not contain an entry for the filter signature or if this entry is empty' return empty result " is 121.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "No fact matching signature: " + filter.Signature); " is 155.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Filter with no Ind or Fun -> Return all facts matching signature: " + filter.Signature); " is 193.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "						if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "No match -> Return no fact"); " is 134.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "One member filter and got resultList -> Return facts immediatly"); " is 171.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Select,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "No resultList -> Used the list matching the signature' which contains: " + resultList.Count); " is 198.
Long Statement,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,ProcessAtom,The length of the statement  "				if (((AtomFunction)atomToRun).PositiveRelation != atomToRun.Negative) return FactEnumeratorFactory.NewSingleFactEnumerator(NAF); " is 128.
Long Statement,NxBRE.InferenceEngine.Core,RulesUtil,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\RulesUtil.cs,GetAll,The length of the statement  "				foreach(Equivalent equivalentPair in equivalentPairs) GetAll(equivalentPairs' equivalentPair.Get(atom)' equivalentAtoms); " is 121.
Long Statement,NxBRE.InferenceEngine.Core,FactEnumeratorFactory,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,NewSingleFactEnumerator,The length of the statement  "			if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "NewSingleFactEnumerator: " + fact); " is 140.
Long Statement,NxBRE.InferenceEngine.Core,FactEnumeratorFactory,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,NewFactListExcludingEnumerator,The length of the statement  "			if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "NewFactListExcludingEnumerator: factList.Count=" + factList.Count + " - excludedFacts.Count=" + (excludedFacts != null?excludedFacts.Count:0)); " is 248.
Long Statement,NxBRE.InferenceEngine.Core,FactEnumeratorFactory,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,NewFactListPredicateMatchingEnumerator,The length of the statement  "			if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "NewFactListPredicateMatchingEnumerator: factList.Count=" + factList.Count + " - filter=" + filter + " - strictTyping=" + strictTyping + " - ignoredPredicates=" + Misc.IListToString((System.Collections.IList)ignoredPredicates) + " - excludedFacts.Count=" + (excludedFacts != null?excludedFacts.Count:0)); " is 408.
Long Statement,NxBRE.InferenceEngine.Core,FactListPredicateMatchingEnumerator,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactEnumeratorFactory.cs,MoveNext,The length of the statement  "					if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "FactListPredicateMatchingEnumerator.MoveNext: currentFact=" + currentFact + " -> " + currentFact.PredicatesMatch(filter' strictTyping' ignoredPredicates)); " is 260.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Loading Started' using adapter " + adapter.GetType().FullName); " is 209.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "					if (Logger.IsInferenceEngineWarning) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Warning' 0' "NxBRE interprets no-direction directive as forward chaining."); " is 168.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "					if (Logger.IsInferenceEngineWarning) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Warning' 0' "NxBRE interprets bidirectional as forward chaining."); " is 159.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "					if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loaded " + equivalents.Count + " Equivalents"); " is 152.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "					if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loaded " + integrityQueries.Count + " IntegrityQueries"); " is 162.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loaded " + QB.Count + " Queries"); " is 139.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loaded " + IB.Count + " Implications\n"); " is 146.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loaded Mutexes\n" + mm.ToString()); " is 140.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loaded Preconditions\n" + pm.ToString()); " is 146.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Loaded " + WM.FB.Count + " Facts"); " is 140.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadRuleBase,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Loading Finished"); " is 165.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveRuleBase,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Saving Started' using adapter " + adapter.GetType().FullName); " is 208.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveRuleBase,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Rule Base Saving Finished"); " is 164.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadFacts,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Facts Loading Started' using adapter " + adapter.GetType().FullName); " is 205.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadFacts,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Added " + (WM.FB.Count - initialFactsCount) + " new Facts"); " is 165.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,LoadFacts,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Facts Loading Finished"); " is 161.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveFacts,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Facts Saving Started' using adapter " + adapter.GetType().FullName); " is 204.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,SaveFacts,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Facts Saving Finished"); " is 160.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,Process,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE v" + Reflection.NXBRE_VERSION + " Inference Engine Processing Started"); " is 191.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,Process,The length of the statement  "			if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Processing: " + (businessObjects==null?"null":businessObjects.Count.ToString()) + " business objects and rules of type: " + ruleType); " is 239.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,Process,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Processing Finished"); " is 158.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessPerfomatives,The length of the statement  "			if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Processing performatives: " + (performativeAssertions==null?"null":performativeAssertions.Count.ToString())); " is 214.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The length of the statement  "			if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Processing connectives"); " is 130.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The length of the statement  "				if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Binder 'BeforeProcess' Done in " + " is 153.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The length of the statement  "					if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Binder 'AfterProcess' Done in " + " is 152.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,ProcessConnectives,The length of the statement  "				if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Binder 'ControlProcess' Done in " + " is 154.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "						if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Mutexed: " + firedImplication.Label); " is 142.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "						if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Negative Precondition: "+firedImplication.Label); " is 154.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "						if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Fired Implication: " + " is 127.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "			if (Logger.IsInferenceEngineInformation) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Execution Time: " + " is 155.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The length of the statement  "			if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "(Finishing) " + " is 120.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Counting Implication '" + implication.Label + "' counted: " + processResults.Count); " is 189.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "					throw new BREException("Strict counting implication rejected the assertion due to lack of variable predicate: " + implication.Deduction); " is 137.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "					Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' (result?"Asserted":"Ignored Assertion of ") + " Fact: " + deductedFact.ToString()); " is 150.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "								Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' (result?"Retracted":"Ignored Retraction of ") + " Fact: " + deductedFact.ToString()); " is 152.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "								Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' (result?"Asserted":"Ignored Assertion of ") + " Fact: " + deductedFact.ToString()); " is 150.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "				  if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "Modifying Implication '" + implication.Label + "' will target matches of: " + modificationTargetLookup); " is 209.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "				 	foreach(Fact factToModify in FactBase.ExtractAllFacts(WM.FB.ProcessAtomGroup(new AtomGroup(AtomGroup.LogicalOperator.And' modificationTargetLookup)))) { " is 152.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "					  if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "-> found target: " + factToModify); " is 140.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "					  if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "-> modified target: " + deductedFact); " is 143.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "								Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' (result?"Modified":"Ignored Modification of ") + " Fact: " + factToModify.ToString()); " is 153.
Long Statement,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,RunImplication,The length of the statement  "				if (Logger.IsInferenceEngineVerbose) Logger.InferenceEngineSource.TraceEvent(TraceEventType.Verbose' 0' "No Action Implication '" + implication.Label + "' matched: " + processResults.Count); " is 190.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ExtractImplications,The length of the statement  "				if (head_atom.Count != 1) throw new BREException("Found " + head_atom.Count + " head atoms in implication '" + query.Label + "'"); " is 130.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,GetAtomGroupContent,The length of the statement  "					result.Add(NewAtomGroup(AtomGroup.LogicalOperator.And' GetAtomGroupContent(currentBodyAtom.SelectChildren(XPathNodeType.Element)))); " is 132.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,GetAtomGroupContent,The length of the statement  "					result.Add(NewAtomGroup(AtomGroup.LogicalOperator.Or' GetAtomGroupContent(currentBodyAtom.SelectChildren(XPathNodeType.Element)))); " is 131.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,GetQuery,The length of the statement  "			if (content.Length != 1) throw new BREException("Found unexpected query '" + label + "' body of size " + content.Length); " is 121.
Long Statement,NxBRE.InferenceEngine.IO,AbstractRuleMLAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,WriteAtomGroup,The length of the statement  "				XmlElement op = Document.CreateElement((atomGroup.Operator == AtomGroup.LogicalOperator.And)?andElement:orElement' DatalogNamespaceURL); " is 136.
Long Statement,NxBRE.InferenceEngine.IO,FlowEngineBinder,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,EvaluateFERIOperator,The length of the statement  "			if (functionName.ToLower().StartsWith("nxbre:")) operatorType += functionName.Substring(6).Split(Parameter.PARENTHESIS)[0]; " is 123.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,ValidateRulebase,The length of the statement  "			string[] notSupportedElements = new string[] {"declare"' "slot[local-name(*[1]) != 'Ind']"' "Exists"' "Forall"' "Reify"' "Skolem"' "Protect[not(dl:Integrity | dl:warden)]"' "*[@type]"}; " is 185.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,SetAttributes,The length of the statement  "			if ((syntax != SaveFormatAttributes.Compact) && (syntax != SaveFormatAttributes.Standard) && (syntax != SaveFormatAttributes.Expanded)) " is 135.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,The length of the statement  "				XPathNodeIterator directionAttributes = Navigator.Select(BuildXPathExpression("//dl:*/@direction|//dl:*/@mapDirection")); " is 121.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,The length of the statement  "					if (equivalentAtoms.Count != 2) throw new BREException("An Equivalent group should contain exactly 2 atoms and not " + equivalentAtoms.Count); " is 142.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The length of the statement  "						if ((forceDataTyping) && (!(pre.Value is string)) && ((sourceType == null) || (sourceType == String.Empty))) sourceType = Xml.GetSchemaTypeFromClr(pre.Value); " is 158.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The length of the statement  "					predicate.SetAttribute("uri"' (function.ResolutionType == Function.FunctionResolutionType.NxBRE)?"nxbre://operator":(IsExpressionBinder(function.Binder)?"nxbre://expression":"nxbre://binder")); " is 193.
Long Statement,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteMapElement,The length of the statement  "			if ((Direction != null) && (Direction != String.Empty) && (Direction != "bidirectional")) element.SetAttribute("mapDirection"' Direction); " is 138.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,WriteAtom,The length of the statement  "					if (predicateValue is IConvertible) predicate.InnerText = "expr:System.Convert.To" + predicateValue.GetType().Name + "(\"" + predicateValue.ToString() + "\")"; " is 159.
Long Statement,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,WriteAtom,The length of the statement  "					else throw new BREException(predicateValue.GetType().FullName + " is not IConvertible hence can not be persisted as a typed fact: " + atom); " is 140.
Long Statement,NxBRE.InferenceEngine.IO,RuleML091NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML091NafDatalogAdapter.cs,WriteIntegrityQuery,The length of the statement  "			WriteImplication(target' new Implication(query.Label' ImplicationPriority.Medium' String.Empty' String.Empty' IGNORED_DEDUCTION' query.AtomGroup)); " is 147.
Long Statement,NxBRE.InferenceEngine.IO,AccumulatingExtendedRuleBaseAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AccumulatingExtendedRuleBaseAdapter.cs,Dispose,The length of the statement  "				BuildDomRulebase(accumulatedFactsAssertions' accumulatedQueries' accumulatedImplications' accumulatedEquivalents' accumulatedIntegrityQueries); " is 143.
Long Statement,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,Rules,The length of the statement  "			sw.Write("<rulebase xmlns=\"http://www.ruleml.org/0.86/xsd\" xsi:schemaLocation=\"http://www.ruleml.org/0.86/xsd ruleml-0_86-nafdatalog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""); " is 200.
Long Statement,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The length of the statement  "					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;} " is 173.
Long Statement,NxBRE.InferenceEngine.Rules,Atom,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\Atom.cs,GetPredicate,The length of the statement  "			if ((slotName == null) || (slotName == String.Empty)) throw new ArgumentException("The name of a slot can not be null or empty"); " is 129.
Long Statement,NxBRE.InferenceEngine.Rules,AtomGroup,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,GetMemberSortedIndex,The length of the statement  "			else if ((runningMembers[originalIndex] is Atom) && ((Atom)runningMembers[originalIndex]).Negative) return 2 * runningMembers.Length + originalIndex; " is 149.
Long Statement,NxBRE.Util,Parameter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GetEmbeddedResourceStream,The length of the statement  "			if (Logger.IsUtilVerbose) Logger.UtilSource.TraceEvent(TraceEventType.Verbose' 0' "Fetching resource '" + fullResourceName + "' from assembly manifest"); " is 153.
Long Statement,NxBRE.Util,Parameter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,ParseOperatorCall,The length of the statement  "			string operatorArgument = source.Substring(indexOfFirstOpeningParenthesis + 1' indexOfLastClosingParenthesis - indexOfFirstOpeningParenthesis -1); " is 146.
Long Statement,NxBRE.Util,PseudoCodeRenderer,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\PseudoCodeRenderer.cs,Render,The length of the statement  "			XmlReader reader = Xml.NewValidatingReader(new XmlTextReader(ruleFileURI)' ValidationType.Schema' "xBusinessRules.xsd"); " is 120.
Long Statement,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,GetCachedCompiledTransform,The length of the statement  "					if (Logger.IsUtilVerbose) Logger.UtilSource.TraceEvent(TraceEventType.Verbose' 0' "XslCompiledTransform cache miss for: " + xslResourceName); " is 141.
Long Statement,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,GetCachedCompiledTransform,The length of the statement  "					if (Logger.IsUtilVerbose) Logger.UtilSource.TraceEvent(TraceEventType.Verbose' 0' "XslCompiledTransform cache hit for: " + xslResourceName); " is 140.
Long Statement,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,NewValidatingReader,The length of the statement  "			if (Logger.IsUtilVerbose) Logger.UtilSource.TraceEvent(TraceEventType.Verbose' 0' "Instantiating new validating reader with validation: " + validationType + " and XSDs " + Misc.ArrayToString(xsdResourceName)); " is 209.
Long Statement,NxBRE.Util,Xml,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Xml.cs,NewValidatingReader,The length of the statement  "				throw new BREException("Validation type should be DTD' Schema or None. If Schema' a schema resource name must be passed."); " is 123.
Long Statement,NxBRE.Util,Compilation,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,NewEvaluator,The length of the statement  "			string code = "class Evaluator:NxBRE.Util.IListEvaluator { " + SecurityAttribute + " public object Run(System.Collections.IList values) {return (" " is 146.
Long Statement,NxBRE.Util,Compilation,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,NewEvaluator,The length of the statement  "										+ Regex.Replace(PrepareExpression(expression)' placeHolderRegexpPattern' new MatchEvaluator(new ListVariableReplacer(variableNames' values).ReplaceListVariable)) " is 161.
Long Statement,NxBRE.Util,Compilation,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,NewEvaluator,The length of the statement  "			string code = "class Evaluator:NxBRE.Util.IDictionaryEvaluator { " + SecurityAttribute + " public object Run(System.Collections.IDictionary values) {return (" " is 158.
Long Statement,NxBRE.Util,Compilation,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,NewEvaluator,The length of the statement  "				+ Regex.Replace(PrepareExpression(expression)' placeHolderRegexpPattern' new MatchEvaluator(new DictionaryVariableReplacer(arguments' numericArgumentPattern).ReplaceDictionaryVariable)) " is 185.
Long Statement,NxBRE.Util,ListVariableReplacer,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,ReplaceListVariable,The length of the statement  "				if (variableIndex >= values.Count) throw new BREException("Not enough values to resolve expression: missing index " + variableIndex); " is 133.
Long Statement,NxBRE.Util,DictionaryVariableReplacer,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,ReplaceDictionaryVariable,The length of the statement  "					if (!arguments.Contains(variableName)) throw new BREException("Not enough arguments to resolve expression: missing " + variableName); " is 133.
Long Statement,NxBRE.Util,DictionaryVariableReplacer,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,ReplaceDictionaryVariable,The length of the statement  "					if (!arguments.Contains(variableName)) throw new BREException("Not enough arguments to resolve expression: missing '" + variableName + "'"); " is 140.
Long Statement,NxBRE.InferenceEngine.Registry,CachedEngine,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,LoadRules,The length of the statement  "						VisualBasicBinderConfiguration visualBasicBinderConfiguration = (VisualBasicBinderConfiguration)engineConfiguration.Binder; " is 123.
Long Statement,NxBRE.InferenceEngine.Registry,CachedEngine,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,LoadRules,The length of the statement  "						NxBRE.InferenceEngine.Registry.FlowEngineBinderConfiguration flowEngineBinderConfiguration = (NxBRE.InferenceEngine.Registry.FlowEngineBinderConfiguration)engineConfiguration.Binder; " is 182.
Long Statement,NxBRE.InferenceEngine.Registry,CachedEngine,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,LoadRules,The length of the statement  "						                    new NxBRE.InferenceEngine.IO.FlowEngineBinder(configurationFolder + Path.DirectorySeparatorChar + binderFile' flowEngineBinderConfiguration.Type)); " is 147.
Long Statement,NxBRE.InferenceEngine.Registry,CachedEngine,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,LoadRules,The length of the statement  "						throw new BREException("Unexpected type of binder object in registry configuration: " + engineConfiguration.Binder.GetType().FullName); " is 135.
Complex Conditional,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,Modify,The conditional expression  "(currentFact.Label != null) && (currentFact.Label != String.Empty)  					    && ((newFact.Label == null) || (newFact.Label == String.Empty))"  is complex.
Complex Conditional,NxBRE.InferenceEngine.Core,RulesUtil,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\RulesUtil.cs,Resolve,The conditional expression  "(atom.Members[i] is Function)  						|| ((fully) && (atom.Members[i] is Individual) && (!(factToResolve.Members[i].Value is System.String)))"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO,ImplicationProperties,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ImplicationProperties,The conditional expression  "(this.priority != -1) ||  					    (this.mutex != String.Empty) ||  					    (this.precondition != String.Empty) ||  					    (this.action != String.Empty)"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO,ImplicationProperties,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractRuleMLAdapter.cs,ToString,The conditional expression  "(priority != (int)ImplicationPriority.Medium) ||  				    (mutex != String.Empty) ||  				    (precondition != String.Empty) ||  				    (action != String.Empty)"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The conditional expression  "(forceDataTyping) && (!(pre.Value is string)) && ((sourceType == null) || (sourceType == String.Empty))"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The conditional expression  "(ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The conditional expression  "(ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')"  is complex.
Complex Conditional,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The conditional expression  "(ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')"  is complex.
Virtual Method Call from Constructor,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,RuleML086NafDatalogAdapter,The constructor "RuleML086NafDatalogAdapter" calls a virtual method "Init".
Virtual Method Call from Constructor,NxBRE.InferenceEngine.IO,RuleML086NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML086NafDatalogAdapter.cs,RuleML086NafDatalogAdapter,The constructor "RuleML086NafDatalogAdapter" calls a virtual method "Init".
Empty Catch Block,NxBRE.Util,Reflection,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Reflection.cs,Call,The method has an empty catch block.
Magic Number,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,FilterDistinct,The following statement contains a magic number: long rowLongHashCode = 17;
Magic Number,NxBRE.InferenceEngine.Core,FactBase,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Core\FactBase.cs,FilterDistinct,The following statement contains a magic number: rowLongHashCode = unchecked(37L * rowLongHashCode + pmr.Fact.GetHashCode());
Magic Number,NxBRE.InferenceEngine,IEImpl,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IEImpl.cs,InferUntilNoNewFact,The following statement contains a magic number: Logger.InferenceEngineSource.TraceEvent(TraceEventType.Information' 0' "NxBRE Inference Engine Execution Time: " +  																									            (long)(DateTime.Now.Ticks - iniTime)/10000 +  																									            " milliseconds");
Magic Number,NxBRE.InferenceEngine.IO,AbstractBinder,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\AbstractBinder.cs,AnalyzeIndividualPredicate,The following statement contains a magic number: m.Groups[2].Captures
Magic Number,NxBRE.InferenceEngine.IO,FlowEngineBinder,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,EvaluateFERIOperator,The following statement contains a magic number: values.Length != 2
Magic Number,NxBRE.InferenceEngine.IO,FlowEngineBinder,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\FlowEngineBinder.cs,EvaluateFERIOperator,The following statement contains a magic number: operatorType += functionName.Substring(6).Split(Parameter.PARENTHESIS)[0];
Magic Number,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,Init,The following statement contains a magic number: equivalentAtoms.Count != 2
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Buffer,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Buffer.cs,GetString,The following statement contains a magic number: StringBuilder s = new StringBuilder(64);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Errors,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Errors.cs,SynErr,The following statement contains a magic number: switch (n) {  				case 0: s = "EOF expected"; break;  				case 1: s = "notOperator expected"; break;  				case 2: s = "andOperator expected"; break;  				case 3: s = "orOperator expected"; break;  				case 4: s = "imply expected"; break;  				case 5: s = "argsep expected"; break;  				case 6: s = "openBracket expected"; break;  				case 7: s = "closeBracket expected"; break;  				case 8: s = "tok expected"; break;  				case 9: s = "openParen expected"; break;  				case 10: s = "closeParen expected"; break;  				case 11: s = "\";\" expected"; break;  				case 12: s = "\"[\" expected"; break;  				case 13: s = "\"]\" expected"; break;  				case 14: s = "\"+\" expected"; break;  				case 15: s = "\"?\" expected"; break;  				case 16: s = "??? expected"; break;  				case 17: s = "invalid andRelation"; break;  				case 18: s = "invalid orRelation"; break;  				case 19: s = "invalid arg"; break;    				default: s = "error " + n; break;  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,Get,The following statement contains a magic number: la.kind == 17
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: la.kind == 12
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: la.kind == 4
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: StartOf(2)
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,imp,The following statement contains a magic number: Expect(11);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: Expect(12);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: la.kind == 8
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: la.kind == 11
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: la.kind == 8
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: la.kind == 5 || la.kind == 11
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: la.kind == 5 || la.kind == 11
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,header,The following statement contains a magic number: Expect(13);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: la.kind == 9
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: la.kind == 2
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,andRelation,The following statement contains a magic number: la.kind == 10
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: la.kind == 9
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: la.kind == 3
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,orRelation,The following statement contains a magic number: la.kind == 10
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: la.kind == 1 || la.kind == 14
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: Expect(6);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: SynErr(6);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: la.kind == 5
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,atom,The following statement contains a magic number: Expect(7);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,identifier,The following statement contains a magic number: Expect(8);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,identifier,The following statement contains a magic number: la.kind == 8
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Parser,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Parser.cs,arg,The following statement contains a magic number: la.kind == 15
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore[9] = true;
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore[10] = true;
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore[13] = true;
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,Init,The following statement contains a magic number: ignore[32] = true;
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: StringBuilder buf = new StringBuilder(16);
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following statement contains a magic number: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Magic Number,NxBRE.InferenceEngine.Rules,AtomGroup,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Rules\AtomGroup.cs,GetMemberSortedIndex,The following statement contains a magic number: return 3 * runningMembers.Length + originalIndex;
Magic Number,NxBRE.Util,Parameter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GroupFinal,The following statement contains a magic number: arguments.Length < 2
Magic Number,NxBRE.Util,Parameter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Parameter.cs,GroupFinal,The following statement contains a magic number: (numberToGroup) < 2
Magic Number,NxBRE.Util,Compilation,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\Compilation.cs,PrepareExpression,The following statement contains a magic number: return expression.Substring(5);
Magic Number,NxBRE.Util,HashCodeBuilder,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\HashCodeBuilder.cs,HashCodeBuilder,The following statement contains a magic number: hashCode = 17;
Magic Number,NxBRE.Util,HashCodeBuilder,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\Util\HashCodeBuilder.cs,Append,The following statement contains a magic number: hashCode = unchecked(37*hashCode + o.GetHashCode());
Magic Number,NxBRE.InferenceEngine.Registry,FileRegistryConfiguration,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistryConfiguration.cs,FileRegistryConfiguration,The following statement contains a magic number: this.fileLockedPonderatingTimeField = 500;
Missing Default,NxBRE.InferenceEngine.IO,CompositeRuleBaseAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\CompositeRuleBaseAdapter.cs,GetAdaptersList,The following switch statement is missing a default case: switch (listType)              {                  case AdapterListType.Fact:                      return (IList<T>)adapter.Facts;                  case AdapterListType.Implication:                      return (IList<T>)adapter.Implications;                  case AdapterListType.Query:                      return (IList<T>)adapter.Queries;                }
Missing Default,NxBRE.InferenceEngine.IO,CompositeRuleBaseAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\CompositeRuleBaseAdapter.cs,GetAdaptersList,The following switch statement is missing a default case: switch (listType)                  {                      case AdapterListType.Retraction:                          return (IList<T>)extendedAdapter.Retractions;                      case AdapterListType.IntegrityQuery:                          return (IList<T>)extendedAdapter.IntegrityQueries;                      case AdapterListType.Equivalent:                          return (IList<T>)extendedAdapter.Equivalents;                      case AdapterListType.Assertion:                          return (IList<T>)extendedAdapter.Assertions;                  }
Missing Default,NxBRE.InferenceEngine.IO,RuleML09NafDatalogAdapter,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\RuleML09NafDatalogAdapter.cs,WriteAtom,The following switch statement is missing a default case: switch (((AtomFunction)atom).ResolutionType) {  					case AtomFunction.RelationResolutionType.Binder:  						rel.SetAttribute("uri"' "nxbre://binder");  						break;  					  					case AtomFunction.RelationResolutionType.NxBRE:  						rel.SetAttribute("uri"' "nxbre://operator");  						break;  					  					case AtomFunction.RelationResolutionType.Expression:  						rel.SetAttribute("uri"' "nxbre://expression");  						break;  				}
Missing Default,NxBRE.InferenceEngine.IO.Hrf086,Scanner,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\IO\Hrf086\Scanner.cs,NextToken,The following switch statement is missing a default case: switch (state)   			{  				case -1: { t.kind = eofSym; goto done; } // NextCh already done /* pdt */  				case 0: { t.kind = noSym; goto done; }   // NextCh already done  				case 1:  				{t.kind = 1; goto done;}  				case 2:  				{t.kind = 2; goto done;}  				case 3:  				{t.kind = 3; goto done;}  				case 4:  					if (ch == '>') {buf.Append(ch); NextCh(); goto case 5;}  					else {t.kind = noSym; goto done;}  				case 5:  				{t.kind = 4; goto done;}  				case 6:  				{t.kind = 5; goto done;}  				case 7:  				{t.kind = 6; goto done;}  				case 8:  				{t.kind = 7; goto done;}  				case 9:  					if ((ch >= '*' && ch <= '+' || ch >= '-' && ch <= ':' || ch >= 'A' && ch <= 'Z' || ch == 92 || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 9;}  					else {t.kind = 8; goto done;}  				case 10:  				{t.kind = 9; goto done;}  				case 11:  				{t.kind = 10; goto done;}  				case 12:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = noSym; goto done;}  				case 13:  					if ((ch >= 'A' && ch <= 'Z' || ch == '_' || ch >= 'a' && ch <= 'z')) {buf.Append(ch); NextCh(); goto case 13;}  					else {t.kind = 17; goto done;}  				case 14:  				{t.kind = 11; goto done;}  				case 15:  				{t.kind = 12; goto done;}  				case 16:  				{t.kind = 13; goto done;}  				case 17:  				{t.kind = 14; goto done;}  				case 18:  				{t.kind = 15; goto done;}  			}
Missing Default,NxBRE.InferenceEngine.Registry,CachedEngine,D:\research\architectureSmells\repos\ddossot_NxBRE\NxBRE3\Source\InferenceEngine\Registry\FileRegistry.cs,LoadRules,The following switch statement is missing a default case: switch(engineConfiguration.Rules.Format) {  					case RulesFormat.HRF086:  						ruleBaseAdapter = new HRF086Adapter(ruleFileFullPath' FileAccess.Read);  						break;  						  					case RulesFormat.RuleML08Datalog:  						ruleBaseAdapter = new RuleML08DatalogAdapter(ruleFileFullPath' FileAccess.Read);  						break;  						  					case RulesFormat.RuleML086Datalog:  						ruleBaseAdapter = new RuleML086DatalogAdapter(ruleFileFullPath' FileAccess.Read);  						break;  						  					case RulesFormat.RuleML086NafDatalog:  						ruleBaseAdapter = new RuleML086NafDatalogAdapter(ruleFileFullPath' FileAccess.Read);  						break;  						  					case RulesFormat.RuleML09NafDatalog:  						ruleBaseAdapter = new RuleML09NafDatalogAdapter(ruleFileFullPath' FileAccess.Read);  						break;  						  					case RulesFormat.Visio2003:  						ruleBaseAdapter = new Visio2003Adapter(ruleFileFullPath' FileAccess.Read);  						break;  				}
