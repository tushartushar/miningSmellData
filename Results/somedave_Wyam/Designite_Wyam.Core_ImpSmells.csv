Implementation smell,Namespace,Class,File,Method,Description
Long Method,Wyam.Core.IO.Globbing,Globber,C:\repos\somedave_Wyam\src\core\Wyam.Core\IO\Globbing\Globber.cs,ExpandBraces,The method has 204 lines of code.
Complex Method,Wyam.Core.IO.Globbing,Globber,C:\repos\somedave_Wyam\src\core\Wyam.Core\IO\Globbing\Globber.cs,ExpandBraces,Cyclomatic complexity of the method is 12
Complex Method,Wyam.Core.Meta,TypeHelper,C:\repos\somedave_Wyam\src\core\Wyam.Core\Meta\TypeHelper.cs,TryConvert,Cyclomatic complexity of the method is 11
Complex Method,Wyam.Core.Modules.IO,RequestHeaders,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\RequestHeaders.cs,ApplyTo,Cyclomatic complexity of the method is 22
Complex Method,Wyam.Core.Modules.Metadata,TreeNode,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Metadata\Tree.cs,GenerateOutputDocuments,Cyclomatic complexity of the method is 10
Complex Method,Wyam.Core.Modules.Metadata,Xml,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Metadata\Xml.cs,GetItems,Cyclomatic complexity of the method is 8
Long Parameter List,Wyam.Core.Documents,BlockingStream,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\BlockingStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Wyam.Core.Documents,BlockingStream,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\BlockingStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Wyam.Core.Documents,CustomDocumentFactory<T>,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\CustomDocumentFactory.cs,GetDocument,The method has 6 parameters. Parameters: context' sourceDocument' source' stream' items' disposeStream
Long Parameter List,Wyam.Core.Documents,CustomDocumentFactory<T>,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\CustomDocumentFactory.cs,GetDocument,The method has 5 parameters. Parameters: context' sourceDocument' stream' items' disposeStream
Long Parameter List,Wyam.Core.Documents,Document,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\Document.cs,Document,The method has 5 parameters. Parameters: initialMetadata' source' stream' items' disposeStream
Long Parameter List,Wyam.Core.Documents,Document,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\Document.cs,Document,The method has 7 parameters. Parameters: id' metadata' source' stream' streamLock' items' disposeStream
Long Parameter List,Wyam.Core.Documents,Document,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\Document.cs,Document,The method has 5 parameters. Parameters: sourceDocument' source' stream' items' disposeStream
Long Parameter List,Wyam.Core.Documents,DocumentFactory,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\DocumentFactory.cs,GetDocument,The method has 5 parameters. Parameters: context' sourceDocument' source' content' items
Long Parameter List,Wyam.Core.Documents,DocumentFactory,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\DocumentFactory.cs,GetDocument,The method has 6 parameters. Parameters: context' sourceDocument' source' stream' items' disposeStream
Long Parameter List,Wyam.Core.Documents,DocumentFactory,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\DocumentFactory.cs,GetDocument,The method has 5 parameters. Parameters: context' sourceDocument' stream' items' disposeStream
Long Parameter List,Wyam.Core.Execution,ExecutionContext,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\ExecutionContext.cs,GetDocument,The method has 5 parameters. Parameters: sourceDocument' source' stream' items' disposeStream
Long Parameter List,Wyam.Core.Execution,ExecutionContext,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\ExecutionContext.cs,GetJsEnginePool,The method has 5 parameters. Parameters: initializer' startEngines' maxEngines' maxUsagesPerEngine' engineTimeout
Long Parameter List,Wyam.Core.JavaScript,JsEnginePool,C:\repos\somedave_Wyam\src\core\Wyam.Core\JavaScript\JsEnginePool.cs,JsEnginePool,The method has 5 parameters. Parameters: initializer' startEngines' maxEngines' maxUsagesPerEngine' engineTimeout
Long Parameter List,Wyam.Core.Modules.Metadata,Tree,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Metadata\Tree.cs,WithMetadataNames,The method has 7 parameters. Parameters: parentKey' childrenKey' previousSiblingKey' nextSiblingKey' previousKey' nextKey' treePathKey
Long Parameter List,Wyam.Core.Tracing,DiagnosticsTraceListener,C:\repos\somedave_Wyam\src\core\Wyam.Core\Tracing\DiagnosticsTraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,Wyam.Core.Tracing,DiagnosticsTraceListener,C:\repos\somedave_Wyam\src\core\Wyam.Core\Tracing\DiagnosticsTraceListener.cs,TraceData,The method has 5 parameters. Parameters: eventCache' source' eventType' id' data
Long Parameter List,Wyam.Core.Tracing,DiagnosticsTraceListener,C:\repos\somedave_Wyam\src\core\Wyam.Core\Tracing\DiagnosticsTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,Wyam.Core.Tracing,DiagnosticsTraceListener,C:\repos\somedave_Wyam\src\core\Wyam.Core\Tracing\DiagnosticsTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,Wyam.Core.Tracing,DiagnosticsTraceListener,C:\repos\somedave_Wyam\src\core\Wyam.Core\Tracing\DiagnosticsTraceListener.cs,TraceTransfer,The method has 5 parameters. Parameters: eventCache' source' id' message' relatedActivityId
Long Identifier,Wyam.Core.Modules.Contents,Sitemap,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Contents\Sitemap.cs,Sitemap,The length of the parameter sitemapItemOrLocationMetadataKey is 32.
Long Statement,Wyam.Core.Documents,CustomDocumentFactory<T>,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\CustomDocumentFactory.cs,GetDocument,The length of the statement  "            IDocument document = _documentFactory.GetDocument(context' customDocument?.Document' source' stream' items' disposeStream); " is 123.
Long Statement,Wyam.Core.Documents,DocumentFactory,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\DocumentFactory.cs,GetDocument,The length of the statement  "            return GetDocument(context' sourceDocument' source' string.IsNullOrEmpty(content) ? null : context.GetContentStream(content)' items); " is 133.
Long Statement,Wyam.Core.Documents,DocumentFactory,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\DocumentFactory.cs,GetDocument,The length of the statement  "            return GetDocument(context' sourceDocument' string.IsNullOrEmpty(content) ? null : context.GetContentStream(content)' items); " is 125.
Long Statement,Wyam.Core.Execution,Engine,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\Engine.cs,Execute,The length of the statement  "                Trace.Error("No pipelines are configured. Please supply a configuration file' specify a recipe' or configure programmatically"); " is 128.
Long Statement,Wyam.Core.Execution,Engine,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\Engine.cs,Execute,The length of the statement  "                Trace.Warning("The output path is also one of the input paths which can cause unexpected behavior and is usually not advised"); " is 127.
Long Statement,Wyam.Core.Execution,Engine,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\Engine.cs,Execute,The length of the statement  "                        using (Trace.WithIndent().Information("Executing pipeline \"{0}\" ({1}/{2}) with {3} child module(s)"' pipelineName' c' _pipelines.Count' pipeline.Count)) " is 154.
Long Statement,Wyam.Core.Execution,Engine,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\Engine.cs,Execute,The length of the statement  "                    // Note that disposing the documents immediately after engine execution will ensure write streams get flushed and released " is 122.
Long Statement,Wyam.Core.Execution,ExecutionPipeline,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\ExecutionPipeline.cs,Execute,The length of the statement  "                Trace.Verbose("{0} previously processed document(s) were not reprocessed"' _previouslyProcessedCache.GetValues().Sum(x => x.Count)); " is 132.
Long Statement,Wyam.Core.Execution,ExecutionPipeline,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\ExecutionPipeline.cs,Execute,The length of the statement  "                        Trace.Warning("Could not find processed document cache for source {0}' please report this warning to the developers"' resultDocument.SourceString()); " is 149.
Long Statement,Wyam.Core.Execution,ExecutionPipeline,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\ExecutionPipeline.cs,Execute,The length of the statement  "                // Reset cloned documents (since we're tracking them in the previously processed cache now) and set new aggregate results " is 121.
Long Statement,Wyam.Core.Execution,ExecutionPipeline,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\ExecutionPipeline.cs,Execute,The length of the statement  "                using (Trace.WithIndent().Verbose("Executing module {0} with {1} input document(s)"' moduleName' inputDocuments.Length)) " is 120.
Long Statement,Wyam.Core.Execution,ExecutionPipeline,C:\repos\somedave_Wyam\src\core\Wyam.Core\Execution\ExecutionPipeline.cs,Execute,The length of the statement  "                            resultDocuments = module.Execute(inputDocuments' moduleContext)?.Where(x => x != null).ToImmutableArray() ?? ImmutableArray<IDocument>.Empty; " is 141.
Long Statement,Wyam.Core.IO.Globbing,Globber,C:\repos\somedave_Wyam\src\core\Wyam.Core\IO\Globbing\Globber.cs,GetFiles,The length of the statement  "            // Initially based on code from Reliak.FileSystemGlobbingExtensions (https://github.com/reliak/Reliak.FileSystemGlobbingExtensions) " is 131.
Long Statement,Wyam.Core.Modules.Contents,Append,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Contents\Append.cs,Execute,The length of the statement  "            return new[] { content == null ? input : context.GetDocument(input' context.GetContentStream(input.Content + content)) }; " is 121.
Long Statement,Wyam.Core.Modules.Contents,Prepend,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Contents\Prepend.cs,Execute,The length of the statement  "            return new[] { content == null ? input : context.GetDocument(input' context.GetContentStream(content + input.Content)) }; " is 121.
Long Statement,Wyam.Core.Modules.Control,Documents,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Control\Documents.cs,FromPipelines,The length of the statement  "                throw new InvalidOperationException("Pipelines cannot be specified if the module is generating new documents using a delegate"); " is 128.
Long Statement,Wyam.Core.Modules.Control,FrontMatter,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Control\FrontMatter.cs,Execute,The length of the statement  "                    foreach (IDocument result in context.Execute(this' new[] { context.GetDocument(input' context.GetContentStream(frontMatter)) })) " is 128.
Long Statement,Wyam.Core.Modules.Control,If,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Control\If.cs,Execute,The length of the statement  "                        if (condition.DocumentConfig == null || condition.DocumentConfig.Invoke<bool>(document' context' "while evaluating condition")) " is 127.
Long Statement,Wyam.Core.Modules.Control,Paginate,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Control\Paginate.cs,Execute,The length of the statement  "                            { Keys.NextPage' new CachedDelegateMetadataValue(_ => pages.Length > currentI + 1 ? pages[currentI + 1].Document : null) }' " is 123.
Long Statement,Wyam.Core.Modules.Control,Sidecar,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Control\Sidecar.cs,Execute,The length of the statement  "                        foreach (IDocument result in context.Execute(this' new[] { context.GetDocument(input' context.GetContentStream(sidecarContent)) })) " is 131.
Long Statement,Wyam.Core.Modules.Extensibility,Execute,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Extensibility\Execute.cs,ThrowInvalidDelegateResult,The length of the statement  "            throw new Exception($"Execute delegate must return IEnumerable<IDocument>' IDocument' IEnumerable<IModule>' IModule' or null; {result.GetType().Name} is an invalid return type"); " is 178.
Long Statement,Wyam.Core.Modules.IO,Include,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\Include.cs,Execute,The length of the statement  "                return ProcessIncludes(ref content' input.Source' context) ? context.GetDocument(input' context.GetContentStream(content)) : input; " is 131.
Long Statement,Wyam.Core.Modules.IO,WriteFiles,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\WriteFiles.cs,GetOutputPath,The length of the statement  "                    Trace.Warning($"An extension or delegate was specified for the WriteFiles module' but the metadata key {metadataKey} took precedence for the document with source {input.SourceString()}" " is 185.
Long Statement,Wyam.Core.Modules.IO,WriteFiles,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\WriteFiles.cs,GetOutputPath,The length of the statement  "                        + $" resulting in an output path of {path}. Call UseWriteMetadata(false) to prevent the special write metadata keys from overriding WriteFiles constructor values."); " is 165.
Long Statement,Wyam.Core.Modules.IO,WriteFiles,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\WriteFiles.cs,Execute,The length of the statement  "            Dictionary<FilePath' Tuple<List<string>' Action>> writesBySource = new Dictionary<FilePath' Tuple<List<string>' Action>>(); " is 123.
Long Statement,Wyam.Core.Modules.IO,WriteFiles,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\WriteFiles.cs,Write,The length of the statement  "                Trace.Verbose($"{(_onlyMetadata ? "Set metadata for" : "Wrote")} file {output.Path.FullPath} from {input.SourceString()}"); " is 123.
Long Statement,Wyam.Core.Modules.Metadata,DirectoryMeta,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Metadata\DirectoryMeta.cs,Execute,The length of the statement  "                .Where(input => _preserveMetadataFiles || !_metadataFile.Any(isMetadata => isMetadata.MetadataFileName.Invoke<bool>(input' context))) // ignore files that define Metadata if not preserved " is 187.
Long Statement,Wyam.Core.Modules.Metadata,DirectoryMeta,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Metadata\DirectoryMeta.cs,Execute,The length of the statement  "                    HashSet<string> overriddenKeys = new HashSet<string>(); // we need to know which keys we may override if they are overridden. " is 125.
Long Statement,Wyam.Core.Modules.Metadata,Xml,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Metadata\Xml.cs,GetItems,The length of the statement  "                        // NOTE: This just might be horrible' since the value of the same key might be a scalar in one document' and a list in another document... " is 138.
Complex Conditional,Wyam.Core.Modules.IO,UnwrittenFiles,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\UnwrittenFiles.cs,Execute,The conditional expression  "(outputDirectory.Path.FullPath != "." && outputDirectory.Exists && output.Exists)                                  || (outputDirectory.Path.FullPath == "." && output.Exists)"  is complex.
Magic Number,Wyam.Core.Documents,RecyclableMemoryContentStreamFactory,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\RecyclableMemoryContentStreamFactory.cs,GetStream,The following statement contains a magic number: lock (_managerLock)              {                  if (_manager == null)                  {                      _manager = new RecyclableMemoryStreamManager(                          BlockSize'                          RecyclableMemoryStreamManager.DefaultLargeBufferMultiple'                          RecyclableMemoryStreamManager.DefaultMaximumBufferSize)                      {                          MaximumFreeSmallPoolBytes = BlockSize * 32768L * 2' // 1 GB                      };                  }              }
Magic Number,Wyam.Core.Documents,SeekableStream,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\SeekableStream.cs,Seek,The following statement contains a magic number: if ((newPosition > _memoryStream.Length) && (!_endOfStream))              {                  _memoryStream.Position = _memoryStream.Length;                  int bytesToRead = (int)(newPosition - _memoryStream.Length);                  byte[] buffer = new byte[1024];                  do                  {                      bytesToRead -= Read(buffer' 0' (bytesToRead >= buffer.Length) ? buffer.Length : bytesToRead);                  } while ((bytesToRead > 0) && (!_endOfStream));              }
Magic Number,Wyam.Core.Documents,SeekableStream,C:\repos\somedave_Wyam\src\core\Wyam.Core\Documents\SeekableStream.cs,Fill,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Wyam.Core.IO.Globbing,Globber,C:\repos\somedave_Wyam\src\core\Wyam.Core\IO\Globbing\Globber.cs,ExpandBraces,The following statement contains a magic number: if (numset.Success)              {                  // console.error("numset"' numset[1]' numset[2])                  List<string> suf = ExpandBraces(pattern.Substring(numset.Length)).ToList();                  int start = int.Parse(numset.Groups[1].Value)'                  end = int.Parse(numset.Groups[2].Value)'                  inc = start > end ? -1 : 1;                  List<string> retVal = new List<string>();                  for (int w = start; w != (end + inc); w += inc)                  {                      // append all the suffixes                      retVal.AddRange(suf.Select(t => w + t));                  }                  return retVal;              }
Magic Number,Wyam.Core.Modules.IO,Include,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\Include.cs,ProcessIncludes,The following statement contains a magic number: while (start >= 0)              {                  start = content.IndexOf("^\""' start' StringComparison.Ordinal);                  if (start >= 0)                  {                      // Check if the include is escaped                      if (start > 0 && content[start - 1] == '\\')                      {                          modified = true;                          content = content.Remove(start - 1' 1);                          start++;                      }                      else                      {                          // This is a valid include                          int end = content.IndexOf('\"'' start + 2);                          if (end > 0)                          {                              modified = true;                                // Get the correct included path                              FilePath includedPath = new FilePath(content.Substring(start + 2' end - (start + 2)));                              if (includedPath.IsRelative)                              {                                  if (source == null)                                  {                                      throw new Exception($"Cannot include file at relative path {includedPath.FullPath} because document source is null");                                  }                                  includedPath = source.Directory.CombineFile(includedPath);                              }                                // Get and read the file content                              IFile includedFile = context.FileSystem.GetFile(includedPath);                              string includedContent = string.Empty;                              if (!includedFile.Exists)                              {                                  Trace.Warning($"Included file {includedFile.Path.FullPath} does not exist");                              }                              else                              {                                  includedContent = includedFile.ReadAllText();                              }                                // Recursively process include statements                              if (_recursion)                              {                                  ProcessIncludes(ref includedContent' includedPath' context);                              }                                // Do the replacement                              content = content.Remove(start' end - start + 1).Insert(start' includedContent);                              start += includedContent.Length;                          }                      }                  }              }
Magic Number,Wyam.Core.Modules.IO,Include,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\Include.cs,ProcessIncludes,The following statement contains a magic number: while (start >= 0)              {                  start = content.IndexOf("^\""' start' StringComparison.Ordinal);                  if (start >= 0)                  {                      // Check if the include is escaped                      if (start > 0 && content[start - 1] == '\\')                      {                          modified = true;                          content = content.Remove(start - 1' 1);                          start++;                      }                      else                      {                          // This is a valid include                          int end = content.IndexOf('\"'' start + 2);                          if (end > 0)                          {                              modified = true;                                // Get the correct included path                              FilePath includedPath = new FilePath(content.Substring(start + 2' end - (start + 2)));                              if (includedPath.IsRelative)                              {                                  if (source == null)                                  {                                      throw new Exception($"Cannot include file at relative path {includedPath.FullPath} because document source is null");                                  }                                  includedPath = source.Directory.CombineFile(includedPath);                              }                                // Get and read the file content                              IFile includedFile = context.FileSystem.GetFile(includedPath);                              string includedContent = string.Empty;                              if (!includedFile.Exists)                              {                                  Trace.Warning($"Included file {includedFile.Path.FullPath} does not exist");                              }                              else                              {                                  includedContent = includedFile.ReadAllText();                              }                                // Recursively process include statements                              if (_recursion)                              {                                  ProcessIncludes(ref includedContent' includedPath' context);                              }                                // Do the replacement                              content = content.Remove(start' end - start + 1).Insert(start' includedContent);                              start += includedContent.Length;                          }                      }                  }              }
Magic Number,Wyam.Core.Modules.IO,Include,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\IO\Include.cs,ProcessIncludes,The following statement contains a magic number: while (start >= 0)              {                  start = content.IndexOf("^\""' start' StringComparison.Ordinal);                  if (start >= 0)                  {                      // Check if the include is escaped                      if (start > 0 && content[start - 1] == '\\')                      {                          modified = true;                          content = content.Remove(start - 1' 1);                          start++;                      }                      else                      {                          // This is a valid include                          int end = content.IndexOf('\"'' start + 2);                          if (end > 0)                          {                              modified = true;                                // Get the correct included path                              FilePath includedPath = new FilePath(content.Substring(start + 2' end - (start + 2)));                              if (includedPath.IsRelative)                              {                                  if (source == null)                                  {                                      throw new Exception($"Cannot include file at relative path {includedPath.FullPath} because document source is null");                                  }                                  includedPath = source.Directory.CombineFile(includedPath);                              }                                // Get and read the file content                              IFile includedFile = context.FileSystem.GetFile(includedPath);                              string includedContent = string.Empty;                              if (!includedFile.Exists)                              {                                  Trace.Warning($"Included file {includedFile.Path.FullPath} does not exist");                              }                              else                              {                                  includedContent = includedFile.ReadAllText();                              }                                // Recursively process include statements                              if (_recursion)                              {                                  ProcessIncludes(ref includedContent' includedPath' context);                              }                                // Do the replacement                              content = content.Remove(start' end - start + 1).Insert(start' includedContent);                              start += includedContent.Length;                          }                      }                  }              }
Magic Number,Wyam.Core.Modules.Metadata,Title,C:\repos\somedave_Wyam\src\core\Wyam.Core\Modules\Metadata\Title.cs,GetTitle,The following statement contains a magic number: if (title.StartsWith("index.") && path.Segments.Length > 1)              {                  title = path.Segments[path.Segments.Length - 2];              }
