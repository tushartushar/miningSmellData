Implementation smell,Namespace,Class,File,Method,Description
Long Method,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,RunCommand,The method has 183 lines of code.
Complex Method,Wyam,EngineManager,C:\repos\somedave_Wyam\src\clients\Wyam\EngineManager.cs,EngineManager,Cyclomatic complexity of the method is 8
Complex Method,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,Cyclomatic complexity of the method is 12
Complex Method,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,RunCommand,Cyclomatic complexity of the method is 18
Long Parameter List,Wyam,ActionFileSystemWatcher,C:\repos\somedave_Wyam\src\clients\Wyam\ActionFileSystemWatcher.cs,ActionFileSystemWatcher,The method has 5 parameters. Parameters: outputDirectory' inputDirectories' includeSubdirectories' filter' callback
Long Parameter List,Wyam,PreviewServer,C:\repos\somedave_Wyam\src\clients\Wyam\PreviewServer.cs,Start,The method has 5 parameters. Parameters: path' port' forceExtension' virtualDirectory' liveReload
Long Parameter List,Wyam.Tracing,SimpleColorConsoleTraceListener,C:\repos\somedave_Wyam\src\clients\Wyam\Tracing\SimpleColorConsoleTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,Wyam.Tracing,SimpleColorConsoleTraceListener,C:\repos\somedave_Wyam\src\clients\Wyam\Tracing\SimpleColorConsoleTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,Wyam.Tracing,SimpleFileTraceListener,C:\repos\somedave_Wyam\src\clients\Wyam\Tracing\SimpleFileTraceListener.cs,TraceEvent,The method has 5 parameters. Parameters: eventCache' source' eventType' id' message
Long Parameter List,Wyam.Tracing,SimpleFileTraceListener,C:\repos\somedave_Wyam\src\clients\Wyam\Tracing\SimpleFileTraceListener.cs,TraceEvent,The method has 6 parameters. Parameters: eventCache' source' eventType' id' format' args
Long Parameter List,Wyam.Tracing,TraceLogger,C:\repos\somedave_Wyam\src\clients\Wyam\Tracing\TraceLogger.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Statement,Wyam,PreviewServer,C:\repos\somedave_Wyam\src\clients\Wyam\PreviewServer.cs,Start,The length of the statement  "                server = new Server(path.FullPath' port' !forceExtension' virtualDirectory?.FullPath' liveReload' new TraceLoggerProvider()); " is 125.
Long Statement,Wyam,Program,C:\repos\somedave_Wyam\src\clients\Wyam\Program.cs,Run,The length of the statement  "                Trace.Critical("The Mono runtime is not supported. Please check the GitHub repository and issue tracker for information on .NET Core support for cross platform execution."); " is 173.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            _preview = syntax.DefineOption("p|preview"' ref _previewPort' false' "Start the preview web server on the specified port (default is " + _previewPort + ").").IsSpecified; " is 170.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            if (syntax.DefineOption("force-ext"' ref _previewForceExtension' "Force the use of extensions in the preview web server (by default' extensionless URLs may be used).").IsSpecified && !_preview) " is 193.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            if (syntax.DefineOption("virtual-dir"' ref _previewVirtualDirectory' DirectoryPathFromArg' "Serve files in the preview web server under the specified virtual directory.").IsSpecified && !_preview) " is 196.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            if (syntax.DefineOption("preview-root"' ref _previewRoot' DirectoryPathFromArg' "The path to the root of the preview server' if not the output folder.").IsSpecified && !_preview) " is 178.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            if (syntax.DefineOption("noreload"' ref _noReload' "Turns off LiveReload support in the preview server.").IsSpecified && (!_preview || !_watch)) " is 144.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOptionList("i|input"' ref _configOptions.InputPaths' DirectoryPathFromArg' "The path(s) of input files' can be absolute or relative to the current folder."); " is 170.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("o|output"' ref _configOptions.OutputPath' DirectoryPathFromArg' "The path to output files' can be absolute or relative to the current folder."); " is 165.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("c|config"' ref _configOptions.ConfigFilePath' FilePath.FromString' "Configuration file (by default' config.wyam is used)."); " is 145.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("u|update-packages"' ref _configOptions.UpdatePackages' "Check the NuGet server for more recent versions of each package and update them if applicable."); " is 174.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("use-local-packages"' ref _configOptions.UseLocalPackages' "Toggles the use of a local NuGet packages folder."); " is 132.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("use-global-sources"' ref _configOptions.UseGlobalSources' "Toggles the use of the global NuGet sources (default is false)."); " is 146.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("packages-path"' ref _configOptions.PackagesPath' DirectoryPathFromArg' "The packages path to use (only if use-local is true)."); " is 149.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("no-output-config-assembly"' ref _configOptions.NoOutputConfigAssembly' "Disable caching configuration file compulation."); " is 143.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("ignore-config-hash"' ref _configOptions.IgnoreConfigHash' "Force evaluating the configuration file' even when no changes were detected."); " is 159.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("output-script"' ref _configOptions.OutputScript' "Outputs the config script after it's been processed for further debugging. The directive --ignore-config-hash is required when using this option."); " is 219.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("verify-config"' ref _verifyConfig' false' "Compile the configuration but do not execute. The directive --ignore-config-hash is required when using this option."); " is 183.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("nocache"' ref _configOptions.NoCache' "Prevents caching information during execution (less memory usage but slower execution)."); " is 150.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            if (!syntax.DefineOption("l|log"' ref _logFilePath' FilePath.FromString' false' "Log all trace messages to the specified log file (by default' wyam-[datetime].txt).").IsSpecified) " is 179.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,ParseOptions,The length of the statement  "            if (syntax.DefineOptionList("s|setting"' ref settings' "Specifies a setting as a key=value pair. Use the syntax [x'y] to specify an array value.").IsSpecified) " is 159.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,RunCommand,The length of the statement  "            _configOptions.RootPath = _configOptions.RootPath == null ? currentDirectory : currentDirectory.Combine(_configOptions.RootPath); " is 129.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,RunCommand,The length of the statement  "                previewServer = PreviewServer.Start(previewPath' _previewPort' _previewForceExtension' _previewVirtualDirectory' _watch && !_noReload); " is 135.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,RunCommand,The length of the statement  "                            if (consoleKey.Key == (ConsoleKey)3 || (consoleKey.Key == ConsoleKey.C && (consoleKey.Modifiers & ConsoleModifiers.Control) != 0)) " is 130.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,TraceEnviornment,The length of the statement  "            Trace.Information($"Input path(s):{Environment.NewLine}    {string.Join(Environment.NewLine + "    "' engineManager.Engine.FileSystem.InputPaths)}"); " is 149.
Long Statement,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,TraceEnviornment,The length of the statement  "            Trace.Information($"Settings:{Environment.NewLine}    {string.Join(Environment.NewLine + "    "' engineManager.Engine.Settings.Select(x => $"{x.Key}: {x.Value?.ToString() ?? "null"}"))}"); " is 188.
Long Statement,Wyam.Commands,Command,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\Command.cs,Parse,The length of the statement  "                syntax.DefineOption("v|verbose"' ref _verbose' "Turns on verbose output showing additional trace message useful for debugging."); " is 129.
Long Statement,Wyam.Commands,Command,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\Command.cs,Parse,The length of the statement  "                syntax.DefineOption("attach"' ref _attach' "Pause execution at the start of the program until a debugger is attached."); " is 120.
Long Statement,Wyam.Commands,Command,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\Command.cs,Parse,The length of the statement  "                    string optionName = (string.IsNullOrEmpty(directive.ShortName) ? string.Empty : directive.ShortName + "|") + directive.Name; " is 124.
Long Statement,Wyam.Commands,Command,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\Command.cs,Parse,The length of the statement  "                    string optionHelp = $"{directive.Description}{(string.IsNullOrEmpty(directive.GetHelpText()) ? string.Empty : " See below for syntax details.")}"; " is 146.
Long Statement,Wyam.Commands,Command,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\Command.cs,ParseRootPathParameter,The length of the statement  "            if (syntax.DefineParameter("root"' ref configOptions.RootPath' DirectoryPathFromArg' "The folder (or config file) to use.").IsSpecified) " is 136.
Long Statement,Wyam.Commands,Command,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\Command.cs,ParseRootPathParameter,The length of the statement  "                FilePath rootDirectoryPathAsConfigFile = new DirectoryPath(Environment.CurrentDirectory).CombineFile(configOptions.RootPath.FullPath); " is 134.
Long Statement,Wyam.Commands,HelpCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\HelpCommand.cs,RunCommand,The length of the statement  "                    Console.WriteLine("#" + directive.Name + (string.IsNullOrEmpty(directive.ShortName) ? string.Empty : "' #" + directive.ShortName)); " is 131.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("u|update-packages"' ref _configOptions.UpdatePackages' "Check the NuGet server for more recent versions of each package and update them if applicable."); " is 174.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("use-local-packages"' ref _configOptions.UseLocalPackages' "Toggles the use of a local NuGet packages folder."); " is 132.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("use-global-sources"' ref _configOptions.UseGlobalSources' "Toggles the use of the global NuGet sources (default is false)."); " is 146.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("packages-path"' ref _configOptions.PackagesPath' DirectoryPathFromArg' "The packages path to use (only if use-local is true)."); " is 149.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("i|input"' ref _inputPath' DirectoryPathFromArg' "The path of input files' can be absolute or relative to the current folder."); " is 148.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("c|config"' ref _configOptions.ConfigFilePath' FilePath.FromString' "Configuration file (by default' config.wyam is used)."); " is 145.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,RunCommand,The length of the statement  "            _configOptions.RootPath = _configOptions.RootPath == null ? currentDirectory : currentDirectory.Combine(_configOptions.RootPath); " is 129.
Long Statement,Wyam.Commands,NewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\NewCommand.cs,RunCommand,The length of the statement  "                    Console.WriteLine($"Configuration file {configFile.Path.FullPath} exists' are you sure you want to potentially overwrite it [y|N]?"); " is 133.
Long Statement,Wyam.Commands,PreviewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\PreviewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("p|port"' ref _port' "Start the preview web server on the specified port (default is " + _port + ")."); " is 123.
Long Statement,Wyam.Commands,PreviewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\PreviewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("force-ext"' ref _forceExtension' "Force the use of extensions in the preview web server (by default' extensionless URLs may be used)."); " is 157.
Long Statement,Wyam.Commands,PreviewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\PreviewCommand.cs,ParseOptions,The length of the statement  "            syntax.DefineOption("virtual-dir"' ref _virtualDirectory' DirectoryPathFromArg' "Serve files in the preview web server under the specified virtual directory."); " is 160.
Long Statement,Wyam.Commands,PreviewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\PreviewCommand.cs,ParseParameters,The length of the statement  "            syntax.DefineParameter("path"' ref _path' DirectoryPathFromArg' "The path that the server should preview (defaults to \"output\")."); " is 133.
Long Statement,Wyam.Commands,PreviewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\PreviewCommand.cs,RunCommand,The length of the statement  "                    if (consoleKey.Key == (ConsoleKey)3 || (consoleKey.Key == ConsoleKey.C && (consoleKey.Modifiers & ConsoleModifiers.Control) != 0)) " is 130.
Complex Conditional,Wyam.Commands,CommandParser,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\CommandParser.cs,Parse,The conditional expression  "arguments[0] != "-?"                  && !arguments[0].Equals("-h"' StringComparison.OrdinalIgnoreCase)                  && !arguments[0].Equals("--help"' StringComparison.OrdinalIgnoreCase)                  && commands.All(x => !x.Item1.Equals(arguments[0]' StringComparison.OrdinalIgnoreCase))"  is complex.
Magic Number,Wyam,MetadataParser,C:\repos\somedave_Wyam\src\clients\Wyam\MetadataParser.cs,ProcessValue,The following statement contains a magic number: if (s.StartsWith("[") && s.EndsWith("]"))              {                  // Array' split on commas                  List<string> items = s.Substring(1' s.Length - 2).Split(''').ToList();                    // Trim and merge values                  List<string> values = new List<string>();                  int c = 0;                  while (c < items.Count)                  {                      string value = items[c];                        // Deal with comma escapes                      int end = c;                      while (items[end].EndsWith("\\"))                      {                          end++;                      }                      if (end != c)                      {                          value = string.Join("'"' items.Skip(c).Take(end - c + 1)).Replace("\\'"' "'");                          c = end;                      }                        // Add the value                      values.Add(Unescape(value.Trim()));                      c++;                  }                  return values.Cast<object>().ToArray();              }
Magic Number,Wyam,MetadataParser,C:\repos\somedave_Wyam\src\clients\Wyam\MetadataParser.cs,Unescape,The following statement contains a magic number: foreach (Match m in mc)              {                  if (m.Length == 1)                  {                      sb.Append(m.Value);                  }                  else                  {                      if (m.Value[1] >= '0' && m.Value[1] <= '7')                      {                          int i = Convert.ToInt32(m.Value.Substring(1)' 8);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'u')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'U')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append(char.ConvertFromUtf32(i));                      }                      else                      {                          switch (m.Value[1])                          {                              case 'a':                                  sb.Append('\a');                                  break;                              case 'b':                                  sb.Append('\b');                                  break;                              case 'f':                                  sb.Append('\f');                                  break;                              case 'n':                                  sb.Append('\n');                                  break;                              case 'r':                                  sb.Append('\r');                                  break;                              case 't':                                  sb.Append('\t');                                  break;                              case 'v':                                  sb.Append('\v');                                  break;                              case '=':                                  sb.Append('=');                                  break;                              default:                                  sb.Append(m.Value[1]);                                  break;                          }                      }                  }              }
Magic Number,Wyam,MetadataParser,C:\repos\somedave_Wyam\src\clients\Wyam\MetadataParser.cs,Unescape,The following statement contains a magic number: foreach (Match m in mc)              {                  if (m.Length == 1)                  {                      sb.Append(m.Value);                  }                  else                  {                      if (m.Value[1] >= '0' && m.Value[1] <= '7')                      {                          int i = Convert.ToInt32(m.Value.Substring(1)' 8);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'u')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'U')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append(char.ConvertFromUtf32(i));                      }                      else                      {                          switch (m.Value[1])                          {                              case 'a':                                  sb.Append('\a');                                  break;                              case 'b':                                  sb.Append('\b');                                  break;                              case 'f':                                  sb.Append('\f');                                  break;                              case 'n':                                  sb.Append('\n');                                  break;                              case 'r':                                  sb.Append('\r');                                  break;                              case 't':                                  sb.Append('\t');                                  break;                              case 'v':                                  sb.Append('\v');                                  break;                              case '=':                                  sb.Append('=');                                  break;                              default:                                  sb.Append(m.Value[1]);                                  break;                          }                      }                  }              }
Magic Number,Wyam,MetadataParser,C:\repos\somedave_Wyam\src\clients\Wyam\MetadataParser.cs,Unescape,The following statement contains a magic number: foreach (Match m in mc)              {                  if (m.Length == 1)                  {                      sb.Append(m.Value);                  }                  else                  {                      if (m.Value[1] >= '0' && m.Value[1] <= '7')                      {                          int i = Convert.ToInt32(m.Value.Substring(1)' 8);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'u')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'U')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append(char.ConvertFromUtf32(i));                      }                      else                      {                          switch (m.Value[1])                          {                              case 'a':                                  sb.Append('\a');                                  break;                              case 'b':                                  sb.Append('\b');                                  break;                              case 'f':                                  sb.Append('\f');                                  break;                              case 'n':                                  sb.Append('\n');                                  break;                              case 'r':                                  sb.Append('\r');                                  break;                              case 't':                                  sb.Append('\t');                                  break;                              case 'v':                                  sb.Append('\v');                                  break;                              case '=':                                  sb.Append('=');                                  break;                              default:                                  sb.Append(m.Value[1]);                                  break;                          }                      }                  }              }
Magic Number,Wyam,MetadataParser,C:\repos\somedave_Wyam\src\clients\Wyam\MetadataParser.cs,Unescape,The following statement contains a magic number: foreach (Match m in mc)              {                  if (m.Length == 1)                  {                      sb.Append(m.Value);                  }                  else                  {                      if (m.Value[1] >= '0' && m.Value[1] <= '7')                      {                          int i = Convert.ToInt32(m.Value.Substring(1)' 8);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'u')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'U')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append(char.ConvertFromUtf32(i));                      }                      else                      {                          switch (m.Value[1])                          {                              case 'a':                                  sb.Append('\a');                                  break;                              case 'b':                                  sb.Append('\b');                                  break;                              case 'f':                                  sb.Append('\f');                                  break;                              case 'n':                                  sb.Append('\n');                                  break;                              case 'r':                                  sb.Append('\r');                                  break;                              case 't':                                  sb.Append('\t');                                  break;                              case 'v':                                  sb.Append('\v');                                  break;                              case '=':                                  sb.Append('=');                                  break;                              default:                                  sb.Append(m.Value[1]);                                  break;                          }                      }                  }              }
Magic Number,Wyam,MetadataParser,C:\repos\somedave_Wyam\src\clients\Wyam\MetadataParser.cs,Unescape,The following statement contains a magic number: foreach (Match m in mc)              {                  if (m.Length == 1)                  {                      sb.Append(m.Value);                  }                  else                  {                      if (m.Value[1] >= '0' && m.Value[1] <= '7')                      {                          int i = Convert.ToInt32(m.Value.Substring(1)' 8);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'u')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append((char)i);                      }                      else if (m.Value[1] == 'U')                      {                          int i = Convert.ToInt32(m.Value.Substring(2)' 16);                          sb.Append(char.ConvertFromUtf32(i));                      }                      else                      {                          switch (m.Value[1])                          {                              case 'a':                                  sb.Append('\a');                                  break;                              case 'b':                                  sb.Append('\b');                                  break;                              case 'f':                                  sb.Append('\f');                                  break;                              case 'n':                                  sb.Append('\n');                                  break;                              case 'r':                                  sb.Append('\r');                                  break;                              case 't':                                  sb.Append('\t');                                  break;                              case 'v':                                  sb.Append('\v');                                  break;                              case '=':                                  sb.Append('=');                                  break;                              default:                                  sb.Append(m.Value[1]);                                  break;                          }                      }                  }              }
Magic Number,Wyam,StandardInputReader,C:\repos\somedave_Wyam\src\clients\Wyam\StandardInputReader.cs,Read,The following statement contains a magic number: if (Console.IsInputRedirected)              {                  Trace.Verbose("Input is redirected' attempting to read...");                  using (Stream stream = Console.OpenStandardInput())                  {                      byte[] buffer = new byte[1000];                      StringBuilder stdin = new StringBuilder();                      int totalRead = 0;                      int read = -1;                      while (true)                      {                          AutoResetEvent gotInput = new AutoResetEvent(false);                          Thread inputThread = new Thread(() =>                          {                              try                              {                                  read = stream.Read(buffer' 0' buffer.Length);                                  gotInput.Set();                              }                              catch (ThreadAbortException)                              {                                  Thread.ResetAbort();                              }                          })                          {                              IsBackground = true                          };                            inputThread.Start();                            // Timeout expired?                          if (!gotInput.WaitOne(100))                          {                              inputThread.Abort();                              Trace.Verbose("Timeout expired while reading from input");                              break;                          }                            // End of stream?                          if (read == 0)                          {                              Trace.Verbose($"Read {totalRead} bytes ({stdin.Length} characters) from input");                              return stdin.ToString();                          }                            // Got data                          stdin.Append(Console.InputEncoding.GetString(buffer' 0' read));                          totalRead += read;                      }                  }              }
Magic Number,Wyam,StandardInputReader,C:\repos\somedave_Wyam\src\clients\Wyam\StandardInputReader.cs,Read,The following statement contains a magic number: if (Console.IsInputRedirected)              {                  Trace.Verbose("Input is redirected' attempting to read...");                  using (Stream stream = Console.OpenStandardInput())                  {                      byte[] buffer = new byte[1000];                      StringBuilder stdin = new StringBuilder();                      int totalRead = 0;                      int read = -1;                      while (true)                      {                          AutoResetEvent gotInput = new AutoResetEvent(false);                          Thread inputThread = new Thread(() =>                          {                              try                              {                                  read = stream.Read(buffer' 0' buffer.Length);                                  gotInput.Set();                              }                              catch (ThreadAbortException)                              {                                  Thread.ResetAbort();                              }                          })                          {                              IsBackground = true                          };                            inputThread.Start();                            // Timeout expired?                          if (!gotInput.WaitOne(100))                          {                              inputThread.Abort();                              Trace.Verbose("Timeout expired while reading from input");                              break;                          }                            // End of stream?                          if (read == 0)                          {                              Trace.Verbose($"Read {totalRead} bytes ({stdin.Length} characters) from input");                              return stdin.ToString();                          }                            // Got data                          stdin.Append(Console.InputEncoding.GetString(buffer' 0' read));                          totalRead += read;                      }                  }              }
Magic Number,Wyam.Commands,BuildCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\BuildCommand.cs,RunCommand,The following statement contains a magic number: if (messagePump)              {                  // Only wait for a key if console input has not been redirected' otherwise it's on the caller to exit                  if (!Console.IsInputRedirected)                  {                      // Start the key listening thread                      Thread thread = new Thread(() =>                      {                          Trace.Information("Hit Ctrl-C to exit");                          Console.TreatControlCAsInput = true;                          while (true)                          {                              // Would have prefered to use Console.CancelKeyPress' but that bubbles up to calling batch files                              // The (ConsoleKey)3 check is to support a bug in VS Code: https://github.com/Microsoft/vscode/issues/9347                              ConsoleKeyInfo consoleKey = Console.ReadKey(true);                              if (consoleKey.Key == (ConsoleKey)3 || (consoleKey.Key == ConsoleKey.C && (consoleKey.Modifiers & ConsoleModifiers.Control) != 0))                              {                                  _exit.Set();                                  _messageEvent.Set();                                  break;                              }                          }                      })                      {                          IsBackground = true                      };                      thread.Start();                  }                    // Wait for activity                  while (true)                  {                      _messageEvent.WaitOne(); // Blocks the current thread until a signal                      if (_exit)                      {                          break;                      }                        // See if we need a new engine                      if (_newEngine)                      {                          // Get a new engine                          Trace.Information("Configuration file {0} has changed' re-running"' _configOptions.ConfigFilePath);                          engineManager.Dispose();                          engineManager = EngineManager.Get(preprocessor' _configOptions);                            // Configure and execute                          if (!engineManager.Configure())                          {                              exitCode = ExitCode.ConfigurationError;                              break;                          }                            TraceEnviornment(engineManager);                            if (!engineManager.Execute())                          {                              exitCode = ExitCode.ExecutionError;                          }                            // Clear the changed files since we just re-ran                          string changedFile;                          while (_changedFiles.TryDequeue(out changedFile))                          {                          }                            _newEngine.Unset();                      }                      else                      {                          // Execute if files have changed                          HashSet<string> changedFiles = new HashSet<string>();                          string changedFile;                          while (_changedFiles.TryDequeue(out changedFile))                          {                              if (changedFiles.Add(changedFile))                              {                                  Trace.Verbose("{0} has changed"' changedFile);                              }                          }                          if (changedFiles.Count > 0)                          {                              Trace.Information("{0} files have changed' re-executing"' changedFiles.Count);                              if (!engineManager.Execute())                              {                                  exitCode = ExitCode.ExecutionError;                              }                              previewServer?.TriggerReload();                          }                      }                        // Check one more time for exit                      if (_exit)                      {                          break;                      }                      Trace.Information("Hit Ctrl-C to exit");                      _messageEvent.Reset();                  }                    // Shutdown                  Trace.Information("Shutting down");                  engineManager.Dispose();                  inputFolderWatcher?.Dispose();                  configFileWatcher?.Dispose();                  previewServer?.Dispose();              }
Magic Number,Wyam.Commands,Command,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\Command.cs,Run,The following statement contains a magic number: if (GlobalArguments)              {                  // Set verbose tracing                  if (_verbose)                  {                      Trace.Level = System.Diagnostics.SourceLevels.Verbose;                  }                    // Attach                  if (_attach)                  {                      Trace.Information("Waiting for a debugger to attach (or press a key to continue)...");                      while (!Debugger.IsAttached && !Console.KeyAvailable)                      {                          Thread.Sleep(100);                      }                      if (Console.KeyAvailable)                      {                          Console.ReadKey(true);                          Trace.Information("Key pressed' continuing execution");                      }                      else                      {                          Trace.Information("Debugger attached' continuing execution");                      }                  }              }
Magic Number,Wyam.Commands,CommandParser,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\CommandParser.cs,Parse,The following statement contains a magic number: List<Tuple<string' Command>> commands = Commands                  .Select(x =>                  {                      string commandName = x.GetType().Name.ToLowerInvariant();                      commandName = commandName.EndsWith("command")                          ? commandName.Substring(0' commandName.Length - 7)                          : commandName;                      return Tuple.Create(commandName' x);                  })                  .ToList();
Magic Number,Wyam.Commands,PreviewCommand,C:\repos\somedave_Wyam\src\clients\Wyam\Commands\PreviewCommand.cs,RunCommand,The following statement contains a magic number: using (PreviewServer.Start(_path' _port' _forceExtension' _virtualDirectory' false))              {                  Trace.Information("Hit Ctrl-C to exit");                  Console.TreatControlCAsInput = true;                  while (true)                  {                      // Would have prefered to use Console.CancelKeyPress' but that bubbles up to calling batch files                      // The (ConsoleKey)3 check is to support a bug in VS Code: https://github.com/Microsoft/vscode/issues/9347                      ConsoleKeyInfo consoleKey = Console.ReadKey(true);                      if (consoleKey.Key == (ConsoleKey)3 || (consoleKey.Key == ConsoleKey.C && (consoleKey.Modifiers & ConsoleModifiers.Control) != 0))                      {                          break;                      }                  }                  Trace.Information("Shutting down");              }
