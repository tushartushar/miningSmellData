Implementation smell,Namespace,Class,File,Method,Description
Long Method,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The method has 152 lines of code.
Complex Method,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,CheckNames,Cyclomatic complexity of the method is 8
Complex Method,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,findMembers,Cyclomatic complexity of the method is 11
Complex Method,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,findTypes,Cyclomatic complexity of the method is 11
Complex Method,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,RenameVirtualMethod,Cyclomatic complexity of the method is 8
Long Parameter List,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,findMember,The method has 5 parameters. Parameters: module' type' allowMultipleResults' mustHaveResult' comparers
Long Statement,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,CheckNames,The length of the statement  "                setName(tdef' "" + (tdef.IsClass ? "cl" : "tp") + String.Format("{0:x4}"' classid)/*newTName*/);//tdef.Name = (tdef.IsClass ? "cl" : "tp") + newTName; " is 150.
Long Statement,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The length of the statement  "	                                        if (basemdef.Name != null && mdef.Name != null && basemdef.Name.Equals(mdef.Name) && basemdef.IsVirtual && paramlistEquals(basepardef' pardef)) " is 143.
Long Statement,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The length of the statement  "					//try to correct the getter/setter name using the property name (simplifies reusing a previously compiled mod dll for new 7dtd versions)  " is 136.
Long Statement,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,findMembers,The length of the statement  "				TypeDefinition tdef = (type is string) ? module.GetType((string)type) : ((type is TypeDefinition) ? ((TypeDefinition)type) : null); " is 131.
Long Statement,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,findMembers,The length of the statement  "				memberArray = (T[])memberCollection.GetType().GetMethod("ToArray"' new Type[0]).Invoke(memberCollection' new object[0]); " is 120.
Long Statement,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,executeActions,The length of the statement  "			TypeDefinition tdef = (type is string) ? module.GetType((string)type) : ((type is TypeDefinition) ? ((TypeDefinition)type) : null); " is 131.
Long Statement,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,RenameVirtualMethod,The length of the statement  "			foreach (MethodDefinition curVMethod in findMembers<MethodDefinition>(curBaseType.Module' null' false' vMethodComparer)) " is 120.
Long Statement,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,OnError,The length of the statement  "				logger.Error("Something really bad happened while executing OnError (cannot find " + error.ToString() + " in ErrorCode)."); " is 123.
Complex Conditional,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The conditional expression  "basemdef.Name != null && mdef.Name != null && basemdef.Name.Equals(mdef.Name) && basemdef.IsVirtual && paramlistEquals(basepardef' pardef)"  is complex.
Complex Conditional,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,nameIsObfuscated,The conditional expression  "(  						((ch & 0x00FF) > 0x7F) || (((ch & 0xFF00) >> 8) > 0x7F)  					) ||  					(("" + ch).Normalize().ToCharArray()[0] > 0x00FF) ||  					(((("" + ch).Normalize().ToCharArray()[0] & 0x00FF)) <= 0x20)"  is complex.
Complex Conditional,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,nameIsObfuscated,The conditional expression  "!((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z'))"  is complex.
Complex Conditional,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,OPMatches,The conditional expression  "instr.OpCode != op ||  				(  					(operand != null) ?   					((operand != null && instr.Operand == null) ||   						!operand.Equals(instr.Operand))   					: false  				)"  is complex.
Empty Catch Block,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The method has an empty catch block.
Empty Catch Block,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The method has an empty catch block.
Empty Catch Block,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkTypeReferences,The method has an empty catch block.
Magic Number,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The following statement contains a magic number: if (typeof(T) == typeof(MethodDefinition))              {                  MethodDefinition mdef = def as MethodDefinition;  				if (mdef.DeclaringType.GenericParameters.Count != 0 || mdef.GenericParameters.Count != 0)  					needsNewName = false;  				else  				{  	                Mono.Collections.Generic.Collection<ParameterDefinition> pardef = mdef.Parameters;  	                if (pardef == null) { pardef = new Mono.Collections.Generic.Collection<ParameterDefinition>(); }    	                int parid = 1;  					if (mdef.IsVirtual && needsNewName)  	                {  	                    prefix = "mdv";  	                    List<MethodDefinition> baseVmdefList = new List<MethodDefinition>();  	                    baseVmdefList.Add(mdef);  	                    TypeDefinition baseclass = null;  	                    try  	                    {  	                        TypeReference curBaseType = btdef.BaseType;  	                        while (curBaseType != null)  	                        {  	                            TypeDefinition basetdef = curBaseType.Resolve();  	                            if (basetdef == null)  	                                break;  	                            if (basetdef.HasMethods && basetdef.Methods != null)  	                            {  	                                foreach (MethodDefinition basemdef in basetdef.Methods)  	                                {  	                                    if (basemdef == null)  	                                        continue;  	                                    Mono.Collections.Generic.Collection<ParameterDefinition> basepardef = basemdef.Parameters;  	                                    if (basepardef == null) { basepardef = new Mono.Collections.Generic.Collection<ParameterDefinition>(); }  	                                    try  	                                    {  	                                        if (basemdef.Name != null && mdef.Name != null && basemdef.Name.Equals(mdef.Name) && basemdef.IsVirtual && paramlistEquals(basepardef' pardef))  	                                        {  	                                            baseVmdefList.Add(basemdef);  	                                            baseclass = basetdef;  	                                        }  	                                    }  	                                    catch (Exception) { /*throw new Exception("2.1");*/ }  	                                }  	                            }  	                            curBaseType = basetdef.BaseType;  	                        }    	                    }  	                    catch (NotSupportedException) { }  	                    if (baseclass != null)  	                    {  	                        vmdGroupInfo vmGroup = null;  	                        foreach (vmdGroupInfo curGroupInfo in vclasses)  	                        {  	                            if (curGroupInfo.applyingmdefs.Count < 1)  	                                continue;  	                            if (curGroupInfo.applyingmdefs.ToArray()[0].Name.Equals(mdef.Name)  	                                && curGroupInfo.baseclass.Name.Equals(baseclass.Name))  	                            {  	                                vmGroup = curGroupInfo;  	                                break;  	                            }  	                        }  	                        if (vmGroup == null)  	                        {  	                            vmGroup = new vmdGroupInfo(String.Format("{0}{1:x4}"' prefix' vmethid)' baseclass);  	                            vclasses.Add(vmGroup);  	                            ++vmethid;  	                        }  	                        int oldgrouplen = vmGroup.applyingmdefs.Count;  	                        object[] baseVmdefs = baseVmdefList.ToArray();  	                        for (int i = baseVmdefs.Length - 1; i >= 0; i--)  	                        {  	                            MethodDefinition curBaseDef = baseVmdefs[i] as MethodDefinition;  	                            foreach (MethodDefinition curSubDef in vmGroup.applyingmdefs)  	                            {  	                                if ((curBaseDef.DeclaringType == curSubDef.DeclaringType) && paramlistEquals(curSubDef.Parameters' mdef.Parameters))  	                                {  	                                    curBaseDef = null;  	                                    break;  	                                }  	                            }  	                            if (curBaseDef != null)  	                                vmGroup.applyingmdefs.Add(curBaseDef);  	                        }  							needsNewName = false;  	                    }  	                }  	                if (mdef.HasParameters)  	                {  	                    foreach (ParameterDefinition pdef in mdef.Parameters)  	                    {  							if (nameIsObfuscated(pdef.Name))  	                            pdef.Name = String.Format("par{0:x4}"' parid);  	                        ++parid;  	                    }  	                }  				}              }  			else if (typeof(T) == typeof(FieldDefinition))  			{  				FieldDefinition fdef = def as FieldDefinition;  				if (fdef.DeclaringType.GenericParameters.Count != 0)  					needsNewName = false;  			}  			else if (typeof(T) == typeof(PropertyDefinition))  			{  				PropertyDefinition pdef = def as PropertyDefinition;  				MethodDefinition getter = pdef.GetMethod;  				MethodDefinition setter = pdef.SetMethod;  				if (needsNewName)  				{  					//try to correct the property name using a getter/setter method  					if (getter != null && getter.Name.StartsWith("get_") && !nameIsObfuscated(getter.Name))  					{  						setName(def' getter.Name.Substring(4));  						needsNewName = false;  					}  					else if (setter != null && setter.Name.StartsWith("set_") && !nameIsObfuscated(setter.Name))  					{  						setName(def' setter.Name.Substring(4));  						needsNewName = false;  					}  				}  				else  				{  					//try to correct the getter/setter name using the property name (simplifies reusing a previously compiled mod dll for new 7dtd versions)   					if (getter != null && nameIsObfuscated(getter.Name))  					{  						setName(getter' "get_" + pdef.Name);  					}  					else if (setter != null && nameIsObfuscated(setter.Name))  					{  						setName(setter' "set_" + pdef.Name);  					}  				}  			}
Magic Number,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,checkLocalDefinition,The following statement contains a magic number: if (typeof(T) == typeof(MethodDefinition))              {                  MethodDefinition mdef = def as MethodDefinition;  				if (mdef.DeclaringType.GenericParameters.Count != 0 || mdef.GenericParameters.Count != 0)  					needsNewName = false;  				else  				{  	                Mono.Collections.Generic.Collection<ParameterDefinition> pardef = mdef.Parameters;  	                if (pardef == null) { pardef = new Mono.Collections.Generic.Collection<ParameterDefinition>(); }    	                int parid = 1;  					if (mdef.IsVirtual && needsNewName)  	                {  	                    prefix = "mdv";  	                    List<MethodDefinition> baseVmdefList = new List<MethodDefinition>();  	                    baseVmdefList.Add(mdef);  	                    TypeDefinition baseclass = null;  	                    try  	                    {  	                        TypeReference curBaseType = btdef.BaseType;  	                        while (curBaseType != null)  	                        {  	                            TypeDefinition basetdef = curBaseType.Resolve();  	                            if (basetdef == null)  	                                break;  	                            if (basetdef.HasMethods && basetdef.Methods != null)  	                            {  	                                foreach (MethodDefinition basemdef in basetdef.Methods)  	                                {  	                                    if (basemdef == null)  	                                        continue;  	                                    Mono.Collections.Generic.Collection<ParameterDefinition> basepardef = basemdef.Parameters;  	                                    if (basepardef == null) { basepardef = new Mono.Collections.Generic.Collection<ParameterDefinition>(); }  	                                    try  	                                    {  	                                        if (basemdef.Name != null && mdef.Name != null && basemdef.Name.Equals(mdef.Name) && basemdef.IsVirtual && paramlistEquals(basepardef' pardef))  	                                        {  	                                            baseVmdefList.Add(basemdef);  	                                            baseclass = basetdef;  	                                        }  	                                    }  	                                    catch (Exception) { /*throw new Exception("2.1");*/ }  	                                }  	                            }  	                            curBaseType = basetdef.BaseType;  	                        }    	                    }  	                    catch (NotSupportedException) { }  	                    if (baseclass != null)  	                    {  	                        vmdGroupInfo vmGroup = null;  	                        foreach (vmdGroupInfo curGroupInfo in vclasses)  	                        {  	                            if (curGroupInfo.applyingmdefs.Count < 1)  	                                continue;  	                            if (curGroupInfo.applyingmdefs.ToArray()[0].Name.Equals(mdef.Name)  	                                && curGroupInfo.baseclass.Name.Equals(baseclass.Name))  	                            {  	                                vmGroup = curGroupInfo;  	                                break;  	                            }  	                        }  	                        if (vmGroup == null)  	                        {  	                            vmGroup = new vmdGroupInfo(String.Format("{0}{1:x4}"' prefix' vmethid)' baseclass);  	                            vclasses.Add(vmGroup);  	                            ++vmethid;  	                        }  	                        int oldgrouplen = vmGroup.applyingmdefs.Count;  	                        object[] baseVmdefs = baseVmdefList.ToArray();  	                        for (int i = baseVmdefs.Length - 1; i >= 0; i--)  	                        {  	                            MethodDefinition curBaseDef = baseVmdefs[i] as MethodDefinition;  	                            foreach (MethodDefinition curSubDef in vmGroup.applyingmdefs)  	                            {  	                                if ((curBaseDef.DeclaringType == curSubDef.DeclaringType) && paramlistEquals(curSubDef.Parameters' mdef.Parameters))  	                                {  	                                    curBaseDef = null;  	                                    break;  	                                }  	                            }  	                            if (curBaseDef != null)  	                                vmGroup.applyingmdefs.Add(curBaseDef);  	                        }  							needsNewName = false;  	                    }  	                }  	                if (mdef.HasParameters)  	                {  	                    foreach (ParameterDefinition pdef in mdef.Parameters)  	                    {  							if (nameIsObfuscated(pdef.Name))  	                            pdef.Name = String.Format("par{0:x4}"' parid);  	                        ++parid;  	                    }  	                }  				}              }  			else if (typeof(T) == typeof(FieldDefinition))  			{  				FieldDefinition fdef = def as FieldDefinition;  				if (fdef.DeclaringType.GenericParameters.Count != 0)  					needsNewName = false;  			}  			else if (typeof(T) == typeof(PropertyDefinition))  			{  				PropertyDefinition pdef = def as PropertyDefinition;  				MethodDefinition getter = pdef.GetMethod;  				MethodDefinition setter = pdef.SetMethod;  				if (needsNewName)  				{  					//try to correct the property name using a getter/setter method  					if (getter != null && getter.Name.StartsWith("get_") && !nameIsObfuscated(getter.Name))  					{  						setName(def' getter.Name.Substring(4));  						needsNewName = false;  					}  					else if (setter != null && setter.Name.StartsWith("set_") && !nameIsObfuscated(setter.Name))  					{  						setName(def' setter.Name.Substring(4));  						needsNewName = false;  					}  				}  				else  				{  					//try to correct the getter/setter name using the property name (simplifies reusing a previously compiled mod dll for new 7dtd versions)   					if (getter != null && nameIsObfuscated(getter.Name))  					{  						setName(getter' "get_" + pdef.Name);  					}  					else if (setter != null && nameIsObfuscated(setter.Name))  					{  						setName(setter' "set_" + pdef.Name);  					}  				}  			}
Magic Number,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,nameIsObfuscated,The following statement contains a magic number: bool ret = (origName.Length == 5);
Magic Number,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,nameIsObfuscated,The following statement contains a magic number: foreach (char ch in origName)  			{  				if (  					(  						((ch & 0x00FF) > 0x7F) || (((ch & 0xFF00) >> 8) > 0x7F)  					) ||  					(("" + ch).Normalize().ToCharArray()[0] > 0x00FF) ||  					(((("" + ch).Normalize().ToCharArray()[0] & 0x00FF)) <= 0x20)  				)  				{  					return true;  				}  				if (!(ch >= 'A' && ch <= 'Z'))  				{  					hasOnlyUppercaseLetters = false;  				}  				if (!((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z')))  				{  					ret = false;  				}  			}
Magic Number,NamePatcher,NameNormalizer,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\NameNormalizer.cs,nameIsObfuscated,The following statement contains a magic number: return ret || (hasOnlyUppercaseLetters && origName.Length < 5);
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,writeGenericArgument,The following statement contains a magic number: if (retBuilder.Length > 2 && retBuilder[retBuilder.Length-2] == '\u0060')  				retBuilder.Remove(retBuilder.Length-2'2);
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,writeGenericArgument,The following statement contains a magic number: if (retBuilder.Length > 2 && retBuilder[retBuilder.Length-2] == '\u0060')  				retBuilder.Remove(retBuilder.Length-2'2);
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,writeGenericArgument,The following statement contains a magic number: if (retBuilder.Length > 2 && retBuilder[retBuilder.Length-2] == '\u0060')  				retBuilder.Remove(retBuilder.Length-2'2);
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,writeGenericArgument,The following statement contains a magic number: if (retBuilder.Length > 2 && retBuilder[retBuilder.Length-2] == '\u0060')  				retBuilder.Remove(retBuilder.Length-2'2);
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,FieldTypeComparer,The following statement contains a magic number: return new GenericFuncContainer<FieldDefinition'bool>(field => {  				TypeReference tref = field.FieldType;   				TypeDefinition type = field.FieldType.Resolve();  				if (type == null)  					return false;  				System.Text.StringBuilder typeNameBuilder = new System.Text.StringBuilder();  				typeNameBuilder.Append(type.FullName);  				if ((type.GenericParameters.Count > 0) && (tref is GenericInstanceType))  				{  					typeNameBuilder.Remove(typeNameBuilder.Length-2'2);  					typeNameBuilder.Append('<');  					foreach (TypeReference garg in ((GenericInstanceType)tref).GenericArguments)  					{  						typeNameBuilder.Append(writeGenericArgument(garg));  					}  					typeNameBuilder[typeNameBuilder.Length-1] = '>';  				}  				return typeNameBuilder.ToString().Equals(fieldType);  			});
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,FieldTypeComparer,The following statement contains a magic number: return new GenericFuncContainer<FieldDefinition'bool>(field => {  				TypeReference tref = field.FieldType;   				TypeDefinition type = field.FieldType.Resolve();  				if (type == null)  					return false;  				System.Text.StringBuilder typeNameBuilder = new System.Text.StringBuilder();  				typeNameBuilder.Append(type.FullName);  				if ((type.GenericParameters.Count > 0) && (tref is GenericInstanceType))  				{  					typeNameBuilder.Remove(typeNameBuilder.Length-2'2);  					typeNameBuilder.Append('<');  					foreach (TypeReference garg in ((GenericInstanceType)tref).GenericArguments)  					{  						typeNameBuilder.Append(writeGenericArgument(garg));  					}  					typeNameBuilder[typeNameBuilder.Length-1] = '>';  				}  				return typeNameBuilder.ToString().Equals(fieldType);  			});
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,MethodParametersComparerEx,The following statement contains a magic number: return new GenericFuncContainer<MethodDefinition'bool> (method => {  				if (method.Parameters.Count != parameterTypes.Length)  					return false;  				for (int i = 0; i < method.Parameters.Count; i++)  				{  					if (parameterTypes[i].Length == 0)  						continue;  					TypeReference curParTref = method.Parameters[i].ParameterType;  					TypeDefinition curParTdef = curParTref.Resolve();  					if (curParTdef == null)  						throw new Exception("Unable to resolve the type '" + curParTref.FullName + "'!");  					System.Text.StringBuilder typeNameBuilder = new System.Text.StringBuilder ();  					typeNameBuilder.Append (curParTdef.FullName);  					if ((curParTdef.GenericParameters.Count > 0) && (curParTref is GenericInstanceType))  					{  						typeNameBuilder.Remove (typeNameBuilder.Length - 2' 2);  						typeNameBuilder.Append ('<');  						foreach (TypeReference garg in ((GenericInstanceType)curParTref).GenericArguments)  						{  							typeNameBuilder.Append (writeGenericArgument (garg));  						}  						typeNameBuilder [typeNameBuilder.Length - 1] = '>';  						if (curParTref.IsArray)  							typeNameBuilder.Append("[]");  					}  					if (!typeNameBuilder.ToString().Equals(parameterTypes[i]))  						return false;  				}  				return true;  			});
Magic Number,NamePatcher,HelperClass,C:\repos\DerPopo_deobfuscate-7dtd\NamePatcher\HelperClass.cs,MethodParametersComparerEx,The following statement contains a magic number: return new GenericFuncContainer<MethodDefinition'bool> (method => {  				if (method.Parameters.Count != parameterTypes.Length)  					return false;  				for (int i = 0; i < method.Parameters.Count; i++)  				{  					if (parameterTypes[i].Length == 0)  						continue;  					TypeReference curParTref = method.Parameters[i].ParameterType;  					TypeDefinition curParTdef = curParTref.Resolve();  					if (curParTdef == null)  						throw new Exception("Unable to resolve the type '" + curParTref.FullName + "'!");  					System.Text.StringBuilder typeNameBuilder = new System.Text.StringBuilder ();  					typeNameBuilder.Append (curParTdef.FullName);  					if ((curParTdef.GenericParameters.Count > 0) && (curParTref is GenericInstanceType))  					{  						typeNameBuilder.Remove (typeNameBuilder.Length - 2' 2);  						typeNameBuilder.Append ('<');  						foreach (TypeReference garg in ((GenericInstanceType)curParTref).GenericArguments)  						{  							typeNameBuilder.Append (writeGenericArgument (garg));  						}  						typeNameBuilder [typeNameBuilder.Length - 1] = '>';  						if (curParTref.IsArray)  							typeNameBuilder.Append("[]");  					}  					if (!typeNameBuilder.ToString().Equals(parameterTypes[i]))  						return false;  				}  				return true;  			});
