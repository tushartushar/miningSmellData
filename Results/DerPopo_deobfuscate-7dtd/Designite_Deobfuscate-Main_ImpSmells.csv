Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The method has 169 lines of code.
Complex Method,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,Cyclomatic complexity of the method is 22
Long Statement,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The length of the statement  "			mainLogger = new Logger (ownFolder.path + Path.DirectorySeparatorChar + "mainlog.txt"' null' (int)(verbosity ? Logger.Level.INFO : Logger.Level.KEYINFO)); " is 154.
Long Statement,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The length of the statement  "				mscorlibDef = AssemblyDefinition.ReadAssembly(acsharpSource.path + Path.DirectorySeparatorChar + "mscorlib.dll"' new ReaderParameters{ AssemblyResolver = resolver }); " is 166.
Long Statement,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The length of the statement  "					(curPatcher.assemblyFileName.IndexOf (".") != 0) ? curPatcher.assemblyFileName.Substring(0'curPatcher.assemblyFileName.LastIndexOf(".")) : curPatcher.assemblyFileName; " is 167.
Long Statement,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The length of the statement  "				MethodInfo patchMethod = patcherType.GetMethod ("Patch"' new Type[]{typeof(Logger)' typeof(AssemblyDefinition)' typeof(AssemblyDefinition)}); " is 141.
Long Statement,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The length of the statement  "					mainLogger.Error("Unable to find the " + curPatcher.patcherClass + ".Patch(Logger'AssemblyDefinition'AssemblyDefinition) method for the patcher " + curPatcher.assemblyFileName + "!"); " is 183.
Long Statement,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The length of the statement  "					Logger curLogger = new Logger (ownFolder.path + Path.DirectorySeparatorChar + "log_" + patcherName + ".txt"' null' (int)(verbosity ? Logger.Level.INFO : Logger.Level.KEYINFO)); " is 176.
Long Statement,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The length of the statement  "					Mono.Cecil.TypeAttributes.AnsiClass | Mono.Cecil.TypeAttributes.BeforeFieldInit' csharpModule.Import(mscorlibDef.Modules[0].GetType("System.Object")))); " is 152.
Long Statement,DeobfuscateMain,Logger,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Logger.cs,Level_ToString,The length of the statement  "			return ((PrependText)level.GetType().GetMember(level.ToString())[0].GetCustomAttributes(typeof(PrependText)'false)[0]).prependText; " is 131.
Magic Number,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The following statement contains a magic number: if ( args.Length == 0 || !args[0].ToLower().EndsWith(".dll") )  			{  				mainLogger.Write("Usage : deobfuscate \"<path to Assembly-CSharp.dll>\"");  				mainLogger.Write("Alternatively' you can drag and drop Assembly-CSharp.dll into deobfuscate.");  				ErrorExit(""' 2);  			}
Magic Number,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The following statement contains a magic number: if (!File.Exists (patchersPath + Path.DirectorySeparatorChar + "patchers.xml")) {  				ErrorExit("There are no patches to apply (patchers.xml doesn't exist)! Exiting."' 3);  			}
Magic Number,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The following statement contains a magic number: if (assemblies.Count == 0) {  				ErrorExit("There are no patches to apply (none listed in patchers.xml)! Exiting."' 3);  			}
Magic Number,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The following statement contains a magic number: foreach (PatcherAssembly curPatcher in assemblies) {  				mainLogger.Write();  				mainLogger.Write();    				string patcherName =   					(curPatcher.assemblyFileName.IndexOf (".") != 0) ? curPatcher.assemblyFileName.Substring(0'curPatcher.assemblyFileName.LastIndexOf(".")) : curPatcher.assemblyFileName;  				string[] authors = new string[]{ "the 7 Days to Die Modding Community" };       				Assembly patcherAssembly;  				try {  					patcherAssembly = Assembly.LoadFrom (patchersPath + Path.DirectorySeparatorChar + patcherName + ".dll");  				} catch (Exception e) {  					mainLogger.Error("Unable to load the patcher " + patcherName + " :");  					mainLogger.Error(e.ToString ());  					continue;  				}  				Type patcherType = patcherAssembly.GetType (curPatcher.patcherClass);  				MethodInfo getNameMethod = patcherType.GetMethod ("getName"' new Type[0]);  				if (getNameMethod != null)  					patcherName = (string)getNameMethod.Invoke (null' new object[0]);  				MethodInfo getAuthorsMethod = patcherType.GetMethod ("getAuthors"' new Type[0]);  				if (getAuthorsMethod != null)  					authors = (string[])getAuthorsMethod.Invoke (null' new object[0]);  				MethodInfo patchMethod = patcherType.GetMethod ("Patch"' new Type[]{typeof(Logger)' typeof(AssemblyDefinition)' typeof(AssemblyDefinition)});  				if (patchMethod == null) {  					mainLogger.Error("Unable to find the " + curPatcher.patcherClass + ".Patch(Logger'AssemblyDefinition'AssemblyDefinition) method for the patcher " + curPatcher.assemblyFileName + "!");  					continue;  				}  				string authorsString = "";  				foreach (string curAuthor in authors) {  					if (authorsString.Length > 0)  						authorsString += "'";  					authorsString += curAuthor;  				}  				mainLogger.KeyInfo("Executing patcher \"" + patcherName + "\" (by " + authorsString + ")...");  				try {  					Logger curLogger = new Logger (ownFolder.path + Path.DirectorySeparatorChar + "log_" + patcherName + ".txt"' null' (int)(verbosity ? Logger.Level.INFO : Logger.Level.KEYINFO));  					patchMethod.Invoke (null' new object[]{ curLogger' csharpDef' null });  					curLogger.Close ();  				} catch (TargetInvocationException e) {  					mainLogger.Error ("ERROR : Invoking the Patch method for " + patcherName + " resulted in an exception :");  					mainLogger.Error (e.InnerException.ToString());  				} catch (Exception e) {  					mainLogger.Error ("ERROR : An exception occured while trying to invoke the Patch method of " + patcherName + " :");  					mainLogger.Error (e.ToString ());  				}  				mainLogger.Info("Writing the current Assembly-CSharp.dll to a MemoryStream...");  				MemoryStream asmCSharpStream = new MemoryStream(csharpFileLen + 2048 + 1024 * assemblies.Count);  				csharpDef.Write(asmCSharpStream);  				mainLogger.Info("Reading the current Assembly-CSharp.dll from the MemoryStream...");  				asmCSharpStream.Seek(0' SeekOrigin.Begin);  				csharpDef = AssemblyDefinition.ReadAssembly(asmCSharpStream' new ReaderParameters{ AssemblyResolver = resolver });  				asmCSharpStream.Close();  				csharpModule = csharpDef.Modules[0];  			}
Magic Number,DeobfuscateMain,Deobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\Deobfuscate-Main\Deobfuscator.cs,Main,The following statement contains a magic number: foreach (PatcherAssembly curPatcher in assemblies) {  				mainLogger.Write();  				mainLogger.Write();    				string patcherName =   					(curPatcher.assemblyFileName.IndexOf (".") != 0) ? curPatcher.assemblyFileName.Substring(0'curPatcher.assemblyFileName.LastIndexOf(".")) : curPatcher.assemblyFileName;  				string[] authors = new string[]{ "the 7 Days to Die Modding Community" };       				Assembly patcherAssembly;  				try {  					patcherAssembly = Assembly.LoadFrom (patchersPath + Path.DirectorySeparatorChar + patcherName + ".dll");  				} catch (Exception e) {  					mainLogger.Error("Unable to load the patcher " + patcherName + " :");  					mainLogger.Error(e.ToString ());  					continue;  				}  				Type patcherType = patcherAssembly.GetType (curPatcher.patcherClass);  				MethodInfo getNameMethod = patcherType.GetMethod ("getName"' new Type[0]);  				if (getNameMethod != null)  					patcherName = (string)getNameMethod.Invoke (null' new object[0]);  				MethodInfo getAuthorsMethod = patcherType.GetMethod ("getAuthors"' new Type[0]);  				if (getAuthorsMethod != null)  					authors = (string[])getAuthorsMethod.Invoke (null' new object[0]);  				MethodInfo patchMethod = patcherType.GetMethod ("Patch"' new Type[]{typeof(Logger)' typeof(AssemblyDefinition)' typeof(AssemblyDefinition)});  				if (patchMethod == null) {  					mainLogger.Error("Unable to find the " + curPatcher.patcherClass + ".Patch(Logger'AssemblyDefinition'AssemblyDefinition) method for the patcher " + curPatcher.assemblyFileName + "!");  					continue;  				}  				string authorsString = "";  				foreach (string curAuthor in authors) {  					if (authorsString.Length > 0)  						authorsString += "'";  					authorsString += curAuthor;  				}  				mainLogger.KeyInfo("Executing patcher \"" + patcherName + "\" (by " + authorsString + ")...");  				try {  					Logger curLogger = new Logger (ownFolder.path + Path.DirectorySeparatorChar + "log_" + patcherName + ".txt"' null' (int)(verbosity ? Logger.Level.INFO : Logger.Level.KEYINFO));  					patchMethod.Invoke (null' new object[]{ curLogger' csharpDef' null });  					curLogger.Close ();  				} catch (TargetInvocationException e) {  					mainLogger.Error ("ERROR : Invoking the Patch method for " + patcherName + " resulted in an exception :");  					mainLogger.Error (e.InnerException.ToString());  				} catch (Exception e) {  					mainLogger.Error ("ERROR : An exception occured while trying to invoke the Patch method of " + patcherName + " :");  					mainLogger.Error (e.ToString ());  				}  				mainLogger.Info("Writing the current Assembly-CSharp.dll to a MemoryStream...");  				MemoryStream asmCSharpStream = new MemoryStream(csharpFileLen + 2048 + 1024 * assemblies.Count);  				csharpDef.Write(asmCSharpStream);  				mainLogger.Info("Reading the current Assembly-CSharp.dll from the MemoryStream...");  				asmCSharpStream.Seek(0' SeekOrigin.Begin);  				csharpDef = AssemblyDefinition.ReadAssembly(asmCSharpStream' new ReaderParameters{ AssemblyResolver = resolver });  				asmCSharpStream.Close();  				csharpModule = csharpDef.Modules[0];  			}
