Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ManualDeobfuscator,PatchHelpers,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\PatchHelpers.cs,OnElement,Cyclomatic complexity of the method is 8
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "				field => HasType (field.FieldType' "System.Collections.Generic.List") && HasGenericParams (field.FieldType' "ClientInfo")' " is 122.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "					&& (targetField = ((FieldReference)method.Body.Instructions[1].Operand).Resolve()).DeclaringType.Equals(typeClientInfoCollection) " is 129.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "				field => HasType (field.FieldType' "System.Collections.Generic.Dictionary") && HasGenericParams (field.FieldType' "System.Int32"' "ClientInfo")' " is 144.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "				field => HasType (field.FieldType' "System.Collections.Generic.Dictionary") && HasGenericParams (field.FieldType' "Steamworks.CSteamID"' "ClientInfo")' " is 151.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "				field => HasType (field.FieldType' "System.Collections.Generic.Dictionary") && HasGenericParams (field.FieldType' "UnityEngine.NetworkPlayer"' "ClientInfo")' " is 157.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "				field => HasType (field.FieldType' "System.Collections.Generic.Dictionary") && HasGenericParams (field.FieldType' "System.String"' "ClientInfo")' " is 145.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "						field => HasType (field.FieldType' "System.Collections.Generic.SortedList") && HasGenericParams (field.FieldType' "System.String"' "IConsoleCommand")' " is 150.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "						field => HasType (field.FieldType' "System.Collections.Generic.List") && HasGenericParams (field.FieldType' "IConsoleServer")' " is 126.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "							if (Find("SdtdConsole::QueuedCommand.command"' type.Fields' field => HasType(field.FieldType' "System.String")) != null && " is 122.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "								Find("SdtdConsole::QueuedCommand.sender"' type.Fields' field => HasType(field.FieldType' "IConsoleConnection")) != null) " is 120.
Long Statement,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The length of the statement  "							field => HasType (field.FieldType' "System.Collections.Generic.List") && HasGenericParams (field.FieldType' typeQueuedCommand)' " is 127.
Long Statement,ManualDeobfuscator,ManualDeobfuscator,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualDeobfuscator.cs,Patch,The length of the statement  "			logger.Log(Logger.Level.KEYINFO' String.Format("Successful: {0} / Failed: {1}"' PatchHelpers.success' PatchHelpers.errors)); " is 124.
Complex Conditional,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The conditional expression  "method.Body.Instructions[1].OpCode == OpCodes.Ldfld && method.Body.Instructions[3].OpCode == OpCodes.Callvirt  					&& (targetField = ((FieldReference)method.Body.Instructions[1].Operand).Resolve()).DeclaringType.Equals(typeClientInfoCollection)  					&& HasGenericParams(targetField.FieldType' method.Parameters[0].ParameterType' method.ReturnType)"  is complex.
Magic Number,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The following statement contains a magic number: foreach (MethodDefinition method in typeClientInfoCollection.Methods.Where((md' index) =>   				(md.Name.StartsWith("By") && md.ReturnType.Name.Equals("ClientInfo") && md.Parameters.Count == 1)))  			{  				FieldDefinition targetField;  				if (method.Body.Instructions[1].OpCode == OpCodes.Ldfld && method.Body.Instructions[3].OpCode == OpCodes.Callvirt  					&& (targetField = ((FieldReference)method.Body.Instructions[1].Operand).Resolve()).DeclaringType.Equals(typeClientInfoCollection)  					&& HasGenericParams(targetField.FieldType' method.Parameters[0].ParameterType' method.ReturnType))  				{  					MakeFieldPublicAction (targetField);  					RenameAction<FieldDefinition>("clients" + method.Name) (targetField);  					success++;  				}  				else  					errors++;  			}
Magic Number,ManualDeobfuscator,ManualPatches,C:\repos\DerPopo_deobfuscate-7dtd\ManualDeobfuscator\ManualPatches.cs,applyManualPatches,The following statement contains a magic number: {  				TypeDefinition typeSdtdConsole = mainModule.GetType ("SdtdConsole");  				TypeDefinition typeQueuedCommand = null;    				// Console  				if (typeSdtdConsole != null) {  					OnElement ("SdtdConsole.executeCommand()"' typeSdtdConsole.Methods'  						method => !method.IsConstructor && !method.IsPublic && method.Parameters.Count == 2 &&  						HasType(method.Parameters[0].ParameterType' "System.String") &&  						HasType(method.Parameters[1].ParameterType' "CommandSenderInfo")'  						MakeMethodPublicAction  					);  					OnElement ("SdtdConsole.commands"' typeSdtdConsole.Fields'  						field => HasType (field.FieldType' "System.Collections.Generic.SortedList") && HasGenericParams (field.FieldType' "System.String"' "IConsoleCommand")'  						MakeFieldPublicAction' RenameAction<FieldDefinition> ("commands"));  					OnElement ("SdtdConsole.servers"' typeSdtdConsole.Fields'  						field => HasType (field.FieldType' "System.Collections.Generic.List") && HasGenericParams (field.FieldType' "IConsoleServer")'  						MakeFieldPublicAction' RenameAction<FieldDefinition> ("servers"));    					OnElement ("SdtdConsole::QueuedCommand"' typeSdtdConsole.NestedTypes'  						type => {  							if (Find("SdtdConsole::QueuedCommand.command"' type.Fields' field => HasType(field.FieldType' "System.String")) != null &&  								Find("SdtdConsole::QueuedCommand.sender"' type.Fields' field => HasType(field.FieldType' "IConsoleConnection")) != null)  							{  								typeQueuedCommand = type;  								return true;  							}  							return false;  						}'  						MakeTypePublicAction' RenameAction<TypeDefinition> ("QueuedCommand"));  					if (typeQueuedCommand != null)  					{  						OnElement ("SdtdConsole.asyncCommands"' typeSdtdConsole.Fields'  							field => HasType (field.FieldType' "System.Collections.Generic.List") && HasGenericParams (field.FieldType' typeQueuedCommand)'  							MakeFieldPublicAction' RenameAction<FieldDefinition> ("asyncCommands"));    						OnElement ("SdtdConsole::QueuedCommand.command"' typeQueuedCommand.Fields'  							field => HasType (field.FieldType' "System.String")'  							RenameAction<FieldDefinition>("command"));    						OnElement ("SdtdConsole::QueuedCommand.sender"' typeQueuedCommand.Fields'  							field => HasType (field.FieldType' "IConsoleConnection")'  							RenameAction<FieldDefinition>("sender"));  					}  				}  				// END Console  			}
