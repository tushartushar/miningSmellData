Implementation smell,Namespace,Class,File,Method,Description
Long Method,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The method has 115 lines of code.
Complex Method,Toxy.Managers,ProfileManager,C:\repos\Reverp_Toxy\Toxy\Managers\ProfileManager.cs,SwitchTo,Cyclomatic complexity of the method is 9
Complex Method,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,Cyclomatic complexity of the method is 14
Complex Method,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,MaskCode,Cyclomatic complexity of the method is 12
Complex Method,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,Cyclomatic complexity of the method is 8
Complex Method,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,Cyclomatic complexity of the method is 18
Complex Method,Toxy.Views,AddFriendView,C:\repos\Reverp_Toxy\Toxy\Views\AddFriendView.xaml.cs,ButtonAddFriend_Click,Cyclomatic complexity of the method is 8
Long Parameter List,Toxy.Tools,DnsUtils,C:\repos\Reverp_Toxy\Toxy\Tools\DnsUtils.cs,DnsQuery,The method has 6 parameters. Parameters: pszName' wType' options' aipServers' ppQueryResults' pReserved
Long Parameter List,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,Yuv420ToBgr,The method has 9 parameters. Parameters: width' height' y' u' v' yStride' uStride' vStride' output
Long Parameter List,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,BgrToYuv420,The method has 6 parameters. Parameters: planeY' planeU' planeV' rgb' width' height
Long Identifier,Toxy.ViewModels,FriendListViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FriendListViewModel.cs,,The length of the parameter _isFriendRequestToggleButtonChecked is 35.
Long Statement,Toxy.Converters,CallStateToVisibilityConverter,C:\repos\Reverp_Toxy\Toxy\Converters\CallStateToVisibilityConverter.cs,Convert,The length of the statement  "            return state.HasFlag(CallState.Calling) || state.HasFlag(CallState.Ringing) ? Visibility.Visible : Visibility.Collapsed; " is 120.
Long Statement,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,SetPlaybackSettings,The length of the statement  "            //TODO: what if our friend is sending stereo but our output device only supports mono? write a conversion method for that " is 121.
Long Statement,Toxy.Managers,CallManager,C:\repos\Reverp_Toxy\Toxy\Managers\CallManager.cs,ToxAv_OnBitrateSuggestion,The length of the statement  "            Debugging.Write(string.Format("Applying ToxAV suggestion: {1} for audio' {2} for video"' e.AudioBitrate' e.VideoBitrate)); " is 122.
Long Statement,Toxy.Managers,ConnectionManager,C:\repos\Reverp_Toxy\Toxy\Managers\ConnectionManager.cs,Tox_OnFriendConnectionStatusChanged,The length of the statement  "            Debugging.Write(string.Format("Friend {0} connnection status changed to: {1}"' _tox.GetFriendName(e.FriendNumber)' e.Status)); " is 126.
Long Statement,Toxy.Managers,NotificationManager,C:\repos\Reverp_Toxy\Toxy\Managers\NotificationManager.cs,Tox_OnFriendMessageReceived,The length of the statement  "            if (!Config.Instance.EnableFlashOnFriendMessage || Config.Instance.NotificationBlacklist.Contains(ProfileManager.Instance.Tox.GetFriendPublicKey(e.FriendNumber).ToString())) " is 173.
Long Statement,Toxy.Managers,AvatarManager,C:\repos\Reverp_Toxy\Toxy\Managers\AvatarManager.cs,Rehash,The length of the statement  "                    var friend = (IFriendObject)MainWindow.Instance.ViewModel.CurrentFriendListView.ChatCollection.FirstOrDefault(f => f is IFriendObject && f.ChatNumber == friendNumber); " is 167.
Long Statement,Toxy.Managers,TransferManager,C:\repos\Reverp_Toxy\Toxy\Managers\TransferManager.cs,SendAvatar,The length of the statement  "                fileInfo = _tox.FileSend(friendNumber' ToxFileKind.Avatar' avatar.Length' "avatar.png"' ToxTools.Hash(avatar)' out error); " is 122.
Long Statement,Toxy.Managers,TransferManager,C:\repos\Reverp_Toxy\Toxy\Managers\TransferManager.cs,Tox_OnFileControlReceived,The length of the statement  "            Debugging.Write(string.Format("Received control: {0} for transfer: {1}. Transfer known?: {2}"' e.Control' e.FileNumber' transfer != null)); " is 139.
Long Statement,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The length of the statement  "            ModulePlacer.PlaceAlignmentPatterns(ref qr' alignmentPatternTable.Where(x => x.Version == version).Select(x => x.PatternPositions).First()' ref blockedModules); " is 160.
Long Statement,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CalculateECCWords,The length of the statement  "                    var resPoly = MultiplyGeneratorPolynomByLeadterm(generatorPolynom' ConvertToAlphaNotation(leadTermSource).PolyItems[0]' i); " is 123.
Long Statement,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryByte,The length of the statement  "                codeBytes = utf8BOM ? Encoding.UTF8.GetPreamble().Concat(Encoding.UTF8.GetBytes(plainText)).ToArray() : Encoding.UTF8.GetBytes(plainText); " is 138.
Long Statement,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,XORPolynoms,The length of the statement  "                polItemRes.Coefficient = longPoly.PolyItems[i].Coefficient ^ (shortPoly.PolyItems.Count > i ? shortPoly.PolyItems[i].Coefficient : 0); " is 134.
Long Statement,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,MultiplyAlphaPolynoms,The length of the statement  "            var exponentsToGlue = resultPolynom.PolyItems.GroupBy(x => x.Exponent).Where(x => x.Count() > 1).Select(x => x.First().Exponent); " is 129.
Long Statement,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlphanumEncDict,The length of the statement  "            alphanumEncTable.ToList().Select((x' i) => new { Chr = x' Index = i }).ToList().ForEach(x => alphanumEncDict.Add(x.Chr' x.Index)); " is 130.
Long Statement,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The length of the statement  "                int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } }; " is 380.
Long Statement,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The length of the statement  "                        score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10; " is 149.
Long Statement,Toxy.Misc.QR,QRCode,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetGraphic,The length of the statement  "                return GetGraphic(pixelsPerModule' ColorTranslator.FromHtml(darkColorHtmlHex)' ColorTranslator.FromHtml(lightColorHtmlHex)); " is 124.
Long Statement,Toxy,App,C:\repos\Reverp_Toxy\Toxy\App.xaml.cs,InitializeComponent,The length of the statement  "            this.DispatcherUnhandledException += new System.Windows.Threading.DispatcherUnhandledExceptionEventHandler(this.Application_DispatcherUnhandledException); " is 154.
Long Statement,Toxy,MainWindow,C:\repos\Reverp_Toxy\Toxy\Windows\MainWindow.xaml.cs,CheckForUpdates,The length of the statement  "                        string msg = string.Format("There is a new update available for installation. The latest version is {0}. Would you like to update?\n\nChanges:\n{1}"' " is 149.
Long Statement,Toxy,MainWindow,C:\repos\Reverp_Toxy\Toxy\Windows\MainWindow.xaml.cs,CheckForUpdates,The length of the statement  "                            MessageBox.Show("Toxy has been updated. This update will be activated after Toxy has been restarted."' "Update successfully installed"' MessageBoxButton.OK' MessageBoxImage.Information); " is 186.
Long Statement,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,ToxAvFrameToBitmap,The length of the statement  "            Yuv420ToBgr((ushort)frame.Width' (ushort)frame.Height' frame.Y' frame.U' frame.V' (uint)frame.YStride' (uint)frame.UStride' (uint)frame.VStride' data); " is 151.
Long Statement,Toxy.ViewModels,FileTransferViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FileTransferViewModel.cs,timer_Elapsed,The length of the statement  "                try { TimeLeft = TimeSpan.FromSeconds((double)(Transfer.Size - Transfer.TransferredBytes) / ((Transfer.TransferredBytes - _lastReceiveCount) * 2)).ToString("h'h 'm'm 's's'"); } " is 176.
Long Statement,Toxy.ViewModels,FriendListViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FriendListViewModel.cs,AcceptCurrentFriendRequest,The length of the statement  "            int friendNumber = ProfileManager.Instance.Tox.AddFriendNoRequest(new ToxKey(ToxKeyType.Public' CurrentFriendRequest.PublicKey)' out error); " is 140.
Long Statement,Toxy.ViewModels,FriendListViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FriendListViewModel.cs,Tox_OnReadReceiptReceived,The length of the statement  "                var msg = friend.ConversationView.Messages.FirstOrDefault(m => m is MessageViewModel && (m as MessageViewModel).MessageId == e.Receipt) as MessageViewModel; " is 156.
Long Statement,Toxy.Views,AddFriendView,C:\repos\Reverp_Toxy\Toxy\Views\AddFriendView.xaml.cs,ButtonAddFriend_Click,The length of the statement  "                        string toxId = DnsUtils.DiscoverToxID(id' Config.Instance.NameServices' !Config.Instance.AllowPublicKeyLookups' !Config.Instance.AllowTox1Lookups); " is 147.
Long Statement,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The length of the statement  "            this.TextBoxEnteredText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBoxEnteredText_TextChanged); " is 128.
Long Statement,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendScreenshot_Click); " is 123.
Long Statement,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click); " is 120.
Long Statement,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ScrollViewer)(target)).ScrollChanged += new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollbackViewer_ScrollChanged); " is 157.
Long Statement,Toxy.Views,FileTransferMessageView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferMessageView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Toxy;component/views/filetransfermessageview.xaml"' System.UriKind.Relative); " is 123.
Long Statement,Toxy.Views,FileTransferView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferView.xaml.cs,TopButton_Click,The length of the statement  "                ProfileManager.Instance.TransferManager.AcceptTransfer(Context.Transfer' dialog.FileName); //cancel the transfer if this fails " is 126.
Long Statement,Toxy.Views,FileTransferView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferView.xaml.cs,OpenFile_Click,The length of the statement  "                var result = MessageBox.Show("Opening executable files could be harmful to your device' do you wish to continue?"' "Warning"' MessageBoxButton.YesNo' MessageBoxImage.Warning); " is 175.
Long Statement,Toxy.Views,FileTransferView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFileLocation_Click); " is 121.
Long Statement,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,RemoveFriend_Click,The length of the statement  "            var result = MessageBox.Show(string.Format("Are you sure you want to delete {0} from your friend list?"' Context.Name)' "Delete friend"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 187.
Long Statement,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,RemoveFriend_Click,The length of the statement  "            if (!(MainWindow.Instance.ViewModel.CurrentFriendListView.RemoveObject(Context) && ProfileManager.Instance.Tox.DeleteFriend(Context.ChatNumber))) " is 145.
Long Statement,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click); " is 120.
Long Statement,Toxy.Views,FriendListView,C:\repos\Reverp_Toxy\Toxy\Views\FriendListView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.AcceptRequest_Click); " is 131.
Long Statement,Toxy.Views,FriendListView,C:\repos\Reverp_Toxy\Toxy\Views\FriendListView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.DeclineRequest_Click); " is 132.
Long Statement,Toxy.Views,GroupControlView,C:\repos\Reverp_Toxy\Toxy\Views\GroupControlView.xaml.cs,LeaveGroup_Click,The length of the statement  "            var result = MessageBox.Show(string.Format("Are you sure you want to leave {0}?"' Context.Name)' "Leave group"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 162.
Long Statement,Toxy.Views,GroupControlView,C:\repos\Reverp_Toxy\Toxy\Views\GroupControlView.xaml.cs,LeaveGroup_Click,The length of the statement  "            if (!(MainWindow.Instance.ViewModel.CurrentFriendListView.RemoveObject(Context) && ProfileManager.Instance.Tox.DeleteGroupChat(Context.ChatNumber))) " is 148.
Long Statement,Toxy.Views,GroupControlView,C:\repos\Reverp_Toxy\Toxy\Views\GroupControlView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click); " is 120.
Long Statement,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,PeerCopyPublicKey_Click,The length of the statement  "            Clipboard.SetText(ProfileManager.Instance.Tox.GetGroupPeerPublicKey(Context.ChatObject.ChatNumber' peer.PeerNumber).ToString()); " is 128.
Long Statement,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Toxy;component/views/groupconversationview.xaml"' System.UriKind.Relative); " is 121.
Long Statement,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.PeerCopyPublicKey_Click); " is 122.
Long Statement,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click); " is 120.
Long Statement,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ScrollViewer)(target)).ScrollChanged += new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollbackViewer_ScrollChanged); " is 157.
Long Statement,Toxy.Views,SelfView,C:\repos\Reverp_Toxy\Toxy\Views\SelfView.xaml.cs,EditAvatar_Click,The length of the statement  "                MessageBox.Show("The image you selected appears to be invalid or corrupted."' "Invalid image"' MessageBoxButton.OK' MessageBoxImage.Error); " is 139.
Long Statement,Toxy.Views,SelfView,C:\repos\Reverp_Toxy\Toxy\Views\SelfView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ContextMenu)(target)).AddHandler(System.Windows.Controls.MenuItem.ClickEvent' new System.Windows.RoutedEventHandler(this.ContextMenuItemStatus_Click)); " is 177.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,LoadProfile_Click,The length of the statement  "                MessageBox.Show("You are already using this profile!"' "Can't switch profile"' MessageBoxButton.OK' MessageBoxImage.Error); " is 123.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,ImportProfile_Click,The length of the statement  "                    MessageBox.Show("Could not copy the profile to the profile directory. A file with the same name already exists"' "Error while importing profile"' MessageBoxButton.OK' MessageBoxImage.Error); " is 190.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,ImportProfile_Click,The length of the statement  "                    MessageBox.Show("Could not copy the profile to the profile directory: " + ex.Message' "Error while importing profile"' MessageBoxButton.OK' MessageBoxImage.Error); " is 163.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,ImportProfile_Click,The length of the statement  "            var result = MessageBox.Show(profile.FileName + " has successfully been imported' do you want to switch to this profile?"' "Profile imported"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 193.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,VideoProperties_Click,The length of the statement  "                MessageBox.Show("There is no property window available for this webcam"' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 126.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Apply_Nospam,The length of the statement  "                MessageBox.Show("Could not change nospam. The entered number is not a valid 32-bit unsigned integer."' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 156.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged); " is 158.
Long Statement,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput); " is 150.
Long Statement,Toxy.Windows,ConversationWindow,C:\repos\Reverp_Toxy\Toxy\Windows\ConversationWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Toxy;component/windows/conversationwindow.xaml"' System.UriKind.Relative); " is 120.
Long Statement,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Login_Clicked,The length of the statement  "                MessageBox.Show("Could not load existing profile. Unknown error."' "Error"' MessageBoxButton.OK' MessageBoxImage.Error); " is 120.
Long Statement,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ExistingUser_Click); " is 130.
Long Statement,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.NewUser_Click); " is 125.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\Reverp_Toxy\Toxy\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,Toxy.Managers,CallManager,C:\repos\Reverp_Toxy\Toxy\Managers\CallManager.cs,ToxAv_OnCallStateChanged,The conditional expression  "(e.State & ToxAvFriendCallState.ReceivingAudio) != 0 ||                  (e.State & ToxAvFriendCallState.ReceivingVideo) != 0 ||                  (e.State & ToxAvFriendCallState.SendingAudio) != 0 ||                  (e.State & ToxAvFriendCallState.SendingVideo) != 0"  is complex.
Complex Conditional,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The conditional expression  "!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5)))"  is complex.
Complex Conditional,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The conditional expression  "y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2)"  is complex.
Complex Conditional,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The conditional expression  "(qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10])"  is complex.
Complex Conditional,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The conditional expression  "(qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y])"  is complex.
Empty Catch Block,Toxy.Managers,VideoEngine,C:\repos\Reverp_Toxy\Toxy\Managers\VideoEngine.cs,VideoEngine,The method has an empty catch block.
Empty Catch Block,Toxy.Managers,AvatarManager,C:\repos\Reverp_Toxy\Toxy\Managers\AvatarManager.cs,SaveAvatar,The method has an empty catch block.
Empty Catch Block,Toxy.Managers,AvatarManager,C:\repos\Reverp_Toxy\Toxy\Managers\AvatarManager.cs,RemoveSelfAvatar,The method has an empty catch block.
Empty Catch Block,Toxy.Managers,AvatarManager,C:\repos\Reverp_Toxy\Toxy\Managers\AvatarManager.cs,RemoveAvatar,The method has an empty catch block.
Empty Catch Block,Toxy.Tools,DnsUtils,C:\repos\Reverp_Toxy\Toxy\Tools\DnsUtils.cs,DiscoverToxID,The method has an empty catch block.
Empty Catch Block,Toxy.ViewModels,FileTransferViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FileTransferViewModel.cs,timer_Elapsed,The method has an empty catch block.
Magic Number,Toxy.Converters,BoolToFillColorConverter,C:\repos\Reverp_Toxy\Toxy\Converters\BoolToFillColorConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2)                  return dic["ToxMediumGreyBrush"];
Magic Number,Toxy.Converters,ToxUserStatusToBrushConverter,C:\repos\Reverp_Toxy\Toxy\Converters\ToxUserStatusToBrushConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2)                  return dic["ToxDotOfflineBrush"];
Magic Number,Toxy.Converters,ToxUserStatusToVisualConverter,C:\repos\Reverp_Toxy\Toxy\Converters\ToxUserStatusToVisualConverter.cs,Convert,The following statement contains a magic number: if (values.Length < 2)                  return dic["tox_dot_offline"];
Magic Number,Toxy.Converters,ToxUserStatusToVisualConverter,C:\repos\Reverp_Toxy\Toxy\Converters\ToxUserStatusToVisualConverter.cs,Convert,The following statement contains a magic number: bool hasUnreadMessages = values.Length != 3 ? false : (bool)values[2];
Magic Number,Toxy.Converters,ToxUserStatusToVisualConverter,C:\repos\Reverp_Toxy\Toxy\Converters\ToxUserStatusToVisualConverter.cs,Convert,The following statement contains a magic number: bool hasUnreadMessages = values.Length != 3 ? false : (bool)values[2];
Magic Number,Toxy.Converters.FileTransfers,TransferStateToBackColorConverter,C:\repos\Reverp_Toxy\Toxy\Converters\FileTransfers\TransferStateToBackColorConverter.cs,Convert,The following statement contains a magic number: var isCancelled = values[2] as bool?;
Magic Number,Toxy.Converters.FileTransfers,TransferStateToBottomButtonVisualConverter,C:\repos\Reverp_Toxy\Toxy\Converters\FileTransfers\TransferStateToBottomButtonVisualConverter.cs,Convert,The following statement contains a magic number: var direction = values[2] as FileTransferDirection?;
Magic Number,Toxy.Extensions,LongExtensions,C:\repos\Reverp_Toxy\Toxy\Extensions\LongExtensions.cs,GetSizeString,The following statement contains a magic number: for (i = 0; i < sizes.Length; i++)              {                  if (length < 1024)                      break;                    length = length / 1024;              }
Magic Number,Toxy.Extensions,LongExtensions,C:\repos\Reverp_Toxy\Toxy\Extensions\LongExtensions.cs,GetSizeString,The following statement contains a magic number: for (i = 0; i < sizes.Length; i++)              {                  if (length < 1024)                      break;                    length = length / 1024;              }
Magic Number,Toxy.Extensions,WindowExtensions,C:\repos\Reverp_Toxy\Toxy\Extensions\WindowExtensions.cs,Flash,The following statement contains a magic number: fInfo.dwFlags = 3 | 12;
Magic Number,Toxy.Extensions,WindowExtensions,C:\repos\Reverp_Toxy\Toxy\Extensions\WindowExtensions.cs,Flash,The following statement contains a magic number: fInfo.dwFlags = 3 | 12;
Magic Number,Toxy.Extensions,WindowExtensions,C:\repos\Reverp_Toxy\Toxy\Extensions\WindowExtensions.cs,SetClassLong,The following statement contains a magic number: if (IntPtr.Size > 4)                  return SetClassLongPtr64(hWnd' nIndex' dwNewLong);              else                  return new IntPtr(SetClassLongPtr32(hWnd' nIndex' unchecked((uint)dwNewLong.ToInt32())));
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,AudioEngine,The following statement contains a magic number: if (Config.Instance.RecordingDevice != null && WaveIn.DeviceCount != 0 && Config.Instance.RecordingDevice.Number <= WaveIn.DeviceCount)              {                  var capabilities = WaveIn.GetCapabilities(Config.Instance.RecordingDevice.Number);                  SetRecordingSettings(48000' capabilities.Channels > 2 ? 2 : capabilities.Channels);              }
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,AudioEngine,The following statement contains a magic number: if (Config.Instance.RecordingDevice != null && WaveIn.DeviceCount != 0 && Config.Instance.RecordingDevice.Number <= WaveIn.DeviceCount)              {                  var capabilities = WaveIn.GetCapabilities(Config.Instance.RecordingDevice.Number);                  SetRecordingSettings(48000' capabilities.Channels > 2 ? 2 : capabilities.Channels);              }
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,AudioEngine,The following statement contains a magic number: if (Config.Instance.RecordingDevice != null && WaveIn.DeviceCount != 0 && Config.Instance.RecordingDevice.Number <= WaveIn.DeviceCount)              {                  var capabilities = WaveIn.GetCapabilities(Config.Instance.RecordingDevice.Number);                  SetRecordingSettings(48000' capabilities.Channels > 2 ? 2 : capabilities.Channels);              }
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,AudioEngine,The following statement contains a magic number: if (Config.Instance.PlaybackDevice != null && WaveOut.DeviceCount != 0 && Config.Instance.PlaybackDevice.Number <= WaveOut.DeviceCount)              {                  var capabilities = WaveOut.GetCapabilities(Config.Instance.PlaybackDevice.Number);                  SetPlaybackSettings(48000' capabilities.Channels > 2 ? 2 : capabilities.Channels);              }
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,AudioEngine,The following statement contains a magic number: if (Config.Instance.PlaybackDevice != null && WaveOut.DeviceCount != 0 && Config.Instance.PlaybackDevice.Number <= WaveOut.DeviceCount)              {                  var capabilities = WaveOut.GetCapabilities(Config.Instance.PlaybackDevice.Number);                  SetPlaybackSettings(48000' capabilities.Channels > 2 ? 2 : capabilities.Channels);              }
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,AudioEngine,The following statement contains a magic number: if (Config.Instance.PlaybackDevice != null && WaveOut.DeviceCount != 0 && Config.Instance.PlaybackDevice.Number <= WaveOut.DeviceCount)              {                  var capabilities = WaveOut.GetCapabilities(Config.Instance.PlaybackDevice.Number);                  SetPlaybackSettings(48000' capabilities.Channels > 2 ? 2 : capabilities.Channels);              }
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,SetRecordingSettings,The following statement contains a magic number: _waveSource.BufferMilliseconds = 20;
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,ProcessAudioFrame,The following statement contains a magic number: int audioLength = ((frame.Data.Length / frame.Channels) * 1000) / frame.SamplingRate;
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,ProcessAudioFrame,The following statement contains a magic number: int wantedDataLength = ((20 * frame.SamplingRate) / 1000) * frame.Channels;
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,ProcessAudioFrame,The following statement contains a magic number: int wantedDataLength = ((20 * frame.SamplingRate) / 1000) * frame.Channels;
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,BytesToShorts,The following statement contains a magic number: short[] shorts = new short[bytes.Length / 2];
Magic Number,Toxy.Managers,AudioEngine,C:\repos\Reverp_Toxy\Toxy\Managers\AudioEngine.cs,ShortsToBytes,The following statement contains a magic number: byte[] bytes = new byte[shorts.Length * 2];
Magic Number,Toxy.Managers,CallManager,C:\repos\Reverp_Toxy\Toxy\Managers\CallManager.cs,ToggleVideo,The following statement contains a magic number: _toxAv.SetVideoBitrate(_callInfo.FriendNumber' enableVideo ? 3000 : 0);
Magic Number,Toxy.Managers,CallManager,C:\repos\Reverp_Toxy\Toxy\Managers\CallManager.cs,Answer,The following statement contains a magic number: if (!_toxAv.Answer(friendNumber' 48' enableVideo ? 3000 : 0' out error))              {                  Debugging.Write("Could not answer call for friend: " + error);                  return false;              }
Magic Number,Toxy.Managers,CallManager,C:\repos\Reverp_Toxy\Toxy\Managers\CallManager.cs,Answer,The following statement contains a magic number: if (!_toxAv.Answer(friendNumber' 48' enableVideo ? 3000 : 0' out error))              {                  Debugging.Write("Could not answer call for friend: " + error);                  return false;              }
Magic Number,Toxy.Managers,CallManager,C:\repos\Reverp_Toxy\Toxy\Managers\CallManager.cs,SendRequest,The following statement contains a magic number: if (!_toxAv.Call(friendNumber' 48' enableVideo ? 3000 : 0' out error))              {                  Debugging.Write("Could not send call request to friend: " + error);                  return false;              }
Magic Number,Toxy.Managers,CallManager,C:\repos\Reverp_Toxy\Toxy\Managers\CallManager.cs,SendRequest,The following statement contains a magic number: if (!_toxAv.Call(friendNumber' 48' enableVideo ? 3000 : 0' out error))              {                  Debugging.Write("Could not send call request to friend: " + error);                  return false;              }
Magic Number,Toxy.Managers,ConnectionManager,C:\repos\Reverp_Toxy\Toxy\Managers\ConnectionManager.cs,Tox_OnConnectionStatusChanged,The following statement contains a magic number: if (e.Status == ToxConnectionStatus.None)              {                  WaitAndBootstrap(2000);              }
Magic Number,Toxy.Managers,ConnectionManager,C:\repos\Reverp_Toxy\Toxy\Managers\ConnectionManager.cs,DoBootstrap,The following statement contains a magic number: if (nodes.Length >= 4)              {                  var random = new Random();                  var indices = new List<int>();                    for (int i = 0; i < 4; )                  {                      int index = random.Next(nodes.Length);                      if (indices.Contains(index))                          continue;                        var node = nodes[index];                      if (Bootstrap(nodes[index]))                      {                          indices.Add(index);                          i++;                      }                  }              }              else              {                  foreach (var node in nodes)                      Bootstrap(node);              }
Magic Number,Toxy.Managers,ConnectionManager,C:\repos\Reverp_Toxy\Toxy\Managers\ConnectionManager.cs,DoBootstrap,The following statement contains a magic number: if (nodes.Length >= 4)              {                  var random = new Random();                  var indices = new List<int>();                    for (int i = 0; i < 4; )                  {                      int index = random.Next(nodes.Length);                      if (indices.Contains(index))                          continue;                        var node = nodes[index];                      if (Bootstrap(nodes[index]))                      {                          indices.Add(index);                          i++;                      }                  }              }              else              {                  foreach (var node in nodes)                      Bootstrap(node);              }
Magic Number,Toxy.Managers,ConnectionManager,C:\repos\Reverp_Toxy\Toxy\Managers\ConnectionManager.cs,DoBootstrap,The following statement contains a magic number: WaitAndBootstrap(20000);
Magic Number,Toxy.Managers,TransferManager,C:\repos\Reverp_Toxy\Toxy\Managers\TransferManager.cs,Tox_OnFileSendRequestReceived,The following statement contains a magic number: switch (e.FileKind)              {                  case ToxFileKind.Avatar:                      {                          if (e.FileSize == 0)                          {                              //friend removed avatar' remove it from our store too                              ProfileManager.Instance.AvatarManager.RemoveAvatar(e.FriendNumber);                              _tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Cancel);                                Debugging.Write("Friend removed avatar");                              break;                          }                            if (e.FileSize > 1 << 16)                          {                              //we don't like this avatar' it's too big                              _tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Cancel);                                Debugging.Write("Avatar too big' ignoring");                              break;                          }                            if (ProfileManager.Instance.AvatarManager.Contains(e.FriendNumber))                          {                              //compare hashes to see if we already have this avatar                              byte[] hash = _tox.FileGetId(e.FriendNumber' e.FileNumber);                              if (hash != null && ProfileManager.Instance.AvatarManager.HashMatches(e.FriendNumber' hash))                              {                                  //we already have this avatar' cancel the transfer                                  _tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Cancel);                                  break;                              }                          }                            var error = ToxErrorFileControl.Ok;                          if (!_tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Resume' out error))                          {                              Debugging.Write("Failed to accept avatar transfer request: " + error);                              break;                          }                            var avatarPath = ProfileManager.Instance.AvatarManager.GetAvatarFilename(e.FriendNumber);                          if (avatarPath == null)                          {                              Debugging.Write("Could not find public key for friend");                              break;                          }                            if (!_transfers.ContainsKey(transfer))                          {                              //catch any scary exceptions (no access' file already in use and whatnot)                              try { _transfers.Add(transfer' new FileStream(avatarPath' FileMode.Create)); }                              catch (Exception ex)                              {                                  Debugging.Write("Can't open filestream: " + ex.ToString());                              }                          }                          else                              Debugging.Write("We already have a transfer with that number!");                            break;                      }                  case ToxFileKind.Data:                      {                          if (!_transfers.ContainsKey(transfer))                              _transfers.Add(transfer' null);                          else                          {                              Debugging.Write("We already have a transfer with that number!");                              return;                          }                            MainWindow.Instance.UInvoke(() =>                          {                              var friend = MainWindow.Instance.ViewModel.CurrentFriendListView.FindFriend(e.FriendNumber);                              if (friend == null)                                  return;                                (friend.ConversationView as ConversationViewModel).AddTransfer(transfer);                          });                            break;                      }              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: var modeIndicator = DecToBin((int)encoding' 4);
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: var dataLength = eccInfo.TotalDataCodewords * 8;
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: if (lengthDiff > 0)                  bitString += new string('0'' Math.Min(lengthDiff' 4));
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: if ((bitString.Length % 8) != 0)                  bitString += new string('0'' 8 - (bitString.Length % 8));
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: if ((bitString.Length % 8) != 0)                  bitString += new string('0'' 8 - (bitString.Length % 8));
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: if ((bitString.Length % 8) != 0)                  bitString += new string('0'' 8 - (bitString.Length % 8));
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: for (int i = 0; i < eccInfo.BlocksInGroup1; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup1 * 8' eccInfo.CodewordsInGroup1 * 8);                  codeWordWithECC.Add(new CodewordBlock()                  {                      BitString = bitStr'                      BlockNumber = i + 1'                      GroupNumber = 1'                      CodeWords = BinaryStringToBitBlockList(bitStr)'                      ECCWords = CalculateECCWords(bitStr' eccInfo)                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: for (int i = 0; i < eccInfo.BlocksInGroup1; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup1 * 8' eccInfo.CodewordsInGroup1 * 8);                  codeWordWithECC.Add(new CodewordBlock()                  {                      BitString = bitStr'                      BlockNumber = i + 1'                      GroupNumber = 1'                      CodeWords = BinaryStringToBitBlockList(bitStr)'                      ECCWords = CalculateECCWords(bitStr' eccInfo)                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: bitString = bitString.Substring(eccInfo.BlocksInGroup1 * eccInfo.CodewordsInGroup1 * 8);
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: for (int i = 0; i < eccInfo.BlocksInGroup2; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup2 * 8' eccInfo.CodewordsInGroup2 * 8);                  codeWordWithECC.Add(new CodewordBlock()                  {                      BitString = bitStr'                      BlockNumber = i + 1'                      GroupNumber = 2'                      CodeWords = BinaryStringToBitBlockList(bitStr)'                      ECCWords = CalculateECCWords(bitStr' eccInfo)                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: for (int i = 0; i < eccInfo.BlocksInGroup2; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup2 * 8' eccInfo.CodewordsInGroup2 * 8);                  codeWordWithECC.Add(new CodewordBlock()                  {                      BitString = bitStr'                      BlockNumber = i + 1'                      GroupNumber = 2'                      CodeWords = BinaryStringToBitBlockList(bitStr)'                      ECCWords = CalculateECCWords(bitStr' eccInfo)                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: for (int i = 0; i < eccInfo.BlocksInGroup2; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup2 * 8' eccInfo.CodewordsInGroup2 * 8);                  codeWordWithECC.Add(new CodewordBlock()                  {                      BitString = bitStr'                      BlockNumber = i + 1'                      GroupNumber = 2'                      CodeWords = BinaryStringToBitBlockList(bitStr)'                      ECCWords = CalculateECCWords(bitStr' eccInfo)                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateQrCode,The following statement contains a magic number: if (version >= 7)              {                  var versionString = GetVersionString(version);                  ModulePlacer.PlaceVersion(ref qr' versionString);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetFormatString,The following statement contains a magic number: fStr += DecToBin(maskVersion' 3);
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetFormatString,The following statement contains a magic number: var fStrEcc = fStr.PadRight(15' '0').TrimStart('0');
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetFormatString,The following statement contains a magic number: while (fStrEcc.Length > 10)              {                  StringBuilder sb = new StringBuilder();                  generator = generator.PadRight(fStrEcc.Length' '0');                  for (int i = 0; i < fStrEcc.Length; i++)                      sb.Append((Convert.ToInt32(fStrEcc[i]) ^ Convert.ToInt32(generator[i])).ToString());                  fStrEcc = sb.ToString().TrimStart('0');              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetFormatString,The following statement contains a magic number: fStrEcc = fStrEcc.PadLeft(10' '0');
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetVersionString,The following statement contains a magic number: var vStr = DecToBin(version' 6);
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetVersionString,The following statement contains a magic number: var vStrEcc = vStr.PadRight(18' '0').TrimStart('0');
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetVersionString,The following statement contains a magic number: while (vStrEcc.Length > 12)              {                  StringBuilder sb = new StringBuilder();                  generator = generator.PadRight(vStrEcc.Length' '0');                  for (int i = 0; i < vStrEcc.Length; i++)                      sb.Append((Convert.ToInt32(vStrEcc[i]) ^ Convert.ToInt32(generator[i])).ToString());                  vStrEcc = sb.ToString().TrimStart('0');              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetVersionString,The following statement contains a magic number: vStrEcc = vStrEcc.PadLeft(12' '0');
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CalculateECCWords,The following statement contains a magic number: return leadTermSource.PolyItems.Select(x => DecToBin(x.Coefficient' 8)).ToList();
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CalculateMessagePolynom,The following statement contains a magic number: for (int i = bitString.Length / 8 - 1; i >= 0; i--)              {                  messagePol.PolyItems.Add(new PolynomItem()                  {                      Coefficient = BinToDec(bitString.Substring(0' 8))'                      Exponent = i                  });                  bitString = bitString.Remove(0' 8);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CalculateMessagePolynom,The following statement contains a magic number: for (int i = bitString.Length / 8 - 1; i >= 0; i--)              {                  messagePol.PolyItems.Add(new PolynomItem()                  {                      Coefficient = BinToDec(bitString.Substring(0' 8))'                      Exponent = i                  });                  bitString = bitString.Remove(0' 8);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CalculateMessagePolynom,The following statement contains a magic number: for (int i = bitString.Length / 8 - 1; i >= 0; i--)              {                  messagePol.PolyItems.Add(new PolynomItem()                  {                      Coefficient = BinToDec(bitString.Substring(0' 8))'                      Exponent = i                  });                  bitString = bitString.Remove(0' 8);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,BinaryStringToBitBlockList,The following statement contains a magic number: return bitString.ToList().Select((x' i) => new { Index = i' Value = x })                  .GroupBy(x => x.Index / 8)                  .Select(x => String.Join(""' x.Select(v => v.Value.ToString()).ToArray()))                  .ToList();
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,BinToDec,The following statement contains a magic number: return Convert.ToInt32(binStr' 2);
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,DecToBin,The following statement contains a magic number: return Convert.ToString(decNum' 2);
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,GetDataLength,The following statement contains a magic number: return IsUtf8(encoding' plainText) ? (codedText.Length / 8) : plainText.Length;
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: if (plainText.Length == 2)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 7);              }              else if (plainText.Length == 1)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 4);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: if (plainText.Length == 2)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 7);              }              else if (plainText.Length == 1)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 4);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: if (plainText.Length == 2)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 7);              }              else if (plainText.Length == 1)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 4);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = alphanumEncDict[token[0]] * 45 + alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = alphanumEncDict[token[0]] * 45 + alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = alphanumEncDict[token[0]] * 45 + alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = alphanumEncDict[token[0]] * 45 + alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = alphanumEncDict[token[0]] * 45 + alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: if (plainText.Length > 0)              {                  codeText += DecToBin(alphanumEncDict[plainText[0]]' 6);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlainTextToBinaryByte,The following statement contains a magic number: foreach (var b in codeBytes)                  codeText += DecToBin(b' 8);
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,MultiplyGeneratorPolynomByLeadterm,The following statement contains a magic number: foreach (var polItemBase in genPolynom.PolyItems)              {                  PolynomItem polItemRes = new PolynomItem();                  polItemRes.Coefficient = (polItemBase.Coefficient + leadTerm.Coefficient) % 255;                  polItemRes.Exponent = polItemBase.Exponent - lowerExponentBy;                  resultPolynom.PolyItems.Add(polItemRes);              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ShrinkAlphaExp,The following statement contains a magic number: return (int)((alphaExp % 256) + Math.Floor((double)(alphaExp / 256)));
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ShrinkAlphaExp,The following statement contains a magic number: return (int)((alphaExp % 256) + Math.Floor((double)(alphaExp / 256)));
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (int i = 0; i < (7 * 40); i = i + 7)              {                  List<Point> points = new List<Point>();                  for (int x = 0; x < 7; x++)                  {                      if (alignmentPatternBaseValues[i + x] != 0)                      {                          for (int y = 0; y < 7; y++)                          {                              if (alignmentPatternBaseValues[i + y] != 0)                              {                                  Point p = new Point(alignmentPatternBaseValues[i + x] - 2' alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityECCTable,The following statement contains a magic number: for (int i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  capacityECCTable.AddRange(                  new ECCInfo[]                  {                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.L'                          TotalDataCodewords = capacityECCBaseValues[i]'                          ECCPerBlock = capacityECCBaseValues[i+1]'                          BlocksInGroup1 = capacityECCBaseValues[i+2]'                          CodewordsInGroup1 = capacityECCBaseValues[i+3]'                          BlocksInGroup2  = capacityECCBaseValues[i+4]'                          CodewordsInGroup2 = capacityECCBaseValues[i+5]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.M'                          TotalDataCodewords = capacityECCBaseValues[i+6]'                          ECCPerBlock = capacityECCBaseValues[i+7]'                          BlocksInGroup1 = capacityECCBaseValues[i+8]'                          CodewordsInGroup1 = capacityECCBaseValues[i+9]'                          BlocksInGroup2  = capacityECCBaseValues[i+10]'                          CodewordsInGroup2 = capacityECCBaseValues[i+11]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.Q'                          TotalDataCodewords = capacityECCBaseValues[i+12]'                          ECCPerBlock = capacityECCBaseValues[i+13]'                          BlocksInGroup1 = capacityECCBaseValues[i+14]'                          CodewordsInGroup1 = capacityECCBaseValues[i+15]'                          BlocksInGroup2  = capacityECCBaseValues[i+16]'                          CodewordsInGroup2 = capacityECCBaseValues[i+17]                      }'                      new ECCInfo()                      {                          Version = (i + 24) / 24'                          ErrorCorrectionLevel = ECCLevel.H'                          TotalDataCodewords = capacityECCBaseValues[i+18]'                          ECCPerBlock= capacityECCBaseValues[i+19]'                          BlocksInGroup1 = capacityECCBaseValues[i+20]'                          CodewordsInGroup1 = capacityECCBaseValues[i+21]'                          BlocksInGroup2  = capacityECCBaseValues[i+22]'                          CodewordsInGroup2 = capacityECCBaseValues[i+23]                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateCapacityTable,The following statement contains a magic number: for (int i = 0; i < (16 * 40); i = i + 16)              {                  capacityTable.Add(new VersionInfo()                  {                      Version = (i + 16) / 16'                      Details = new List<VersionInfoDetails>                      {                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.L'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+3] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.M'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+7] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.Q'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+11] }'                               }                          }'                          new VersionInfoDetails(){                               ErrorCorrectionLevel = ECCLevel.H'                               CapacityDict = new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' capacityBaseValues[i+15] }'                               }                          }                      }                  });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAntilogTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  galoisField.Add(new Antilog() { ExponentAlpha = i' IntegerValue = gfItem });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAntilogTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  galoisField.Add(new Antilog() { ExponentAlpha = i' IntegerValue = gfItem });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAntilogTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  galoisField.Add(new Antilog() { ExponentAlpha = i' IntegerValue = gfItem });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAntilogTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  galoisField.Add(new Antilog() { ExponentAlpha = i' IntegerValue = gfItem });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAntilogTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  galoisField.Add(new Antilog() { ExponentAlpha = i' IntegerValue = gfItem });              }
Magic Number,Toxy.Misc.QR,QRCodeGenerator,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,CreateAntilogTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  galoisField.Add(new Antilog() { ExponentAlpha = i' IntegerValue = gfItem });              }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,AddQuietZone,The following statement contains a magic number: bool[] quietLine = new bool[qrCode.ModuleMatrix.Count + 8];
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,AddQuietZone,The following statement contains a magic number: for (int i = 0; i < 4; i++)                      qrCode.ModuleMatrix.Insert(0' new BitArray(quietLine));
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,AddQuietZone,The following statement contains a magic number: for (int i = 0; i < 4; i++)                      qrCode.ModuleMatrix.Add(new BitArray(quietLine));
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,AddQuietZone,The following statement contains a magic number: for (int i = 4; i < qrCode.ModuleMatrix.Count - 4; i++)                  {                      bool[] quietPart = new bool[4] { false' false' false' false };                      List<bool> tmpLine = new List<bool>(quietPart);                      foreach (bool module in qrCode.ModuleMatrix[i])                          tmpLine.Add(module);                      tmpLine.AddRange(quietPart);                      qrCode.ModuleMatrix[i] = new BitArray(tmpLine.ToArray());                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,AddQuietZone,The following statement contains a magic number: for (int i = 4; i < qrCode.ModuleMatrix.Count - 4; i++)                  {                      bool[] quietPart = new bool[4] { false' false' false' false };                      List<bool> tmpLine = new List<bool>(quietPart);                      foreach (bool module in qrCode.ModuleMatrix[i])                          tmpLine.Add(module);                      tmpLine.AddRange(quietPart);                      qrCode.ModuleMatrix[i] = new BitArray(tmpLine.ToArray());                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,AddQuietZone,The following statement contains a magic number: for (int i = 4; i < qrCode.ModuleMatrix.Count - 4; i++)                  {                      bool[] quietPart = new bool[4] { false' false' false' false };                      List<bool> tmpLine = new List<bool>(quietPart);                      foreach (bool module in qrCode.ModuleMatrix[i])                          tmpLine.Add(module);                      tmpLine.AddRange(quietPart);                      qrCode.ModuleMatrix[i] = new BitArray(tmpLine.ToArray());                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceVersion,The following statement contains a magic number: for (int x = 0; x < 6; x++)                  {                      for (int y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1' ? true : false;                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1' ? true : false;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceVersion,The following statement contains a magic number: for (int x = 0; x < 6; x++)                  {                      for (int y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1' ? true : false;                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1' ? true : false;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceVersion,The following statement contains a magic number: for (int x = 0; x < 6; x++)                  {                      for (int y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1' ? true : false;                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1' ? true : false;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceVersion,The following statement contains a magic number: for (int x = 0; x < 6; x++)                  {                      for (int y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1' ? true : false;                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1' ? true : false;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceVersion,The following statement contains a magic number: for (int x = 0; x < 6; x++)                  {                      for (int y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1' ? true : false;                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1' ? true : false;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceVersion,The following statement contains a magic number: for (int x = 0; x < 6; x++)                  {                      for (int y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1' ? true : false;                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1' ? true : false;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: int['] modules = new int[15' 4] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: for (int i = 0; i < 15; i++)                  {                      var p1 = new Point(modules[i' 0]' modules[i' 1]);                      var p2 = new Point(modules[i' 2]' modules[i' 3]);                      qrCode.ModuleMatrix[p1.Y][p1.X] = fStr[i] == '1' ? true : false;                      qrCode.ModuleMatrix[p2.Y][p2.X] = fStr[i] == '1' ? true : false;                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: for (int i = 0; i < 15; i++)                  {                      var p1 = new Point(modules[i' 0]' modules[i' 1]);                      var p2 = new Point(modules[i' 2]' modules[i' 3]);                      qrCode.ModuleMatrix[p1.Y][p1.X] = fStr[i] == '1' ? true : false;                      qrCode.ModuleMatrix[p2.Y][p2.X] = fStr[i] == '1' ? true : false;                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFormat,The following statement contains a magic number: for (int i = 0; i < 15; i++)                  {                      var p1 = new Point(modules[i' 0]' modules[i' 1]);                      var p2 = new Point(modules[i' 2]' modules[i' 3]);                      qrCode.ModuleMatrix[p1.Y][p1.X] = fStr[i] == '1' ? true : false;                      qrCode.ModuleMatrix[p2.Y][p2.X] = fStr[i] == '1' ? true : false;                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,MaskCode,The following statement contains a magic number: foreach (var pattern in typeof(MaskPattern).GetMethods())                  {                      if (pattern.Name.Length == 8 && pattern.Name.Substring(0' 7) == "Pattern")                      {                          QRCode qrTemp = new QRCode(version);                          for (int y = 0; y < size; y++)                          {                              for (int x = 0; x < size; x++)                              {                                  qrTemp.ModuleMatrix[y][x] = qrCode.ModuleMatrix[y][x];                              }                            }                              for (int x = 0; x < size; x++)                          {                              for (int y = 0; y < size; y++)                              {                                  if (!IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  {                                      qrTemp.ModuleMatrix[y][x] ^= (bool)pattern.Invoke(null' new object[] { x' y });                                  }                              }                          }                            var score = MaskPattern.Score(ref qrTemp);                          if (string.IsNullOrEmpty(patternName) || patternScore > score)                          {                              patternName = pattern.Name;                              patternScore = score;                          }                        }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,MaskCode,The following statement contains a magic number: foreach (var pattern in typeof(MaskPattern).GetMethods())                  {                      if (pattern.Name.Length == 8 && pattern.Name.Substring(0' 7) == "Pattern")                      {                          QRCode qrTemp = new QRCode(version);                          for (int y = 0; y < size; y++)                          {                              for (int x = 0; x < size; x++)                              {                                  qrTemp.ModuleMatrix[y][x] = qrCode.ModuleMatrix[y][x];                              }                            }                              for (int x = 0; x < size; x++)                          {                              for (int y = 0; y < size; y++)                              {                                  if (!IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  {                                      qrTemp.ModuleMatrix[y][x] ^= (bool)pattern.Invoke(null' new object[] { x' y });                                  }                              }                          }                            var score = MaskPattern.Score(ref qrTemp);                          if (string.IsNullOrEmpty(patternName) || patternScore > score)                          {                              patternName = pattern.Name;                              patternScore = score;                          }                        }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDataWords,The following statement contains a magic number: for (int x = size - 1; x >= 0; x = x - 2)                  {                      if (x == 7 || x == 6)                          x = 5;                      for (int yMod = 1; yMod <= size; yMod++)                      {                          int y = 0;                          if (up)                          {                              y = size - yMod;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                          else                          {                              y = yMod - 1;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                      }                      up = !up;                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDataWords,The following statement contains a magic number: for (int x = size - 1; x >= 0; x = x - 2)                  {                      if (x == 7 || x == 6)                          x = 5;                      for (int yMod = 1; yMod <= size; yMod++)                      {                          int y = 0;                          if (up)                          {                              y = size - yMod;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                          else                          {                              y = yMod - 1;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                      }                      up = !up;                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDataWords,The following statement contains a magic number: for (int x = size - 1; x >= 0; x = x - 2)                  {                      if (x == 7 || x == 6)                          x = 5;                      for (int yMod = 1; yMod <= size; yMod++)                      {                          int y = 0;                          if (up)                          {                              y = size - yMod;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                          else                          {                              y = yMod - 1;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                      }                      up = !up;                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDataWords,The following statement contains a magic number: for (int x = size - 1; x >= 0; x = x - 2)                  {                      if (x == 7 || x == 6)                          x = 5;                      for (int yMod = 1; yMod <= size; yMod++)                      {                          int y = 0;                          if (up)                          {                              y = size - yMod;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                          else                          {                              y = yMod - 1;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                      }                      up = !up;                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new Rectangle[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new Rectangle[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new Rectangle[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new Rectangle[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new Rectangle[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new Rectangle[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new Rectangle[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDarkModule,The following statement contains a magic number: qrCode.ModuleMatrix[4 * version + 9][8] = true;
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDarkModule,The following statement contains a magic number: qrCode.ModuleMatrix[4 * version + 9][8] = true;
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDarkModule,The following statement contains a magic number: qrCode.ModuleMatrix[4 * version + 9][8] = true;
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDarkModule,The following statement contains a magic number: blockedModules.Add(new Rectangle(8' 4 * version + 9' 1' 1));
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDarkModule,The following statement contains a magic number: blockedModules.Add(new Rectangle(8' 4 * version + 9' 1' 1));
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceDarkModule,The following statement contains a magic number: blockedModules.Add(new Rectangle(8' 4 * version + 9' 1' 1));
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: int[] locations = { 0' 0' size - 7' 0' 0' size - 7 };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: int[] locations = { 0' 0' size - 7' 0' 0' size - 7 };
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceFinderPatterns,The following statement contains a magic number: for (int i = 0; i < 6; i = i + 2)                  {                      for (int x = 0; x < 7; x++)                      {                          for (int y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (int x = 0; x < 5; x++)                      {                          for (int y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: for (int i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: for (int i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: for (int i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: for (int i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: for (int i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,Toxy.Misc.QR,ModulePlacer,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new Rectangle[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern1,The following statement contains a magic number: return (x + y) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern2,The following statement contains a magic number: return y % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern3,The following statement contains a magic number: return x % 3 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern4,The following statement contains a magic number: return (x + y) % 3 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern5,The following statement contains a magic number: return (y / 2 + x / 3) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern5,The following statement contains a magic number: return (y / 2 + x / 3) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern5,The following statement contains a magic number: return (y / 2 + x / 3) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern6,The following statement contains a magic number: return ((x * y) % 2) + ((x * y) % 3) == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern6,The following statement contains a magic number: return ((x * y) % 2) + ((x * y) % 3) == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern7,The following statement contains a magic number: return (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern7,The following statement contains a magic number: return (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern7,The following statement contains a magic number: return (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern8,The following statement contains a magic number: return (((x + y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern8,The following statement contains a magic number: return (((x + y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Pattern8,The following statement contains a magic number: return (((x + y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (int x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score += 3;                              else if (modInRow > 5)                                  score++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score += 3;                              else if (modInColumn > 5)                                  score++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (int x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score += 3;                              else if (modInRow > 5)                                  score++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score += 3;                              else if (modInColumn > 5)                                  score++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (int x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score += 3;                              else if (modInRow > 5)                                  score++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score += 3;                              else if (modInColumn > 5)                                  score++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (int x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score += 3;                              else if (modInRow > 5)                                  score++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score += 3;                              else if (modInColumn > 5)                                  score++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (int x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score += 3;                              else if (modInRow > 5)                                  score++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score += 3;                              else if (modInColumn > 5)                                  score++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (int x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score += 3;                              else if (modInRow > 5)                                  score++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score += 3;                              else if (modInColumn > 5)                                  score++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size - 1; y++)                      {                          for (int x = 0; x < size - 1; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x] == qrCode.ModuleMatrix[y + 1][x] &&                                  qrCode.ModuleMatrix[y][x] == qrCode.ModuleMatrix[y + 1][x + 1])                                  score += 3;                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: for (int y = 0; y < size; y++)                      {                          for (int x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][x] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score += 40;                              }                          }                      }
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: var percent = (blackModules / (qrCode.ModuleMatrix.Count * qrCode.ModuleMatrix.Count)) * 100;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,MaskPattern,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,Score,The following statement contains a magic number: if (percent % 5 == 0)                          score += Math.Min((Math.Abs(percent - 55) / 5)' (Math.Abs(percent - 45) / 5)) * 10;                      else                          score += Math.Min((Math.Abs((int)Math.Floor((decimal)percent / 5) - 50) / 5)' (Math.Abs(((int)Math.Floor((decimal)percent / 5) + 5) - 50) / 5)) * 10;
Magic Number,Toxy.Misc.QR,QRCode,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ModulesPerSideFromVersion,The following statement contains a magic number: return 21 + (version - 1) * 4;
Magic Number,Toxy.Misc.QR,QRCode,C:\repos\Reverp_Toxy\Toxy\Misc\QR\QRCoder.cs,ModulesPerSideFromVersion,The following statement contains a magic number: return 21 + (version - 1) * 4;
Magic Number,Toxy.Tools,DnsUtils,C:\repos\Reverp_Toxy\Toxy\Tools\DnsUtils.cs,FindNameService,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  string[] records = GetSPFRecords("_tox." + domain);                    foreach (string record in records)                  {                      if (!string.IsNullOrEmpty(record))                          return new ToxNameService() { Domain = domain' PublicKey = record };                  }              }
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,ToxAvFrameToBitmap,The following statement contains a magic number: byte[] data = new byte[frame.Width * frame.Height * 4];
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,ToxAvFrameToBitmap,The following statement contains a magic number: int bytesPerPixel = (PixelFormats.Bgra32.BitsPerPixel + 7) / 8;
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,ToxAvFrameToBitmap,The following statement contains a magic number: int bytesPerPixel = (PixelFormats.Bgra32.BitsPerPixel + 7) / 8;
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,ToxAvFrameToBitmap,The following statement contains a magic number: int stride = 4 * ((frame.Width * bytesPerPixel + 3) / 4);
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,ToxAvFrameToBitmap,The following statement contains a magic number: int stride = 4 * ((frame.Width * bytesPerPixel + 3) / 4);
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,ToxAvFrameToBitmap,The following statement contains a magic number: int stride = 4 * ((frame.Width * bytesPerPixel + 3) / 4);
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,BitmapToToxAvFrame,The following statement contains a magic number: byte[] u = new byte[(bmp.Height / 2) * (bmp.Width / 2)];
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,BitmapToToxAvFrame,The following statement contains a magic number: byte[] u = new byte[(bmp.Height / 2) * (bmp.Width / 2)];
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,BitmapToToxAvFrame,The following statement contains a magic number: byte[] v = new byte[(bmp.Height / 2) * (bmp.Width / 2)];
Magic Number,Toxy.Tools,VideoUtils,C:\repos\Reverp_Toxy\Toxy\Tools\VideoUtils.cs,BitmapToToxAvFrame,The following statement contains a magic number: byte[] v = new byte[(bmp.Height / 2) * (bmp.Width / 2)];
Magic Number,Toxy.ViewModels,FileTransferViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FileTransferViewModel.cs,timer_Elapsed,The following statement contains a magic number: Progress = (int)(((double)Transfer.TransferredBytes / Transfer.Size) * 100);
Magic Number,Toxy.ViewModels,FileTransferViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FileTransferViewModel.cs,timer_Elapsed,The following statement contains a magic number: Speed = ((Transfer.TransferredBytes - _lastReceiveCount) * 2).GetSizeString() + "/s";
Magic Number,Toxy.ViewModels,FileTransferViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FileTransferViewModel.cs,timer_Elapsed,The following statement contains a magic number: if (_lastReceiveCount != 0 && Transfer.TransferredBytes != 0)              {                  //catch exception in the event that the timespan is too long                  try { TimeLeft = TimeSpan.FromSeconds((double)(Transfer.Size - Transfer.TransferredBytes) / ((Transfer.TransferredBytes - _lastReceiveCount) * 2)).ToString("h'h 'm'm 's's'"); }                  catch { }              }
Magic Number,Toxy.ViewModels,FriendListViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FriendListViewModel.cs,GetStatusPriority,The following statement contains a magic number: if (!isOnline)                  return 4;
Magic Number,Toxy.ViewModels,FriendListViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FriendListViewModel.cs,GetStatusPriority,The following statement contains a magic number: switch (status)              {                  case ToxUserStatus.None:                      return 0;                  case ToxUserStatus.Away:                      return 1;                  case ToxUserStatus.Busy:                      return 2;                  default:                      return 3;              }
Magic Number,Toxy.ViewModels,FriendListViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FriendListViewModel.cs,GetStatusPriority,The following statement contains a magic number: switch (status)              {                  case ToxUserStatus.None:                      return 0;                  case ToxUserStatus.Away:                      return 1;                  case ToxUserStatus.Busy:                      return 2;                  default:                      return 3;              }
Magic Number,Toxy.ViewModels,SettingsViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\SettingsViewModel.cs,SettingsViewModel,The following statement contains a magic number: using (var bitmap = qrCode.GetGraphic(20))              {                  var ptr = IntPtr.Zero;                  try                  {                      ptr = bitmap.GetHbitmap();                      QRCode = Imaging.CreateBitmapSourceFromHBitmap(ptr' IntPtr.Zero' System.Windows.Int32Rect.Empty' BitmapSizeOptions.FromWidthAndHeight(bitmap.Width' bitmap.Height));                  }                  finally                  {                      if (ptr != IntPtr.Zero)                          DeleteObject(ptr);                  }              }
Magic Number,Toxy.ViewModels,SettingsViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\SettingsViewModel.cs,AudioEngine_OnMicVolumeChanged,The following statement contains a magic number: MainWindow.Instance.UInvoke(() => RecordingVolume = volume * 100);
Magic Number,Toxy.Views,AddFriendView,C:\repos\Reverp_Toxy\Toxy\Views\AddFriendView.xaml.cs,ButtonAddFriend_Click,The following statement contains a magic number: if (Config.Instance.EnableToxDns && id.Contains("@"))              {                  //try resolving 3 times                  for (int tries = 0; tries < 3; tries++)                  {                      try                      {                          string toxId = DnsUtils.DiscoverToxID(id' Config.Instance.NameServices' !Config.Instance.AllowPublicKeyLookups' !Config.Instance.AllowTox1Lookups);                          if (!string.IsNullOrEmpty(toxId))                          {                              //show the tox id to the user before actually adding it to the friend list                              TextBoxFriendId.Text = toxId;                              return;                          }                      }                      catch (Exception ex)                      {                          Debugging.Write(string.Format("Could not resolve {0}: {1}"' id' ex.Message));                      }                  }                    //if we got this far the discovery must have failed                  ShowError("Could not resolve tox username.");                  return;              }
Magic Number,Toxy.Views,AddFriendView,C:\repos\Reverp_Toxy\Toxy\Views\AddFriendView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextBoxFriendId = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.TextBoxMessage = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.ButtonAddFriend = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\..\Views\AddFriendView.xaml"              this.ButtonAddFriend.Click += new System.Windows.RoutedEventHandler(this.ButtonAddFriend_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,AddFriendView,C:\repos\Reverp_Toxy\Toxy\Views\AddFriendView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TextBoxFriendId = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.TextBoxMessage = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.ButtonAddFriend = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\..\Views\AddFriendView.xaml"              this.ButtonAddFriend.Click += new System.Windows.RoutedEventHandler(this.ButtonAddFriend_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,SendMessage,The following statement contains a magic number: if (text.StartsWith("/me "))              {                  //action                  string action = text.Substring(4);                  int messageid = ProfileManager.Instance.Tox.SendMessage(chatNumber' action' ToxMessageType.Action);                    model.Message = action;                  model.MessageId = messageid;                  Context.AddMessage(model);              }              else              {                  //regular message                  //foreach (string message in text.WordWrap(ToxConstants.MaxMessageLength))                  //{                  int messageid = ProfileManager.Instance.Tox.SendMessage(chatNumber' text' ToxMessageType.Message);                      model.Message = text;                  model.MessageId = messageid;                  Context.AddMessage(model);                  //}              }
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,TextBoxEnteredText_TextChanged,The following statement contains a magic number: _typingTimer.Change(1000' -1);
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 69 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonVideo_Click);                            #line default              #line hidden              return;              case 2:                            #line 82 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 191 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden                            #line 192 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBoxEnteredText_TextChanged);                            #line default              #line hidden              return;              case 5:                            #line 199 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendScreenshot_Click);                            #line default              #line hidden              return;              case 6:                            #line 211 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendFile_Click);                            #line default              #line hidden              return;              case 7:                            #line 222 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 69 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonVideo_Click);                            #line default              #line hidden              return;              case 2:                            #line 82 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 191 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden                            #line 192 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBoxEnteredText_TextChanged);                            #line default              #line hidden              return;              case 5:                            #line 199 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendScreenshot_Click);                            #line default              #line hidden              return;              case 6:                            #line 211 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendFile_Click);                            #line default              #line hidden              return;              case 7:                            #line 222 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 69 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonVideo_Click);                            #line default              #line hidden              return;              case 2:                            #line 82 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 191 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden                            #line 192 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBoxEnteredText_TextChanged);                            #line default              #line hidden              return;              case 5:                            #line 199 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendScreenshot_Click);                            #line default              #line hidden              return;              case 6:                            #line 211 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendFile_Click);                            #line default              #line hidden              return;              case 7:                            #line 222 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 69 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonVideo_Click);                            #line default              #line hidden              return;              case 2:                            #line 82 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 191 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden                            #line 192 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBoxEnteredText_TextChanged);                            #line default              #line hidden              return;              case 5:                            #line 199 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendScreenshot_Click);                            #line default              #line hidden              return;              case 6:                            #line 211 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendFile_Click);                            #line default              #line hidden              return;              case 7:                            #line 222 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 69 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonVideo_Click);                            #line default              #line hidden              return;              case 2:                            #line 82 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 191 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden                            #line 192 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBoxEnteredText_TextChanged);                            #line default              #line hidden              return;              case 5:                            #line 199 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendScreenshot_Click);                            #line default              #line hidden              return;              case 6:                            #line 211 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendFile_Click);                            #line default              #line hidden              return;              case 7:                            #line 222 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 135 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.ScrollViewer)(target)).ScrollChanged += new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollbackViewer_ScrollChanged);                            #line default              #line hidden              break;              }
Magic Number,Toxy.Views,FileTransferView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 21 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFile_Click);                            #line default              #line hidden              return;              case 2:                            #line 22 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFileLocation_Click);                            #line default              #line hidden              return;              case 3:                            #line 52 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.TopButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 68 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BottomButton_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,FileTransferView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 21 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFile_Click);                            #line default              #line hidden              return;              case 2:                            #line 22 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFileLocation_Click);                            #line default              #line hidden              return;              case 3:                            #line 52 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.TopButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 68 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BottomButton_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,FileTransferView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 21 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFile_Click);                            #line default              #line hidden              return;              case 2:                            #line 22 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFileLocation_Click);                            #line default              #line hidden              return;              case 3:                            #line 52 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.TopButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 68 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BottomButton_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              case 3:                            #line 42 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyPubKey_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveFriend_Click);                            #line default              #line hidden              return;              case 5:              this.IconUserStatus = ((System.Windows.Controls.Border)(target));              return;              }
Magic Number,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              case 3:                            #line 42 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyPubKey_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveFriend_Click);                            #line default              #line hidden              return;              case 5:              this.IconUserStatus = ((System.Windows.Controls.Border)(target));              return;              }
Magic Number,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              case 3:                            #line 42 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyPubKey_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveFriend_Click);                            #line default              #line hidden              return;              case 5:              this.IconUserStatus = ((System.Windows.Controls.Border)(target));              return;              }
Magic Number,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              case 3:                            #line 42 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyPubKey_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveFriend_Click);                            #line default              #line hidden              return;              case 5:              this.IconUserStatus = ((System.Windows.Controls.Border)(target));              return;              }
Magic Number,Toxy.Views,FriendListView,C:\repos\Reverp_Toxy\Toxy\Views\FriendListView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ToggleButtonFriendRequests = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 2:                            #line 61 "..\..\..\..\Views\FriendListView.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.AcceptRequest_Click);                            #line default              #line hidden              return;              case 3:                            #line 68 "..\..\..\..\Views\FriendListView.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.DeclineRequest_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,FriendListView,C:\repos\Reverp_Toxy\Toxy\Views\FriendListView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ToggleButtonFriendRequests = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 2:                            #line 61 "..\..\..\..\Views\FriendListView.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.AcceptRequest_Click);                            #line default              #line hidden              return;              case 3:                            #line 68 "..\..\..\..\Views\FriendListView.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.DeclineRequest_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,GroupControlView,C:\repos\Reverp_Toxy\Toxy\Views\GroupControlView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.LeaveGroup_Click);                            #line default              #line hidden              return;              case 3:                            #line 29 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,GroupControlView,C:\repos\Reverp_Toxy\Toxy\Views\GroupControlView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.LeaveGroup_Click);                            #line default              #line hidden              return;              case 3:                            #line 29 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,SendMessage,The following statement contains a magic number: if (text.StartsWith("/me "))              {                  //action                  string action = text.Substring(4);                  if (!ProfileManager.Instance.Tox.SendGroupAction(chatNumber' action))                  {                      Debugging.Write("Could not send action to group");                      return;                  }              }              else              {                  if (!ProfileManager.Instance.Tox.SendGroupMessage(chatNumber' text))                  {                      Debugging.Write("Could not send message to group");                      return;                  }              }
Magic Number,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 65 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 3:                            #line 138 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.PeerCopyPublicKey_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 171 "..\..\..\..\Views\GroupConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden              return;              case 5:                            #line 197 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 65 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 3:                            #line 138 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.PeerCopyPublicKey_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 171 "..\..\..\..\Views\GroupConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden              return;              case 5:                            #line 197 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 65 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 3:                            #line 138 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.PeerCopyPublicKey_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 171 "..\..\..\..\Views\GroupConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden              return;              case 5:                            #line 197 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 2:                            #line 112 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.ScrollViewer)(target)).ScrollChanged += new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollbackViewer_ScrollChanged);                            #line default              #line hidden              break;              }
Magic Number,Toxy.Views,MessageView,C:\repos\Reverp_Toxy\Toxy\Views\MessageView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 22 "..\..\..\..\Views\MessageView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyMessage_Click);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\..\Views\MessageView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteMessage_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SelfView,C:\repos\Reverp_Toxy\Toxy\Views\SelfView.xaml.cs,EditAvatar_Click,The following statement contains a magic number: try              {                  bmp = new BitmapImage();                  bmp.BeginInit();                  bmp.UriSource = new Uri(dialog.FileName);                  bmp.DecodePixelWidth = 128; //this should make the file size smaller than 1 << 16                  bmp.CacheOption = BitmapCacheOption.OnLoad;                  bmp.EndInit();              }              catch              {                  MessageBox.Show("The image you selected appears to be invalid or corrupted."' "Invalid image"' MessageBoxButton.OK' MessageBoxImage.Error);                  return;              }
Magic Number,Toxy.Views,SelfView,C:\repos\Reverp_Toxy\Toxy\Views\SelfView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 30 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.EditAvatar_Click);                            #line default              #line hidden              return;              case 2:                            #line 31 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveAvatar_Click);                            #line default              #line hidden              return;              case 3:              this.ButtonUserStatus = ((System.Windows.Controls.Border)(target));                            #line 53 "..\..\..\..\Views\SelfView.xaml"              this.ButtonUserStatus.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ButtonUserStatus_MouseDown);                            #line default              #line hidden              return;              case 4:                            #line 55 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.ContextMenu)(target)).AddHandler(System.Windows.Controls.MenuItem.ClickEvent' new System.Windows.RoutedEventHandler(this.ContextMenuItemStatus_Click));                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SelfView,C:\repos\Reverp_Toxy\Toxy\Views\SelfView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 30 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.EditAvatar_Click);                            #line default              #line hidden              return;              case 2:                            #line 31 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveAvatar_Click);                            #line default              #line hidden              return;              case 3:              this.ButtonUserStatus = ((System.Windows.Controls.Border)(target));                            #line 53 "..\..\..\..\Views\SelfView.xaml"              this.ButtonUserStatus.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ButtonUserStatus_MouseDown);                            #line default              #line hidden              return;              case 4:                            #line 55 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.ContextMenu)(target)).AddHandler(System.Windows.Controls.MenuItem.ClickEvent' new System.Windows.RoutedEventHandler(this.ContextMenuItemStatus_Click));                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SelfView,C:\repos\Reverp_Toxy\Toxy\Views\SelfView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 30 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.EditAvatar_Click);                            #line default              #line hidden              return;              case 2:                            #line 31 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveAvatar_Click);                            #line default              #line hidden              return;              case 3:              this.ButtonUserStatus = ((System.Windows.Controls.Border)(target));                            #line 53 "..\..\..\..\Views\SelfView.xaml"              this.ButtonUserStatus.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ButtonUserStatus_MouseDown);                            #line default              #line hidden              return;              case 4:                            #line 55 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.ContextMenu)(target)).AddHandler(System.Windows.Controls.MenuItem.ClickEvent' new System.Windows.RoutedEventHandler(this.ContextMenuItemStatus_Click));                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,RandomizeNospam_Click,The following statement contains a magic number: byte[] bytes = new byte[4];
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 65 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ExistingUser_Click);                            #line default              #line hidden              return;              case 4:                            #line 69 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.NewUser_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 65 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ExistingUser_Click);                            #line default              #line hidden              return;              case 4:                            #line 69 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.NewUser_Click);                            #line default              #line hidden              return;              }
Magic Number,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 30 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateProfile_Click);                            #line default              #line hidden              break;              case 2:                            #line 41 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Login_Clicked);                            #line default              #line hidden              break;              }
Missing Default,Toxy.Managers,TransferManager,C:\repos\Reverp_Toxy\Toxy\Managers\TransferManager.cs,Tox_OnFileControlReceived,The following switch statement is missing a default case: switch (e.Control)                  {                      case ToxFileControl.Cancel:                          {                              RemoveTransfer(transfer' true);                              break;                          }                      case ToxFileControl.Resume:                          {                              if (!transfer.IsPaused)                                  transfer.Start();                              else                                  transfer.Resume();                                break;                          }                      case ToxFileControl.Pause:                          {                              if (!transfer.IsPaused)                                  transfer.Pause(false);                              else                                  Debugging.Write("Friend tried to pause a transfer that was paused already!");                                break;                          }                  }
Missing Default,Toxy.Managers,TransferManager,C:\repos\Reverp_Toxy\Toxy\Managers\TransferManager.cs,Tox_OnFileSendRequestReceived,The following switch statement is missing a default case: switch (e.FileKind)              {                  case ToxFileKind.Avatar:                      {                          if (e.FileSize == 0)                          {                              //friend removed avatar' remove it from our store too                              ProfileManager.Instance.AvatarManager.RemoveAvatar(e.FriendNumber);                              _tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Cancel);                                Debugging.Write("Friend removed avatar");                              break;                          }                            if (e.FileSize > 1 << 16)                          {                              //we don't like this avatar' it's too big                              _tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Cancel);                                Debugging.Write("Avatar too big' ignoring");                              break;                          }                            if (ProfileManager.Instance.AvatarManager.Contains(e.FriendNumber))                          {                              //compare hashes to see if we already have this avatar                              byte[] hash = _tox.FileGetId(e.FriendNumber' e.FileNumber);                              if (hash != null && ProfileManager.Instance.AvatarManager.HashMatches(e.FriendNumber' hash))                              {                                  //we already have this avatar' cancel the transfer                                  _tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Cancel);                                  break;                              }                          }                            var error = ToxErrorFileControl.Ok;                          if (!_tox.FileControl(e.FriendNumber' e.FileNumber' ToxFileControl.Resume' out error))                          {                              Debugging.Write("Failed to accept avatar transfer request: " + error);                              break;                          }                            var avatarPath = ProfileManager.Instance.AvatarManager.GetAvatarFilename(e.FriendNumber);                          if (avatarPath == null)                          {                              Debugging.Write("Could not find public key for friend");                              break;                          }                            if (!_transfers.ContainsKey(transfer))                          {                              //catch any scary exceptions (no access' file already in use and whatnot)                              try { _transfers.Add(transfer' new FileStream(avatarPath' FileMode.Create)); }                              catch (Exception ex)                              {                                  Debugging.Write("Can't open filestream: " + ex.ToString());                              }                          }                          else                              Debugging.Write("We already have a transfer with that number!");                            break;                      }                  case ToxFileKind.Data:                      {                          if (!_transfers.ContainsKey(transfer))                              _transfers.Add(transfer' null);                          else                          {                              Debugging.Write("We already have a transfer with that number!");                              return;                          }                            MainWindow.Instance.UInvoke(() =>                          {                              var friend = MainWindow.Instance.ViewModel.CurrentFriendListView.FindFriend(e.FriendNumber);                              if (friend == null)                                  return;                                (friend.ConversationView as ConversationViewModel).AddTransfer(transfer);                          });                            break;                      }              }
Missing Default,Toxy.ViewModels,FriendListViewModel,C:\repos\Reverp_Toxy\Toxy\ViewModels\FriendListViewModel.cs,Tox_OnGroupNamelistChange,The following switch statement is missing a default case: switch (e.Change)                  {                      case ToxChatChange.PeerAdd:                          {                              if (peer != null)                              {                                  Debugging.Write("Received ToxChatChange.PeerAdd but that peer is already in our list' replacing...");                                  group.Peers.Remove(peer);                              }                                peer = new GroupPeer(e.PeerNumber' ProfileManager.Instance.Tox.GetGroupPeerPublicKey(e.GroupNumber' e.PeerNumber));                              string name = ProfileManager.Instance.Tox.GetGroupMemberName(e.GroupNumber' e.PeerNumber);                                if (!string.IsNullOrEmpty(name))                                  peer.Name = name;                                group.Peers.Add(peer);                              break;                          }                      case ToxChatChange.PeerDel:                          {                              if (peer == null)                                  Debugging.Write("Received ToxChatChange.PeerDel but we don't know about this peer' ignoring...");                              else                                  group.Peers.Remove(peer);                                break;                          }                      case ToxChatChange.PeerName:                          {                              if (peer == null)                                  Debugging.Write("Received ToxChatChange.PeerName but we don't know about this peer' HELP!");                              else                                  peer.Name = ProfileManager.Instance.Tox.GetGroupMemberName(e.GroupNumber' e.PeerNumber);                                break;                          }                  }
Missing Default,Toxy.Views,AddFriendView,C:\repos\Reverp_Toxy\Toxy\Views\AddFriendView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.TextBoxFriendId = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.TextBoxMessage = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.ButtonAddFriend = ((System.Windows.Controls.Button)(target));                            #line 37 "..\..\..\..\Views\AddFriendView.xaml"              this.ButtonAddFriend.Click += new System.Windows.RoutedEventHandler(this.ButtonAddFriend_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 69 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonVideo_Click);                            #line default              #line hidden              return;              case 2:                            #line 82 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 191 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden                            #line 192 "..\..\..\..\Views\ConversationView.xaml"              this.TextBoxEnteredText.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.TextBoxEnteredText_TextChanged);                            #line default              #line hidden              return;              case 5:                            #line 199 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendScreenshot_Click);                            #line default              #line hidden              return;              case 6:                            #line 211 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendFile_Click);                            #line default              #line hidden              return;              case 7:                            #line 222 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,ConversationView,C:\repos\Reverp_Toxy\Toxy\Views\ConversationView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 3:                            #line 135 "..\..\..\..\Views\ConversationView.xaml"              ((System.Windows.Controls.ScrollViewer)(target)).ScrollChanged += new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollbackViewer_ScrollChanged);                            #line default              #line hidden              break;              }
Missing Default,Toxy.Views,FileTransferView,C:\repos\Reverp_Toxy\Toxy\Views\FileTransferView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 21 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFile_Click);                            #line default              #line hidden              return;              case 2:                            #line 22 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenFileLocation_Click);                            #line default              #line hidden              return;              case 3:                            #line 52 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.TopButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 68 "..\..\..\..\Views\FileTransferView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.BottomButton_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,FriendControlView,C:\repos\Reverp_Toxy\Toxy\Views\FriendControlView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              case 3:                            #line 42 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyPubKey_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\..\Views\FriendControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveFriend_Click);                            #line default              #line hidden              return;              case 5:              this.IconUserStatus = ((System.Windows.Controls.Border)(target));              return;              }
Missing Default,Toxy.Views,FriendListView,C:\repos\Reverp_Toxy\Toxy\Views\FriendListView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.ToggleButtonFriendRequests = ((System.Windows.Controls.Primitives.ToggleButton)(target));              return;              case 2:                            #line 61 "..\..\..\..\Views\FriendListView.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.AcceptRequest_Click);                            #line default              #line hidden              return;              case 3:                            #line 68 "..\..\..\..\Views\FriendListView.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.DeclineRequest_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,GroupControlView,C:\repos\Reverp_Toxy\Toxy\Views\GroupControlView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 27 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.OpenInWindow_Click);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.LeaveGroup_Click);                            #line default              #line hidden              return;              case 3:                            #line 29 "..\..\..\..\Views\GroupControlView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ClearScrollback_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 65 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Call_Click);                            #line default              #line hidden              return;              case 3:                            #line 138 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.PeerCopyPublicKey_Click);                            #line default              #line hidden              return;              case 4:              this.TextBoxEnteredText = ((System.Windows.Controls.TextBox)(target));                            #line 171 "..\..\..\..\Views\GroupConversationView.xaml"              this.TextBoxEnteredText.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.TextBoxEnteredText_KeyDown);                            #line default              #line hidden              return;              case 5:                            #line 197 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonSendMessage_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,GroupConversationView,C:\repos\Reverp_Toxy\Toxy\Views\GroupConversationView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 2:                            #line 112 "..\..\..\..\Views\GroupConversationView.xaml"              ((System.Windows.Controls.ScrollViewer)(target)).ScrollChanged += new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollbackViewer_ScrollChanged);                            #line default              #line hidden              break;              }
Missing Default,Toxy.Views,MessageView,C:\repos\Reverp_Toxy\Toxy\Views\MessageView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 22 "..\..\..\..\Views\MessageView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyMessage_Click);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\..\Views\MessageView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteMessage_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,SelfView,C:\repos\Reverp_Toxy\Toxy\Views\SelfView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 30 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.EditAvatar_Click);                            #line default              #line hidden              return;              case 2:                            #line 31 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.RemoveAvatar_Click);                            #line default              #line hidden              return;              case 3:              this.ButtonUserStatus = ((System.Windows.Controls.Border)(target));                            #line 53 "..\..\..\..\Views\SelfView.xaml"              this.ButtonUserStatus.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ButtonUserStatus_MouseDown);                            #line default              #line hidden              return;              case 4:                            #line 55 "..\..\..\..\Views\SelfView.xaml"              ((System.Windows.Controls.ContextMenu)(target)).AddHandler(System.Windows.Controls.MenuItem.ClickEvent' new System.Windows.RoutedEventHandler(this.ContextMenuItemStatus_Click));                            #line default              #line hidden              return;              }
Missing Default,Toxy.Views,SettingsView,C:\repos\Reverp_Toxy\Toxy\Views\SettingsView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 36 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TabControl)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SettingTab_SelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 100 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyIDButton_Click);                            #line default              #line hidden              return;              case 3:                            #line 130 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadProfile_Click);                            #line default              #line hidden              return;              case 4:                            #line 131 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportProfile_Click);                            #line default              #line hidden              return;              case 5:                            #line 132 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Logout_Click);                            #line default              #line hidden              return;              case 6:              this.TabItemAudioVideo = ((System.Windows.Controls.TabItem)(target));              return;              case 7:              this.ProgressBarPlayback = ((System.Windows.Controls.ProgressBar)(target));              return;              case 8:                            #line 211 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.VideoProperties_Click);                            #line default              #line hidden              return;              case 9:                            #line 264 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Apply_Nospam);                            #line default              #line hidden              return;              case 10:                            #line 265 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RandomizeNospam_Click);                            #line default              #line hidden              return;              case 11:                            #line 309 "..\..\..\..\Views\SettingsView.xaml"              ((System.Windows.Controls.TextBox)(target)).PreviewTextInput += new System.Windows.Input.TextCompositionEventHandler(this.ProxyPort_PreviewTextInput);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 3:                            #line 65 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.ExistingUser_Click);                            #line default              #line hidden              return;              case 4:                            #line 69 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Border)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.NewUser_Click);                            #line default              #line hidden              return;              }
Missing Default,Toxy.Windows,LoginWindow,C:\repos\Reverp_Toxy\Toxy\Windows\LoginWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 30 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CreateProfile_Click);                            #line default              #line hidden              break;              case 2:                            #line 41 "..\..\..\..\Windows\LoginWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Login_Clicked);                            #line default              #line hidden              break;              }
