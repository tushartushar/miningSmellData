Implementation smell,Namespace,Class,File,Method,Description
Long Method,ElasticSearch.Client.QueryString,Conditional,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryString\Conditional.cs,Convert,The method has 245 lines of code.
Complex Method,ElasticSearch.Client.QueryDSL,HighlightConverterer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Misc\HighlightConverterer.cs,WriteJson,Cyclomatic complexity of the method is 18
Complex Method,ElasticSearch.Client.QueryDSL,BoolFilterConverter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Filter\BoolFilterConvert.cs,WriteJson,Cyclomatic complexity of the method is 8
Complex Method,ElasticSearch.Client.QueryDSL,BoolQueryConverterer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\BoolQueryConverter.cs,WriteJson,Cyclomatic complexity of the method is 11
Complex Method,ElasticSearch.Client.QueryDSL,ElasticQueryConverterer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\ElasticQueryConverter.cs,WriteJson,Cyclomatic complexity of the method is 10
Complex Method,ElasticSearch.Client.QueryDSL,FuzzyLikeThisQueryConverter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\FuzzyLikeThisQueryConverter.cs,WriteJson,Cyclomatic complexity of the method is 9
Complex Method,ElasticSearch.Client.QueryDSL,MoreLikeThisQueryConverter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Query\MoreLikeThisQueryConverter.cs,WriteJson,Cyclomatic complexity of the method is 17
Complex Method,ElasticSearch.Client.QueryDSL,TextQueryConverter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\TextQueryConverter.cs,WriteJson,Cyclomatic complexity of the method is 10
Complex Method,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,ElasticSearch.Client.Utils,JsonBuilder,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Utils\JsonBuilder.cs,strValueOf,Cyclomatic complexity of the method is 19
Complex Method,ElasticSearch.Client.Utils,LogWrapper,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Utils\LogWrapper.cs,CurrentStackTrace,Cyclomatic complexity of the method is 9
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Index,The method has 5 parameters. Parameters: index' type' indexKey' dictionary' parentKey
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Index,The method has 5 parameters. Parameters: index' type' indexKey' jsonData' parentKey
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,PartialUpdate,The method has 5 parameters. Parameters: index' type' indexKey' jsonData' routing
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 5 parameters. Parameters: index' type' conditional' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 5 parameters. Parameters: index' type' expression' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 5 parameters. Parameters: index' type' queryString' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 5 parameters. Parameters: index' type' queryString' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 5 parameters. Parameters: index' queryString' from' size' sortString
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 6 parameters. Parameters: index' type' queryString' sortString' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 6 parameters. Parameters: index' type' queryString' sortString' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 7 parameters. Parameters: index' type' queryString' sortString' fields' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,SearchIds,The method has 6 parameters. Parameters: index' type' queryString' sortString' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,SearchIds,The method has 6 parameters. Parameters: index' type' queryString' sortString' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,SearchIds,The method has 6 parameters. Parameters: index' type' conditional' sortString' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 7 parameters. Parameters: index' type' query' sortItem' from' size' fields
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 5 parameters. Parameters: index' type' query' from' size
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 7 parameters. Parameters: index' type' query' sortItem' from' size' fields
Long Parameter List,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The method has 7 parameters. Parameters: index' type' query' from' size' sortItems' fields
Long Parameter List,ElasticSearch.Client.Domain,BulkObject,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Domain\BulkObject.cs,BulkObject,The method has 5 parameters. Parameters: index' type' id' jsonData' parentKey
Long Parameter List,ElasticSearch.Client.Domain,BulkObject,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Domain\BulkObject.cs,BulkObject,The method has 5 parameters. Parameters: index' type' id' fields' parentKey
Long Parameter List,ElasticSearch.Client.Mapping,TypeSetting,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Mapping\TypeSetting.cs,AddStringField,The method has 13 parameters. Parameters: name' indexName' store' index' termVector' boost' nullValue' omitNorms' omitTermFreqAndPositions' analyzer' indexAnalyzer' searchAnalyzer' includeInAll
Long Parameter List,ElasticSearch.Client.Mapping,TypeSetting,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Mapping\TypeSetting.cs,AddNumField,The method has 9 parameters. Parameters: name' type' indexName' index' store' precisionStep' boost' nullValue' includeInAll
Long Parameter List,ElasticSearch.Client.Mapping,TypeSetting,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Mapping\TypeSetting.cs,AddDateField,The method has 9 parameters. Parameters: name' indexName' format' store' index' precisionStep' boost' nullValue' includeInAll
Long Parameter List,ElasticSearch.Client.Mapping,TypeSetting,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Mapping\TypeSetting.cs,AddBooleanField,The method has 9 parameters. Parameters: name' indexName' format' store' index' precisionStep' boost' nullValue' includeInAll
Long Parameter List,ElasticSearch.Client.QueryDSL,NumericRangeFilter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Filter\NumericRangeFilter.cs,NumericRangeFilter,The method has 5 parameters. Parameters: fileld' from' to' includeLower' includeUpper
Long Parameter List,ElasticSearch.Client.QueryDSL,RangeFilter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Filter\RangeFilter.cs,RangeFilter,The method has 5 parameters. Parameters: fileld' from' to' includeLower' includeUpper
Long Parameter List,ElasticSearch.Client.QueryDSL,FuzzyLikeThisQuery,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Query\FuzzyLikeThisQuery.cs,FuzzyLikeThisQuery,The method has 8 parameters. Parameters: fields' likeText' maxQueryTerms' ignoreTermFrequency' minSimilarity' prefixLenght' boost' analyzer
Long Parameter List,ElasticSearch.Client.QueryDSL,RangeQuery,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Query\RangeQuery.cs,RangeQuery,The method has 5 parameters. Parameters: fileld' from' to' includeLower' includeUpper
Long Parameter List,ElasticSearch.Client.QueryString,ExpressionEx,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryString\ExpressionEx.cs,Between,The method has 5 parameters. Parameters: propertyName' valueLo' valueHi' includeBoundary' rangeType
Long Parameter List,ElasticSearch.Client.Transport.Connection,ConnectionBuilder,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Connection\ConnectionBuilder.cs,ConnectionBuilder,The method has 8 parameters. Parameters: socketSettings' host' port' isframed' timeout' pooled' poolSize' lifetime
Long Parameter List,ElasticSearch.Client.Transport,ESNodeManager,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNodeManager.cs,BuildCustomNodes,The method has 5 parameters. Parameters: clusterName' ip' port' transportType' isFramed
Long Parameter List,ElasticSearch.Client.Transport,IRestProvider,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\RestProvider.cs,Process,The method has 5 parameters. Parameters: cluster' strUrl' reqdata' encoding' method
Long Parameter List,ElasticSearch.Client.Transport,RestProvider,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\RestProvider.cs,Process,The method has 5 parameters. Parameters: clusterName' strUrl' reqdata' encoding' method
Long Parameter List,ElasticSearch.Client.Transport.Http,HttpAdaptor,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Http\HttpAdaptor.cs,Process,The method has 5 parameters. Parameters: clusterName' strUrl' reqdata' encoding' method
Long Parameter List,ElasticSearch.Client.Transport.Thrift,ThriftAdaptor,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ThriftAdaptor.cs,Process,The method has 5 parameters. Parameters: clusterName' strUrl' reqdata' encoding' method
Long Parameter List,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The method has 5 parameters. Parameters: src' srcOff' len' dst' dstOff
Long Parameter List,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The method has 5 parameters. Parameters: src' srcOff' len' dst' dstOff
Long Parameter List,Thrift.Server,TServer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Server\TServer.cs,TServer,The method has 7 parameters. Parameters: processor' serverTransport' inputTransportFactory' outputTransportFactory' inputProtocolFactory' outputProtocolFactory' logDelegate
Long Parameter List,Thrift.Server,TThreadedServer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Server\TThreadedServer.cs,TThreadedServer,The method has 8 parameters. Parameters: processor' serverTransport' inputTransportFactory' outputTransportFactory' inputProtocolFactory' outputProtocolFactory' maxThreads' logDel
Long Parameter List,Thrift.Server,TThreadPoolServer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Server\TThreadPoolServer.cs,TThreadPoolServer,The method has 9 parameters. Parameters: processor' serverTransport' inputTransportFactory' outputTransportFactory' inputProtocolFactory' outputProtocolFactory' minThreadPoolThreads' maxThreadPoolThreads' logDel
Long Identifier,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,,The length of the parameter ServerUnreachableBaseWaitSeconds is 32.
Long Identifier,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,,The length of the parameter ServerUnreachableMaxWaitSeconds is 31.
Long Identifier,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,,The length of the parameter _serverDownErrorsLast30Seconds is 30.
Long Identifier,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,,The length of the parameter _serverUnreachableErrorsLast2WaitPeriods is 40.
Long Statement,ElasticSearch.Client.Admin,IndexStoreStatus,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Domain\ClusterState.cs,ToString,The length of the statement  "//			string.Format("primary_size:{0}'primary_size_in_bytes:{1}'size:{2}'size_in_bytes:{3}"' PrimarySize' PrimarySizeInBytes' Size' SizeInBytes); " is 144.
Long Statement,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Delete,The length of the statement  "					"{{ \"delete\" : {{ \"_index\" : \"{0}\"' \"_type\" : \"{1}\"' \"_id\" : \"{2}\"' \"routing\" : \"{3}\" }} }}".Fill(indexName.ToLower()' " is 136.
Long Statement,ElasticSearch.Client.QueryDSL,QueryStringConverter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\QueryStringConverter.cs,WriteJson,The length of the statement  "                if (!string.IsNullOrEmpty(term.DefaultField)) { stringBuilder.Append("\"default_field\":\"" + term.DefaultField + "\"' "); } " is 124.
Long Statement,ElasticSearch.Client.QueryDSL,TermQueryConverter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\TermQueryConvert.cs,WriteJson,The length of the statement  "            //writer.WriteRawValue(string.Format("{{term: {{ \"{0}\" : {{ \"term\" : \"{1}\"' \"boost\":{2} }}}} }}"' term.Field' term.Value' term.Boost)); " is 143.
Long Statement,ElasticSearch.Client.QueryDSL,WildcardQueryConverterer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\WildcardQueryConverter.cs,WriteJson,The length of the statement  "				writer.WriteRawValue(string.Format("{{ wildcard: {{ \"{0}\" : {{ \"wildcard\" : \"{1}\"' \"boost\":{2} }}}} }}"' term.Field' term.WildCardPattern' term.Boost)); " is 160.
Long Statement,ElasticSearch.Client.QueryString,Conditional,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryString\Conditional.cs,Convert,The length of the statement  "							return NumericRangeQuery.NewIntRange(exp.PropertyName' precisionStep' (int)exp.Value' (int)exp.Value1' (bool)exp.Value2' " is 120.
Long Statement,ElasticSearch.Client.QueryString,Conditional,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryString\Conditional.cs,Convert,The length of the statement  "							return NumericRangeQuery.NewLongRange(exp.PropertyName' precisionStep' (long)exp.Value' (long)exp.Value1' (bool)exp.Value2' " is 123.
Long Statement,ElasticSearch.Client.QueryString,Conditional,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryString\Conditional.cs,Convert,The length of the statement  "							return NumericRangeQuery.NewFloatRange(exp.PropertyName' precisionStep' (float)exp.Value' (float)exp.Value1' (bool)exp.Value2' " is 126.
Long Statement,ElasticSearch.Client.QueryString,Conditional,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryString\Conditional.cs,Convert,The length of the statement  "					boolQuery.Add(new FuzzyQuery(new Term(exp.PropertyName' PrepareValueString(exp.Value.ToString()))' similarity)' BooleanClause.Occur.SHOULD); " is 140.
Long Statement,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,IncrementServerUnreachable,The length of the statement  "			else if (_serverUnreachableErrorsLast2WaitPeriods == 0 && _serverUnreachableWaitSeconds != ServerUnreachableBaseWaitSeconds) " is 124.
Complex Conditional,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,LogException,The conditional expression  "error == SocketError.HostUnreachable  				    || error == SocketError.HostNotFound  				    || error == SocketError.ConnectionRefused  				    || error == SocketError.ConnectionReset"  is complex.
Complex Conditional,ElasticSearch.Client.Utils,ElasticSearchExtensions,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Utils\ElasticSearchExtensions.cs,FilterControlChar,The conditional expression  "(controlStr[i] >= 0 && controlStr[i] <= 31) || (controlStr[i] >= 127 && controlStr[i] <= 159)"  is complex.
Empty Catch Block,ElasticSearch.Client.Transport.Connection,ConnectionPool,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Connection\ConnectionPool.cs,ReleaseAll,The method has an empty catch block.
Empty Catch Block,ElasticSearch.Client.Transport.Connection,ConnectionPool,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Connection\ConnectionPool.cs,ReleaseAll,The method has an empty catch block.
Empty Catch Block,Thrift.Server,TThreadedServer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Server\TThreadedServer.cs,ClientWorker,The method has an empty catch block.
Empty Catch Block,Thrift.Server,TThreadPoolServer,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Server\TThreadPoolServer.cs,Execute,The method has an empty catch block.
Empty Catch Block,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,ReceiveCallback,The method has an empty catch block.
Empty Catch Block,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,ReceiveCallback,The method has an empty catch block.
Empty Catch Block,ElasticSearch.Client.Utils,ElasticSearchExtensions,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Utils\ElasticSearchExtensions.cs,InitOrGetFacets,The method has an empty catch block.
Magic Number,ElasticSearch.Client.Config,ConnectionPoolConfig,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Config\ConnectionPoolConfig.cs,ConnectionPoolConfig,The following statement contains a magic number: PoolSize = 30;
Magic Number,ElasticSearch.Client.Config,ConnectionPoolConfig,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Config\ConnectionPoolConfig.cs,ConnectionPoolConfig,The following statement contains a magic number: ConnectionLifetimeMinutes = 60;
Magic Number,ElasticSearch.Client.Config,NodeDefinition,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Config\NodeDefinition.cs,NodeDefinition,The following statement contains a magic number: Port = 9500;
Magic Number,ElasticSearch.Client.Config,NodeDefinition,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Config\NodeDefinition.cs,NodeDefinition,The following statement contains a magic number: DangerZoneThreshold = 5;
Magic Number,ElasticSearch.Client.Config,NodeDefinition,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Config\NodeDefinition.cs,NodeDefinition,The following statement contains a magic number: DangerZoneSeconds = 30;
Magic Number,ElasticSearch.Client.Config,NodeDefinition,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Config\NodeDefinition.cs,NodeDefinition,The following statement contains a magic number: TimeOut = 120;
Magic Number,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Get,The following statement contains a magic number: if (result.Body != null&&(int)result.Status<400)  			{  				var document = new Document();  				document.JsonString = result.GetBody();  				try  				{  					var hitResult = JsonSerializer.Get<Hits>(result.GetBody());  					document.Hits = hitResult;  				}  				catch (System.Exception e)  				{  					_logger.Error(e);  				}    				return document;  			}
Magic Number,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,Search,The following statement contains a magic number: return Search(index' types' queryString' 10);
Magic Number,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,PutMapping,The following statement contains a magic number: if (response != null)  			{  				try  				{  					if (response.Status == Transport.IDL.Status.INTERNAL_SERVER_ERROR ||  					    response.Status == Transport.IDL.Status.BAD_REQUEST)  					{  						//auto create index  						CreateIndex(index' new IndexSetting(5' 1));  						//try again  						response = _provider.Put(url' data);    						return GetOperationResult(response);  					}  				}  				catch (System.Exception e)  				{  					_logger.Error(e);  				}  			}
Magic Number,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,PutMapping,The following statement contains a magic number: if (response != null)  			{  				try  				{  					if (response.Status == Transport.IDL.Status.INTERNAL_SERVER_ERROR ||  					    response.Status == Transport.IDL.Status.BAD_REQUEST)  					{  						//auto create index  						CreateIndex(index' new IndexSetting(5' 1));  						//try again  						response = _provider.Put(url' typeJson);    						return GetOperationResult(response);  					}  				}  				catch (System.Exception e)  				{  					_logger.Error(e);  				}  			}
Magic Number,ElasticSearch.Client,ElasticSearchClient,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\ElasticSearchClient.cs,CreateIndex,The following statement contains a magic number: return CreateIndex(index' new IndexSetting(5' 1));
Magic Number,ElasticSearch.Client.QueryDSL,FuzzyLikeThisQueryConverter,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Converters\Query\FuzzyLikeThisQueryConverter.cs,WriteJson,The following statement contains a magic number: if (term != null)  			{    				writer.WriteStartObject();  				writer.WritePropertyName("fuzzy_like_this");  				writer.WriteStartObject();    				writer.WritePropertyName("fields");  				writer.WriteStartArray();  				foreach (var field in term.Fields)  				{  					writer.WriteValue(field);  				}  				writer.WriteEndArray();    				writer.WritePropertyName("like_text");  				writer.WriteValue(term.LikeText);    				if(term.MaxQueryTerms!=25)  				{  					writer.WritePropertyName("max_query_terms");  					writer.WriteValue(term.MaxQueryTerms);  				}    				if (Math.Abs(term.MinSimilarity - 0.5f) > 0)  				{  					writer.WritePropertyName("min_similarity");  					writer.WriteValue(term.MinSimilarity);  				}		  				  				if (term.PrefixLength  > 0)  				{  					writer.WritePropertyName("prefix_length");  					writer.WriteValue(term.PrefixLength);  				}    				if (term.IgnoreTermFrequency != default(bool))  				{  					writer.WritePropertyName("ignore_tf");  					writer.WriteValue(term.IgnoreTermFrequency.ToString().ToLower());  				}		  				  				if (term.Boost != 1.0f)  				{  					writer.WritePropertyName("boost");  					writer.WriteValue(term.Boost);  				}    				if (! string.IsNullOrEmpty(term.Analyzer))  				{  					writer.WritePropertyName("analyzer");  					writer.WriteValue(term.Analyzer);  				}    				writer.WriteEndObject();  				writer.WriteEndObject();      			}
Magic Number,ElasticSearch.Client.QueryDSL,QueryStringQuery,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryDSL\Query\QueryStringQuery.cs,QueryStringQuery,The following statement contains a magic number: this.FuzzyMinimumSimilarity = 0.5;
Magic Number,ElasticSearch.Client.QueryString,Conditional,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\QueryString\Conditional.cs,Convert,The following statement contains a magic number: switch (exp.ExpressionOperator)  			{  				#region eq    				case ExpressionOperators.Eq:  					object value = exp.Value;    					#region    					//if (value is bool)  					//{  					//    if((bool)value)  					//    { value = SysDefinition.DATA_TYPE_BOOL_TRUE; }  					//    else  					//    { value = SysDefinition.DATA_TYPE_BOOL_FALSE; }  					//}    					#endregion    					if (value is DateTime)  					{  						string startTime = DateTools.DateToString((DateTime)exp.Value' DateTools.Resolution.MINUTE);  						return new TermQuery(new Term(exp.PropertyName' startTime));  					}  					return new TermQuery(new Term(exp.PropertyName' PrepareValueString(value.ToString())));    				#endregion    				#region ge    				case ExpressionOperators.Ge:  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.INT)  					{  						return NumericRangeQuery.NewIntRange(exp.PropertyName' (int)exp.Value' maxSupportedIntValue' true' true);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.LONG)  					{  						return NumericRangeQuery.NewLongRange(exp.PropertyName' (long)exp.Value' maxSupportedLongValue' true' true);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.FLOAT)  					{  						return NumericRangeQuery.NewFloatRange(exp.PropertyName' (float)exp.Value' maxSupportedFloatValue' true' true);  					}    					#region    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DOUBLE)  					{  						return NumericRangeQuery.NewDoubleRange(exp.PropertyName' (double)exp.Value' double.MaxValue' true' true);  					}    					#endregion    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DATETIME)  					{  						string startTime = DateTools.DateToString((DateTime)exp.Value' DateTools.Resolution.MINUTE);  						long end = long.Parse(startTime);  						return NumericRangeQuery.NewLongRange(exp.PropertyName' end' maxSupportedLongValue' true' true);  					}  					return new TermRangeQuery(exp.PropertyName' PrepareValueString(exp.Value.ToString())' null' true' true);  				#endregion    				#region gt    				case ExpressionOperators.Gt:  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.INT)  					{  						return NumericRangeQuery.NewIntRange(exp.PropertyName' (int)exp.Value' maxSupportedIntValue' false' false);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.LONG)  					{  						return NumericRangeQuery.NewLongRange(exp.PropertyName' (long)exp.Value' maxSupportedLongValue' false' false);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.FLOAT)  					{  						return NumericRangeQuery.NewFloatRange(exp.PropertyName' (float)exp.Value' maxSupportedFloatValue' false' false);  					}    					#region    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DOUBLE)  					{  						return NumericRangeQuery.NewDoubleRange(exp.PropertyName' (double)exp.Value' double.MaxValue' false' false);  					}    					#endregion    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DATETIME)  					{  						string startTime = DateTools.DateToString((DateTime)exp.Value' DateTools.Resolution.MINUTE);  						long end = long.Parse(startTime);  						return NumericRangeQuery.NewLongRange(exp.PropertyName' end' maxSupportedLongValue' false' false);  					}  					return new TermRangeQuery(exp.PropertyName' PrepareValueString(exp.Value.ToString())' null' false' false);    				#endregion    				#region le    				case ExpressionOperators.Le:  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.INT)  					{  						return NumericRangeQuery.NewIntRange(exp.PropertyName' minSupportedIntValue' (int)exp.Value' true' true);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.LONG)  					{  						return NumericRangeQuery.NewLongRange(exp.PropertyName' minSupportedLongValue' (long)exp.Value' true' true);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.FLOAT)  					{  						return NumericRangeQuery.NewFloatRange(exp.PropertyName' minSupportedFloatValue' (float)exp.Value' true' true);  					}    					#region    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DOUBLE)  					{  						return NumericRangeQuery.NewDoubleRange(exp.PropertyName' double.MinValue' (double)exp.Value' true' true);  					}    					#endregion    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DATETIME)  					{  						string endTime = DateTools.DateToString((DateTime)exp.Value' DateTools.Resolution.MINUTE);  						long end = long.Parse(endTime);  						return NumericRangeQuery.NewLongRange(exp.PropertyName' minSupportedDateNum' end' true' true);  					}  					return new TermRangeQuery(exp.PropertyName' null' PrepareValueString(exp.Value.ToString())' true' true);    				#endregion      				#region lt    				case ExpressionOperators.Lt:    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.INT)  					{  						return NumericRangeQuery.NewIntRange(exp.PropertyName' minSupportedIntValue' (int)exp.Value' false' false);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.LONG)  					{  						return NumericRangeQuery.NewLongRange(exp.PropertyName' minSupportedLongValue' (long)exp.Value' false' false);  					}  					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.FLOAT)  					{  						return NumericRangeQuery.NewFloatRange(exp.PropertyName' minSupportedFloatValue' (float)exp.Value' false' false);  					}    					#region    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DOUBLE)  					{  						return NumericRangeQuery.NewDoubleRange(exp.PropertyName' double.MinValue' (double)exp.Value' false' false);  					}    					#endregion    					if (exp.Value1 is RangeType && (RangeType)exp.Value1 == RangeType.DATETIME)  					{  						string startTime = DateTools.DateToString((DateTime)exp.Value' DateTools.Resolution.MINUTE);  						long end = long.Parse(startTime);  						return NumericRangeQuery.NewLongRange(exp.PropertyName' minSupportedDateNum' end' false' false);  					}    					return new TermRangeQuery(exp.PropertyName' null' PrepareValueString(exp.Value.ToString())' false' false);    				#endregion    				#region noteq    				case ExpressionOperators.NotEq:    					object value1 = exp.Value;  					if (value1 is bool)  					{  						if ((bool)value1)  						{  							value1 = SysDefinition.DATA_TYPE_BOOL_TRUE;  						}  						else  						{  							value1 = SysDefinition.DATA_TYPE_BOOL_FALSE;  						}  					}  					if (value1 is DateTime)  					{  						value1 = DateTools.DateToString((DateTime)value1' DateTools.Resolution.MINUTE);  					}  					var bq = new BooleanQuery();  					bq.Add(new BooleanClause(new TermQuery(new Term(exp.PropertyName' PrepareValueString(value1.ToString())))'  											 BooleanClause.Occur.MUST_NOT));  					return bq;    				#endregion    				#region between    				case ExpressionOperators.Between:  					int precisionStep = 4;  					if (exp.Value4 is int)  					{  						precisionStep = (int)exp.Value4;  					}  					switch (exp.Value3 is RangeType ? (RangeType)exp.Value3 : (RangeType)0)  					{  						case RangeType.INT:  							return NumericRangeQuery.NewIntRange(exp.PropertyName' precisionStep' (int)exp.Value' (int)exp.Value1' (bool)exp.Value2'  																 (bool)exp.Value2);  						case RangeType.LONG:  							return NumericRangeQuery.NewLongRange(exp.PropertyName' precisionStep' (long)exp.Value' (long)exp.Value1' (bool)exp.Value2'  																  (bool)exp.Value2);  						case RangeType.FLOAT:  							return NumericRangeQuery.NewFloatRange(exp.PropertyName' precisionStep' (float)exp.Value' (float)exp.Value1' (bool)exp.Value2'  																   (bool)exp.Value2);  						case RangeType.DOUBLE:  							return NumericRangeQuery.NewDoubleRange(exp.PropertyName' precisionStep' (double)exp.Value' (double)exp.Value1'  																	(bool)exp.Value2' (bool)exp.Value2);  						case RangeType.DATETIME:  							string startTime = DateTools.DateToString((DateTime)exp.Value' DateTools.Resolution.MINUTE);  							string endTime = DateTools.DateToString((DateTime)exp.Value1' DateTools.Resolution.MINUTE);  							long start = long.Parse(startTime);  							long end = long.Parse(endTime);    							return NumericRangeQuery.NewLongRange(exp.PropertyName' precisionStep' start' end' (bool)exp.Value2' (bool)exp.Value2);  						default:  							{  								return new TermRangeQuery(exp.PropertyName' PrepareValueString(exp.Value.ToString())'  														  PrepareValueString(exp.Value1.ToString())' (bool)exp.Value2'  														  (bool)exp.Value2);  							}  					}    				#endregion    				case ExpressionOperators.Like:  					int prefixLength = 0;  					float similarity = 0.5f;  					if (exp.Value4 is float)  					{  						similarity = (float)exp.Value4;  					}    					var boolQuery = new BooleanQuery();  					var wildQuery = new WildcardQuery(new Term(exp.PropertyName' PrepareValueString("*" + exp.Value + "*")));  					boolQuery.Add(wildQuery' BooleanClause.Occur.SHOULD);  					boolQuery.Add(new FuzzyQuery(new Term(exp.PropertyName' PrepareValueString(exp.Value.ToString()))' similarity)' BooleanClause.Occur.SHOULD);  					return boolQuery;    				case ExpressionOperators.Fuzzy:  					similarity = 0.9f;  					if (exp.Value4 is float)  					{  						similarity = (float)exp.Value4;  					}  					prefixLength = 0;  					if (exp.Value3 is int)  					{  						prefixLength = (int)exp.Value3;  					}  					return new FuzzyQuery(new Term(exp.PropertyName' PrepareValueString(exp.Value.ToString()))' similarity' prefixLength);  //				case ExpressionOperators.IsEmpty:  //					return new TermQuery(new Term(exp.PropertyName' SysDefinition.DATA_TYPE_NULL_OR_EMPTY));  //  //				case ExpressionOperators.IsNotEmpty:  //					var bq2 = new BooleanQuery();  //					bq2.Add(new BooleanClause(new TermQuery(new Term(exp.PropertyName' SysDefinition.DATA_TYPE_NULL_OR_EMPTY))'  //											  BooleanClause.Occur.MUST_NOT));  //					return bq2;    				case ExpressionOperators.StartsWith:  					return new PrefixQuery(new Term(exp.PropertyName' PrepareValueString(exp.Value.ToString())));  				case ExpressionOperators.EndWith:  					return new WildcardQuery(new Term(exp.PropertyName' PrepareValueString("*" + exp.Value)));  				case ExpressionOperators.Contains:  					return new WildcardQuery(new Term(exp.PropertyName' PrepareValueString("*" + exp.Value + "*")));  				default:  					throw new ArgumentOutOfRangeException();  			}
Magic Number,ElasticSearch.Client.Transport.Connection,Connection,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Connection\Connection.cs,Connection,The following statement contains a magic number: if (server.IsFramed)  			{  				var tsocket = new TSocket(server.Host' server.Port);  				_transport = new TFramedTransport(tsocket);  //				_transport = new TFramedTransport(server.Host' server.Port' socketSettings);  			}  			else  			{  				var tsocket = new TSocket(server.Host' server.Port);  				_transport = new TBufferedTransport(tsocket' 1024); //TODO remove hardcode  			}
Magic Number,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,IncrementServerUnreachable,The following statement contains a magic number: if (_serverUnreachableErrorsLast2WaitPeriods >= 2)  			{  				if (_serverUnreachableWaitSeconds <= ServerUnreachableMaxWaitSeconds)  				{  					_serverUnreachableWaitSeconds = (int) (_serverUnreachableWaitSeconds*1.5);  					// want twice the wait period' and then twice that many seconds because it's ticked every 500ms	  					_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  				}  			}  			else if (_serverUnreachableErrorsLast2WaitPeriods == 0 && _serverUnreachableWaitSeconds != ServerUnreachableBaseWaitSeconds)  			{  				_serverUnreachableWaitSeconds = ServerUnreachableBaseWaitSeconds;  				_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  			}
Magic Number,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,IncrementServerUnreachable,The following statement contains a magic number: if (_serverUnreachableErrorsLast2WaitPeriods >= 2)  			{  				if (_serverUnreachableWaitSeconds <= ServerUnreachableMaxWaitSeconds)  				{  					_serverUnreachableWaitSeconds = (int) (_serverUnreachableWaitSeconds*1.5);  					// want twice the wait period' and then twice that many seconds because it's ticked every 500ms	  					_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  				}  			}  			else if (_serverUnreachableErrorsLast2WaitPeriods == 0 && _serverUnreachableWaitSeconds != ServerUnreachableBaseWaitSeconds)  			{  				_serverUnreachableWaitSeconds = ServerUnreachableBaseWaitSeconds;  				_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  			}
Magic Number,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,IncrementServerUnreachable,The following statement contains a magic number: if (_serverUnreachableErrorsLast2WaitPeriods >= 2)  			{  				if (_serverUnreachableWaitSeconds <= ServerUnreachableMaxWaitSeconds)  				{  					_serverUnreachableWaitSeconds = (int) (_serverUnreachableWaitSeconds*1.5);  					// want twice the wait period' and then twice that many seconds because it's ticked every 500ms	  					_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  				}  			}  			else if (_serverUnreachableErrorsLast2WaitPeriods == 0 && _serverUnreachableWaitSeconds != ServerUnreachableBaseWaitSeconds)  			{  				_serverUnreachableWaitSeconds = ServerUnreachableBaseWaitSeconds;  				_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  			}
Magic Number,ElasticSearch.Client.Transport,ESNode,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNode.cs,IncrementServerUnreachable,The following statement contains a magic number: if (_serverUnreachableErrorsLast2WaitPeriods >= 2)  			{  				if (_serverUnreachableWaitSeconds <= ServerUnreachableMaxWaitSeconds)  				{  					_serverUnreachableWaitSeconds = (int) (_serverUnreachableWaitSeconds*1.5);  					// want twice the wait period' and then twice that many seconds because it's ticked every 500ms	  					_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  				}  			}  			else if (_serverUnreachableErrorsLast2WaitPeriods == 0 && _serverUnreachableWaitSeconds != ServerUnreachableBaseWaitSeconds)  			{  				_serverUnreachableWaitSeconds = ServerUnreachableBaseWaitSeconds;  				_serverUnreachableCounter = new AggregateCounter(_serverUnreachableWaitSeconds*4);  			}
Magic Number,ElasticSearch.Client.Transport,ESNodeManager,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNodeManager.cs,BuildHttpNodes,The following statement contains a magic number: if (definitions != null && definitions.Length > 0)  			{  				foreach (NodeDefinition nodeDefinition in definitions)  				{  					if (nodeDefinition.Enabled)  					{  						if (nodeDefinition.Port <= 0||nodeDefinition.Port>65534)  						{  							nodeDefinition.Port = 80;  						}  						result.Add("http://" + nodeDefinition.Host.Trim() + ":" + nodeDefinition.Port);  					}  				}  			}
Magic Number,ElasticSearch.Client.Transport,ESNodeManager,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\ElasticNodeManager.cs,BuildHttpNodes,The following statement contains a magic number: if (definitions != null && definitions.Length > 0)  			{  				foreach (NodeDefinition nodeDefinition in definitions)  				{  					if (nodeDefinition.Enabled)  					{  						if (nodeDefinition.Port <= 0||nodeDefinition.Port>65534)  						{  							nodeDefinition.Port = 80;  						}  						result.Add("http://" + nodeDefinition.Host.Trim() + ":" + nodeDefinition.Port);  					}  				}  			}
Magic Number,ElasticSearch.Client.Transport.Http,HttpAdaptor,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Http\HttpAdaptor.cs,ReadFully,The following statement contains a magic number: var buffer = new byte[128];
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}  				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.I32)  						{  							method = (Method) iprot.ReadI32();  							__isset.method = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.String)  						{  							uri = iprot.ReadString();  							__isset.uri = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 3:  						if (field.Type == TType.Map)  						{  							{  								parameters = new Dictionary<string' string>();  								TMap _map0 = iprot.ReadMapBegin();  								for (int _i1 = 0; _i1 < _map0.Count; ++_i1)  								{  									string _key2;  									string _val3;  									_key2 = iprot.ReadString();  									_val3 = iprot.ReadString();  									parameters[_key2] = _val3;  								}  								iprot.ReadMapEnd();  							}  							__isset.parameters = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 4:  						if (field.Type == TType.Map)  						{  							{  								headers = new Dictionary<string' string>();  								TMap _map4 = iprot.ReadMapBegin();  								for (int _i5 = 0; _i5 < _map4.Count; ++_i5)  								{  									string _key6;  									string _val7;  									_key6 = iprot.ReadString();  									_val7 = iprot.ReadString();  									headers[_key6] = _val7;  								}  								iprot.ReadMapEnd();  							}  							__isset.headers = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 5:  						if (field.Type == TType.String)  						{  							body = iprot.ReadBinary();  							__isset.body = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}  				iprot.ReadFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}  				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.I32)  						{  							method = (Method) iprot.ReadI32();  							__isset.method = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.String)  						{  							uri = iprot.ReadString();  							__isset.uri = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 3:  						if (field.Type == TType.Map)  						{  							{  								parameters = new Dictionary<string' string>();  								TMap _map0 = iprot.ReadMapBegin();  								for (int _i1 = 0; _i1 < _map0.Count; ++_i1)  								{  									string _key2;  									string _val3;  									_key2 = iprot.ReadString();  									_val3 = iprot.ReadString();  									parameters[_key2] = _val3;  								}  								iprot.ReadMapEnd();  							}  							__isset.parameters = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 4:  						if (field.Type == TType.Map)  						{  							{  								headers = new Dictionary<string' string>();  								TMap _map4 = iprot.ReadMapBegin();  								for (int _i5 = 0; _i5 < _map4.Count; ++_i5)  								{  									string _key6;  									string _val7;  									_key6 = iprot.ReadString();  									_val7 = iprot.ReadString();  									headers[_key6] = _val7;  								}  								iprot.ReadMapEnd();  							}  							__isset.headers = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 5:  						if (field.Type == TType.String)  						{  							body = iprot.ReadBinary();  							__isset.body = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}  				iprot.ReadFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}  				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.I32)  						{  							method = (Method) iprot.ReadI32();  							__isset.method = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.String)  						{  							uri = iprot.ReadString();  							__isset.uri = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 3:  						if (field.Type == TType.Map)  						{  							{  								parameters = new Dictionary<string' string>();  								TMap _map0 = iprot.ReadMapBegin();  								for (int _i1 = 0; _i1 < _map0.Count; ++_i1)  								{  									string _key2;  									string _val3;  									_key2 = iprot.ReadString();  									_val3 = iprot.ReadString();  									parameters[_key2] = _val3;  								}  								iprot.ReadMapEnd();  							}  							__isset.parameters = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 4:  						if (field.Type == TType.Map)  						{  							{  								headers = new Dictionary<string' string>();  								TMap _map4 = iprot.ReadMapBegin();  								for (int _i5 = 0; _i5 < _map4.Count; ++_i5)  								{  									string _key6;  									string _val7;  									_key6 = iprot.ReadString();  									_val7 = iprot.ReadString();  									headers[_key6] = _val7;  								}  								iprot.ReadMapEnd();  							}  							__isset.headers = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 5:  						if (field.Type == TType.String)  						{  							body = iprot.ReadBinary();  							__isset.body = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}  				iprot.ReadFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}  				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.I32)  						{  							method = (Method) iprot.ReadI32();  							__isset.method = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.String)  						{  							uri = iprot.ReadString();  							__isset.uri = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 3:  						if (field.Type == TType.Map)  						{  							{  								parameters = new Dictionary<string' string>();  								TMap _map0 = iprot.ReadMapBegin();  								for (int _i1 = 0; _i1 < _map0.Count; ++_i1)  								{  									string _key2;  									string _val3;  									_key2 = iprot.ReadString();  									_val3 = iprot.ReadString();  									parameters[_key2] = _val3;  								}  								iprot.ReadMapEnd();  							}  							__isset.parameters = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 4:  						if (field.Type == TType.Map)  						{  							{  								headers = new Dictionary<string' string>();  								TMap _map4 = iprot.ReadMapBegin();  								for (int _i5 = 0; _i5 < _map4.Count; ++_i5)  								{  									string _key6;  									string _val7;  									_key6 = iprot.ReadString();  									_val7 = iprot.ReadString();  									headers[_key6] = _val7;  								}  								iprot.ReadMapEnd();  							}  							__isset.headers = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 5:  						if (field.Type == TType.String)  						{  							body = iprot.ReadBinary();  							__isset.body = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}  				iprot.ReadFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Write,The following statement contains a magic number: if (uri != null && __isset.uri)  			{  				field.Name = "uri";  				field.Type = TType.String;  				field.ID = 2;  				oprot.WriteFieldBegin(field);  				oprot.WriteString(uri);  				oprot.WriteFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Write,The following statement contains a magic number: if (parameters != null && __isset.parameters)  			{  				field.Name = "parameters";  				field.Type = TType.Map;  				field.ID = 3;  				oprot.WriteFieldBegin(field);  				{  					oprot.WriteMapBegin(new TMap(TType.String' TType.String' parameters.Count));  					foreach (string _iter8 in parameters.Keys)  					{  						oprot.WriteString(_iter8);  						oprot.WriteString(parameters[_iter8]);  						oprot.WriteMapEnd();  					}  				}  				oprot.WriteFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Write,The following statement contains a magic number: if (headers != null && __isset.headers)  			{  				field.Name = "headers";  				field.Type = TType.Map;  				field.ID = 4;  				oprot.WriteFieldBegin(field);  				{  					oprot.WriteMapBegin(new TMap(TType.String' TType.String' headers.Count));  					foreach (string _iter9 in headers.Keys)  					{  						oprot.WriteString(_iter9);  						oprot.WriteString(headers[_iter9]);  						oprot.WriteMapEnd();  					}  				}  				oprot.WriteFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestRequest,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestRequest.cs,Write,The following statement contains a magic number: if (body != null && __isset.body)  			{  				field.Name = "body";  				field.Type = TType.String;  				field.ID = 5;  				oprot.WriteFieldBegin(field);  				oprot.WriteBinary(body);  				oprot.WriteFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestResponse,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestResponse.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}  				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.I32)  						{  							status = (Status) iprot.ReadI32();  							__isset.status = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.Map)  						{  							{  								headers = new Dictionary<string' string>();  								TMap _map10 = iprot.ReadMapBegin();  								for (int _i11 = 0; _i11 < _map10.Count; ++_i11)  								{  									string _key12;  									string _val13;  									_key12 = iprot.ReadString();  									_val13 = iprot.ReadString();  									headers[_key12] = _val13;  								}  								iprot.ReadMapEnd();  							}  							__isset.headers = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 3:  						if (field.Type == TType.String)  						{  							body = iprot.ReadBinary();  							__isset.body = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}  				iprot.ReadFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestResponse,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestResponse.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}  				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.I32)  						{  							status = (Status) iprot.ReadI32();  							__isset.status = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.Map)  						{  							{  								headers = new Dictionary<string' string>();  								TMap _map10 = iprot.ReadMapBegin();  								for (int _i11 = 0; _i11 < _map10.Count; ++_i11)  								{  									string _key12;  									string _val13;  									_key12 = iprot.ReadString();  									_val13 = iprot.ReadString();  									headers[_key12] = _val13;  								}  								iprot.ReadMapEnd();  							}  							__isset.headers = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 3:  						if (field.Type == TType.String)  						{  							body = iprot.ReadBinary();  							__isset.body = true;  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}  				iprot.ReadFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestResponse,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestResponse.cs,Write,The following statement contains a magic number: if (headers != null && __isset.headers)  			{  				field.Name = "headers";  				field.Type = TType.Map;  				field.ID = 2;  				oprot.WriteFieldBegin(field);  				{  					oprot.WriteMapBegin(new TMap(TType.String' TType.String' headers.Count));  					foreach (string _iter14 in headers.Keys)  					{  						oprot.WriteString(_iter14);  						oprot.WriteString(headers[_iter14]);  						oprot.WriteMapEnd();  					}  				}  				oprot.WriteFieldEnd();  			}
Magic Number,ElasticSearch.Client.Transport.IDL,RestResponse,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\IDL\RestResponse.cs,Write,The following statement contains a magic number: if (body != null && __isset.body)  			{  				field.Name = "body";  				field.Type = TType.String;  				field.ID = 3;  				oprot.WriteFieldBegin(field);  				oprot.WriteBinary(body);  				oprot.WriteFieldEnd();  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: dst[dstOff] = (byte) ENCODE_TABLE[(src[srcOff] >> 2) & 0x3F];
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,encode,The following statement contains a magic number: if (len == 3)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[  						((src[srcOff + 1] << 2) + (src[srcOff + 2] >> 6)) & 0x3F];  				dst[dstOff + 3] =  					(byte) ENCODE_TABLE[src[srcOff + 2] & 0x3F];  			}  			else if (len == 2)  			{  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[  						((src[srcOff] << 4) + (src[srcOff + 1] >> 4)) & 0x3F];  				dst[dstOff + 2] =  					(byte) ENCODE_TABLE[(src[srcOff + 1] << 2) & 0x3F];  			}  			else  			{  				// len == 1) {  				dst[dstOff + 1] =  					(byte) ENCODE_TABLE[(src[srcOff] << 4) & 0x3F];  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: dst[dstOff] = (byte)  			              ((DECODE_TABLE[src[srcOff] & 0x0FF] << 2) |  			               (DECODE_TABLE[src[srcOff + 1] & 0x0FF] >> 4));
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: dst[dstOff] = (byte)  			              ((DECODE_TABLE[src[srcOff] & 0x0FF] << 2) |  			               (DECODE_TABLE[src[srcOff + 1] & 0x0FF] >> 4));
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBase64Utils,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBase64Utils.cs,decode,The following statement contains a magic number: if (len > 2)  			{  				dst[dstOff + 1] = (byte)  				                  (((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) |  				                   (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));  				if (len > 3)  				{  					dst[dstOff + 2] = (byte)  					                  (((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) |  					                   DECODE_TABLE[src[srcOff + 3] & 0x0FF]);  				}  			}
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI16,The following statement contains a magic number: i16out[0] = (byte) (0xff & (s >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI16,The following statement contains a magic number: trans.Write(i16out' 0' 2);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[0] = (byte) (0xff & (i32 >> 24));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[1] = (byte) (0xff & (i32 >> 16));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[2] = (byte) (0xff & (i32 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[2] = (byte) (0xff & (i32 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: i32out[3] = (byte) (0xff & i32);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI32,The following statement contains a magic number: trans.Write(i32out' 0' 4);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[0] = (byte) (0xff & (i64 >> 56));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[1] = (byte) (0xff & (i64 >> 48));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[2] = (byte) (0xff & (i64 >> 40));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[2] = (byte) (0xff & (i64 >> 40));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[3] = (byte) (0xff & (i64 >> 32));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[3] = (byte) (0xff & (i64 >> 32));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[4] = (byte) (0xff & (i64 >> 24));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[4] = (byte) (0xff & (i64 >> 24));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[5] = (byte) (0xff & (i64 >> 16));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[5] = (byte) (0xff & (i64 >> 16));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[6] = (byte) (0xff & (i64 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[6] = (byte) (0xff & (i64 >> 8));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: i64out[7] = (byte) (0xff & i64);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,WriteI64,The following statement contains a magic number: trans.Write(i64out' 0' 8);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI16,The following statement contains a magic number: ReadAll(i16in' 0' 2);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI16,The following statement contains a magic number: return (short) (((i16in[0] & 0xff) << 8) | ((i16in[1] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: ReadAll(i32in' 0' 4);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI32,The following statement contains a magic number: return (((i32in[0] & 0xff) << 24) | ((i32in[1] & 0xff) << 16) | ((i32in[2] & 0xff) << 8) | ((i32in[3] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: ReadAll(i64in' 0' 8);
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TBinaryProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TBinaryProtocol.cs,ReadI64,The following statement contains a magic number: return (((long) (i64in[0] & 0xff) << 56) | ((long) (i64in[1] & 0xff) << 48) | ((long) (i64in[2] & 0xff) << 40) |  			        ((long) (i64in[3] & 0xff) << 32) |  			        ((long) (i64in[4] & 0xff) << 24) | ((long) (i64in[5] & 0xff) << 16) | ((long) (i64in[6] & 0xff) << 8) |  			        ((i64in[7] & 0xff)));
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,HexChar,The following statement contains a magic number: if (val < 10)  			{  				return (byte) ((char) val + '0');  			}  			else  			{  				return (byte) ((char) val + 'a');  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONString,The following statement contains a magic number: for (int i = 0; i < len; i++)  			{  				if ((b[i] & 0x00FF) >= 0x30)  				{  					if (b[i] == BACKSLASH[0])  					{  						trans.Write(BACKSLASH);  						trans.Write(BACKSLASH);  					}  					else  					{  						trans.Write(b' i' 1);  					}  				}  				else  				{  					tempBuffer[0] = JSON_CHAR_TABLE[b[i]];  					if (tempBuffer[0] == 1)  					{  						trans.Write(b' i' 1);  					}  					else if (tempBuffer[0] > 1)  					{  						trans.Write(BACKSLASH);  						trans.Write(tempBuffer' 0' 1);  					}  					else  					{  						trans.Write(ESCSEQ);  						tempBuffer[0] = HexChar((byte) (b[i] >> 4));  						tempBuffer[1] = HexChar(b[i]);  						trans.Write(tempBuffer' 0' 2);  					}  				}  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONString,The following statement contains a magic number: for (int i = 0; i < len; i++)  			{  				if ((b[i] & 0x00FF) >= 0x30)  				{  					if (b[i] == BACKSLASH[0])  					{  						trans.Write(BACKSLASH);  						trans.Write(BACKSLASH);  					}  					else  					{  						trans.Write(b' i' 1);  					}  				}  				else  				{  					tempBuffer[0] = JSON_CHAR_TABLE[b[i]];  					if (tempBuffer[0] == 1)  					{  						trans.Write(b' i' 1);  					}  					else if (tempBuffer[0] > 1)  					{  						trans.Write(BACKSLASH);  						trans.Write(tempBuffer' 0' 1);  					}  					else  					{  						trans.Write(ESCSEQ);  						tempBuffer[0] = HexChar((byte) (b[i] >> 4));  						tempBuffer[1] = HexChar(b[i]);  						trans.Write(tempBuffer' 0' 2);  					}  				}  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONBase64,The following statement contains a magic number: while (len >= 3)  			{  				// Encode 3 bytes at a time  				TBase64Utils.encode(b' off' 3' tempBuffer' 0);  				trans.Write(tempBuffer' 0' 4);  				off += 3;  				len -= 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,ReadJSONString,The following statement contains a magic number: while (true)  			{  				byte ch = reader.Read();  				if (ch == QUOTE[0])  				{  					break;  				}  				if (ch == ESCSEQ[0])  				{  					ch = reader.Read();  					if (ch == ESCSEQ[1])  					{  						ReadJSONSyntaxChar(ZERO);  						ReadJSONSyntaxChar(ZERO);  						trans.ReadAll(tempBuffer' 0' 2);  						ch = (byte) ((HexVal(tempBuffer[0]) << 4) + HexVal(tempBuffer[1]));  					}  					else  					{  						int off = Array.IndexOf(ESCAPE_CHARS' ch);  						if (off == -1)  						{  							throw new TProtocolException(TProtocolException.INVALID_DATA'  							                             "Expected control char");  						}  						ch = ESCAPE_CHAR_VALS[off];  					}  				}  				buffer.Write(new[] {ch}' 0' 1);  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,ReadJSONString,The following statement contains a magic number: while (true)  			{  				byte ch = reader.Read();  				if (ch == QUOTE[0])  				{  					break;  				}  				if (ch == ESCSEQ[0])  				{  					ch = reader.Read();  					if (ch == ESCSEQ[1])  					{  						ReadJSONSyntaxChar(ZERO);  						ReadJSONSyntaxChar(ZERO);  						trans.ReadAll(tempBuffer' 0' 2);  						ch = (byte) ((HexVal(tempBuffer[0]) << 4) + HexVal(tempBuffer[1]));  					}  					else  					{  						int off = Array.IndexOf(ESCAPE_CHARS' ch);  						if (off == -1)  						{  							throw new TProtocolException(TProtocolException.INVALID_DATA'  							                             "Expected control char");  						}  						ch = ESCAPE_CHAR_VALS[off];  					}  				}  				buffer.Write(new[] {ch}' 0' 1);  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,ReadJSONBase64,The following statement contains a magic number: while (len >= 4)  			{  				// Decode 4 bytes at a time  				TBase64Utils.decode(b' off' 4' b' size); // NB: decoded in place  				off += 4;  				len -= 4;  				size += 3;  			}
Magic Number,Thrift,TApplicationException,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\TApplicationException.cs,Read,The following statement contains a magic number: while (true)  			{  				field = iprot.ReadFieldBegin();  				if (field.Type == TType.Stop)  				{  					break;  				}    				switch (field.ID)  				{  					case 1:  						if (field.Type == TType.String)  						{  							message = iprot.ReadString();  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					case 2:  						if (field.Type == TType.I32)  						{  							type = (ExceptionType) iprot.ReadI32();  						}  						else  						{  							TProtocolUtil.Skip(iprot' field.Type);  						}  						break;  					default:  						TProtocolUtil.Skip(iprot' field.Type);  						break;  				}    				iprot.ReadFieldEnd();  			}
Magic Number,Thrift,TApplicationException,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\TApplicationException.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[0] = (byte)(0xff & (data_len >> 24));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[1] = (byte)(0xff & (data_len >> 16));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[2] = (byte)(0xff & (data_len >> 8));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[2] = (byte)(0xff & (data_len >> 8));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[3] = (byte)(0xff & (data_len));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,InitWriteBuffer,The following statement contains a magic number: writeBuffer = new MemoryStream(1024);
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,ReadFrame,The following statement contains a magic number: int size =  					((i32rd[0] & 0xff) << 24) |  					((i32rd[1] & 0xff) << 16) |  					((i32rd[2] & 0xff) << 8) |  					((i32rd[3] & 0xff));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[0] = (byte)(0xff & (data_len >> 24));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[1] = (byte)(0xff & (data_len >> 16));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[2] = (byte)(0xff & (data_len >> 8));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[2] = (byte)(0xff & (data_len >> 8));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,Flush,The following statement contains a magic number: buf[3] = (byte)(0xff & (data_len));
Magic Number,Thrift.Transport,TFramedTransport,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TFramedTransport.cs,InitWriteBuffer,The following statement contains a magic number: writeBuffer = new MemoryStream(1024);
Magic Number,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,GetFrameBuffer,The following statement contains a magic number: if (frameBuffer == null)  				frameBuffer = new MemoryStream(4*settings.ReceiveBufferSize);  			else  				frameBuffer.Seek(0' SeekOrigin.Begin);
Magic Number,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,GetFrameLength,The following statement contains a magic number: return (buffer[0] << 24)  			       | (buffer[1] << 16)  			       | (buffer[2] << 8)  			       | (buffer[3]);
Magic Number,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,GetFrameLength,The following statement contains a magic number: return (buffer[0] << 24)  			       | (buffer[1] << 16)  			       | (buffer[2] << 8)  			       | (buffer[3]);
Magic Number,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,GetFrameLength,The following statement contains a magic number: return (buffer[0] << 24)  			       | (buffer[1] << 16)  			       | (buffer[2] << 8)  			       | (buffer[3]);
Magic Number,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,GetFrameLength,The following statement contains a magic number: return (buffer[0] << 24)  			       | (buffer[1] << 16)  			       | (buffer[2] << 8)  			       | (buffer[3]);
Magic Number,Thrift.Transport,TSocketV2,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Transport\TSocketV2.cs,GetFrameLength,The following statement contains a magic number: return (buffer[0] << 24)  			       | (buffer[1] << 16)  			       | (buffer[2] << 8)  			       | (buffer[3]);
Magic Number,ElasticSearch.Client.Utils,ElasticSearchExtensions,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Utils\ElasticSearchExtensions.cs,FilterControlChar,The following statement contains a magic number: for (int i = 0; i < controlStr.Length; i++)              {                  newArray[i] = controlStr[i];                  if ((controlStr[i] >= 0 && controlStr[i] <= 31) || (controlStr[i] >= 127 && controlStr[i] <= 159))                  {                      newArray[i] = (char) 0x20;                  }              }
Magic Number,ElasticSearch.Client.Utils,ElasticSearchExtensions,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Utils\ElasticSearchExtensions.cs,FilterControlChar,The following statement contains a magic number: for (int i = 0; i < controlStr.Length; i++)              {                  newArray[i] = controlStr[i];                  if ((controlStr[i] >= 0 && controlStr[i] <= 31) || (controlStr[i] >= 127 && controlStr[i] <= 159))                  {                      newArray[i] = (char) 0x20;                  }              }
Magic Number,ElasticSearch.Client.Utils,ElasticSearchExtensions,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Utils\ElasticSearchExtensions.cs,FilterControlChar,The following statement contains a magic number: for (int i = 0; i < controlStr.Length; i++)              {                  newArray[i] = controlStr[i];                  if ((controlStr[i] >= 0 && controlStr[i] <= 31) || (controlStr[i] >= 127 && controlStr[i] <= 159))                  {                      newArray[i] = (char) 0x20;                  }              }
Missing Default,ElasticSearch.Client.Mapping,TypeSetting,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Mapping\TypeSetting.cs,AddNumField,The following switch statement is missing a default case: switch (type)  			{  				case NumType.Long:  					numType = "long";  					break;  				case NumType.Double:  					numType = "double";  					break;  				case NumType.Float:  					numType = "float";  					break;  			}
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,GetTypeIDForTypeName,The following switch statement is missing a default case: switch (name[0])  				{  					case (byte) 'd':  						result = TType.Double;  						break;  					case (byte) 'i':  						switch (name[1])  						{  							case (byte) '8':  								result = TType.Byte;  								break;  							case (byte) '1':  								result = TType.I16;  								break;  							case (byte) '3':  								result = TType.I32;  								break;  							case (byte) '6':  								result = TType.I64;  								break;  						}  						break;  					case (byte) 'l':  						result = TType.List;  						break;  					case (byte) 'm':  						result = TType.Map;  						break;  					case (byte) 'r':  						result = TType.Struct;  						break;  					case (byte) 's':  						if (name[1] == (byte) 't')  						{  							result = TType.String;  						}  						else if (name[1] == (byte) 'e')  						{  							result = TType.Set;  						}  						break;  					case (byte) 't':  						result = TType.Bool;  						break;  				}
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,GetTypeIDForTypeName,The following switch statement is missing a default case: switch (name[1])  						{  							case (byte) '8':  								result = TType.Byte;  								break;  							case (byte) '1':  								result = TType.I16;  								break;  							case (byte) '3':  								result = TType.I32;  								break;  							case (byte) '6':  								result = TType.I64;  								break;  						}
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,WriteJSONDouble,The following switch statement is missing a default case: switch (str[0])  			{  				case 'N': // NaN  				case 'I': // Infinity  					special = true;  					break;  				case '-':  					if (str[1] == 'I')  					{  						// -Infinity  						special = true;  					}  					break;  			}
Missing Default,Thrift.Protocol,TJSONProtocol,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TJSONProtocol.cs,IsJSONNumeric,The following switch statement is missing a default case: switch (b)  			{  				case (byte) '+':  				case (byte) '-':  				case (byte) '.':  				case (byte) '0':  				case (byte) '1':  				case (byte) '2':  				case (byte) '3':  				case (byte) '4':  				case (byte) '5':  				case (byte) '6':  				case (byte) '7':  				case (byte) '8':  				case (byte) '9':  				case (byte) 'E':  				case (byte) 'e':  					return true;  			}
Missing Default,Thrift.Protocol,TProtocolUtil,C:\repos\medcl_ElasticSearch.Net\ElasticSearch.Client\Transport\Thrift\Protocol\TProtocolUtil.cs,Skip,The following switch statement is missing a default case: switch (type)  			{  				case TType.Bool:  					prot.ReadBool();  					break;  				case TType.Byte:  					prot.ReadByte();  					break;  				case TType.I16:  					prot.ReadI16();  					break;  				case TType.I32:  					prot.ReadI32();  					break;  				case TType.I64:  					prot.ReadI64();  					break;  				case TType.Double:  					prot.ReadDouble();  					break;  				case TType.String:  					// Don't try to decode the string' just skip it.  					prot.ReadBinary();  					break;  				case TType.Struct:  					prot.ReadStructBegin();  					while (true)  					{  						TField field = prot.ReadFieldBegin();  						if (field.Type == TType.Stop)  						{  							break;  						}  						Skip(prot' field.Type);  						prot.ReadFieldEnd();  					}  					prot.ReadStructEnd();  					break;  				case TType.Map:  					TMap map = prot.ReadMapBegin();  					for (int i = 0; i < map.Count; i++)  					{  						Skip(prot' map.KeyType);  						Skip(prot' map.ValueType);  					}  					prot.ReadMapEnd();  					break;  				case TType.Set:  					TSet set = prot.ReadSetBegin();  					for (int i = 0; i < set.Count; i++)  					{  						Skip(prot' set.ElementType);  					}  					prot.ReadSetEnd();  					break;  				case TType.List:  					TList list = prot.ReadListBegin();  					for (int i = 0; i < list.Count; i++)  					{  						Skip(prot' list.ElementType);  					}  					prot.ReadListEnd();  					break;  			}
