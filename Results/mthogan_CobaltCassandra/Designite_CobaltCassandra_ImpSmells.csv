Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,displayMenu,Cyclomatic complexity of the method is 11
Complex Method,Cobalt.Utilities,FileUtils,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Utilities\FileUtils.cs,FileToList,Cyclomatic complexity of the method is 8
Complex Method,Cobalt.Utilities,FileUtils,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Utilities\FileUtils.cs,FileToString,Cyclomatic complexity of the method is 8
Long Parameter List,Cobalt.DataTypes,Comment,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\DataTypes\Comment.cs,Comment,The method has 8 parameters.
Magic Number,Cobalt,Client,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Client\Client.cs,PrintResults,The following statement contains a magic number: foreach (CqlColumn column in columns) {  	Console.Write ("+");  	for (int i = 0; i < 40; i++)//for (int i = 0; i < column.Name.Length; i++)  	 {  		Console.Write ("-");  	}  }  
Magic Number,Cobalt,Client,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Client\Client.cs,PrintResults,The following statement contains a magic number: for (int i = 0; i < 40; i++)//for (int i = 0; i < column.Name.Length; i++)   {  	Console.Write ("-");  }  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,Main,The following statement contains a magic number: Console.SetWindowSize (160' 60);  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,Main,The following statement contains a magic number: Console.SetWindowSize (160' 60);  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,displayMenu,The following statement contains a magic number: try {  	input = int.Parse (Console.ReadLine ());  	switch (input) {  	case 1: {  		createTestSchema ();  		break;  	}  	case 2: {  		createTestData ();  		break;  	}  	case 3: {  		displayTestData ();  		break;  	}  	case 4: {  		endConnection (_client);  		exit (0);  		break;  	}  	default: {  		Console.WriteLine ();  		Console.WriteLine ("Invalid input!");  		break;  	}  	}  }  catch (Exception) {  	input = -1;  }  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,displayMenu,The following statement contains a magic number: try {  	input = int.Parse (Console.ReadLine ());  	switch (input) {  	case 1: {  		createTestSchema ();  		break;  	}  	case 2: {  		createTestData ();  		break;  	}  	case 3: {  		displayTestData ();  		break;  	}  	case 4: {  		endConnection (_client);  		exit (0);  		break;  	}  	default: {  		Console.WriteLine ();  		Console.WriteLine ("Invalid input!");  		break;  	}  	}  }  catch (Exception) {  	input = -1;  }  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,displayMenu,The following statement contains a magic number: try {  	input = int.Parse (Console.ReadLine ());  	switch (input) {  	case 1: {  		createTestSchema ();  		break;  	}  	case 2: {  		createTestData ();  		break;  	}  	case 3: {  		displayTestData ();  		break;  	}  	case 4: {  		endConnection (_client);  		exit (0);  		break;  	}  	default: {  		Console.WriteLine ();  		Console.WriteLine ("Invalid input!");  		break;  	}  	}  }  catch (Exception) {  	input = -1;  }  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,displayMenu,The following statement contains a magic number: switch (input) {  case 1: {  	createTestSchema ();  	break;  }  case 2: {  	createTestData ();  	break;  }  case 3: {  	displayTestData ();  	break;  }  case 4: {  	endConnection (_client);  	exit (0);  	break;  }  default: {  	Console.WriteLine ();  	Console.WriteLine ("Invalid input!");  	break;  }  }  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,displayMenu,The following statement contains a magic number: switch (input) {  case 1: {  	createTestSchema ();  	break;  }  case 2: {  	createTestData ();  	break;  }  case 3: {  	displayTestData ();  	break;  }  case 4: {  	endConnection (_client);  	exit (0);  	break;  }  default: {  	Console.WriteLine ();  	Console.WriteLine ("Invalid input!");  	break;  }  }  
Magic Number,Cobalt,Program,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\Program.cs,displayMenu,The following statement contains a magic number: switch (input) {  case 1: {  	createTestSchema ();  	break;  }  case 2: {  	createTestData ();  	break;  }  case 3: {  	displayTestData ();  	break;  }  case 4: {  	endConnection (_client);  	exit (0);  	break;  }  default: {  	Console.WriteLine ();  	Console.WriteLine ("Invalid input!");  	break;  }  }  
Magic Number,Cobalt.DataTypes,Comment,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\DataTypes\Comment.cs,Comment,The following statement contains a magic number: Rank = Math.Round ((Positive + 1.9208) / (Positive + Negative) - 1.96 * Math.Sqrt ((Positive * Negative) / (Positive + Negative) + 0.9604) / (Positive + Negative)) / (1 + 3.8416 / (Positive + Negative));  
Magic Number,Cobalt.DataTypes,Comment,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\DataTypes\Comment.cs,Comment,The following statement contains a magic number: Rank = Math.Round ((Positive + 1.9208) / (Positive + Negative) - 1.96 * Math.Sqrt ((Positive * Negative) / (Positive + Negative) + 0.9604) / (Positive + Negative)) / (1 + 3.8416 / (Positive + Negative));  
Magic Number,Cobalt.DataTypes,Comment,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\DataTypes\Comment.cs,Comment,The following statement contains a magic number: Rank = Math.Round ((Positive + 1.9208) / (Positive + Negative) - 1.96 * Math.Sqrt ((Positive * Negative) / (Positive + Negative) + 0.9604) / (Positive + Negative)) / (1 + 3.8416 / (Positive + Negative));  
Magic Number,Cobalt.DataTypes,Comment,C:\repos\mthogan_CobaltCassandra\CobaltCassandra\DataTypes\Comment.cs,Comment,The following statement contains a magic number: Rank = Math.Round ((Positive + 1.9208) / (Positive + Negative) - 1.96 * Math.Sqrt ((Positive * Negative) / (Positive + Negative) + 0.9604) / (Positive + Negative)) / (1 + 3.8416 / (Positive + Negative));  
