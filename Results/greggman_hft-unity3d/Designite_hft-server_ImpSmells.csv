Implementation smell,Namespace,Class,File,Method,Description
Long Method,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,StartServer,The method has 164 lines of code.
Complex Method,HappyFunTimes,DNSAll,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTDNSServer.cs,Get,Cyclomatic complexity of the method is 18
Complex Method,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,Cyclomatic complexity of the method is 9
Complex Method,HappyFunTimes,HFTArgsToFields,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,Apply,Cyclomatic complexity of the method is 11
Complex Method,DNS.Protocol.ResourceRecords,ResourceRecordFactory,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\ResourceRecords\ResourceRecordFactory.cs,FromArray,Cyclomatic complexity of the method is 8
Long Parameter List,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,StartServer,The method has 7 parameters.
Long Parameter List,DNS.Protocol,Response,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Response.cs,Response,The method has 5 parameters.
Long Parameter List,DNS.Protocol.ResourceRecords,ResourceRecord,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\ResourceRecords\ResourceRecord.cs,ResourceRecord,The method has 5 parameters.
Long Parameter List,DNS.Protocol.ResourceRecords,StartOfAuthorityResourceRecord,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\ResourceRecords\StartOfAuthorityResourceRecord.cs,Create,The method has 9 parameters.
Long Parameter List,DNS.Protocol.ResourceRecords,StartOfAuthorityResourceRecord,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\ResourceRecords\StartOfAuthorityResourceRecord.cs,StartOfAuthorityResourceRecord,The method has 9 parameters.
Long Parameter List,DNS.Protocol.ResourceRecords,StartOfAuthorityResourceRecord,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\ResourceRecords\StartOfAuthorityResourceRecord.cs,StartOfAuthorityResourceRecord,The method has 5 parameters.
Long Identifier,HappyFunTimes,HFTDnsServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTDNSServer.cs,HFTDnsServer,The length of the parameter ipv4AddressToReturnForAllDomains is 32.
Long Identifier,HappyFunTimes,HFTDnsServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTDNSServer.cs,HFTDnsServer,The length of the parameter ipv6AddressToReturnForAllDomains is 32.
Long Statement,HappyFunTimes,MainClass,C:\repos\greggman_hft-unity3d\hft-server\hft-server\Program.cs,Main,The length of the statement  "	//using (System.IO.StreamWriter writer = new System.IO.StreamWriter(System.IO.File.Open("/Users/gregg/temp/hft-server.log"' System.IO.FileMode.Create))) " is 152.
Long Statement,HappyFunTimes,MainClass,C:\repos\greggman_hft-unity3d\hft-server\hft-server\Program.cs,Main,The length of the statement  "	string ipv4Address = String.IsNullOrEmpty (m_options.ipv4DnsAddress) ? HFTIpUtils.GetLocalIPv4Address () : m_options.ipv4DnsAddress; " is 132.
Long Statement,HappyFunTimes,MainClass,C:\repos\greggman_hft-unity3d\hft-server\hft-server\Program.cs,Main,The length of the statement  "	string ipv6Address = String.IsNullOrEmpty (m_options.ipv6DnsAddress) ? HFTIpUtils.GetLocalIPv6Address () : m_options.ipv6DnsAddress; " is 132.
Long Statement,HappyFunTimes,HFTDnsRunnerHelper,C:\repos\greggman_hft-unity3d\hft-server\hft-server\Program.cs,DoWork,The length of the statement  "		log_.Error ("Could not start DNS Server on port:" + port_ + "\n" + "Did you run from the command line with sudo?\n\n" + ex.ToString ()); " is 136.
Long Statement,HappyFunTimes,HFTCaptivePortalHandler,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTCaptivePortalHandler.cs,Check,The length of the statement  "	string sessionId = System.Uri.EscapeUriString (req.RemoteEndPoint.Address.ToString ()) + "_" + System.IO.Path.GetExtension (path); " is 130.
Long Statement,HappyFunTimes,HFTCaptivePortalHandler,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTCaptivePortalHandler.cs,Check,The length of the statement  "	bool isIndexURL = path.Equals ("/index.html"' StringComparison.Ordinal) || path.Equals ("/"' StringComparison.Ordinal) || path.Equals (m_firstPath' StringComparison.Ordinal); " is 174.
Long Statement,HappyFunTimes,HFTCaptivePortalHandler,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTCaptivePortalHandler.cs,GetBaseUrl,The length of the statement  "	return (req.IsSecureConnection ? "https://" : "http://") + (localEndPoint.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6 ? ("[" + localEndPoint.Address.ToString () + "]") : localEndPoint.Address.ToString ()) + ":" + localEndPoint.Port.ToString (); " is 265.
Long Statement,HappyFunTimes,HFTGame,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTGame.cs,SendGameDisconnect,The length of the statement  "	if (client_ != null)// this check is needed because in GameGroup.assignClient the new game has been added to games but not yet assigned a client " is 144.
Long Statement,HappyFunTimes,HFTGame,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTGame.cs,SendGameDisconnect,The length of the statement  "		client_.Send (new HFTRelayToGameMessage ("upgame"' otherGame.id' new HFTMessageCmd ("gamedisconnect"' new HFTMessageGameDisconnect (otherGame.id)))); " is 149.
Long Statement,HappyFunTimes,HFTHttpRequest,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTHttpRequest.cs,SyncRequest,The length of the statement  "		//                request.ServicePoint.BindIPEndPointDelegate = (System.Net.ServicePoint servicePoint' System.Net.IPEndPoint remoteEndPoint' int retryCount) => " is 159.
Long Statement,HappyFunTimes,HFTWebFileDB,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebFileDB.cs,GetFiles,The length of the statement  "	Regex globRE = new Regex ("^" + Regex.Escape (glob).Replace (@"\*"' ".*").Replace (@"\?"' ".") + "$"' RegexOptions.IgnoreCase | RegexOptions.Singleline); " is 153.
Long Statement,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,StartServer,The length of the statement  "		m_log.Info (String.Format ("Listening on {0} port {1}' and providing WebSocket services:"' server.Address' server.Port)); " is 121.
Long Statement,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,HandleRoot,The length of the statement  "		string url = uri.GetLeftPart (UriPartial.Authority) + m_gamePath + m_options.controllerFilename + uri.Query + uri.Fragment; " is 123.
Long Statement,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,HandleRoot,The length of the statement  "		res.WriteContent (System.Text.Encoding.UTF8.GetBytes ("<script>window.location.href = decodeURIComponent(\"" + Uri.EscapeDataString (url) + "\");</script>")); " is 158.
Long Statement,HappyFunTimes,HFTUtil,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTUtil.cs,ReadBytes,The length of the statement  "	using (System.IO.FileStream fileStream = new System.IO.FileStream (filename' System.IO.FileMode.Open' System.IO.FileAccess.Read)) { " is 131.
Long Statement,HappyFunTimes,HFTUtil,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTUtil.cs,WriteBytes,The length of the statement  "	using (System.IO.BinaryWriter writer = new System.IO.BinaryWriter (System.IO.File.Open (filename' System.IO.FileMode.Create))) { " is 128.
Long Statement,HappyFunTimes,HFTIpUtils,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTIpUtils.cs,IsIpv6AddressWeCareAbout,The length of the statement  "	bool weCare = !(ipv6.StartsWith ("fe80") || ipv6.StartsWith ("ff00") || ipv6.StartsWith ("fd00") || ipv6.StartsWith ("fec0")); " is 126.
Long Statement,HappyFunTimes,HFTIpUtils,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTIpUtils.cs,GetLocalIPAddress,The length of the statement  "		using (System.Net.Sockets.Socket socket = new System.Net.Sockets.Socket (address.AddressFamily' System.Net.Sockets.SocketType.Dgram' 0)) { " is 138.
Long Statement,DNS.Client,DnsClient,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Client\DnsClient.cs,Lookup,The length of the statement  "	IList<IPAddress> ips = response.AnswerRecords.Where (r => r.Type == type).Cast<IPAddressResourceRecord> ().Select (r => r.IPAddress).ToList (); " is 143.
Long Statement,DNS.Protocol,Request,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Request.cs,FromArray,The length of the statement  "	if (header.Response || header.QuestionCount == 0 || header.AdditionalRecordCount + header.AnswerRecordCount + header.AuthorityRecordCount > 0 || header.ResponseCode != ResponseCode.NoError) { " is 191.
Long Statement,DNS.Protocol,Response,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Response.cs,FromArray,The length of the statement  "		return new Response (header' Question.GetAllFromArray (message' offset' header.QuestionCount)' new List<IResourceRecord> ()' new List<IResourceRecord> ()' new List<IResourceRecord> ()); " is 185.
Long Statement,DNS.Protocol,Response,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Response.cs,FromArray,The length of the statement  "	return new Response (header' Question.GetAllFromArray (message' offset' header.QuestionCount' out offset)' ResourceRecordFactory.GetAllFromArray (message' offset' header.AnswerRecordCount' out offset)' ResourceRecordFactory.GetAllFromArray (message' offset' header.AuthorityRecordCount' out offset)' ResourceRecordFactory.GetAllFromArray (message' offset' header.AdditionalRecordCount' out offset)); " is 399.
Long Statement,DNS.Protocol,Response,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Response.cs,ToArray,The length of the statement  "	result.Append (header.ToArray ()).Append (questions.Select (q => q.ToArray ())).Append (answers.Select (a => a.ToArray ())).Append (authority.Select (a => a.ToArray ())).Append (additional.Select (a => a.ToArray ())); " is 217.
Long Statement,DNS.Protocol,Response,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Response.cs,ToString,The length of the statement  "	return ObjectStringifier.New (this).Add ("Header"' header).Add ("Questions"' "AnswerRecords"' "AuthorityRecords"' "AdditionalRecords").ToString (); " is 147.
Long Statement,DNS.Protocol.Marshalling,Struct,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Marshalling\Struct.cs,ConvertEndian,The length of the statement  "		if (endian.Endianness == Endianness.Big && BitConverter.IsLittleEndian || endian.Endianness == Endianness.Little && !BitConverter.IsLittleEndian) { " is 147.
Complex Conditional,DNS.Protocol,Request,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Request.cs,FromArray,The conditional expression  "header.Response || header.QuestionCount == 0 || header.AdditionalRecordCount + header.AnswerRecordCount + header.AuthorityRecordCount > 0 || header.ResponseCode != ResponseCode.NoError"  is complex.
Complex Conditional,DNS.Protocol.Marshalling,Struct,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Marshalling\Struct.cs,ConvertEndian,The conditional expression  "endian.Endianness == Endianness.Big && BitConverter.IsLittleEndian || endian.Endianness == Endianness.Little && !BitConverter.IsLittleEndian"  is complex.
Empty Catch Block,HappyFunTimes,HFTSocket,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTSocket.cs,OnError,The method has an empty catch block.
Empty Catch Block,HappyFunTimes,HFTWebFileDB,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebFileDB.cs,GetFile,The method has an empty catch block.
Empty Catch Block,DNS.Server,DnsServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Server\DnsServer.cs,Listen,The method has an empty catch block.
Empty Catch Block,DNS.Server,DnsServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Server\DnsServer.cs,Listen,The method has an empty catch block.
Empty Catch Block,DNS.Server,EventEmitter,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Server\DnsServer.cs,Run,The method has an empty catch block.
Magic Number,HappyFunTimes,MainClass,C:\repos\greggman_hft-unity3d\hft-server\hft-server\Program.cs,Main,The following statement contains a magic number: if (m_options.dns || m_options.installationMode) {  	HFTDnsRunner dnsRunner = new HFTDnsRunner ();  	dnsRunner.Start (ipv4Address' ipv6Address' 53);  }  
Magic Number,HappyFunTimes,MainClass,C:\repos\greggman_hft-unity3d\hft-server\hft-server\Program.cs,Main,The following statement contains a magic number: dnsRunner.Start (ipv4Address' ipv6Address' 53);  
Magic Number,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,HFTWebServer,The following statement contains a magic number: if (sysName.EndsWith (".local")) {  	sysName = sysName.Substring (0' sysName.Length - 6);  }  
Magic Number,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,HFTWebServer,The following statement contains a magic number: sysName = sysName.Substring (0' sysName.Length - 6);  
Magic Number,HappyFunTimes,HFTWebServer,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\Server\HFTWebServer.cs,Unwrap,The following statement contains a magic number: return (s.StartsWith ("[") && s.EndsWith ("]")) ? s.Substring (1' s.Length - 2) : s;  
Magic Number,HappyFunTimes,HFTUtil,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTUtil.cs,GetJSTimeInSeconds,The following statement contains a magic number: return (double)GetJSTimeInMs () / 1000.0;  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: foreach (string arg in arguments) {  	if (arg.StartsWith ("--")) {  		int equalsNdx = arg.IndexOf ('=');  		if (equalsNdx >= 0) {  			m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  		}  		else {  			m_switches [arg.Substring (2)] = "true";  		}  	}  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: foreach (string arg in arguments) {  	if (arg.StartsWith ("--")) {  		int equalsNdx = arg.IndexOf ('=');  		if (equalsNdx >= 0) {  			m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  		}  		else {  			m_switches [arg.Substring (2)] = "true";  		}  	}  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: foreach (string arg in arguments) {  	if (arg.StartsWith ("--")) {  		int equalsNdx = arg.IndexOf ('=');  		if (equalsNdx >= 0) {  			m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  		}  		else {  			m_switches [arg.Substring (2)] = "true";  		}  	}  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: if (arg.StartsWith ("--")) {  	int equalsNdx = arg.IndexOf ('=');  	if (equalsNdx >= 0) {  		m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  	}  	else {  		m_switches [arg.Substring (2)] = "true";  	}  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: if (arg.StartsWith ("--")) {  	int equalsNdx = arg.IndexOf ('=');  	if (equalsNdx >= 0) {  		m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  	}  	else {  		m_switches [arg.Substring (2)] = "true";  	}  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: if (arg.StartsWith ("--")) {  	int equalsNdx = arg.IndexOf ('=');  	if (equalsNdx >= 0) {  		m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  	}  	else {  		m_switches [arg.Substring (2)] = "true";  	}  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: if (equalsNdx >= 0) {  	m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  }  else {  	m_switches [arg.Substring (2)] = "true";  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: if (equalsNdx >= 0) {  	m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  }  else {  	m_switches [arg.Substring (2)] = "true";  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: if (equalsNdx >= 0) {  	m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  }  else {  	m_switches [arg.Substring (2)] = "true";  }  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: m_switches [arg.Substring (2' equalsNdx - 2)] = arg.Substring (equalsNdx + 1);  
Magic Number,HappyFunTimes,HFTArgParser,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgParser.cs,Init,The following statement contains a magic number: m_switches [arg.Substring (2)] = "true";  
Magic Number,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,The following statement contains a magic number: foreach (string arg in args) {  	if (arg.StartsWith (dashPrefix_)) {  		int equalsNdx = arg.IndexOf ('=');  		string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  		if (!validArgs_.Contains (checkArg.Substring (2))) {  			good = false;  			log_.Warn ("unknown option: " + arg);  		}  	}  	else if (arg.StartsWith (noPrefix_)) {  		int equalsNdx = arg.IndexOf ('=');  		string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  		if (!validArgs_.Contains (checkArg.Substring (5))) {  			good = false;  			log_.Warn ("unknown option: " + arg);  		}  	}  }  
Magic Number,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,The following statement contains a magic number: foreach (string arg in args) {  	if (arg.StartsWith (dashPrefix_)) {  		int equalsNdx = arg.IndexOf ('=');  		string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  		if (!validArgs_.Contains (checkArg.Substring (2))) {  			good = false;  			log_.Warn ("unknown option: " + arg);  		}  	}  	else if (arg.StartsWith (noPrefix_)) {  		int equalsNdx = arg.IndexOf ('=');  		string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  		if (!validArgs_.Contains (checkArg.Substring (5))) {  			good = false;  			log_.Warn ("unknown option: " + arg);  		}  	}  }  
Magic Number,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,The following statement contains a magic number: if (arg.StartsWith (dashPrefix_)) {  	int equalsNdx = arg.IndexOf ('=');  	string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  	if (!validArgs_.Contains (checkArg.Substring (2))) {  		good = false;  		log_.Warn ("unknown option: " + arg);  	}  }  else if (arg.StartsWith (noPrefix_)) {  	int equalsNdx = arg.IndexOf ('=');  	string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  	if (!validArgs_.Contains (checkArg.Substring (5))) {  		good = false;  		log_.Warn ("unknown option: " + arg);  	}  }  
Magic Number,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,The following statement contains a magic number: if (arg.StartsWith (dashPrefix_)) {  	int equalsNdx = arg.IndexOf ('=');  	string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  	if (!validArgs_.Contains (checkArg.Substring (2))) {  		good = false;  		log_.Warn ("unknown option: " + arg);  	}  }  else if (arg.StartsWith (noPrefix_)) {  	int equalsNdx = arg.IndexOf ('=');  	string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  	if (!validArgs_.Contains (checkArg.Substring (5))) {  		good = false;  		log_.Warn ("unknown option: " + arg);  	}  }  
Magic Number,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,The following statement contains a magic number: if (!validArgs_.Contains (checkArg.Substring (2))) {  	good = false;  	log_.Warn ("unknown option: " + arg);  }  
Magic Number,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,The following statement contains a magic number: if (arg.StartsWith (noPrefix_)) {  	int equalsNdx = arg.IndexOf ('=');  	string checkArg = equalsNdx >= 0 ? arg.Substring (0' equalsNdx) : arg;  	if (!validArgs_.Contains (checkArg.Substring (5))) {  		good = false;  		log_.Warn ("unknown option: " + arg);  	}  }  
Magic Number,HappyFunTimes,HFTArgChecker,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTArgUtils.cs,CheckArgs,The following statement contains a magic number: if (!validArgs_.Contains (checkArg.Substring (5))) {  	good = false;  	log_.Warn ("unknown option: " + arg);  }  
Magic Number,HappyFunTimes,HFTIpUtils,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTIpUtils.cs,GetLocalIPAddress,The following statement contains a magic number: try {  	HFTLog.Global.Info ("Trying: " + address.ToString ());  	string localIP;  	using (System.Net.Sockets.Socket socket = new System.Net.Sockets.Socket (address.AddressFamily' System.Net.Sockets.SocketType.Dgram' 0)) {  		socket.Connect (address' 65530);  		IPEndPoint endPoint = socket.LocalEndPoint as IPEndPoint;  		string s = endPoint.Address.ToString ();  		localIP = System.Text.RegularExpressions.Regex.Replace (s' "%.+"' "");  	}  	return localIP;  }  catch (System.Exception ex) {  	HFTLog.Global.Info (ex.ToString ());  	return null;  }  
Magic Number,HappyFunTimes,HFTIpUtils,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTIpUtils.cs,GetLocalIPAddress,The following statement contains a magic number: using (System.Net.Sockets.Socket socket = new System.Net.Sockets.Socket (address.AddressFamily' System.Net.Sockets.SocketType.Dgram' 0)) {  	socket.Connect (address' 65530);  	IPEndPoint endPoint = socket.LocalEndPoint as IPEndPoint;  	string s = endPoint.Address.ToString ();  	localIP = System.Text.RegularExpressions.Regex.Replace (s' "%.+"' "");  }  
Magic Number,HappyFunTimes,HFTIpUtils,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\HFTIpUtils.cs,GetLocalIPAddress,The following statement contains a magic number: socket.Connect (address' 65530);  
Magic Number,DNS.Client.RequestResolver,TcpRequestResolver,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Client\RequestResolver\TcpRequestResolver.cs,Request,The following statement contains a magic number: try {  	tcp.Connect (request.Dns);  	Stream stream = tcp.GetStream ();  	byte[] buffer = request.ToArray ();  	byte[] length = BitConverter.GetBytes ((ushort)buffer.Length);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (length);  	}  	stream.Write (length' 0' length.Length);  	stream.Write (buffer' 0' buffer.Length);  	buffer = new byte[2];  	Read (stream' buffer);  	if (BitConverter.IsLittleEndian) {  		Array.Reverse (buffer);  	}  	buffer = new byte[BitConverter.ToUInt16 (buffer' 0)];  	Read (stream' buffer);  	Response response = Response.FromArray (buffer);  	return new ClientResponse (request' response' buffer);  }  finally {  	tcp.Close ();  }  
Magic Number,DNS.Client.RequestResolver,TcpRequestResolver,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Client\RequestResolver\TcpRequestResolver.cs,Request,The following statement contains a magic number: buffer = new byte[2];  
Magic Number,DNS.Client.RequestResolver,UdpRequestResolver,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Client\RequestResolver\UdpRequestResolver.cs,Request,The following statement contains a magic number: try {  	udp.Client.SendTimeout = 5000;  	udp.Client.ReceiveTimeout = 5000;  	udp.Connect (dns);  	udp.Send (request.ToArray ()' request.Size);  	byte[] buffer = udp.Receive (ref dns);  	Response response = Response.FromArray (buffer);  	//null;  	if (response.Truncated) {  		return fallback.Request (request);  	}  	return new ClientResponse (request' response' buffer);  }  finally {  	udp.Close ();  }  
Magic Number,DNS.Client.RequestResolver,UdpRequestResolver,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Client\RequestResolver\UdpRequestResolver.cs,Request,The following statement contains a magic number: try {  	udp.Client.SendTimeout = 5000;  	udp.Client.ReceiveTimeout = 5000;  	udp.Connect (dns);  	udp.Send (request.ToArray ()' request.Size);  	byte[] buffer = udp.Receive (ref dns);  	Response response = Response.FromArray (buffer);  	//null;  	if (response.Truncated) {  		return fallback.Request (request);  	}  	return new ClientResponse (request' response' buffer);  }  finally {  	udp.Close ();  }  
Magic Number,DNS.Client.RequestResolver,UdpRequestResolver,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Client\RequestResolver\UdpRequestResolver.cs,Request,The following statement contains a magic number: udp.Client.SendTimeout = 5000;  
Magic Number,DNS.Client.RequestResolver,UdpRequestResolver,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Client\RequestResolver\UdpRequestResolver.cs,Request,The following statement contains a magic number: udp.Client.ReceiveTimeout = 5000;  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: while ((lengthOrPointer = message [offset++]) > 0) {  	// Two heighest bits are set (pointer)  	if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  		if (!endOffsetAssigned) {  			endOffsetAssigned = true;  			endOffset = offset + 1;  		}  		ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  		offset = (pointer << 8) | message [offset];  		continue;  	}  	else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  		throw new ArgumentException ("Unexpected bit pattern in label length");  	}  	byte length = lengthOrPointer;  	byte[] label = new byte[length];  	Array.Copy (message' offset' label' 0' length);  	labels.Add (label);  	offset += length;  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: while ((lengthOrPointer = message [offset++]) > 0) {  	// Two heighest bits are set (pointer)  	if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  		if (!endOffsetAssigned) {  			endOffsetAssigned = true;  			endOffset = offset + 1;  		}  		ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  		offset = (pointer << 8) | message [offset];  		continue;  	}  	else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  		throw new ArgumentException ("Unexpected bit pattern in label length");  	}  	byte length = lengthOrPointer;  	byte[] label = new byte[length];  	Array.Copy (message' offset' label' 0' length);  	labels.Add (label);  	offset += length;  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: while ((lengthOrPointer = message [offset++]) > 0) {  	// Two heighest bits are set (pointer)  	if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  		if (!endOffsetAssigned) {  			endOffsetAssigned = true;  			endOffset = offset + 1;  		}  		ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  		offset = (pointer << 8) | message [offset];  		continue;  	}  	else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  		throw new ArgumentException ("Unexpected bit pattern in label length");  	}  	byte length = lengthOrPointer;  	byte[] label = new byte[length];  	Array.Copy (message' offset' label' 0' length);  	labels.Add (label);  	offset += length;  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: while ((lengthOrPointer = message [offset++]) > 0) {  	// Two heighest bits are set (pointer)  	if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  		if (!endOffsetAssigned) {  			endOffsetAssigned = true;  			endOffset = offset + 1;  		}  		ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  		offset = (pointer << 8) | message [offset];  		continue;  	}  	else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  		throw new ArgumentException ("Unexpected bit pattern in label length");  	}  	byte length = lengthOrPointer;  	byte[] label = new byte[length];  	Array.Copy (message' offset' label' 0' length);  	labels.Add (label);  	offset += length;  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: while ((lengthOrPointer = message [offset++]) > 0) {  	// Two heighest bits are set (pointer)  	if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  		if (!endOffsetAssigned) {  			endOffsetAssigned = true;  			endOffset = offset + 1;  		}  		ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  		offset = (pointer << 8) | message [offset];  		continue;  	}  	else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  		throw new ArgumentException ("Unexpected bit pattern in label length");  	}  	byte length = lengthOrPointer;  	byte[] label = new byte[length];  	Array.Copy (message' offset' label' 0' length);  	labels.Add (label);  	offset += length;  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: while ((lengthOrPointer = message [offset++]) > 0) {  	// Two heighest bits are set (pointer)  	if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  		if (!endOffsetAssigned) {  			endOffsetAssigned = true;  			endOffset = offset + 1;  		}  		ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  		offset = (pointer << 8) | message [offset];  		continue;  	}  	else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  		throw new ArgumentException ("Unexpected bit pattern in label length");  	}  	byte length = lengthOrPointer;  	byte[] label = new byte[length];  	Array.Copy (message' offset' label' 0' length);  	labels.Add (label);  	offset += length;  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: while ((lengthOrPointer = message [offset++]) > 0) {  	// Two heighest bits are set (pointer)  	if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  		if (!endOffsetAssigned) {  			endOffsetAssigned = true;  			endOffset = offset + 1;  		}  		ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  		offset = (pointer << 8) | message [offset];  		continue;  	}  	else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  		throw new ArgumentException ("Unexpected bit pattern in label length");  	}  	byte length = lengthOrPointer;  	byte[] label = new byte[length];  	Array.Copy (message' offset' label' 0' length);  	labels.Add (label);  	offset += length;  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  	if (!endOffsetAssigned) {  		endOffsetAssigned = true;  		endOffset = offset + 1;  	}  	ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  	offset = (pointer << 8) | message [offset];  	continue;  }  else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  	if (!endOffsetAssigned) {  		endOffsetAssigned = true;  		endOffset = offset + 1;  	}  	ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  	offset = (pointer << 8) | message [offset];  	continue;  }  else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  	if (!endOffsetAssigned) {  		endOffsetAssigned = true;  		endOffset = offset + 1;  	}  	ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  	offset = (pointer << 8) | message [offset];  	continue;  }  else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  	if (!endOffsetAssigned) {  		endOffsetAssigned = true;  		endOffset = offset + 1;  	}  	ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  	offset = (pointer << 8) | message [offset];  	continue;  }  else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  	if (!endOffsetAssigned) {  		endOffsetAssigned = true;  		endOffset = offset + 1;  	}  	ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  	offset = (pointer << 8) | message [offset];  	continue;  }  else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  	if (!endOffsetAssigned) {  		endOffsetAssigned = true;  		endOffset = offset + 1;  	}  	ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  	offset = (pointer << 8) | message [offset];  	continue;  }  else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) == 3) {  	if (!endOffsetAssigned) {  		endOffsetAssigned = true;  		endOffset = offset + 1;  	}  	ushort pointer = lengthOrPointer.GetBitValueAt (0' 6);  	offset = (pointer << 8) | message [offset];  	continue;  }  else if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: offset = (pointer << 8) | message [offset];  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FromArray,The following statement contains a magic number: if (lengthOrPointer.GetBitValueAt (6' 2) != 0) {  	throw new ArgumentException ("Unexpected bit pattern in label length");  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: if (address.Length == 4) {  	return string.Join ("."' address.Reverse ().Select (b => b.ToString ()).ToArray ()) + ".in-addr.arpa";  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: for (int i = 0' j = 0; i < address.Length; i++' j = 2 * i) {  	byte b = address [i];  	nibbles [j] = b.GetBitValueAt (4' 4);  	nibbles [j + 1] = b.GetBitValueAt (0' 4);  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: for (int i = 0' j = 0; i < address.Length; i++' j = 2 * i) {  	byte b = address [i];  	nibbles [j] = b.GetBitValueAt (4' 4);  	nibbles [j + 1] = b.GetBitValueAt (0' 4);  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: for (int i = 0' j = 0; i < address.Length; i++' j = 2 * i) {  	byte b = address [i];  	nibbles [j] = b.GetBitValueAt (4' 4);  	nibbles [j + 1] = b.GetBitValueAt (0' 4);  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: for (int i = 0' j = 0; i < address.Length; i++' j = 2 * i) {  	byte b = address [i];  	nibbles [j] = b.GetBitValueAt (4' 4);  	nibbles [j + 1] = b.GetBitValueAt (0' 4);  }  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: j = 2 * i
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: nibbles [j] = b.GetBitValueAt (4' 4);  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: nibbles [j] = b.GetBitValueAt (4' 4);  
Magic Number,DNS.Protocol,Domain,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Domain.cs,FormatReverseIP,The following statement contains a magic number: nibbles [j + 1] = b.GetBitValueAt (0' 4);  
Magic Number,DNS.Protocol.Utils,ObjectStringifier,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Utils\ObjectStringifier.cs,StringifyDictionary,The following statement contains a magic number: if (result.Length > 1) {  	result.Remove (result.Length - 2' 2);  }  
Magic Number,DNS.Protocol.Utils,ObjectStringifier,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Utils\ObjectStringifier.cs,StringifyDictionary,The following statement contains a magic number: if (result.Length > 1) {  	result.Remove (result.Length - 2' 2);  }  
Magic Number,DNS.Protocol.Utils,ObjectStringifier,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Utils\ObjectStringifier.cs,StringifyDictionary,The following statement contains a magic number: result.Remove (result.Length - 2' 2);  
Magic Number,DNS.Protocol.Utils,ObjectStringifier,C:\repos\greggman_hft-unity3d\hft-server\hft-server\..\..\Assets\HappyFunTimes\HappyFunTimesCore\DNS\Protocol\Utils\ObjectStringifier.cs,StringifyDictionary,The following statement contains a magic number: result.Remove (result.Length - 2' 2);  
