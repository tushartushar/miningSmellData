Implementation smell,Namespace,Class,File,Method,Description
Long Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The method has 168 lines of code.
Complex Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,Cyclomatic complexity of the method is 9
Complex Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,Cyclomatic complexity of the method is 8
Complex Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceLongURL,Cyclomatic complexity of the method is 15
Complex Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,Cyclomatic complexity of the method is 9
Complex Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ExceptBlanks,Cyclomatic complexity of the method is 9
Complex Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ReplaceURLs,Cyclomatic complexity of the method is 9
Complex Method,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,Cyclomatic complexity of the method is 15
Complex Method,iMacrosPostingDashboard,HotmailPOP,C:\repos\ugniusr_iMacrosTest-CSharp\HotmailPOP.cs,FindPlainTextInMessage,Cyclomatic complexity of the method is 8
Complex Method,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,Cyclomatic complexity of the method is 13
Complex Method,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,SolveCaptchaPurseBlog,Cyclomatic complexity of the method is 13
Long Parameter List,iMacrosPostingDashboard,BckWorkerTemplate,C:\repos\ugniusr_iMacrosTest-CSharp\BckWorkerTemplate.cs,BckWorkerTemplate,The method has 7 parameters.
Long Parameter List,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,GetFormattedValue,The method has 6 parameters.
Long Parameter List,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The method has 11 parameters.
Long Parameter List,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,GenericPoster,The method has 5 parameters.
Long Parameter List,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PostTheQuestion,The method has 5 parameters.
Long Parameter List,iMacrosPostingDashboard,HotmailPOP,C:\repos\ugniusr_iMacrosTest-CSharp\HotmailPOP.cs,FetchUnseenMessages,The method has 6 parameters.
Long Parameter List,iMacrosPostingDashboard,HotmailPOP,C:\repos\ugniusr_iMacrosTest-CSharp\HotmailPOP.cs,ExtractConfLink,The method has 5 parameters.
Long Parameter List,iMacrosPostingDashboard,ProjectTableRow,C:\repos\ugniusr_iMacrosTest-CSharp\ProjectTable.cs,ProjectTableRow,The method has 8 parameters.
Long Parameter List,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,PostQuestion,The method has 6 parameters.
Long Parameter List,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The method has 6 parameters.
Long Parameter List,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,LoginAndPost,The method has 7 parameters.
Long Parameter List,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The method has 6 parameters.
Long Identifier,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,IncrementDBValues,The length of the parameter iMacrosCreateAccountCode_local is 30.
Long Statement,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The length of the statement  "		base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground)); " is 184.
Long Statement,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The length of the statement  "			g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4); " is 180.
Long Statement,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The length of the statement  "			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2); " is 138.
Long Statement,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The length of the statement  "				g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2); " is 144.
Long Statement,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,PopulateDataGrid,The length of the statement  "			ProjectTableRow row = new ProjectTableRow (prjs.Id' prjs.ProjectName' prjs.TopicsTable' prjs.AnswerTemplate' prjs.Language' prjs.Pausebeforeconfirm' prjs.Pausebeforenextpost' ToBool (prjs.PostQnA)); " is 198.
Long Statement,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,projectDataGridView1_RowEnter,The length of the statement  "	// bwork = new BckWorkerTemplate(ProjectName' TopicsTable' AnswerTemplate' ref this.Start1' ref this.ResultBox1' ref this.progressBar1); " is 136.
Long Statement,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,Start1_Click,The length of the statement  "	bworker = new BckWorkerTemplate (ProName' TopTable' AnsTemplate' pausebfconfirm' pausebfnextpost' postQnA' ref CurrentRow); " is 123.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,EmailKwdStatus,The length of the statement  "	string body = @"Reiktų atrinkti daugiau raktažodžių šiam forumui: " + ProjectName + "\n\n" + "Nuoroda: http://eglesum.com/forumposter/ForumDash/public/forumdash/edit/" + proj.Id.ToString () + " \n"; " is 198.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,IsNightTime,The length of the statement  "	if ((DateTime.Now.AddHours (tzone).TimeOfDay < Start.TimeOfDay) || (DateTime.Now.AddHours (tzone).TimeOfDay > End.TimeOfDay)) " is 125.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PostTheQuestion,The length of the statement  "	tbltopics_local.Link = stdfunc.PostQuestion (tblaccts_local.Username' tblaccts_local.Email' passwd_local' tbltopics_local.Topic' proxy_local' iCode_local); " is 155.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceLongURL,The length of the statement  "					tbltopics.LongURL1 = "http://partner.jukoshop.com/?source=" + proj.ProjectName.ToLower () + "&date=" + TodaysDate + "&keyword=" + KwdsNoSpace; " is 142.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The length of the statement  "		while ((tbltopics.ShortURL1 == "#EANF#" || tbltopics.ShortURL1 == "" || tbltopics.ShortURL1 == "NODATA" || tbltopics.ShortURL1 == null) && (i <= 4))// Let's not do conversion if the ShortURL1 is None. " is 200.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The length of the statement  "		while ((tbltopics.ShortURL2 == "#EANF#" || tbltopics.ShortURL2 == "" || tbltopics.ShortURL2 == "NODATA" || tbltopics.ShortURL2 == null) && (j <= 4))// Let's not do conversion if the ShortURL2 is None. " is 200.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ReplaceURLs,The length of the statement  "		if (tbltopics.ShortURL1 != "" && tbltopics.ShortURL1 != null && tbltopics.ShortURL2 != "" && tbltopics.ShortURL2 != null) { " is 123.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PostTheAnswer,The length of the statement  "	return stdfunc.LoginAndPost (tblaccts.Username' tblaccts.Email' passwd' tblproxies.Proxy' tbltopics.Link' GeneratedResponse' proj.ImacrosLoginPost); " is 148.
Long Statement,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The length of the statement  "		if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5 " is 120.
Long Statement,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The length of the statement  "			FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:TEXT FORM=NAME:register ATTR=NAME:humanverify[input] CONTENT={{Solution}}" + "\n"; " is 144.
Long Statement,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The length of the statement  "			FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:CHECKBOX FORM=NAME:register ATTR=NAME:options[adminemail] CONTENT=NO" + "\n"; " is 139.
Complex Conditional,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PostTheQuestion,The conditional expression  "returnvar != "" && returnvar != null && returnvar != "#EANF#" && returnvar != "NODATA""  is complex.
Complex Conditional,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ReplaceURLs,The conditional expression  "tbltopics.ShortURL1 != "" && tbltopics.ShortURL1 != null && tbltopics.ShortURL2 != "" && tbltopics.ShortURL2 != null"  is complex.
Complex Conditional,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The conditional expression  "ConfirmationTxt != "" && ConfirmationTxt != "NODATA" && ConfirmationTxt != "#EANF#" && testsplit.Count () >= 7"  is complex.
Empty Catch Block,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,GenericPoster,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,NumberOfKwdsRemaining,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccount,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceLongURL,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ResetAllFilters,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountWithCaptcha,The method has an empty catch block.
Empty Catch Block,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ReportBadCaptcha,The method has an empty catch block.
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: try {  	int progressVal = (int)value;  	float percentage = ((float)progressVal / 100.0f);  	// Need to convert to float before division; otherwise C# returns int which is 0 for anything but 100%.  	Brush backColorBrush = new SolidBrush (cellStyle.BackColor);  	Brush foreColorBrush = new SolidBrush (cellStyle.ForeColor);  	// Draws the cell grid  	base.Paint (g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' (paintParts & ~DataGridViewPaintParts.ContentForeground));  	if (percentage > 0.0) {  		// Draw the progress bar and the text  		g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  	}  	else {  		// draw the text  		if (this.DataGridView.CurrentRow.Index == rowIndex)  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  		else  			g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  	}  }  catch (Exception e) {  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (percentage > 0.0) {  	// Draw the progress bar and the text  	g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  }  else {  	// draw the text  	if (this.DataGridView.CurrentRow.Index == rowIndex)  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  	else  		g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  }  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle (new SolidBrush (Color.FromArgb (203' 235' 108))' cellBounds.X + 2' cellBounds.Y + 2' Convert.ToInt32 ((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + (cellBounds.Width / 2) - 5' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: if (this.DataGridView.CurrentRow.Index == rowIndex)  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  else  	g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' new SolidBrush (cellStyle.SelectionForeColor)' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,DataGridViewProgressCell,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString (progressVal.ToString () + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: if (this.projectDataGridView1.Rows.Count > 0) {  	ProId = (int)this.projectDataGridView1.Rows [0].Cells [0].Value;  	ProName = (string)this.projectDataGridView1.Rows [0].Cells [1].Value;  	TopTable = (string)this.projectDataGridView1.Rows [0].Cells [2].Value;  	AnsTemplate = (string)this.projectDataGridView1.Rows [0].Cells [3].Value;  	pausebfconfirm = (int)this.projectDataGridView1.Rows [0].Cells [8].Value;  	pausebfnextpost = (int)this.projectDataGridView1.Rows [0].Cells [9].Value;  	postQnA = (bool)this.projectDataGridView1.Rows [0].Cells [10].Value;  	this.label2.Text = AnsTemplate;  	// this.projectDataGridView1.Rows[(this.projectDataGridView1.Rows.Count - 1)].Cells[4].Value = "";  }  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: if (this.projectDataGridView1.Rows.Count > 0) {  	ProId = (int)this.projectDataGridView1.Rows [0].Cells [0].Value;  	ProName = (string)this.projectDataGridView1.Rows [0].Cells [1].Value;  	TopTable = (string)this.projectDataGridView1.Rows [0].Cells [2].Value;  	AnsTemplate = (string)this.projectDataGridView1.Rows [0].Cells [3].Value;  	pausebfconfirm = (int)this.projectDataGridView1.Rows [0].Cells [8].Value;  	pausebfnextpost = (int)this.projectDataGridView1.Rows [0].Cells [9].Value;  	postQnA = (bool)this.projectDataGridView1.Rows [0].Cells [10].Value;  	this.label2.Text = AnsTemplate;  	// this.projectDataGridView1.Rows[(this.projectDataGridView1.Rows.Count - 1)].Cells[4].Value = "";  }  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: if (this.projectDataGridView1.Rows.Count > 0) {  	ProId = (int)this.projectDataGridView1.Rows [0].Cells [0].Value;  	ProName = (string)this.projectDataGridView1.Rows [0].Cells [1].Value;  	TopTable = (string)this.projectDataGridView1.Rows [0].Cells [2].Value;  	AnsTemplate = (string)this.projectDataGridView1.Rows [0].Cells [3].Value;  	pausebfconfirm = (int)this.projectDataGridView1.Rows [0].Cells [8].Value;  	pausebfnextpost = (int)this.projectDataGridView1.Rows [0].Cells [9].Value;  	postQnA = (bool)this.projectDataGridView1.Rows [0].Cells [10].Value;  	this.label2.Text = AnsTemplate;  	// this.projectDataGridView1.Rows[(this.projectDataGridView1.Rows.Count - 1)].Cells[4].Value = "";  }  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: if (this.projectDataGridView1.Rows.Count > 0) {  	ProId = (int)this.projectDataGridView1.Rows [0].Cells [0].Value;  	ProName = (string)this.projectDataGridView1.Rows [0].Cells [1].Value;  	TopTable = (string)this.projectDataGridView1.Rows [0].Cells [2].Value;  	AnsTemplate = (string)this.projectDataGridView1.Rows [0].Cells [3].Value;  	pausebfconfirm = (int)this.projectDataGridView1.Rows [0].Cells [8].Value;  	pausebfnextpost = (int)this.projectDataGridView1.Rows [0].Cells [9].Value;  	postQnA = (bool)this.projectDataGridView1.Rows [0].Cells [10].Value;  	this.label2.Text = AnsTemplate;  	// this.projectDataGridView1.Rows[(this.projectDataGridView1.Rows.Count - 1)].Cells[4].Value = "";  }  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: if (this.projectDataGridView1.Rows.Count > 0) {  	ProId = (int)this.projectDataGridView1.Rows [0].Cells [0].Value;  	ProName = (string)this.projectDataGridView1.Rows [0].Cells [1].Value;  	TopTable = (string)this.projectDataGridView1.Rows [0].Cells [2].Value;  	AnsTemplate = (string)this.projectDataGridView1.Rows [0].Cells [3].Value;  	pausebfconfirm = (int)this.projectDataGridView1.Rows [0].Cells [8].Value;  	pausebfnextpost = (int)this.projectDataGridView1.Rows [0].Cells [9].Value;  	postQnA = (bool)this.projectDataGridView1.Rows [0].Cells [10].Value;  	this.label2.Text = AnsTemplate;  	// this.projectDataGridView1.Rows[(this.projectDataGridView1.Rows.Count - 1)].Cells[4].Value = "";  }  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: TopTable = (string)this.projectDataGridView1.Rows [0].Cells [2].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: AnsTemplate = (string)this.projectDataGridView1.Rows [0].Cells [3].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: pausebfconfirm = (int)this.projectDataGridView1.Rows [0].Cells [8].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: pausebfnextpost = (int)this.projectDataGridView1.Rows [0].Cells [9].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,ParentForm,The following statement contains a magic number: postQnA = (bool)this.projectDataGridView1.Rows [0].Cells [10].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,InitializeDataGrid,The following statement contains a magic number: this.ProgressReportcolumn.Width = 200;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,projectDataGridView1_RowEnter,The following statement contains a magic number: TopTable = (string)cRow.Cells [2].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,projectDataGridView1_RowEnter,The following statement contains a magic number: AnsTemplate = (string)cRow.Cells [3].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,projectDataGridView1_RowEnter,The following statement contains a magic number: pausebfconfirm = (int)cRow.Cells [8].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,projectDataGridView1_RowEnter,The following statement contains a magic number: pausebfnextpost = (int)cRow.Cells [9].Value;  
Magic Number,iMacrosPostingDashboard,ParentForm,C:\repos\ugniusr_iMacrosTest-CSharp\Forms\ParentForm.cs,projectDataGridView1_RowEnter,The following statement contains a magic number: postQnA = (bool)cRow.Cells [10].Value;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: if (IsNightTime (StartTime' EndTime' tzoneproject))  	worker.ReportProgress ((2 * progressvalue)' "Night time sleeping until: " + StartTime.ToShortTimeString ());  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "Night time sleeping until: " + StartTime.ToShortTimeString ());  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: while (IsNightTime (StartTime' EndTime' tzoneproject)) {  	//  	System.Threading.Thread.Sleep ((1000 * 60 * 10));  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: while (IsNightTime (StartTime' EndTime' tzoneproject)) {  	//  	System.Threading.Thread.Sleep ((1000 * 60 * 10));  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: while (IsNightTime (StartTime' EndTime' tzoneproject)) {  	//  	System.Threading.Thread.Sleep ((1000 * 60 * 10));  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 10));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 10));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SleepIfNighttime,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 10));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectProject,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Initialized. Selecting the project. ");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectProject,The following statement contains a magic number: try {  	proj_local.Query.Load ();  }  catch {  	counter1++;  	if (counter1 >= 4)  		return;  	goto SelectProjectAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectProject,The following statement contains a magic number: if (counter1 >= 4)  	return;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectProject,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Project selected. ");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextTopic,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "Selecting topic. ");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextTopic,The following statement contains a magic number: if (nexttopic > MaxTopics) {  	worker.ReportProgress ((2 * progressvalue)' "Out of topics.");  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextTopic,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "Out of topics.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextTopic,The following statement contains a magic number: try {  	if (!tbltopics.Query.Load ())// if the Query Result is empty' try to select the next row  	 {  		nexttopic++;  		goto SelectTopicAgain;  	}  	if (tbltopics.PostedStatus == 1)// if the topic is already posted' select the next topic  	 {  		nexttopic++;  		goto SelectTopicAgain;  	}  	if (tbltopics.ProductKeyword == "0")// if the keyword is "0"' select the next topic  	 {  		nexttopic++;  		goto SelectTopicAgain;  	}  }  catch {  	counter2++;  	if (counter2 >= 4)  		return;  	goto SelectTopicAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextTopic,The following statement contains a magic number: if (counter2 >= 4)  	return;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextTopic,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "Topic selected. ");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: while (kwd == "" || kwd == null) {  	worker.ReportProgress ((2 * progressvalue)' "No keyword found. ");  	worker.ReportProgress ((2 * progressvalue)' "Sleeping 5 min. and checking for kwds again.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: while (kwd == "" || kwd == null) {  	worker.ReportProgress ((2 * progressvalue)' "No keyword found. ");  	worker.ReportProgress ((2 * progressvalue)' "Sleeping 5 min. and checking for kwds again.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: while (kwd == "" || kwd == null) {  	worker.ReportProgress ((2 * progressvalue)' "No keyword found. ");  	worker.ReportProgress ((2 * progressvalue)' "Sleeping 5 min. and checking for kwds again.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: while (kwd == "" || kwd == null) {  	worker.ReportProgress ((2 * progressvalue)' "No keyword found. ");  	worker.ReportProgress ((2 * progressvalue)' "Sleeping 5 min. and checking for kwds again.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: while (kwd == "" || kwd == null) {  	worker.ReportProgress ((2 * progressvalue)' "No keyword found. ");  	worker.ReportProgress ((2 * progressvalue)' "Sleeping 5 min. and checking for kwds again.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "No keyword found. ");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "Sleeping 5 min. and checking for kwds again.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 5));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 5));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitForKeywordsOrShutTheProcessDown,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 5));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Selecting email account.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,The following statement contains a magic number: if (nextemail_local > MaxEmails) {  	worker.ReportProgress ((2 * progressvalue)' "Out of email accounts.");  	error.Cancel = true;  	return 0;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "Out of email accounts.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,The following statement contains a magic number: try {  	if (!tblaccts_local.Query.Load ()) {  		nexttopic++;  		goto SelectEmailAgain;  	}  }  catch {  	counter3++;  	if (counter3 >= 4) {  		error.Cancel = true;  		return 0;  	}  	goto SelectEmailAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,The following statement contains a magic number: if (counter3 >= 4) {  	error.Cancel = true;  	return 0;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextEmail,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Email selected. ");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextProxy,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Selecting proxy. ");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextProxy,The following statement contains a magic number: try {  	tblproxies_local.LoadAll ();  }  catch {  	counter4++;  	if (counter4 >= 4)  		return 0;  	goto SelectProxyAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextProxy,The following statement contains a magic number: if (counter4 >= 4)  	return 0;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextProxy,The following statement contains a magic number: try {  	tblproxies_local.Query.Load ();  }  catch {  	counter4++;  	if (counter4 >= 4)  		return 0;  	goto SelectProxyAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextProxy,The following statement contains a magic number: if (counter4 >= 4)  	return 0;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,SelectNextProxy,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Proxy selected.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Checking if proxy is alive.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: if (proxycount == 0) {  	worker.ReportProgress ((2 * progressvalue++)' "Failed selecting proxies.");  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Failed selecting proxies.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: while (!httpcall.IsAlive (tblproxies.Proxy)) {  	tblproxies.Active = 0;  	//  Mark DEAD proxy as dead  	tblproxies.Save ();  	//  Save that value  	nextproxy = nextproxy + 1;  	// select next proxy in the list  	if (nextproxy > proxycount) {  		nextproxy = 1;  	}  	tblproxies.Where.Id.Value = nextproxy;  	tblproxies.Where.Id.Operator = WhereParameter.Operand.Equal;  	try {  		tblproxies.Query.Load ();  	}  	catch {  	}  	loopcounter++;  	if (loopcounter > proxycount) {  		worker.ReportProgress ((2 * progressvalue++)' "No working proxies found.");  		error.Cancel = true;  		return;  	}  	worker.ReportProgress ((2 * progressvalue)' "Trying the next proxy.");  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: while (!httpcall.IsAlive (tblproxies.Proxy)) {  	tblproxies.Active = 0;  	//  Mark DEAD proxy as dead  	tblproxies.Save ();  	//  Save that value  	nextproxy = nextproxy + 1;  	// select next proxy in the list  	if (nextproxy > proxycount) {  		nextproxy = 1;  	}  	tblproxies.Where.Id.Value = nextproxy;  	tblproxies.Where.Id.Operator = WhereParameter.Operand.Equal;  	try {  		tblproxies.Query.Load ();  	}  	catch {  	}  	loopcounter++;  	if (loopcounter > proxycount) {  		worker.ReportProgress ((2 * progressvalue++)' "No working proxies found.");  		error.Cancel = true;  		return;  	}  	worker.ReportProgress ((2 * progressvalue)' "Trying the next proxy.");  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: if (loopcounter > proxycount) {  	worker.ReportProgress ((2 * progressvalue++)' "No working proxies found.");  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "No working proxies found.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue)' "Trying the next proxy.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CheckIfProxyIsWorkingSelectNextIfNotWorking,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Proxy working well.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccount,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Creating a new account.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccount,The following statement contains a magic number: if (hascaptcha == 1) {  	CreateNewAccountWithCaptcha (tblaccts_local' proxy_local' createcode_local);  	return true;  }  else {  	tblaccts_copy = tblaccts_local;  	if (stdfunc.CreateAccount (tblaccts_copy' proxy_local' createcode_local)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account created.");  		return true;  	}  	else  		return false;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccount,The following statement contains a magic number: if (stdfunc.CreateAccount (tblaccts_copy' proxy_local' createcode_local)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account created.");  	return true;  }  else  	return false;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccount,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Account created.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccountWithCaptcha,The following statement contains a magic number: while (ErrorMsg != "" && ErrorMsg != "#EANF#" && ErrorMsg != null) {  	// Blogas CAPTCHA  	// Report bad CAPTCHA  	if (CancellationIsPending ())  		return;  	if (CaptchaId != "NODATA")  		stdfunc.ReportBadCaptcha (CaptchaId);  	ErrorAndId = stdfunc.CreateAccountWithCaptcha (tblaccts_copy' proxy_local' createcode_local);  	ErrorMsg = ErrorAndId [0];  	CaptchaId = ErrorAndId [1];  	br++;  	if (br > 5) {  		worker.ReportProgress ((2 * progressvalue++)' "6 captchas solved incorrectly. Stopping.");  		//e.Cancel = true;  		break;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccountWithCaptcha,The following statement contains a magic number: while (ErrorMsg != "" && ErrorMsg != "#EANF#" && ErrorMsg != null) {  	// Blogas CAPTCHA  	// Report bad CAPTCHA  	if (CancellationIsPending ())  		return;  	if (CaptchaId != "NODATA")  		stdfunc.ReportBadCaptcha (CaptchaId);  	ErrorAndId = stdfunc.CreateAccountWithCaptcha (tblaccts_copy' proxy_local' createcode_local);  	ErrorMsg = ErrorAndId [0];  	CaptchaId = ErrorAndId [1];  	br++;  	if (br > 5) {  		worker.ReportProgress ((2 * progressvalue++)' "6 captchas solved incorrectly. Stopping.");  		//e.Cancel = true;  		break;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccountWithCaptcha,The following statement contains a magic number: if (br > 5) {  	worker.ReportProgress ((2 * progressvalue++)' "6 captchas solved incorrectly. Stopping.");  	//e.Cancel = true;  	break;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccountWithCaptcha,The following statement contains a magic number: if (br > 5) {  	worker.ReportProgress ((2 * progressvalue++)' "6 captchas solved incorrectly. Stopping.");  	//e.Cancel = true;  	break;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,CreateNewAccountWithCaptcha,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "6 captchas solved incorrectly. Stopping.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitSomeTime,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Account created. Pausing " + waitminutes + " min.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitSomeTime,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * waitminutes));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,WaitSomeTime,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * waitminutes));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Confirming account.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (proj.Senderemail == "" || proj.Senderemail == null) {  	return true;  }  else {  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else {  		worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  		System.Threading.Thread.Sleep ((1000 * 60 * 5));  		if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  			worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  			// tblaccts.Password = passwd;  			// tblaccts.Save();  			return true;  		}  		else  			return false;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (proj.Senderemail == "" || proj.Senderemail == null) {  	return true;  }  else {  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else {  		worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  		System.Threading.Thread.Sleep ((1000 * 60 * 5));  		if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  			worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  			// tblaccts.Password = passwd;  			// tblaccts.Save();  			return true;  		}  		else  			return false;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (proj.Senderemail == "" || proj.Senderemail == null) {  	return true;  }  else {  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else {  		worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  		System.Threading.Thread.Sleep ((1000 * 60 * 5));  		if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  			worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  			// tblaccts.Password = passwd;  			// tblaccts.Save();  			return true;  		}  		else  			return false;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (proj.Senderemail == "" || proj.Senderemail == null) {  	return true;  }  else {  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else {  		worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  		System.Threading.Thread.Sleep ((1000 * 60 * 5));  		if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  			worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  			// tblaccts.Password = passwd;  			// tblaccts.Save();  			return true;  		}  		else  			return false;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (proj.Senderemail == "" || proj.Senderemail == null) {  	return true;  }  else {  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else {  		worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  		System.Threading.Thread.Sleep ((1000 * 60 * 5));  		if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  			worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  			// tblaccts.Password = passwd;  			// tblaccts.Save();  			return true;  		}  		else  			return false;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (proj.Senderemail == "" || proj.Senderemail == null) {  	return true;  }  else {  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else {  		worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  		System.Threading.Thread.Sleep ((1000 * 60 * 5));  		if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  			worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  			// tblaccts.Password = passwd;  			// tblaccts.Save();  			return true;  		}  		else  			return false;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  	// tblaccts.Password = passwd;  	// tblaccts.Save();  	return true;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else  		return false;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  	// tblaccts.Password = passwd;  	// tblaccts.Save();  	return true;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else  		return false;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  	// tblaccts.Password = passwd;  	// tblaccts.Save();  	return true;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else  		return false;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  	// tblaccts.Password = passwd;  	// tblaccts.Save();  	return true;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else  		return false;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  	// tblaccts.Password = passwd;  	// tblaccts.Save();  	return true;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else  		return false;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  	// tblaccts.Password = passwd;  	// tblaccts.Save();  	return true;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  	System.Threading.Thread.Sleep ((1000 * 60 * 5));  	if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  		worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  		// tblaccts.Password = passwd;  		// tblaccts.Save();  		return true;  	}  	else  		return false;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Unconfirmed. Waiting extra 5 min.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 5));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 5));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 5));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: if (stdfunc.ConfirmAccount (tblaccts.Email' ref passwd' linkstructure' proj.Senderemail' tblproxies.Proxy' shiftby)) {  	worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  	// tblaccts.Password = passwd;  	// tblaccts.Save();  	return true;  }  else  	return false;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ConfirmNewAccount,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Account confirmed.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PostTheQuestion,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Posting a question.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceLongURL,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Producing Long URLs.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceLongURL,The following statement contains a magic number: try {  	KwdsNoSpace = HttpUtility.UrlEncode (kwd);  }  catch {  	worker.ReportProgress ((2 * progressvalue++)' "HttpUtility failed and threw and exception.");  	error.Cancel = true;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceLongURL,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "HttpUtility failed and threw and exception.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceLongURL,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Long URLs done.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Producing Short URLs.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: if ((tbltopics.LongURL1 != "") && (tbltopics.LongURL1 != null)) {  	int i = 1;  	while ((tbltopics.ShortURL1 == "#EANF#" || tbltopics.ShortURL1 == "" || tbltopics.ShortURL1 == "NODATA" || tbltopics.ShortURL1 == null) && (i <= 4))// Let's not do conversion if the ShortURL1 is None.  	 {  		tbltopics.ShortURL1 = TinyClass.URLShorten (tbltopics.LongURL1' shortURLbase);  		tbltopics.Save ();  		i++;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: while ((tbltopics.ShortURL1 == "#EANF#" || tbltopics.ShortURL1 == "" || tbltopics.ShortURL1 == "NODATA" || tbltopics.ShortURL1 == null) && (i <= 4))// Let's not do conversion if the ShortURL1 is None.   {  	tbltopics.ShortURL1 = TinyClass.URLShorten (tbltopics.LongURL1' shortURLbase);  	tbltopics.Save ();  	i++;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: if ((tbltopics.LongURL2 != "") && (tbltopics.LongURL2 != null)) {  	int j = 1;  	while ((tbltopics.ShortURL2 == "#EANF#" || tbltopics.ShortURL2 == "" || tbltopics.ShortURL2 == "NODATA" || tbltopics.ShortURL2 == null) && (j <= 4))// Let's not do conversion if the ShortURL2 is None.  	 {  		tbltopics.ShortURL2 = TinyClass.URLShorten (tbltopics.LongURL2' shortURLbase);  		tbltopics.Save ();  		j++;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: while ((tbltopics.ShortURL2 == "#EANF#" || tbltopics.ShortURL2 == "" || tbltopics.ShortURL2 == "NODATA" || tbltopics.ShortURL2 == null) && (j <= 4))// Let's not do conversion if the ShortURL2 is None.   {  	tbltopics.ShortURL2 = TinyClass.URLShorten (tbltopics.LongURL2' shortURLbase);  	tbltopics.Save ();  	j++;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: if (tbltopics.ShortURL1 != "" && tbltopics.ShortURL1 != null) {  	worker.ReportProgress ((2 * progressvalue++)' "Short URLs done.");  	return;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Short URLs not produced.");  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: if (tbltopics.ShortURL1 != "" && tbltopics.ShortURL1 != null) {  	worker.ReportProgress ((2 * progressvalue++)' "Short URLs done.");  	return;  }  else {  	worker.ReportProgress ((2 * progressvalue++)' "Short URLs not produced.");  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Short URLs done.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ProduceShortURL,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Short URLs not produced.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: if (tbltopics.CustResponse == "" || tbltopics.CustResponse == null) {  	worker.ReportProgress ((2 * progressvalue++)' "Selecting an answer tmpl.");  	int counter5 = 0;  	SelectAnswersAgain:  	nexttmpl = proj.LastTemplateUsed + 1;  	// Filter out the next answer template  	// tblresp.Where.LanguageId.Value = proj.Language;  	// tblresp.Where.LanguageId.Operator = WhereParameter.Operand.Equal;  	tblresp.Where.ResponseGroup.Value = AnswerTemplate;  	tblresp.Where.ResponseGroup.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	if (nexttmpl > tblresp.RowCount) {  		nexttmpl = 1;  	}  	tblresp.Where.RespGrSpecSequence.Value = nexttmpl;  	tblresp.Where.RespGrSpecSequence.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	string response_ref = tblresp.Response.ToString ();  	// tbltopics.Response = response_ref;  	// tbltopics.Response = "éêágó"; \xc3\xaa  	tbltopics.Response = response_ref;  	try {  		tbltopics.Save ();  	}  	catch {  		worker.ReportProgress ((2 * progressvalue++)' "Ans. couldn't be saved in tbltopics.");  		error.Cancel = true;  		return;  	}  }  else {  	tbltopics.Response = tbltopics.CustResponse;  	try {  		tbltopics.Save ();  	}  	catch {  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: if (tbltopics.CustResponse == "" || tbltopics.CustResponse == null) {  	worker.ReportProgress ((2 * progressvalue++)' "Selecting an answer tmpl.");  	int counter5 = 0;  	SelectAnswersAgain:  	nexttmpl = proj.LastTemplateUsed + 1;  	// Filter out the next answer template  	// tblresp.Where.LanguageId.Value = proj.Language;  	// tblresp.Where.LanguageId.Operator = WhereParameter.Operand.Equal;  	tblresp.Where.ResponseGroup.Value = AnswerTemplate;  	tblresp.Where.ResponseGroup.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	if (nexttmpl > tblresp.RowCount) {  		nexttmpl = 1;  	}  	tblresp.Where.RespGrSpecSequence.Value = nexttmpl;  	tblresp.Where.RespGrSpecSequence.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	string response_ref = tblresp.Response.ToString ();  	// tbltopics.Response = response_ref;  	// tbltopics.Response = "éêágó"; \xc3\xaa  	tbltopics.Response = response_ref;  	try {  		tbltopics.Save ();  	}  	catch {  		worker.ReportProgress ((2 * progressvalue++)' "Ans. couldn't be saved in tbltopics.");  		error.Cancel = true;  		return;  	}  }  else {  	tbltopics.Response = tbltopics.CustResponse;  	try {  		tbltopics.Save ();  	}  	catch {  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: if (tbltopics.CustResponse == "" || tbltopics.CustResponse == null) {  	worker.ReportProgress ((2 * progressvalue++)' "Selecting an answer tmpl.");  	int counter5 = 0;  	SelectAnswersAgain:  	nexttmpl = proj.LastTemplateUsed + 1;  	// Filter out the next answer template  	// tblresp.Where.LanguageId.Value = proj.Language;  	// tblresp.Where.LanguageId.Operator = WhereParameter.Operand.Equal;  	tblresp.Where.ResponseGroup.Value = AnswerTemplate;  	tblresp.Where.ResponseGroup.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	if (nexttmpl > tblresp.RowCount) {  		nexttmpl = 1;  	}  	tblresp.Where.RespGrSpecSequence.Value = nexttmpl;  	tblresp.Where.RespGrSpecSequence.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	string response_ref = tblresp.Response.ToString ();  	// tbltopics.Response = response_ref;  	// tbltopics.Response = "éêágó"; \xc3\xaa  	tbltopics.Response = response_ref;  	try {  		tbltopics.Save ();  	}  	catch {  		worker.ReportProgress ((2 * progressvalue++)' "Ans. couldn't be saved in tbltopics.");  		error.Cancel = true;  		return;  	}  }  else {  	tbltopics.Response = tbltopics.CustResponse;  	try {  		tbltopics.Save ();  	}  	catch {  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: if (tbltopics.CustResponse == "" || tbltopics.CustResponse == null) {  	worker.ReportProgress ((2 * progressvalue++)' "Selecting an answer tmpl.");  	int counter5 = 0;  	SelectAnswersAgain:  	nexttmpl = proj.LastTemplateUsed + 1;  	// Filter out the next answer template  	// tblresp.Where.LanguageId.Value = proj.Language;  	// tblresp.Where.LanguageId.Operator = WhereParameter.Operand.Equal;  	tblresp.Where.ResponseGroup.Value = AnswerTemplate;  	tblresp.Where.ResponseGroup.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	if (nexttmpl > tblresp.RowCount) {  		nexttmpl = 1;  	}  	tblresp.Where.RespGrSpecSequence.Value = nexttmpl;  	tblresp.Where.RespGrSpecSequence.Operator = WhereParameter.Operand.Equal;  	try {  		tblresp.Query.Load ();  	}  	catch {  		counter5++;  		if (counter5 >= 4)  			return;  		goto SelectAnswersAgain;  	}  	string response_ref = tblresp.Response.ToString ();  	// tbltopics.Response = response_ref;  	// tbltopics.Response = "éêágó"; \xc3\xaa  	tbltopics.Response = response_ref;  	try {  		tbltopics.Save ();  	}  	catch {  		worker.ReportProgress ((2 * progressvalue++)' "Ans. couldn't be saved in tbltopics.");  		error.Cancel = true;  		return;  	}  }  else {  	tbltopics.Response = tbltopics.CustResponse;  	try {  		tbltopics.Save ();  	}  	catch {  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Selecting an answer tmpl.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: try {  	tblresp.Query.Load ();  }  catch {  	counter5++;  	if (counter5 >= 4)  		return;  	goto SelectAnswersAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: if (counter5 >= 4)  	return;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: try {  	tblresp.Query.Load ();  }  catch {  	counter5++;  	if (counter5 >= 4)  		return;  	goto SelectAnswersAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: if (counter5 >= 4)  	return;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: try {  	tbltopics.Save ();  }  catch {  	worker.ReportProgress ((2 * progressvalue++)' "Ans. couldn't be saved in tbltopics.");  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Ans. couldn't be saved in tbltopics.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,FilterOutTheNextAnswerTemplate,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Answer tmpl. selected");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ReplaceURLs,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Replacing [url]s.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ReplaceURLs,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "[url]s DONE.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PostTheAnswer,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Posting an answer.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,IncrementDBValues,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Incrementing DB values.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,IncrementDBValues,The following statement contains a magic number: try {  	proj_local.Save ();  }  catch {  	counter7++;  	if (counter7 >= 4) {  		error.Cancel = true;  		return;  	}  	goto IncrementValuesAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,IncrementDBValues,The following statement contains a magic number: if (counter7 >= 4) {  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,UpdatePostedStatus,The following statement contains a magic number: try {  	tbltopics.Save ();  }  catch (Exception ex) {  	counter7++;  	if (counter7 >= 4) {  		error.Cancel = true;  		return;  	}  	goto UpdatePostedStatusAgain;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,UpdatePostedStatus,The following statement contains a magic number: if (counter7 >= 4) {  	error.Cancel = true;  	return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,UpdatePostedStatus,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Incrementing done.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ResetAllFilters,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Resetting filters.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,ResetAllFilters,The following statement contains a magic number: worker.ReportProgress ((2 * progressvalue++)' "Filters reset.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PauseBetweenPosts,The following statement contains a magic number: worker.ReportProgress ((100)' "Pausing for " + PauseBtwPosts.ToString () + " min.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PauseBetweenPosts,The following statement contains a magic number: for (int j = 1; j <= PauseBtwPosts; j++) {  	int Remaining = (PauseBtwPosts - j + 1);  	worker.ReportProgress ((100)' Remaining.ToString () + " min. remaining.");  	System.Threading.Thread.Sleep ((1000 * 60 * 1));  	// WAIT BETWEEN POSTS  	if ((worker.CancellationPending == true))// if the STOP button has been clicked  	 {  		error.Cancel = true;  		break;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PauseBetweenPosts,The following statement contains a magic number: for (int j = 1; j <= PauseBtwPosts; j++) {  	int Remaining = (PauseBtwPosts - j + 1);  	worker.ReportProgress ((100)' Remaining.ToString () + " min. remaining.");  	System.Threading.Thread.Sleep ((1000 * 60 * 1));  	// WAIT BETWEEN POSTS  	if ((worker.CancellationPending == true))// if the STOP button has been clicked  	 {  		error.Cancel = true;  		break;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PauseBetweenPosts,The following statement contains a magic number: for (int j = 1; j <= PauseBtwPosts; j++) {  	int Remaining = (PauseBtwPosts - j + 1);  	worker.ReportProgress ((100)' Remaining.ToString () + " min. remaining.");  	System.Threading.Thread.Sleep ((1000 * 60 * 1));  	// WAIT BETWEEN POSTS  	if ((worker.CancellationPending == true))// if the STOP button has been clicked  	 {  		error.Cancel = true;  		break;  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PauseBetweenPosts,The following statement contains a magic number: worker.ReportProgress ((100)' Remaining.ToString () + " min. remaining.");  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PauseBetweenPosts,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 1));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,PauseBetweenPosts,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 60 * 1));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: while (RunningStatus) {  	progressvalue = 2;  	// EmailKwdStatus(false);  	System.Threading.Thread.Sleep ((1000 * 5 * 1));  	// Sleep 5 seconds (just in case) so that we can manage to Cancel the BW.  	if (CancellationIsPending ())  		return;  	if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5  	 {  		try {  			EmailKwdStatus (true);  		}  		catch {  		}  	}  	if (CancellationIsPending ())  		return;  	SleepIfNighttime ();  	if (CancellationIsPending ())  		return;  	SelectProject (ref proj' ProjectName);  	if (CancellationIsPending ())  		return;  	SaveMacroCodes ();  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  	UpdatePostedStatus (2);  	if (CancellationIsPending ())  		return;  	WaitForKeywordsOrShutTheProcessDown ();  	if (CancellationIsPending ())  		return;  	nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  	if (CancellationIsPending ())  		return;  	nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  	if (CancellationIsPending ())  		return;  	CheckIfProxyIsWorkingSelectNextIfNotWorking ();  	if (CancellationIsPending ())  		return;  	if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  		if (CancellationIsPending ())  			return;  		WaitSomeTime (pausebfconfirm);  		//  wait 2 minutes  		if (CancellationIsPending ())  			return;  		#region AskCom situation where we need to post the question first  		if (property.ContainsKey ("postQnA")) {  			try {  				int pQnA = Convert.ToInt32 (property ["postQnA"]);  				if (pQnA == 1)  					postQnA = true;  			}  			catch {  			}  		}  		if (postQnA) {  			questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  			if (questionposted) {  				/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				SelectProject (ref proj' ProjectName);  				if (CancellationIsPending ())  					return;  				nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  				if (CancellationIsPending ())  					return;  				nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  				if (CancellationIsPending ())  					return;  				CheckIfProxyIsWorkingSelectNextIfNotWorking ();  				if (CancellationIsPending ())  					return;  				if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  					questionposted = false;  			}  		}  		#endregion  		confirmed = ConfirmNewAccount ();  		if (confirmed && questionposted) {  			UpdatePostedStatus (3);  			ProduceLongURL ();  			if (CancellationIsPending ())  				return;  			ProduceShortURL ();  			if (CancellationIsPending ())  				return;  			FilterOutTheNextAnswerTemplate ();  			if (CancellationIsPending ())  				return;  			ReplaceURLs ();  			if (CancellationIsPending ())  				return;  			if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  				// if there should be another email with the password  				confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  			}  		}  		if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   		 {  			poster = new iMacrosPostReturnVars ();  			poster = PostTheAnswer ();  			if (CancellationIsPending ())  				return;  			if (poster.getSuccess ()) {  				UpdatePostedStatus (1' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  			else// if not successfully posted (i.e. no TinyURL in the final page result)  			 {  				UpdatePostedStatus (4' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  		}  		else// if account not confirmed' switch to a new account and proxy:  		 {  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		if (CancellationIsPending ())  			return;  		PauseBetweenPosts (pausebfnextpost);  		// only if the Account was created' then pause' otherwise LOOP again  		if (CancellationIsPending ())  			return;  	}  	// end CreateNewAccount  	ResetAllFilters ();  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: while (RunningStatus) {  	progressvalue = 2;  	// EmailKwdStatus(false);  	System.Threading.Thread.Sleep ((1000 * 5 * 1));  	// Sleep 5 seconds (just in case) so that we can manage to Cancel the BW.  	if (CancellationIsPending ())  		return;  	if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5  	 {  		try {  			EmailKwdStatus (true);  		}  		catch {  		}  	}  	if (CancellationIsPending ())  		return;  	SleepIfNighttime ();  	if (CancellationIsPending ())  		return;  	SelectProject (ref proj' ProjectName);  	if (CancellationIsPending ())  		return;  	SaveMacroCodes ();  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  	UpdatePostedStatus (2);  	if (CancellationIsPending ())  		return;  	WaitForKeywordsOrShutTheProcessDown ();  	if (CancellationIsPending ())  		return;  	nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  	if (CancellationIsPending ())  		return;  	nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  	if (CancellationIsPending ())  		return;  	CheckIfProxyIsWorkingSelectNextIfNotWorking ();  	if (CancellationIsPending ())  		return;  	if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  		if (CancellationIsPending ())  			return;  		WaitSomeTime (pausebfconfirm);  		//  wait 2 minutes  		if (CancellationIsPending ())  			return;  		#region AskCom situation where we need to post the question first  		if (property.ContainsKey ("postQnA")) {  			try {  				int pQnA = Convert.ToInt32 (property ["postQnA"]);  				if (pQnA == 1)  					postQnA = true;  			}  			catch {  			}  		}  		if (postQnA) {  			questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  			if (questionposted) {  				/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				SelectProject (ref proj' ProjectName);  				if (CancellationIsPending ())  					return;  				nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  				if (CancellationIsPending ())  					return;  				nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  				if (CancellationIsPending ())  					return;  				CheckIfProxyIsWorkingSelectNextIfNotWorking ();  				if (CancellationIsPending ())  					return;  				if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  					questionposted = false;  			}  		}  		#endregion  		confirmed = ConfirmNewAccount ();  		if (confirmed && questionposted) {  			UpdatePostedStatus (3);  			ProduceLongURL ();  			if (CancellationIsPending ())  				return;  			ProduceShortURL ();  			if (CancellationIsPending ())  				return;  			FilterOutTheNextAnswerTemplate ();  			if (CancellationIsPending ())  				return;  			ReplaceURLs ();  			if (CancellationIsPending ())  				return;  			if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  				// if there should be another email with the password  				confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  			}  		}  		if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   		 {  			poster = new iMacrosPostReturnVars ();  			poster = PostTheAnswer ();  			if (CancellationIsPending ())  				return;  			if (poster.getSuccess ()) {  				UpdatePostedStatus (1' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  			else// if not successfully posted (i.e. no TinyURL in the final page result)  			 {  				UpdatePostedStatus (4' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  		}  		else// if account not confirmed' switch to a new account and proxy:  		 {  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		if (CancellationIsPending ())  			return;  		PauseBetweenPosts (pausebfnextpost);  		// only if the Account was created' then pause' otherwise LOOP again  		if (CancellationIsPending ())  			return;  	}  	// end CreateNewAccount  	ResetAllFilters ();  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: while (RunningStatus) {  	progressvalue = 2;  	// EmailKwdStatus(false);  	System.Threading.Thread.Sleep ((1000 * 5 * 1));  	// Sleep 5 seconds (just in case) so that we can manage to Cancel the BW.  	if (CancellationIsPending ())  		return;  	if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5  	 {  		try {  			EmailKwdStatus (true);  		}  		catch {  		}  	}  	if (CancellationIsPending ())  		return;  	SleepIfNighttime ();  	if (CancellationIsPending ())  		return;  	SelectProject (ref proj' ProjectName);  	if (CancellationIsPending ())  		return;  	SaveMacroCodes ();  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  	UpdatePostedStatus (2);  	if (CancellationIsPending ())  		return;  	WaitForKeywordsOrShutTheProcessDown ();  	if (CancellationIsPending ())  		return;  	nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  	if (CancellationIsPending ())  		return;  	nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  	if (CancellationIsPending ())  		return;  	CheckIfProxyIsWorkingSelectNextIfNotWorking ();  	if (CancellationIsPending ())  		return;  	if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  		if (CancellationIsPending ())  			return;  		WaitSomeTime (pausebfconfirm);  		//  wait 2 minutes  		if (CancellationIsPending ())  			return;  		#region AskCom situation where we need to post the question first  		if (property.ContainsKey ("postQnA")) {  			try {  				int pQnA = Convert.ToInt32 (property ["postQnA"]);  				if (pQnA == 1)  					postQnA = true;  			}  			catch {  			}  		}  		if (postQnA) {  			questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  			if (questionposted) {  				/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				SelectProject (ref proj' ProjectName);  				if (CancellationIsPending ())  					return;  				nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  				if (CancellationIsPending ())  					return;  				nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  				if (CancellationIsPending ())  					return;  				CheckIfProxyIsWorkingSelectNextIfNotWorking ();  				if (CancellationIsPending ())  					return;  				if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  					questionposted = false;  			}  		}  		#endregion  		confirmed = ConfirmNewAccount ();  		if (confirmed && questionposted) {  			UpdatePostedStatus (3);  			ProduceLongURL ();  			if (CancellationIsPending ())  				return;  			ProduceShortURL ();  			if (CancellationIsPending ())  				return;  			FilterOutTheNextAnswerTemplate ();  			if (CancellationIsPending ())  				return;  			ReplaceURLs ();  			if (CancellationIsPending ())  				return;  			if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  				// if there should be another email with the password  				confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  			}  		}  		if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   		 {  			poster = new iMacrosPostReturnVars ();  			poster = PostTheAnswer ();  			if (CancellationIsPending ())  				return;  			if (poster.getSuccess ()) {  				UpdatePostedStatus (1' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  			else// if not successfully posted (i.e. no TinyURL in the final page result)  			 {  				UpdatePostedStatus (4' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  		}  		else// if account not confirmed' switch to a new account and proxy:  		 {  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		if (CancellationIsPending ())  			return;  		PauseBetweenPosts (pausebfnextpost);  		// only if the Account was created' then pause' otherwise LOOP again  		if (CancellationIsPending ())  			return;  	}  	// end CreateNewAccount  	ResetAllFilters ();  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: while (RunningStatus) {  	progressvalue = 2;  	// EmailKwdStatus(false);  	System.Threading.Thread.Sleep ((1000 * 5 * 1));  	// Sleep 5 seconds (just in case) so that we can manage to Cancel the BW.  	if (CancellationIsPending ())  		return;  	if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5  	 {  		try {  			EmailKwdStatus (true);  		}  		catch {  		}  	}  	if (CancellationIsPending ())  		return;  	SleepIfNighttime ();  	if (CancellationIsPending ())  		return;  	SelectProject (ref proj' ProjectName);  	if (CancellationIsPending ())  		return;  	SaveMacroCodes ();  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  	UpdatePostedStatus (2);  	if (CancellationIsPending ())  		return;  	WaitForKeywordsOrShutTheProcessDown ();  	if (CancellationIsPending ())  		return;  	nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  	if (CancellationIsPending ())  		return;  	nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  	if (CancellationIsPending ())  		return;  	CheckIfProxyIsWorkingSelectNextIfNotWorking ();  	if (CancellationIsPending ())  		return;  	if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  		if (CancellationIsPending ())  			return;  		WaitSomeTime (pausebfconfirm);  		//  wait 2 minutes  		if (CancellationIsPending ())  			return;  		#region AskCom situation where we need to post the question first  		if (property.ContainsKey ("postQnA")) {  			try {  				int pQnA = Convert.ToInt32 (property ["postQnA"]);  				if (pQnA == 1)  					postQnA = true;  			}  			catch {  			}  		}  		if (postQnA) {  			questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  			if (questionposted) {  				/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				SelectProject (ref proj' ProjectName);  				if (CancellationIsPending ())  					return;  				nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  				if (CancellationIsPending ())  					return;  				nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  				if (CancellationIsPending ())  					return;  				CheckIfProxyIsWorkingSelectNextIfNotWorking ();  				if (CancellationIsPending ())  					return;  				if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  					questionposted = false;  			}  		}  		#endregion  		confirmed = ConfirmNewAccount ();  		if (confirmed && questionposted) {  			UpdatePostedStatus (3);  			ProduceLongURL ();  			if (CancellationIsPending ())  				return;  			ProduceShortURL ();  			if (CancellationIsPending ())  				return;  			FilterOutTheNextAnswerTemplate ();  			if (CancellationIsPending ())  				return;  			ReplaceURLs ();  			if (CancellationIsPending ())  				return;  			if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  				// if there should be another email with the password  				confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  			}  		}  		if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   		 {  			poster = new iMacrosPostReturnVars ();  			poster = PostTheAnswer ();  			if (CancellationIsPending ())  				return;  			if (poster.getSuccess ()) {  				UpdatePostedStatus (1' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  			else// if not successfully posted (i.e. no TinyURL in the final page result)  			 {  				UpdatePostedStatus (4' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  		}  		else// if account not confirmed' switch to a new account and proxy:  		 {  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		if (CancellationIsPending ())  			return;  		PauseBetweenPosts (pausebfnextpost);  		// only if the Account was created' then pause' otherwise LOOP again  		if (CancellationIsPending ())  			return;  	}  	// end CreateNewAccount  	ResetAllFilters ();  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: while (RunningStatus) {  	progressvalue = 2;  	// EmailKwdStatus(false);  	System.Threading.Thread.Sleep ((1000 * 5 * 1));  	// Sleep 5 seconds (just in case) so that we can manage to Cancel the BW.  	if (CancellationIsPending ())  		return;  	if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5  	 {  		try {  			EmailKwdStatus (true);  		}  		catch {  		}  	}  	if (CancellationIsPending ())  		return;  	SleepIfNighttime ();  	if (CancellationIsPending ())  		return;  	SelectProject (ref proj' ProjectName);  	if (CancellationIsPending ())  		return;  	SaveMacroCodes ();  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  	UpdatePostedStatus (2);  	if (CancellationIsPending ())  		return;  	WaitForKeywordsOrShutTheProcessDown ();  	if (CancellationIsPending ())  		return;  	nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  	if (CancellationIsPending ())  		return;  	nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  	if (CancellationIsPending ())  		return;  	CheckIfProxyIsWorkingSelectNextIfNotWorking ();  	if (CancellationIsPending ())  		return;  	if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  		if (CancellationIsPending ())  			return;  		WaitSomeTime (pausebfconfirm);  		//  wait 2 minutes  		if (CancellationIsPending ())  			return;  		#region AskCom situation where we need to post the question first  		if (property.ContainsKey ("postQnA")) {  			try {  				int pQnA = Convert.ToInt32 (property ["postQnA"]);  				if (pQnA == 1)  					postQnA = true;  			}  			catch {  			}  		}  		if (postQnA) {  			questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  			if (questionposted) {  				/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				SelectProject (ref proj' ProjectName);  				if (CancellationIsPending ())  					return;  				nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  				if (CancellationIsPending ())  					return;  				nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  				if (CancellationIsPending ())  					return;  				CheckIfProxyIsWorkingSelectNextIfNotWorking ();  				if (CancellationIsPending ())  					return;  				if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  					questionposted = false;  			}  		}  		#endregion  		confirmed = ConfirmNewAccount ();  		if (confirmed && questionposted) {  			UpdatePostedStatus (3);  			ProduceLongURL ();  			if (CancellationIsPending ())  				return;  			ProduceShortURL ();  			if (CancellationIsPending ())  				return;  			FilterOutTheNextAnswerTemplate ();  			if (CancellationIsPending ())  				return;  			ReplaceURLs ();  			if (CancellationIsPending ())  				return;  			if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  				// if there should be another email with the password  				confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  			}  		}  		if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   		 {  			poster = new iMacrosPostReturnVars ();  			poster = PostTheAnswer ();  			if (CancellationIsPending ())  				return;  			if (poster.getSuccess ()) {  				UpdatePostedStatus (1' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  			else// if not successfully posted (i.e. no TinyURL in the final page result)  			 {  				UpdatePostedStatus (4' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  		}  		else// if account not confirmed' switch to a new account and proxy:  		 {  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		if (CancellationIsPending ())  			return;  		PauseBetweenPosts (pausebfnextpost);  		// only if the Account was created' then pause' otherwise LOOP again  		if (CancellationIsPending ())  			return;  	}  	// end CreateNewAccount  	ResetAllFilters ();  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: while (RunningStatus) {  	progressvalue = 2;  	// EmailKwdStatus(false);  	System.Threading.Thread.Sleep ((1000 * 5 * 1));  	// Sleep 5 seconds (just in case) so that we can manage to Cancel the BW.  	if (CancellationIsPending ())  		return;  	if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5  	 {  		try {  			EmailKwdStatus (true);  		}  		catch {  		}  	}  	if (CancellationIsPending ())  		return;  	SleepIfNighttime ();  	if (CancellationIsPending ())  		return;  	SelectProject (ref proj' ProjectName);  	if (CancellationIsPending ())  		return;  	SaveMacroCodes ();  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  	UpdatePostedStatus (2);  	if (CancellationIsPending ())  		return;  	WaitForKeywordsOrShutTheProcessDown ();  	if (CancellationIsPending ())  		return;  	nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  	if (CancellationIsPending ())  		return;  	nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  	if (CancellationIsPending ())  		return;  	CheckIfProxyIsWorkingSelectNextIfNotWorking ();  	if (CancellationIsPending ())  		return;  	if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  		if (CancellationIsPending ())  			return;  		WaitSomeTime (pausebfconfirm);  		//  wait 2 minutes  		if (CancellationIsPending ())  			return;  		#region AskCom situation where we need to post the question first  		if (property.ContainsKey ("postQnA")) {  			try {  				int pQnA = Convert.ToInt32 (property ["postQnA"]);  				if (pQnA == 1)  					postQnA = true;  			}  			catch {  			}  		}  		if (postQnA) {  			questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  			if (questionposted) {  				/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				SelectProject (ref proj' ProjectName);  				if (CancellationIsPending ())  					return;  				nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  				if (CancellationIsPending ())  					return;  				nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  				if (CancellationIsPending ())  					return;  				CheckIfProxyIsWorkingSelectNextIfNotWorking ();  				if (CancellationIsPending ())  					return;  				if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  					questionposted = false;  			}  		}  		#endregion  		confirmed = ConfirmNewAccount ();  		if (confirmed && questionposted) {  			UpdatePostedStatus (3);  			ProduceLongURL ();  			if (CancellationIsPending ())  				return;  			ProduceShortURL ();  			if (CancellationIsPending ())  				return;  			FilterOutTheNextAnswerTemplate ();  			if (CancellationIsPending ())  				return;  			ReplaceURLs ();  			if (CancellationIsPending ())  				return;  			if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  				// if there should be another email with the password  				confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  			}  		}  		if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   		 {  			poster = new iMacrosPostReturnVars ();  			poster = PostTheAnswer ();  			if (CancellationIsPending ())  				return;  			if (poster.getSuccess ()) {  				UpdatePostedStatus (1' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  			else// if not successfully posted (i.e. no TinyURL in the final page result)  			 {  				UpdatePostedStatus (4' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  		}  		else// if account not confirmed' switch to a new account and proxy:  		 {  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		if (CancellationIsPending ())  			return;  		PauseBetweenPosts (pausebfnextpost);  		// only if the Account was created' then pause' otherwise LOOP again  		if (CancellationIsPending ())  			return;  	}  	// end CreateNewAccount  	ResetAllFilters ();  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: while (RunningStatus) {  	progressvalue = 2;  	// EmailKwdStatus(false);  	System.Threading.Thread.Sleep ((1000 * 5 * 1));  	// Sleep 5 seconds (just in case) so that we can manage to Cancel the BW.  	if (CancellationIsPending ())  		return;  	if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5  	 {  		try {  			EmailKwdStatus (true);  		}  		catch {  		}  	}  	if (CancellationIsPending ())  		return;  	SleepIfNighttime ();  	if (CancellationIsPending ())  		return;  	SelectProject (ref proj' ProjectName);  	if (CancellationIsPending ())  		return;  	SaveMacroCodes ();  	if (CancellationIsPending ())  		return;  	SelectNextTopic ();  	UpdatePostedStatus (2);  	if (CancellationIsPending ())  		return;  	WaitForKeywordsOrShutTheProcessDown ();  	if (CancellationIsPending ())  		return;  	nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  	if (CancellationIsPending ())  		return;  	nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  	if (CancellationIsPending ())  		return;  	CheckIfProxyIsWorkingSelectNextIfNotWorking ();  	if (CancellationIsPending ())  		return;  	if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  		if (CancellationIsPending ())  			return;  		WaitSomeTime (pausebfconfirm);  		//  wait 2 minutes  		if (CancellationIsPending ())  			return;  		#region AskCom situation where we need to post the question first  		if (property.ContainsKey ("postQnA")) {  			try {  				int pQnA = Convert.ToInt32 (property ["postQnA"]);  				if (pQnA == 1)  					postQnA = true;  			}  			catch {  			}  		}  		if (postQnA) {  			questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  			if (questionposted) {  				/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				SelectProject (ref proj' ProjectName);  				if (CancellationIsPending ())  					return;  				nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  				if (CancellationIsPending ())  					return;  				nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  				if (CancellationIsPending ())  					return;  				CheckIfProxyIsWorkingSelectNextIfNotWorking ();  				if (CancellationIsPending ())  					return;  				if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  					questionposted = false;  			}  		}  		#endregion  		confirmed = ConfirmNewAccount ();  		if (confirmed && questionposted) {  			UpdatePostedStatus (3);  			ProduceLongURL ();  			if (CancellationIsPending ())  				return;  			ProduceShortURL ();  			if (CancellationIsPending ())  				return;  			FilterOutTheNextAnswerTemplate ();  			if (CancellationIsPending ())  				return;  			ReplaceURLs ();  			if (CancellationIsPending ())  				return;  			if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  				// if there should be another email with the password  				confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  			}  		}  		if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   		 {  			poster = new iMacrosPostReturnVars ();  			poster = PostTheAnswer ();  			if (CancellationIsPending ())  				return;  			if (poster.getSuccess ()) {  				UpdatePostedStatus (1' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  			else// if not successfully posted (i.e. no TinyURL in the final page result)  			 {  				UpdatePostedStatus (4' poster.getReturnURL ());  				Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  				temp_dict.Add ("nextemail"' nextemail);  				temp_dict.Add ("nextproxy"' nextproxy);  				temp_dict.Add ("nexttmpl"' nexttmpl);  				temp_dict.Add ("nexttopic"' nexttopic);  				IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  				temp_dict = null;  				if (CancellationIsPending ())  					return;  			}  		}  		else// if account not confirmed' switch to a new account and proxy:  		 {  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		if (CancellationIsPending ())  			return;  		PauseBetweenPosts (pausebfnextpost);  		// only if the Account was created' then pause' otherwise LOOP again  		if (CancellationIsPending ())  			return;  	}  	// end CreateNewAccount  	ResetAllFilters ();  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: progressvalue = 2;  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 5 * 1));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: System.Threading.Thread.Sleep ((1000 * 5 * 1));  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: if (NumberOfKwdsRemaining () == 6)// The threshold is 6 because in the WebApp' the keywords are selected in batches of 5   {  	try {  		EmailKwdStatus (true);  	}  	catch {  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: UpdatePostedStatus (2);  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  	if (CancellationIsPending ())  		return;  	WaitSomeTime (pausebfconfirm);  	//  wait 2 minutes  	if (CancellationIsPending ())  		return;  	#region AskCom situation where we need to post the question first  	if (property.ContainsKey ("postQnA")) {  		try {  			int pQnA = Convert.ToInt32 (property ["postQnA"]);  			if (pQnA == 1)  				postQnA = true;  		}  		catch {  		}  	}  	if (postQnA) {  		questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  		if (questionposted) {  			/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			SelectProject (ref proj' ProjectName);  			if (CancellationIsPending ())  				return;  			nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  			if (CancellationIsPending ())  				return;  			nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  			if (CancellationIsPending ())  				return;  			CheckIfProxyIsWorkingSelectNextIfNotWorking ();  			if (CancellationIsPending ())  				return;  			if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  				questionposted = false;  		}  	}  	#endregion  	confirmed = ConfirmNewAccount ();  	if (confirmed && questionposted) {  		UpdatePostedStatus (3);  		ProduceLongURL ();  		if (CancellationIsPending ())  			return;  		ProduceShortURL ();  		if (CancellationIsPending ())  			return;  		FilterOutTheNextAnswerTemplate ();  		if (CancellationIsPending ())  			return;  		ReplaceURLs ();  		if (CancellationIsPending ())  			return;  		if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  			// if there should be another email with the password  			confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  		}  	}  	if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   	 {  		poster = new iMacrosPostReturnVars ();  		poster = PostTheAnswer ();  		if (CancellationIsPending ())  			return;  		if (poster.getSuccess ()) {  			UpdatePostedStatus (1' poster.getReturnURL ());  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		else// if not successfully posted (i.e. no TinyURL in the final page result)  		 {  			UpdatePostedStatus (4' poster.getReturnURL ());  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  	}  	else// if account not confirmed' switch to a new account and proxy:  	 {  		Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  		temp_dict.Add ("nextemail"' nextemail);  		temp_dict.Add ("nextproxy"' nextproxy);  		temp_dict.Add ("nexttmpl"' nexttmpl);  		temp_dict.Add ("nexttopic"' nexttopic);  		IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  		temp_dict = null;  		if (CancellationIsPending ())  			return;  	}  	if (CancellationIsPending ())  		return;  	PauseBetweenPosts (pausebfnextpost);  	// only if the Account was created' then pause' otherwise LOOP again  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: if (CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode)) {  	if (CancellationIsPending ())  		return;  	WaitSomeTime (pausebfconfirm);  	//  wait 2 minutes  	if (CancellationIsPending ())  		return;  	#region AskCom situation where we need to post the question first  	if (property.ContainsKey ("postQnA")) {  		try {  			int pQnA = Convert.ToInt32 (property ["postQnA"]);  			if (pQnA == 1)  				postQnA = true;  		}  		catch {  		}  	}  	if (postQnA) {  		questionposted = PostTheQuestion (ref tbltopics' tblaccts' passwd' tblproxies.Proxy' proj.ImacrosCodeGeneric);  		if (questionposted) {  			/*                              * increment Projects table (account' proxy)                              * select new account from AccountsTable                              * select new proxy                               */Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			SelectProject (ref proj' ProjectName);  			if (CancellationIsPending ())  				return;  			nextemail = SelectNextEmail (ref tblaccts' proj.LastAccountUsed);  			if (CancellationIsPending ())  				return;  			nextproxy = SelectNextProxy (ref tblproxies' proj.LastProxyUsed);  			if (CancellationIsPending ())  				return;  			CheckIfProxyIsWorkingSelectNextIfNotWorking ();  			if (CancellationIsPending ())  				return;  			if (!CreateNewAccount (tblaccts' tblproxies.Proxy' proj.ImacrosCreateAccCode))  				questionposted = false;  		}  	}  	#endregion  	confirmed = ConfirmNewAccount ();  	if (confirmed && questionposted) {  		UpdatePostedStatus (3);  		ProduceLongURL ();  		if (CancellationIsPending ())  			return;  		ProduceShortURL ();  		if (CancellationIsPending ())  			return;  		FilterOutTheNextAnswerTemplate ();  		if (CancellationIsPending ())  			return;  		ReplaceURLs ();  		if (CancellationIsPending ())  			return;  		if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  			// if there should be another email with the password  			confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  		}  	}  	if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email   	 {  		poster = new iMacrosPostReturnVars ();  		poster = PostTheAnswer ();  		if (CancellationIsPending ())  			return;  		if (poster.getSuccess ()) {  			UpdatePostedStatus (1' poster.getReturnURL ());  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  		else// if not successfully posted (i.e. no TinyURL in the final page result)  		 {  			UpdatePostedStatus (4' poster.getReturnURL ());  			Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  			temp_dict.Add ("nextemail"' nextemail);  			temp_dict.Add ("nextproxy"' nextproxy);  			temp_dict.Add ("nexttmpl"' nexttmpl);  			temp_dict.Add ("nexttopic"' nexttopic);  			IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  			temp_dict = null;  			if (CancellationIsPending ())  				return;  		}  	}  	else// if account not confirmed' switch to a new account and proxy:  	 {  		Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  		temp_dict.Add ("nextemail"' nextemail);  		temp_dict.Add ("nextproxy"' nextproxy);  		temp_dict.Add ("nexttmpl"' nexttmpl);  		temp_dict.Add ("nexttopic"' nexttopic);  		IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  		temp_dict = null;  		if (CancellationIsPending ())  			return;  	}  	if (CancellationIsPending ())  		return;  	PauseBetweenPosts (pausebfnextpost);  	// only if the Account was created' then pause' otherwise LOOP again  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: if (confirmed && questionposted) {  	UpdatePostedStatus (3);  	ProduceLongURL ();  	if (CancellationIsPending ())  		return;  	ProduceShortURL ();  	if (CancellationIsPending ())  		return;  	FilterOutTheNextAnswerTemplate ();  	if (CancellationIsPending ())  		return;  	ReplaceURLs ();  	if (CancellationIsPending ())  		return;  	if (property.ContainsKey ("password") && property.ContainsKey ("shiftby")) {  		// if there should be another email with the password  		confirmed = ConfirmNewAccount (property ["password"]' Convert.ToInt32 (property ["shiftby"]));  	}  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: UpdatePostedStatus (3);  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: if (confirmed && questionposted)// if still confirmed (after (optionally) getting a password from the email    {  	poster = new iMacrosPostReturnVars ();  	poster = PostTheAnswer ();  	if (CancellationIsPending ())  		return;  	if (poster.getSuccess ()) {  		UpdatePostedStatus (1' poster.getReturnURL ());  		Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  		temp_dict.Add ("nextemail"' nextemail);  		temp_dict.Add ("nextproxy"' nextproxy);  		temp_dict.Add ("nexttmpl"' nexttmpl);  		temp_dict.Add ("nexttopic"' nexttopic);  		IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  		temp_dict = null;  		if (CancellationIsPending ())  			return;  	}  	else// if not successfully posted (i.e. no TinyURL in the final page result)  	 {  		UpdatePostedStatus (4' poster.getReturnURL ());  		Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  		temp_dict.Add ("nextemail"' nextemail);  		temp_dict.Add ("nextproxy"' nextproxy);  		temp_dict.Add ("nexttmpl"' nexttmpl);  		temp_dict.Add ("nexttopic"' nexttopic);  		IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  		temp_dict = null;  		if (CancellationIsPending ())  			return;  	}  }  else// if account not confirmed' switch to a new account and proxy:   {  	Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  	temp_dict.Add ("nextemail"' nextemail);  	temp_dict.Add ("nextproxy"' nextproxy);  	temp_dict.Add ("nexttmpl"' nexttmpl);  	temp_dict.Add ("nexttopic"' nexttopic);  	IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  	temp_dict = null;  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: if (poster.getSuccess ()) {  	UpdatePostedStatus (1' poster.getReturnURL ());  	Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  	temp_dict.Add ("nextemail"' nextemail);  	temp_dict.Add ("nextproxy"' nextproxy);  	temp_dict.Add ("nexttmpl"' nexttmpl);  	temp_dict.Add ("nexttopic"' nexttopic);  	IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  	temp_dict = null;  	if (CancellationIsPending ())  		return;  }  else// if not successfully posted (i.e. no TinyURL in the final page result)   {  	UpdatePostedStatus (4' poster.getReturnURL ());  	Dictionary<string' int> temp_dict = new Dictionary<string' int> ();  	temp_dict.Add ("nextemail"' nextemail);  	temp_dict.Add ("nextproxy"' nextproxy);  	temp_dict.Add ("nexttmpl"' nexttmpl);  	temp_dict.Add ("nexttopic"' nexttopic);  	IncrementDBValues (ref proj' temp_dict' iMacrosCreateAccountCode' iMacrosLoginAndPostCode);  	temp_dict = null;  	if (CancellationIsPending ())  		return;  }  
Magic Number,iMacrosPostingDashboard,GenericPoster,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\GenericPoster.cs,RunSimplePoster,The following statement contains a magic number: UpdatePostedStatus (4' poster.getReturnURL ());  
Magic Number,iMacrosPostingDashboard,Httpcalls,C:\repos\ugniusr_iMacrosTest-CSharp\Httpcalls.cs,IsAliveOLD,The following statement contains a magic number: try {  	PingReply reply = ping.Send (proxy' 2000);  	if (reply == null) {  		response = reply.Status.ToString ();  		return false;  	}  	response = reply.Status.ToString ();  	return (reply.Status == IPStatus.Success);  }  catch (PingException e) {  	response = e.InnerException.Message;  	return false;  }  
Magic Number,iMacrosPostingDashboard,TinyURL,C:\repos\ugniusr_iMacrosTest-CSharp\Posters\TinyURL.cs,ImacrosTinyurlConvert,The following statement contains a magic number: s = m_app.iimOpen (""' true' 5);  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountWithCaptcha,The following statement contains a magic number: try {  	ErrAndId [1] = m_app.iimGetExtract (1);  	ErrAndId [0] = m_app.iimGetExtract (2);  }  catch {  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountWithCaptcha,The following statement contains a magic number: ErrAndId [0] = m_app.iimGetExtract (2);  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,PostQuestion,The following statement contains a magic number: s = m_app.iimOpen (""' true' 5);  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted != null && LinkExtracted != "")  	if (LinkExtracted.Length > 3) {  		if (LinkExtracted.Substring (0' 4) == "http") {  			// Static Code for all programs  			string macro = "Version Build = 8032216" + "\r\n";  			macro = macro + "TAB T=1" + "\r\n";  			macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  			macro = macro + "URL GOTO=about:blank" + "\r\n";  			macro = macro + "WAIT SECONDS=3" + "\r\n";  			macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  			macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  			macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  			macro = macro + "WAIT SECONDS=3" + "\r\n";  			iMacros.App m_app = new iMacros.App ();  			iMacros.Status s = new iMacros.Status ();  			s = m_app.iimOpen (""' true' 5);  			s = m_app.iimSet ("ConfLink"' LinkExtracted);  			s = m_app.iimSet ("Email"' email);  			s = m_app.iimSet ("Password"' pwd);  			s = m_app.iimSet ("Proxy"' proxy);  			// Execute macro  			s = m_app.iimPlayCode (macro' m_timeout);  			// Success = m_app.iimGetExtract(1);  			try {  				s = m_app.iimClose (close_timeout);  			}  			catch {  				//   				goto JustContinue;  			}  			JustContinue:  			m_app = null;  			return true;  		}  		else// if the extracted text is not HTTP' but a password:  		 {  			pwd = LinkExtracted;  			return true;  		}  	}  	else// if the extracted text is not HTTP' but a password:  	 {  		pwd = LinkExtracted;  		return true;  	}  else// if linkExtracted = null   {  	return false;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted != null && LinkExtracted != "")  	if (LinkExtracted.Length > 3) {  		if (LinkExtracted.Substring (0' 4) == "http") {  			// Static Code for all programs  			string macro = "Version Build = 8032216" + "\r\n";  			macro = macro + "TAB T=1" + "\r\n";  			macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  			macro = macro + "URL GOTO=about:blank" + "\r\n";  			macro = macro + "WAIT SECONDS=3" + "\r\n";  			macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  			macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  			macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  			macro = macro + "WAIT SECONDS=3" + "\r\n";  			iMacros.App m_app = new iMacros.App ();  			iMacros.Status s = new iMacros.Status ();  			s = m_app.iimOpen (""' true' 5);  			s = m_app.iimSet ("ConfLink"' LinkExtracted);  			s = m_app.iimSet ("Email"' email);  			s = m_app.iimSet ("Password"' pwd);  			s = m_app.iimSet ("Proxy"' proxy);  			// Execute macro  			s = m_app.iimPlayCode (macro' m_timeout);  			// Success = m_app.iimGetExtract(1);  			try {  				s = m_app.iimClose (close_timeout);  			}  			catch {  				//   				goto JustContinue;  			}  			JustContinue:  			m_app = null;  			return true;  		}  		else// if the extracted text is not HTTP' but a password:  		 {  			pwd = LinkExtracted;  			return true;  		}  	}  	else// if the extracted text is not HTTP' but a password:  	 {  		pwd = LinkExtracted;  		return true;  	}  else// if linkExtracted = null   {  	return false;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted != null && LinkExtracted != "")  	if (LinkExtracted.Length > 3) {  		if (LinkExtracted.Substring (0' 4) == "http") {  			// Static Code for all programs  			string macro = "Version Build = 8032216" + "\r\n";  			macro = macro + "TAB T=1" + "\r\n";  			macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  			macro = macro + "URL GOTO=about:blank" + "\r\n";  			macro = macro + "WAIT SECONDS=3" + "\r\n";  			macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  			macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  			macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  			macro = macro + "WAIT SECONDS=3" + "\r\n";  			iMacros.App m_app = new iMacros.App ();  			iMacros.Status s = new iMacros.Status ();  			s = m_app.iimOpen (""' true' 5);  			s = m_app.iimSet ("ConfLink"' LinkExtracted);  			s = m_app.iimSet ("Email"' email);  			s = m_app.iimSet ("Password"' pwd);  			s = m_app.iimSet ("Proxy"' proxy);  			// Execute macro  			s = m_app.iimPlayCode (macro' m_timeout);  			// Success = m_app.iimGetExtract(1);  			try {  				s = m_app.iimClose (close_timeout);  			}  			catch {  				//   				goto JustContinue;  			}  			JustContinue:  			m_app = null;  			return true;  		}  		else// if the extracted text is not HTTP' but a password:  		 {  			pwd = LinkExtracted;  			return true;  		}  	}  	else// if the extracted text is not HTTP' but a password:  	 {  		pwd = LinkExtracted;  		return true;  	}  else// if linkExtracted = null   {  	return false;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted.Length > 3) {  	if (LinkExtracted.Substring (0' 4) == "http") {  		// Static Code for all programs  		string macro = "Version Build = 8032216" + "\r\n";  		macro = macro + "TAB T=1" + "\r\n";  		macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  		macro = macro + "URL GOTO=about:blank" + "\r\n";  		macro = macro + "WAIT SECONDS=3" + "\r\n";  		macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  		macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  		macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  		macro = macro + "WAIT SECONDS=3" + "\r\n";  		iMacros.App m_app = new iMacros.App ();  		iMacros.Status s = new iMacros.Status ();  		s = m_app.iimOpen (""' true' 5);  		s = m_app.iimSet ("ConfLink"' LinkExtracted);  		s = m_app.iimSet ("Email"' email);  		s = m_app.iimSet ("Password"' pwd);  		s = m_app.iimSet ("Proxy"' proxy);  		// Execute macro  		s = m_app.iimPlayCode (macro' m_timeout);  		// Success = m_app.iimGetExtract(1);  		try {  			s = m_app.iimClose (close_timeout);  		}  		catch {  			//   			goto JustContinue;  		}  		JustContinue:  		m_app = null;  		return true;  	}  	else// if the extracted text is not HTTP' but a password:  	 {  		pwd = LinkExtracted;  		return true;  	}  }  else// if the extracted text is not HTTP' but a password:   {  	pwd = LinkExtracted;  	return true;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted.Length > 3) {  	if (LinkExtracted.Substring (0' 4) == "http") {  		// Static Code for all programs  		string macro = "Version Build = 8032216" + "\r\n";  		macro = macro + "TAB T=1" + "\r\n";  		macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  		macro = macro + "URL GOTO=about:blank" + "\r\n";  		macro = macro + "WAIT SECONDS=3" + "\r\n";  		macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  		macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  		macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  		macro = macro + "WAIT SECONDS=3" + "\r\n";  		iMacros.App m_app = new iMacros.App ();  		iMacros.Status s = new iMacros.Status ();  		s = m_app.iimOpen (""' true' 5);  		s = m_app.iimSet ("ConfLink"' LinkExtracted);  		s = m_app.iimSet ("Email"' email);  		s = m_app.iimSet ("Password"' pwd);  		s = m_app.iimSet ("Proxy"' proxy);  		// Execute macro  		s = m_app.iimPlayCode (macro' m_timeout);  		// Success = m_app.iimGetExtract(1);  		try {  			s = m_app.iimClose (close_timeout);  		}  		catch {  			//   			goto JustContinue;  		}  		JustContinue:  		m_app = null;  		return true;  	}  	else// if the extracted text is not HTTP' but a password:  	 {  		pwd = LinkExtracted;  		return true;  	}  }  else// if the extracted text is not HTTP' but a password:   {  	pwd = LinkExtracted;  	return true;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted.Length > 3) {  	if (LinkExtracted.Substring (0' 4) == "http") {  		// Static Code for all programs  		string macro = "Version Build = 8032216" + "\r\n";  		macro = macro + "TAB T=1" + "\r\n";  		macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  		macro = macro + "URL GOTO=about:blank" + "\r\n";  		macro = macro + "WAIT SECONDS=3" + "\r\n";  		macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  		macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  		macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  		macro = macro + "WAIT SECONDS=3" + "\r\n";  		iMacros.App m_app = new iMacros.App ();  		iMacros.Status s = new iMacros.Status ();  		s = m_app.iimOpen (""' true' 5);  		s = m_app.iimSet ("ConfLink"' LinkExtracted);  		s = m_app.iimSet ("Email"' email);  		s = m_app.iimSet ("Password"' pwd);  		s = m_app.iimSet ("Proxy"' proxy);  		// Execute macro  		s = m_app.iimPlayCode (macro' m_timeout);  		// Success = m_app.iimGetExtract(1);  		try {  			s = m_app.iimClose (close_timeout);  		}  		catch {  			//   			goto JustContinue;  		}  		JustContinue:  		m_app = null;  		return true;  	}  	else// if the extracted text is not HTTP' but a password:  	 {  		pwd = LinkExtracted;  		return true;  	}  }  else// if the extracted text is not HTTP' but a password:   {  	pwd = LinkExtracted;  	return true;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted.Substring (0' 4) == "http") {  	// Static Code for all programs  	string macro = "Version Build = 8032216" + "\r\n";  	macro = macro + "TAB T=1" + "\r\n";  	macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  	macro = macro + "URL GOTO=about:blank" + "\r\n";  	macro = macro + "WAIT SECONDS=3" + "\r\n";  	macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  	macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  	macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  	macro = macro + "WAIT SECONDS=3" + "\r\n";  	iMacros.App m_app = new iMacros.App ();  	iMacros.Status s = new iMacros.Status ();  	s = m_app.iimOpen (""' true' 5);  	s = m_app.iimSet ("ConfLink"' LinkExtracted);  	s = m_app.iimSet ("Email"' email);  	s = m_app.iimSet ("Password"' pwd);  	s = m_app.iimSet ("Proxy"' proxy);  	// Execute macro  	s = m_app.iimPlayCode (macro' m_timeout);  	// Success = m_app.iimGetExtract(1);  	try {  		s = m_app.iimClose (close_timeout);  	}  	catch {  		//   		goto JustContinue;  	}  	JustContinue:  	m_app = null;  	return true;  }  else// if the extracted text is not HTTP' but a password:   {  	pwd = LinkExtracted;  	return true;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: if (LinkExtracted.Substring (0' 4) == "http") {  	// Static Code for all programs  	string macro = "Version Build = 8032216" + "\r\n";  	macro = macro + "TAB T=1" + "\r\n";  	macro = macro + "TAB CLOSEALLOTHERS" + "\r\n";  	macro = macro + "URL GOTO=about:blank" + "\r\n";  	macro = macro + "WAIT SECONDS=3" + "\r\n";  	macro = macro + "PROXY ADDRESS={{Proxy}}" + "\r\n";  	macro = macro + "ONLOGIN USER=Jukas PASSWORD=7qUzTq7V" + "\r\n";  	macro = macro + "URL GOTO={{ConfLink}}" + "\r\n";  	macro = macro + "WAIT SECONDS=3" + "\r\n";  	iMacros.App m_app = new iMacros.App ();  	iMacros.Status s = new iMacros.Status ();  	s = m_app.iimOpen (""' true' 5);  	s = m_app.iimSet ("ConfLink"' LinkExtracted);  	s = m_app.iimSet ("Email"' email);  	s = m_app.iimSet ("Password"' pwd);  	s = m_app.iimSet ("Proxy"' proxy);  	// Execute macro  	s = m_app.iimPlayCode (macro' m_timeout);  	// Success = m_app.iimGetExtract(1);  	try {  		s = m_app.iimClose (close_timeout);  	}  	catch {  		//   		goto JustContinue;  	}  	JustContinue:  	m_app = null;  	return true;  }  else// if the extracted text is not HTTP' but a password:   {  	pwd = LinkExtracted;  	return true;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,ConfirmAccount,The following statement contains a magic number: s = m_app.iimOpen (""' true' 5);  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,LoginAndPost,The following statement contains a magic number: s = m_app.iimOpen (""' true' 5);  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,LoginAndPost,The following statement contains a magic number: if (m_app.iimGetExtract (2) != "NODATA")  	localposter.setReturnURL (m_app.iimGetExtract (2));  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,LoginAndPost,The following statement contains a magic number: if (m_app.iimGetExtract (2) != "NODATA")  	localposter.setReturnURL (m_app.iimGetExtract (2));  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,LoginAndPost,The following statement contains a magic number: localposter.setReturnURL (m_app.iimGetExtract (2));  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The following statement contains a magic number: if (email != "") {  	iMacros.App m_app = new iMacros.App ();  	iMacros.Status s = new iMacros.Status ();  	TryAgain:  	try {  		s = m_app.iimOpen (""' true' m_timeout);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "open " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Username"' username);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Email"' email);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Password"' pwd);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("FirstName"' fname);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Proxy"' proxy);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		// Execute macro  		s = m_app.iimPlayCode (CreateMacro' m_timeout);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "play " + Convert.ToString (s) + "; ";  		ConfirmationTxt = m_app.iimGetExtract (1);  	}  	catch {  		MessageBox.Show ("Result: " + result);  		goto TryAgain;  	}  	string[] testsplit = ConfirmationTxt.Split (' ');  	if (ConfirmationTxt != "" && ConfirmationTxt != "NODATA" && ConfirmationTxt != "#EANF#" && testsplit.Count () >= 7) {  		string FinishCreateMacro = "";  		FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  		FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:TEXT FORM=NAME:register ATTR=NAME:humanverify[input] CONTENT={{Solution}}" + "\n";  		FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:CHECKBOX FORM=NAME:register ATTR=NAME:options[adminemail] CONTENT=NO" + "\n";  		FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  		FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:SUBMIT FORM=NAME:register ATTR=CLASS:button" + "\n";  		FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  		s = m_app.iimSet ("Solution"' SolveCaptchaPurseBlog (ConfirmationTxt));  		s = m_app.iimPlayCode (FinishCreateMacro' m_timeout);  		Success = true;  		// TEMPORARY VALUE for DEBUGGING   	}  	else {  		inc++;  		if (inc > 5) {  			Success = false;  			goto CloseApp;  		}  		s = m_app.iimClose ();  		m_app = null;  		goto TryAgain;  	}  	CloseApp:  	try {  		s = m_app.iimClose (close_timeout);  	}  	catch {  		//   		goto JustContinue;  	}  	JustContinue:  	m_app = null;  	// Get variable from macro and return  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The following statement contains a magic number: if (email != "") {  	iMacros.App m_app = new iMacros.App ();  	iMacros.Status s = new iMacros.Status ();  	TryAgain:  	try {  		s = m_app.iimOpen (""' true' m_timeout);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "open " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Username"' username);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Email"' email);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Password"' pwd);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("FirstName"' fname);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		s = m_app.iimSet ("Proxy"' proxy);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "set " + Convert.ToString (s) + "; ";  		// Execute macro  		s = m_app.iimPlayCode (CreateMacro' m_timeout);  		if (s != iMacros.Status.sOk)  			errors++;  		result = result + "play " + Convert.ToString (s) + "; ";  		ConfirmationTxt = m_app.iimGetExtract (1);  	}  	catch {  		MessageBox.Show ("Result: " + result);  		goto TryAgain;  	}  	string[] testsplit = ConfirmationTxt.Split (' ');  	if (ConfirmationTxt != "" && ConfirmationTxt != "NODATA" && ConfirmationTxt != "#EANF#" && testsplit.Count () >= 7) {  		string FinishCreateMacro = "";  		FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  		FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:TEXT FORM=NAME:register ATTR=NAME:humanverify[input] CONTENT={{Solution}}" + "\n";  		FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:CHECKBOX FORM=NAME:register ATTR=NAME:options[adminemail] CONTENT=NO" + "\n";  		FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  		FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:SUBMIT FORM=NAME:register ATTR=CLASS:button" + "\n";  		FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  		s = m_app.iimSet ("Solution"' SolveCaptchaPurseBlog (ConfirmationTxt));  		s = m_app.iimPlayCode (FinishCreateMacro' m_timeout);  		Success = true;  		// TEMPORARY VALUE for DEBUGGING   	}  	else {  		inc++;  		if (inc > 5) {  			Success = false;  			goto CloseApp;  		}  		s = m_app.iimClose ();  		m_app = null;  		goto TryAgain;  	}  	CloseApp:  	try {  		s = m_app.iimClose (close_timeout);  	}  	catch {  		//   		goto JustContinue;  	}  	JustContinue:  	m_app = null;  	// Get variable from macro and return  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The following statement contains a magic number: if (ConfirmationTxt != "" && ConfirmationTxt != "NODATA" && ConfirmationTxt != "#EANF#" && testsplit.Count () >= 7) {  	string FinishCreateMacro = "";  	FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  	FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:TEXT FORM=NAME:register ATTR=NAME:humanverify[input] CONTENT={{Solution}}" + "\n";  	FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:CHECKBOX FORM=NAME:register ATTR=NAME:options[adminemail] CONTENT=NO" + "\n";  	FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  	FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:SUBMIT FORM=NAME:register ATTR=CLASS:button" + "\n";  	FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  	s = m_app.iimSet ("Solution"' SolveCaptchaPurseBlog (ConfirmationTxt));  	s = m_app.iimPlayCode (FinishCreateMacro' m_timeout);  	Success = true;  	// TEMPORARY VALUE for DEBUGGING   }  else {  	inc++;  	if (inc > 5) {  		Success = false;  		goto CloseApp;  	}  	s = m_app.iimClose ();  	m_app = null;  	goto TryAgain;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The following statement contains a magic number: if (ConfirmationTxt != "" && ConfirmationTxt != "NODATA" && ConfirmationTxt != "#EANF#" && testsplit.Count () >= 7) {  	string FinishCreateMacro = "";  	FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  	FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:TEXT FORM=NAME:register ATTR=NAME:humanverify[input] CONTENT={{Solution}}" + "\n";  	FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:CHECKBOX FORM=NAME:register ATTR=NAME:options[adminemail] CONTENT=NO" + "\n";  	FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  	FinishCreateMacro = FinishCreateMacro + "TAG POS=1 TYPE=INPUT:SUBMIT FORM=NAME:register ATTR=CLASS:button" + "\n";  	FinishCreateMacro = FinishCreateMacro + "WAIT SECONDS=3" + "\n";  	s = m_app.iimSet ("Solution"' SolveCaptchaPurseBlog (ConfirmationTxt));  	s = m_app.iimPlayCode (FinishCreateMacro' m_timeout);  	Success = true;  	// TEMPORARY VALUE for DEBUGGING   }  else {  	inc++;  	if (inc > 5) {  		Success = false;  		goto CloseApp;  	}  	s = m_app.iimClose ();  	m_app = null;  	goto TryAgain;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,CreateAccountPurseBlog,The following statement contains a magic number: if (inc > 5) {  	Success = false;  	goto CloseApp;  }  
Magic Number,iMacrosPostingDashboard,StdPosterFunctionsNonStatic,C:\repos\ugniusr_iMacrosTest-CSharp\StdPosterFunctionsNonStatic.cs,SolveCaptchaPurseBlog,The following statement contains a magic number: switch (words [7]) {  case "first":  case "1.": {  	// You can use the parentheses in a case body.  	return "pumps";  }  case "second":  case "2.": {  	// You can use the parentheses in a case body.  	return "sunset";  }  case "third":  case "3.": {  	// You can use the parentheses in a case body.  	return "elevator";  }  case "fourth":  case "4.": {  	// You can use the parentheses in a case body.  	return "stream";  }  default:  	// You can use the default case.  	return "";  }  
