Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Org.CBCrypt,Challenge,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\Challenge.cs,TryValidateChallengeResponse,The length of the statement  "			if (response.ChallengeResponseBytes == null || (response.ChallengeResponseBytes.Length != challengeResponseCheck.Length)) { " is 123.
Long Statement,Org.CBCrypt,Challenge,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\Challenge.cs,TryObsoleteValidateChallengeResponse,The length of the statement  "			if (response.ChallengeResponseBytes == null || (response.ChallengeResponseBytes.Length != challengeResponseCheck.Length)) { " is 123.
Long Statement,Org.CBCrypt,ChallengeResponse,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\ChallengeResponse.cs,GetObsoleteChallengeResponse,The length of the statement  "			response.ChallengeResponseBytes = Challenge.GenerateChallengeResponseBytes(challengeFromServer.ChallengeBytes' obsoleteSharedSecret); " is 133.
Magic Number,Org.CBCrypt,CBCrypt,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCrypt.cs,DoRateLimitingFunction,The following statement contains a magic number: const int dkLength = 32;
Magic Number,Org.CBCrypt,CBCrypt,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCrypt.cs,DoRateLimitingFunction,The following statement contains a magic number: byte[] retVal = CryptSharp.Utility.SCrypt.ComputeDerivedKey  				(  				key: LowCostSecret'         // scrypt will transform this into a high cost secret  				salt: new byte[16]'         // zero salt  				cost: 4096'                 // To scale the cost' scale this parameter.  Scale is approximately linear.  				blockSize: 8'               // this is a recommended default by the scrypt authors  				parallel: 1'                // this is a recommended default by the scrypt authors  				maxThreads: null'  				derivedKeyLength: dkLength  // 32 is surely large enough not to lose any entropy of the user supplied password  				);
Magic Number,Org.CBCrypt,CBCrypt,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCrypt.cs,DoRateLimitingFunction,The following statement contains a magic number: byte[] retVal = CryptSharp.Utility.SCrypt.ComputeDerivedKey  				(  				key: LowCostSecret'         // scrypt will transform this into a high cost secret  				salt: new byte[16]'         // zero salt  				cost: 4096'                 // To scale the cost' scale this parameter.  Scale is approximately linear.  				blockSize: 8'               // this is a recommended default by the scrypt authors  				parallel: 1'                // this is a recommended default by the scrypt authors  				maxThreads: null'  				derivedKeyLength: dkLength  // 32 is surely large enough not to lose any entropy of the user supplied password  				);
Magic Number,Org.CBCrypt,CBCrypt,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCrypt.cs,DoRateLimitingFunction,The following statement contains a magic number: byte[] retVal = CryptSharp.Utility.SCrypt.ComputeDerivedKey  				(  				key: LowCostSecret'         // scrypt will transform this into a high cost secret  				salt: new byte[16]'         // zero salt  				cost: 4096'                 // To scale the cost' scale this parameter.  Scale is approximately linear.  				blockSize: 8'               // this is a recommended default by the scrypt authors  				parallel: 1'                // this is a recommended default by the scrypt authors  				maxThreads: null'  				derivedKeyLength: dkLength  // 32 is surely large enough not to lose any entropy of the user supplied password  				);
Magic Number,Org.CBCrypt,CBCrypt,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCrypt.cs,GetLowCostSecret,The following statement contains a magic number: int hashSizeInBytes = hashFunction.HashSize / 8;
Magic Number,Org.CBCrypt,CBCrypt,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCrypt.cs,GetLowCostSecret,The following statement contains a magic number: const int thisArgc = 3;
Magic Number,Org.CBCrypt,CBCrypt,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCrypt.cs,GenerateKeyPair,The following statement contains a magic number: var keyGenParams = new KeyGenerationParameters(seededPRNG' 256);
Magic Number,Org.CBCrypt,CBCryptKey,C:\research\architectureSmells\repos\rahvee_CBcrypt\CBcrypt\CBcrypt\CBCryptKey.cs,GenerateKeys,The following statement contains a magic number: this.SymmetricKey = new byte[32];
