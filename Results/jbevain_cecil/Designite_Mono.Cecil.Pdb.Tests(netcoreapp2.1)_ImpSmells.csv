Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Main,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider)); " is 142.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,DebuggerHiddenVariable,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider)); " is 142.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The length of the statement  "				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash); " is 123.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider)); " is 142.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The length of the statement  "				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash); " is 126.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider)); " is 142.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,FSharpDocument,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,EmptyEnumerable,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,EmptyRootNamespace,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,VisualBasicNamespace,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalVariables,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportScope,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,StateMachineKickOff,The length of the statement  "				Assert.AreEqual ("System.Threading.Tasks.Task ComplexPdb.Program::TestAsync()"' symbol.StateMachineKickOffMethod.FullName); " is 123.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,StateMachineKickOff,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportsForFirstMethod,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider)); " is 144.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,CreateMethodFromScratch,The length of the statement  "			var type = new TypeDefinition ("Pin"' "Pon"' TypeAttributes.Public | TypeAttributes.Abstract | TypeAttributes.Sealed' module.ImportReference (typeof (object))); " is 160.
Long Statement,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,CreateMethodFromScratch,The length of the statement  "			var method = new MethodDefinition ("Pang"' MethodAttributes.Public | MethodAttributes.Static' module.ImportReference (typeof (string))); " is 136.
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Document,The following statement contains a magic number: TestModule ("test.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\sources\cecil\symbols\Mono.Cecil.Pdb\Test\Resources\assemblies\test.cs"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 228' 176' 152' 54' 82' 238' 238' 68' 237' 156' 5' 142' 118' 160' 118' 245 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.CSharp' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,BasicDocument,The following statement contains a magic number: TestModule ("VBConsApp.exe"' module => {  				var type = module.GetType ("VBConsApp.Program");  				var method = type.GetMethod ("Main");    				var sequence_point = method.DebugInformation.SequencePoints.First (sp => sp != null);  				var document = sequence_point.Document;    				Assert.IsNotNull (document);    				Assert.AreEqual (@"c:\tmp\VBConsApp\Program.vb"' document.Url);  				Assert.AreEqual (DocumentType.Text' document.Type);  				Assert.AreEqual (DocumentHashAlgorithm.MD5' document.HashAlgorithm);  				Assert.AreEqual (new byte [] { 184' 188' 100' 23' 27' 123' 187' 201' 175' 206' 110' 198' 242' 139' 154' 119 }' document.Hash);  				Assert.AreEqual (DocumentLanguage.Basic' document.Language);  				Assert.AreEqual (DocumentLanguageVendor.Microsoft' document.LanguageVendor);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof(PdbReaderProvider)' symbolWriterProvider: typeof(PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalVariables,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalVariables,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalVariables,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalVariables,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,LocalConstants,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportScope,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (6' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo1"' target.Alias);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.DefineNamespaceAlias' target.Kind);  				Assert.AreEqual ("Foo2"' target.Alias);  				Assert.AreEqual ("System.Reflection"' target.Namespace);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportScope,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (6' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo1"' target.Alias);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.DefineNamespaceAlias' target.Kind);  				Assert.AreEqual ("Foo2"' target.Alias);  				Assert.AreEqual ("System.Reflection"' target.Namespace);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportScope,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (6' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo1"' target.Alias);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.DefineNamespaceAlias' target.Kind);  				Assert.AreEqual ("Foo2"' target.Alias);  				Assert.AreEqual ("System.Reflection"' target.Namespace);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportScope,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (6' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo1"' target.Alias);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.DefineNamespaceAlias' target.Kind);  				Assert.AreEqual ("Foo2"' target.Alias);  				Assert.AreEqual ("System.Reflection"' target.Namespace);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportScope,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var type = module.GetType ("ComplexPdb.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (6' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo1"' target.Alias);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.DefineNamespaceAlias' target.Kind);  				Assert.AreEqual ("Foo2"' target.Alias);  				Assert.AreEqual ("System.Reflection"' target.Namespace);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,Iterators,The following statement contains a magic number: TestModule ("ComplexPdb.dll"' module => {  				var state_machine = module.GetType ("ComplexPdb.Program/<TestAsync>d__2");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.DebugInformation.HasCustomDebugInformations);  				Assert.AreEqual (2' move_next.DebugInformation.CustomDebugInformations.Count);    				var state_machine_scope = move_next.DebugInformation.CustomDebugInformations [0] as StateMachineScopeDebugInformation;  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (1' state_machine_scope.Scopes.Count);  				Assert.AreEqual (142' state_machine_scope.Scopes [0].Start.Offset);  				Assert.AreEqual (319' state_machine_scope.Scopes [0].End.Offset);    				var async_body = move_next.DebugInformation.CustomDebugInformations [1] as AsyncMethodBodyDebugInformation;  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (68' async_body.Yields [0].Offset);  				Assert.AreEqual (197' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (98' async_body.Resumes [0].Offset);  				Assert.AreEqual (227' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,ImportsForFirstMethod,The following statement contains a magic number: TestModule ("CecilTest.exe"' module => {  				var type = module.GetType ("CecilTest.Program");  				var method = type.GetMethod ("Main");    				var debug = method.DebugInformation;  				var scope = debug.Scope;    				Assert.IsTrue (scope.End.IsEndOfMethod);    				var import = scope.Import;    				Assert.IsNotNull (import);  				Assert.AreEqual (5' import.Targets.Count);    				var ns = new [] {  					"System"'  					"System.Collections.Generic"'  					"System.Linq"'  					"System.Text"'  					"System.Threading.Tasks"'  				};    				for (int i = 0; i < import.Targets.Count; i++) {  					var target = import.Targets [i];    					Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  					Assert.AreEqual (ns [i]' target.Namespace);  				}    				Assert.AreEqual ("System"' import.Targets [0].Namespace);  			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (PdbReaderProvider)' symbolWriterProvider: typeof (PdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\pdb\Test\Mono.Cecil.Tests\PdbTests.cs,CreateMethodFromScratch,The following statement contains a magic number: var sequence_point = new SequencePoint (body.Instructions [0]' new Document (@"C:\test.cs")) {  				StartLine = 0'  				StartColumn = 0'  				EndLine = 0'  				EndColumn = 4'  			};
