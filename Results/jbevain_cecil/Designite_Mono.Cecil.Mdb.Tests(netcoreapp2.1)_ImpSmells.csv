Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Mono.Cecil.Tests,MdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\mdb\Test\Mono.Cecil.Tests\MdbTests.cs,RoundTripCoreLib,The length of the statement  "			}' verify: !Platform.OnMono' symbolReaderProvider: typeof(MdbReaderProvider)' symbolWriterProvider: typeof(MdbWriterProvider)); " is 127.
Magic Number,Mono.Cecil.Tests,MdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\mdb\Test\Mono.Cecil.Tests\MdbTests.cs,PartialClass,The following statement contains a magic number: TestModule ("BreakpointTest.Portable.dll"' module => {  				var type = module.GetType ("BreakpointTest.Portable.TestService/<MyAsyncAction1>c__async3");  				var method = type.GetMethod ("MoveNext");    				Assert.IsNotNull (method);    				var info = method.DebugInformation;  				Assert.AreEqual (5' info.SequencePoints.Count);  				foreach (var sp in info.SequencePoints)  					Assert.AreEqual(@"C:\tmp\repropartial\BreakpointTest.Portable\TestService.Actions.cs"' sp.Document.Url);    				type = module.GetType("BreakpointTest.Portable.TestService/<MyAsyncAction2>c__async2");  				method = type.GetMethod("MoveNext");    				Assert.IsNotNull(method);    				info = method.DebugInformation;  				Assert.AreEqual(5' info.SequencePoints.Count);  				foreach (var sp in info.SequencePoints)  					Assert.AreEqual(@"C:\tmp\repropartial\BreakpointTest.Portable\TestService.cs"' sp.Document.Url);    			}' symbolReaderProvider: typeof(MdbReaderProvider)' symbolWriterProvider: typeof(MdbWriterProvider));
Magic Number,Mono.Cecil.Tests,MdbTests,D:\research\architectureSmells\repos\jbevain_cecil\symbols\mdb\Test\Mono.Cecil.Tests\MdbTests.cs,PartialClass,The following statement contains a magic number: TestModule ("BreakpointTest.Portable.dll"' module => {  				var type = module.GetType ("BreakpointTest.Portable.TestService/<MyAsyncAction1>c__async3");  				var method = type.GetMethod ("MoveNext");    				Assert.IsNotNull (method);    				var info = method.DebugInformation;  				Assert.AreEqual (5' info.SequencePoints.Count);  				foreach (var sp in info.SequencePoints)  					Assert.AreEqual(@"C:\tmp\repropartial\BreakpointTest.Portable\TestService.Actions.cs"' sp.Document.Url);    				type = module.GetType("BreakpointTest.Portable.TestService/<MyAsyncAction2>c__async2");  				method = type.GetMethod("MoveNext");    				Assert.IsNotNull(method);    				info = method.DebugInformation;  				Assert.AreEqual(5' info.SequencePoints.Count);  				foreach (var sp in info.SequencePoints)  					Assert.AreEqual(@"C:\tmp\repropartial\BreakpointTest.Portable\TestService.cs"' sp.Document.Url);    			}' symbolReaderProvider: typeof(MdbReaderProvider)' symbolWriterProvider: typeof(MdbWriterProvider));
