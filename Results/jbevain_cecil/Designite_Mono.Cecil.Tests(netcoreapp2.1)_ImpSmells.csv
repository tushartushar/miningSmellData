Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,PrettyPrintValue,Cyclomatic complexity of the method is 9
Complex Method,Mono.Cecil.Tests,SecurityDeclarationTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SecurityDeclarationTests.cs,PrettyPrintValue,Cyclomatic complexity of the method is 9
Long Parameter List,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestModule,The method has 9 parameters. Parameters: file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath
Long Parameter List,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestCSharp,The method has 9 parameters. Parameters: file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath
Long Parameter List,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestIL,The method has 9 parameters. Parameters: file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath
Long Parameter List,Mono.Cecil.Tests,TestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestCase,The method has 8 parameters. Parameters: test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath
Long Parameter List,Mono.Cecil.Tests,ModuleTestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,ModuleTestCase,The method has 9 parameters. Parameters: module' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath
Long Parameter List,Mono.Cecil.Tests,CSharpTestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,CSharpTestCase,The method has 9 parameters. Parameters: file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath
Long Parameter List,Mono.Cecil.Tests,ILTestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,ILTestCase,The method has 9 parameters. Parameters: file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath
Long Identifier,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestModule,The length of the parameter applyWindowsRuntimeProjections is 30.
Long Identifier,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestCSharp,The length of the parameter applyWindowsRuntimeProjections is 30.
Long Identifier,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestIL,The length of the parameter applyWindowsRuntimeProjections is 30.
Long Identifier,Mono.Cecil.Tests,TestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestCase,The length of the parameter applyWindowsRuntimeProjections is 30.
Long Identifier,Mono.Cecil.Tests,TestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,,The length of the parameter ApplyWindowsRuntimeProjections is 30.
Long Identifier,Mono.Cecil.Tests,ModuleTestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,ModuleTestCase,The length of the parameter applyWindowsRuntimeProjections is 30.
Long Identifier,Mono.Cecil.Tests,CSharpTestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,CSharpTestCase,The length of the parameter applyWindowsRuntimeProjections is 30.
Long Identifier,Mono.Cecil.Tests,ILTestCase,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,ILTestCase,The length of the parameter applyWindowsRuntimeProjections is 30.
Long Statement,Mono.Cecil.Tests,AssemblyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\AssemblyTests.cs,MismatchedLibraryAndSymbols,The length of the statement  "			// SQLite-net.dll (from nuget) shiped with mismatched symbol files' but throwIfNoSymbol did not prevent it from throwing " is 120.
Long Statement,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestModule,The length of the statement  "			Run (new ModuleTestCase (file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath)); " is 166.
Long Statement,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestCSharp,The length of the statement  "			Run (new CSharpTestCase (file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath)); " is 166.
Long Statement,Mono.Cecil.Tests,BaseTestFixture,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\BaseTestFixture.cs,TestIL,The length of the statement  "			Run (new ILTestCase (file' test' verify' readOnly' symbolReaderProvider' symbolWriterProvider' assemblyResolver' applyWindowsRuntimeProjections' sourceFilePath)); " is 162.
Long Statement,Mono.Cecil.Tests,ShellService,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CompilationService.cs,NetFrameworkTool,The length of the statement  "			return Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Windows)' "Microsoft.NET"' "Framework"' "v4.0.30319"' tool + ".exe"); " is 143.
Long Statement,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,BoxedArraysArguments,The length of the statement  "				AssertCustomAttribute (".ctor ((Object:(Object[]:{(Object:(String:\"2\"))' (Object:(I4:2))' (Object:(Char:'c'))}))' (Object:(Object[]:{(Object:(Object[]:{(Object:(I4:1))' (Object:(I4:2))' (Object:(I4:3))}))' (Object:(String:null))})))"' attribute); " is 248.
Long Statement,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,FieldsAndProperties,The length of the statement  "				AssertCustomAttributeArgument ("(Object:(Object[]:{(Object:(I4:1))' (Object:(String:\"2\"))' (Object:(Char:'3'))}))"' argument); " is 128.
Long Statement,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,BoxedEnumReference,The length of the statement  "				// [Foo (new object [] { Bingo.Fuel' Bingo.Binga }' null' Pan = System.Security.AccessControl.AceFlags.NoPropagateInherit)] " is 123.
Long Statement,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,ClosedGenericTypeOf,The length of the statement  "				Assert.AreEqual ("System.Collections.Generic.Dictionary`2<System.String'OpenGeneric`2<Machin'System.Int32>[']>"' type.FullName); " is 128.
Long Statement,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,DefineCustomAttributeFromBlob,The length of the statement  "			var module = ModuleDefinition.CreateModule ("CaBlob.dll"' new ModuleParameters { Kind = ModuleKind.Dll' Runtime = TargetRuntime.Net_2_0 }); " is 139.
Long Statement,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,DefineCustomAttributeFromBlob,The length of the statement  "			var assembly_title_ctor = module.ImportReference (typeof (System.Reflection.AssemblyTitleAttribute).GetConstructor (new [] {typeof (string)})); " is 143.
Long Statement,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,EmbeddedPdbDeterministicAssembly,The length of the statement  "			}' symbolReaderProvider: typeof (EmbeddedPortablePdbReaderProvider)' symbolWriterProvider: typeof (EmbeddedPortablePdbWriterProvider)); " is 135.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportStringByRef,The length of the statement  "				method_by_ref.Parameters.Add (new ParameterDefinition (module.ImportReference (new ByReferenceType (typeof (string).ToDefinition ())))); " is 136.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportStringConcat,The length of the statement  "				il.Emit (OpCodes.Call' module.ImportReference (typeof (string).GetMethod ("Concat"' new [] { typeof (string)' typeof (string) }).ToDefinition ())); " is 147.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ContextGenericTest,The length of the statement  "			// by mixing open generics with 2 & 1 parameters' we make sure the right context is used (because otherwise' an exception will be thrown) " is 137.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ContextGenericTest,The length of the statement  "			Assert.AreEqual ("G1 Mono.Cecil.Tests.ImportCecilTests/ContextGeneric1Method2`1<Mono.Cecil.Tests.ImportCecilTests/ContextGeneric2Method1`2<G2'H2>>::GenericMethod<R1'S1>(R1'S1)"' method.FullName); " is 195.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ContextGenericTest,The length of the statement  "			Assert.AreEqual ("R2 Mono.Cecil.Tests.ImportCecilTests/ContextGeneric2Method1`2<Mono.Cecil.Tests.ImportCecilTests/ContextGeneric1Method2`1<G1>'System.Collections.Generic.IList`1<T>>::GenericMethod<R2>(G2'H2)"' method.FullName); " is 227.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ContextGenericTest,The length of the statement  "			Assert.AreEqual ("A Mono.Cecil.Tests.ImportCecilTests/NestedGenericsA`1/NestedGenericsB`1/NestedGenericsC`1<System.String'System.Int32'System.Single>::GenericMethod(B'C)"' method.FullName); " is 189.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ContextGenericTest,The length of the statement  "			Assert.AreEqual ("Mono.Cecil.Tests.ImportCecilTests/Generic`1<TS> Mono.Cecil.Tests.ImportCecilTests/Generic`1<System.String>::ComplexGenericMethod<TS>(T'TS)"' method.FullName); " is 176.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,LoadTestModule,The length of the statement  "				File.WriteAllBytes (Path.Combine (Path.Combine (Path.GetTempPath ()' "cecil")' module.Name + ".dll")' stream.ToArray ()); " is 121.
Long Statement,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,CreateModule,The length of the statement  "			return ModuleDefinition.CreateModule (name' new ModuleParameters { Kind = ModuleKind.Dll' AssemblyResolver = resolver }); " is 121.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportStringConcat,The length of the statement  "				il.Emit (OpCodes.Call' module.ImportReference (typeof (string).GetMethod ("Concat"' new [] { typeof (string)' typeof (string) }))); " is 131.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethodSpec,The length of the statement  "				il.Emit (OpCodes.Callvirt' module.ImportReference (typeof (Generic<string>).GetMethod ("GenericMethod").MakeGenericMethod (typeof (int)))); " is 139.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportComplexGenericMethodSpec,The length of the statement  "				il.Emit (OpCodes.Callvirt' module.ImportReference (typeof (Generic<string>).GetMethod ("ComplexGenericMethod").MakeGenericMethod (typeof (int)))); " is 146.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericTypeDefFromContext,The length of the statement  "				Assert.AreEqual ("Mono.Cecil.Tests.ImportReflectionTests/Generic`1<Mono.Cecil.Tests.ImportReflectionTests/Foo`1<TFoo>>"' " is 120.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethodFromContext,The length of the statement  "				Assert.AreEqual ("T Mono.Cecil.Tests.ImportReflectionTests/Generic`1<System.Collections.Generic.List`1<TFoo>>::Method(T)"' " is 122.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethodOnOpenGenericType,The length of the statement  "				Assert.AreEqual ("TS Mono.Cecil.Tests.ImportReflectionTests/Generic`1<T>::GenericMethod(T'TS)"' generic_method.FullName); " is 121.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethodOnOpenGenericType,The length of the statement  "				Assert.AreEqual ("TS Mono.Cecil.Tests.ImportReflectionTests/Generic`1<T>::GenericMethod<TS>(T'TS)"' generic_method.FullName); " is 125.
Long Statement,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,LoadTestModule,The length of the statement  "				File.WriteAllBytes (Path.Combine (Path.Combine (Path.GetTempPath ()' "cecil")' module.Name + ".dll")' stream.ToArray ()); " is 121.
Long Statement,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,HasTypeReference,The length of the statement  "				Assert.IsTrue (module.HasTypeReference (Platform.OnCoreClr ? "System.Private.CoreLib" : "mscorlib"' "System.Attribute")); " is 121.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineKickOff,The length of the statement  "				Assert.AreEqual ("System.Threading.Tasks.Task PdbTarget.Program::Baz(System.IO.StreamReader)"' symbol.StateMachineKickOffMethod.FullName); " is 138.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The length of the statement  "				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault (); " is 123.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,EmbeddedCompressedPortablePdb,The length of the statement  "			}' symbolReaderProvider: typeof (EmbeddedPortablePdbReaderProvider)' symbolWriterProvider: typeof (EmbeddedPortablePdbWriterProvider)); " is 135.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,TestPortablePdbModule,The length of the statement  "			TestModule ("PdbTarget.exe"' test' symbolReaderProvider: typeof (PortablePdbReaderProvider)' symbolWriterProvider: typeof (PortablePdbWriterProvider)); " is 151.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,TestPortablePdbModule,The length of the statement  "			TestModule ("EmbeddedCompressedPdbTarget.exe"' test' symbolReaderProvider: typeof(EmbeddedPortablePdbReaderProvider)' symbolWriterProvider: typeof(EmbeddedPortablePdbWriterProvider)); " is 183.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,RoundTripLargePortablePdb,The length of the statement  "			}' verify: false' symbolReaderProvider: typeof (PortablePdbReaderProvider)' symbolWriterProvider: typeof (PortablePdbWriterProvider)); " is 134.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,InvalidConstantRecord,The length of the statement  "			using (var module = GetResourceModule ("mylib.dll"' new ReaderParameters { SymbolReaderProvider = new PortablePdbReaderProvider () })) { " is 136.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,SourceLink,The length of the statement  "				Assert.AreEqual ("{\"documents\":{\"C:\\\\tmp\\\\SourceLinkProblem\\\\*\":\"https://raw.githubusercontent.com/bording/SourceLinkProblem/197d965ee7f1e7f8bd3cea55b5f904aeeb8cd51e/*\"}}"' source_link.Content); " is 206.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,UseCustomSymbolWriterToChangeDebugHeaderPdbPath,The length of the statement  "			using (var module = GetResourceModule (resource' new ReaderParameters { SymbolReaderProvider = new PortablePdbReaderProvider () })) { " is 133.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,UseCustomSymbolWriterToChangeDebugHeaderPdbPath,The length of the statement  "			using (var module = ModuleDefinition.ReadModule (dest' new ReaderParameters { SymbolReaderProvider = new PortablePdbReaderProvider () })) { " is 139.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,WriteAndReadAgainModuleWithDeterministicMvid,The length of the statement  "			using (var module = GetResourceModule (resource' new ReaderParameters { SymbolReaderProvider = new PortablePdbReaderProvider () })) { " is 133.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,WriteAndReadAgainModuleWithDeterministicMvid,The length of the statement  "				module.Write (destination' new WriterParameters { DeterministicMvid = true' SymbolWriterProvider = new SymbolWriterProvider () }); " is 130.
Long Statement,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,WriteAndReadAgainModuleWithDeterministicMvid,The length of the statement  "			using (var module = ModuleDefinition.ReadModule (destination' new ReaderParameters { SymbolReaderProvider = new PortablePdbReaderProvider () })) { " is 146.
Long Statement,Mono.Cecil.Tests,ResolveTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ResolveTests.cs,DictionaryOfStringTypeDefinitionTryGetValue,The length of the statement  "			Assert.AreEqual ("System.Boolean System.Collections.Generic.Dictionary`2<System.String'Mono.Cecil.TypeDefinition>::TryGetValue(!0'!1&)"' " is 136.
Long Statement,Mono.Cecil.Tests,ResolveTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ResolveTests.cs,DictionaryOfStringTypeDefinitionTryGetValue,The length of the statement  "			Assert.AreEqual ("System.Boolean System.Collections.Generic.Dictionary`2::TryGetValue(TKey'TValue&)"' definition.FullName); " is 123.
Long Statement,Mono.Cecil.Tests,ResolveTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ResolveTests.cs,ExportedTypeFromModule,The length of the statement  "				var reference = new TypeReference ("Module.A"' "Foo"' current_module' AssemblyNameReference.Parse (mma.Assembly.FullName)' false); " is 130.
Long Statement,Mono.Cecil.Tests,ResolveTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ResolveTests.cs,TypeForwarder,The length of the statement  "			var reference = new TypeReference ("System.Diagnostics"' "DebuggableAttribute"' current_module' AssemblyNameReference.Parse (types.Assembly.FullName)' false); " is 158.
Long Statement,Mono.Cecil.Tests,ResolveTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ResolveTests.cs,NestedTypeForwarder,The length of the statement  "			reference.DeclaringType = new TypeReference ("System.Diagnostics"' "DebuggableAttribute"' current_module' AssemblyNameReference.Parse (types.Assembly.FullName)' false); " is 168.
Long Statement,Mono.Cecil.Tests,SecurityDeclarationTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SecurityDeclarationTests.cs,DefineSecurityDeclarationByBlob,The length of the statement  "			var module = ModuleDefinition.CreateModule ("SecDecBlob.dll"' new ModuleParameters { Kind = ModuleKind.Dll' Runtime = TargetRuntime.Net_2_0 }); " is 143.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,DefaultPdb,The length of the statement  "			}' readOnly: !Platform.HasNativePdbSupport' symbolReaderProvider: typeof (DefaultSymbolReaderProvider)' symbolWriterProvider: typeof (DefaultSymbolWriterProvider)); " is 164.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,DefaultMdb,The length of the statement  "			}' symbolReaderProvider: typeof (DefaultSymbolReaderProvider)' symbolWriterProvider: typeof (DefaultSymbolWriterProvider)); " is 123.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,DefaultPortablePdb,The length of the statement  "			}' symbolReaderProvider: typeof (DefaultSymbolReaderProvider)' symbolWriterProvider: typeof (DefaultSymbolWriterProvider)); " is 123.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,DefaultEmbeddedPortablePdb,The length of the statement  "			}' symbolReaderProvider: typeof (DefaultSymbolReaderProvider)' symbolWriterProvider: typeof (DefaultSymbolWriterProvider)' verify: !Platform.OnMono); " is 149.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,MdbMismatch,The length of the statement  "			Assert.Throws<SymbolsNotMatchingException> (() => GetResourceModule ("mdb-mismatch.dll"' new ReaderParameters { SymbolReaderProvider = new MdbReaderProvider () })); " is 164.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,MdbIgnoreMismatch,The length of the statement  "			using (var module = GetResourceModule ("mdb-mismatch.dll"' new ReaderParameters { SymbolReaderProvider = new MdbReaderProvider ()' ThrowIfSymbolsAreNotMatching = false })) { " is 173.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,PortablePdbMismatch,The length of the statement  "			Assert.Throws<SymbolsNotMatchingException> (() => GetResourceModule ("pdb-mismatch.dll"' new ReaderParameters { SymbolReaderProvider = new PortablePdbReaderProvider () })); " is 172.
Long Statement,Mono.Cecil.Tests,SymbolTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\SymbolTests.cs,PortablePdbIgnoreMismatch,The length of the statement  "			using (var module = GetResourceModule ("pdb-mismatch.dll"' new ReaderParameters { SymbolReaderProvider = new PortablePdbReaderProvider ()' ThrowIfSymbolsAreNotMatching = false })) { " is 181.
Long Statement,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,TripleNestedTypeWithScope,The length of the statement  "			Assert.AreEqual ("Bingo.Foo`1+Bar`1+Baz`1' Bingo' Version=0.0.0.0' Culture=neutral' PublicKeyToken=null"' TypeParser.ToParseable (type)); " is 137.
Long Statement,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,Vector,The length of the statement  "			Assert.AreEqual ("Bingo.Gazonk[]' Bingo' Version=0.0.0.0' Culture=neutral' PublicKeyToken=null"' TypeParser.ToParseable (type)); " is 128.
Long Statement,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceMixedArguments,The length of the statement  "			var fullname = string.Format ("System.Collections.Generic.Dictionary`2[Mono.Cecil.Tests.TypeParserTests'[System.String' {0}]]"' " is 127.
Long Statement,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceTwoNonFqArguments,The length of the statement  "			var fullname = string.Format ("System.Collections.Generic.Dictionary`2[Mono.Cecil.Tests.TypeParserTests+Bar'Mono.Cecil.Tests.TypeParserTests+Bar]' {0}"' typeof (object).Assembly.FullName); " is 188.
Long Statement,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,ComplexGenericInstanceMixedArguments,The length of the statement  "			var fullname = string.Format ("System.Collections.Generic.Dictionary`2[[System.String' {0}]'Mono.Cecil.Tests.TypeParserTests+Foo`2[Mono.Cecil.Tests.TypeParserTests'[System.Int32' {0}]]]"' " is 187.
Long Statement,Mono.Cecil.Tests,TypeTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeTests.cs,DeferredCorlibTypeDef,The length of the statement  "			using (var module = ModuleDefinition.ReadModule (typeof (object).Assembly.Location' new ReaderParameters (ReadingMode.Deferred))) { " is 131.
Long Statement,Mono.Cecil.Tests,BaseWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanReadMetadataType,The length of the statement  "			}' verify: false' assemblyResolver: WindowsRuntimeAssemblyResolver.CreateInstance ()' applyWindowsRuntimeProjections: true); " is 124.
Long Statement,Mono.Cecil.Tests,BaseWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectParametersAndReturnTypes,The length of the statement  "			}' verify: false' assemblyResolver: WindowsRuntimeAssemblyResolver.CreateInstance ()' applyWindowsRuntimeProjections: true); " is 124.
Long Statement,Mono.Cecil.Tests,BaseWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectInterfaces,The length of the statement  "					Assert.IsNotNull (type.Interfaces.SingleOrDefault (i => i.InterfaceType.FullName == "System.Collections.Generic.IList`1<System.Int32>")); " is 137.
Long Statement,Mono.Cecil.Tests,BaseWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectInterfaces,The length of the statement  "					Assert.IsNotNull (type.Interfaces.SingleOrDefault (i => i.InterfaceType.FullName == "System.Collections.Generic.IEnumerable`1<System.Int32>")); " is 143.
Long Statement,Mono.Cecil.Tests,BaseWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectInterfaces,The length of the statement  "			}' verify: false' assemblyResolver: WindowsRuntimeAssemblyResolver.CreateInstance ()' applyWindowsRuntimeProjections: true); " is 124.
Long Statement,Mono.Cecil.Tests,ManagedWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectClasses,The length of the statement  "				Assert.AreEqual (TypeDefinitionTreatment.UnmangleWindowsRuntimeName' managedClassType.WindowsRuntimeProjection.Treatment); " is 122.
Long Statement,Mono.Cecil.Tests,ManagedWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectClasses,The length of the statement  "				Assert.AreEqual (TypeDefinitionTreatment.UnmangleWindowsRuntimeName' someOtherClassType.WindowsRuntimeProjection.Treatment); " is 124.
Long Statement,Mono.Cecil.Tests,ManagedWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectClasses,The length of the statement  "				Assert.AreEqual (TypeDefinitionTreatment.PrefixWindowsRuntimeName' winrtManagedClassType.WindowsRuntimeProjection.Treatment); " is 125.
Long Statement,Mono.Cecil.Tests,ManagedWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectClasses,The length of the statement  "				Assert.AreEqual (TypeDefinitionTreatment.PrefixWindowsRuntimeName' winrtSomeOtherClassType.WindowsRuntimeProjection.Treatment); " is 127.
Long Statement,Mono.Cecil.Tests,ManagedWindowsRuntimeProjectionsTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\WindowsRuntimeProjectionsTests.cs,CanProjectClasses,The length of the statement  "			}' verify: false' assemblyResolver: WindowsRuntimeAssemblyResolver.CreateInstance ()' applyWindowsRuntimeProjections: true); " is 124.
Magic Number,Mono.Cecil.Tests,AssemblyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\AssemblyTests.cs,ParseLowerCaseNameParts,The following statement contains a magic number: Assert.AreEqual (2' name.Version.Major);
Magic Number,Mono.Cecil.Tests,AssemblyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\AssemblyTests.cs,ZeroVersion,The following statement contains a magic number: Assert.AreEqual ("0.0.0.0"' name.Version.ToString (fieldCount: 4));
Magic Number,Mono.Cecil.Tests,AssemblyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\AssemblyTests.cs,ZeroVersion,The following statement contains a magic number: Assert.AreEqual ("0.0.0.0"' name.Version.ToString (fieldCount: 4));
Magic Number,Mono.Cecil.Tests,ShellService,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CompilationService.cs,WinSdkTool,The following statement contains a magic number: var pgf = IntPtr.Size == 8  					? Environment.GetEnvironmentVariable("ProgramFiles(x86)")  					: Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives1,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var steven = module.GetType ("Steven");    				var attribute = GetAttribute (steven' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<sbyte> (-12' attribute.ConstructorArguments [0]);  				AssertArgument<byte> (242' attribute.ConstructorArguments [1]);  				AssertArgument<bool> (true' attribute.ConstructorArguments [2]);  				AssertArgument<bool> (false' attribute.ConstructorArguments [3]);  				AssertArgument<ushort> (4242' attribute.ConstructorArguments [4]);  				AssertArgument<short> (-1983' attribute.ConstructorArguments [5]);  				AssertArgument<char> ('c'' attribute.ConstructorArguments [6]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,Primitives2,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var seagull = module.GetType ("Seagull");    				var attribute = GetAttribute (seagull' "Foo");  				Assert.IsNotNull (attribute);    				AssertArgument<int> (-100000' attribute.ConstructorArguments [0]);  				AssertArgument<uint> (200000' attribute.ConstructorArguments [1]);  				AssertArgument<float> (12.12f' attribute.ConstructorArguments [2]);  				AssertArgument<long> (long.MaxValue' attribute.ConstructorArguments [3]);  				AssertArgument<ulong> (ulong.MaxValue' attribute.ConstructorArguments [4]);  				AssertArgument<double> (64.646464' attribute.ConstructorArguments [5]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,FieldsAndProperties,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var angola = module.GetType ("Angola");    				var attribute = GetAttribute (angola' "Foo");  				Assert.IsNotNull (attribute);    				Assert.AreEqual (2' attribute.Fields.Count);    				var argument = attribute.Fields.Where (a => a.Name == "Pan").First ();  				AssertCustomAttributeArgument ("(Object:(Object[]:{(Object:(I4:1))' (Object:(String:\"2\"))' (Object:(Char:'3'))}))"' argument);    				argument = attribute.Fields.Where (a => a.Name == "PanPan").First ();  				AssertCustomAttributeArgument ("(String[]:{(String:\"yo\")' (String:\"yo\")})"' argument);    				Assert.AreEqual (2' attribute.Properties.Count);    				argument = attribute.Properties.Where (a => a.Name == "Bang").First ();  				AssertArgument (42' argument);    				argument = attribute.Properties.Where (a => a.Name == "Fiou").First ();  				AssertArgument<string> (null' argument);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,FieldsAndProperties,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var angola = module.GetType ("Angola");    				var attribute = GetAttribute (angola' "Foo");  				Assert.IsNotNull (attribute);    				Assert.AreEqual (2' attribute.Fields.Count);    				var argument = attribute.Fields.Where (a => a.Name == "Pan").First ();  				AssertCustomAttributeArgument ("(Object:(Object[]:{(Object:(I4:1))' (Object:(String:\"2\"))' (Object:(Char:'3'))}))"' argument);    				argument = attribute.Fields.Where (a => a.Name == "PanPan").First ();  				AssertCustomAttributeArgument ("(String[]:{(String:\"yo\")' (String:\"yo\")})"' argument);    				Assert.AreEqual (2' attribute.Properties.Count);    				argument = attribute.Properties.Where (a => a.Name == "Bang").First ();  				AssertArgument (42' argument);    				argument = attribute.Properties.Where (a => a.Name == "Fiou").First ();  				AssertArgument<string> (null' argument);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,FieldsAndProperties,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var angola = module.GetType ("Angola");    				var attribute = GetAttribute (angola' "Foo");  				Assert.IsNotNull (attribute);    				Assert.AreEqual (2' attribute.Fields.Count);    				var argument = attribute.Fields.Where (a => a.Name == "Pan").First ();  				AssertCustomAttributeArgument ("(Object:(Object[]:{(Object:(I4:1))' (Object:(String:\"2\"))' (Object:(Char:'3'))}))"' argument);    				argument = attribute.Fields.Where (a => a.Name == "PanPan").First ();  				AssertCustomAttributeArgument ("(String[]:{(String:\"yo\")' (String:\"yo\")})"' argument);    				Assert.AreEqual (2' attribute.Properties.Count);    				argument = attribute.Properties.Where (a => a.Name == "Bang").First ();  				AssertArgument (42' argument);    				argument = attribute.Properties.Where (a => a.Name == "Fiou").First ();  				AssertArgument<string> (null' argument);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,TypeDefinitionEnum,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var zero = module.GetType ("Zero");    				var attribute = GetAttribute (zero' "Foo");  				Assert.IsNotNull (attribute);    				Assert.AreEqual (1' attribute.ConstructorArguments.Count);    				Assert.AreEqual ((short) 2' attribute.ConstructorArguments [0].Value);  				Assert.AreEqual ("Bingo"' attribute.ConstructorArguments [0].Type.FullName);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,BoxedEnumReference,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var bzzz = module.GetType ("Bzzz");    				var attribute = GetAttribute (bzzz' "Foo");  				Assert.IsNotNull (attribute);    				// [Foo (new object [] { Bingo.Fuel' Bingo.Binga }' null' Pan = System.Security.AccessControl.AceFlags.NoPropagateInherit)]    				Assert.AreEqual (2' attribute.ConstructorArguments.Count);    				var argument = attribute.ConstructorArguments [0];    				AssertCustomAttributeArgument ("(Object:(Object[]:{(Object:(Bingo:2))' (Object:(Bingo:4))}))"' argument);    				argument = attribute.ConstructorArguments [1];    				AssertCustomAttributeArgument ("(Object:(String:null))"' argument);    				argument = attribute.Fields.Where (a => a.Name == "Pan").First ().Argument;    				AssertCustomAttributeArgument ("(Object:(System.Security.AccessControl.AceFlags:4))"' argument);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,NullCharInString,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var type = module.GetType ("NullCharInString");  				var attributes = type.CustomAttributes;  				Assert.AreEqual (1' attributes.Count);  				var attribute = attributes [0];  				Assert.AreEqual (1' attribute.ConstructorArguments.Count);  				var value = (string) attribute.ConstructorArguments [0].Value;  				Assert.AreEqual (8' value.Length);  				Assert.AreEqual ('\0'' value [7]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,NullCharInString,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				var type = module.GetType ("NullCharInString");  				var attributes = type.CustomAttributes;  				Assert.AreEqual (1' attributes.Count);  				var attribute = attributes [0];  				Assert.AreEqual (1' attribute.ConstructorArguments.Count);  				var value = (string) attribute.ConstructorArguments [0].Value;  				Assert.AreEqual (8' value.Length);  				Assert.AreEqual ('\0'' value [7]);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,CustomAttributesTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\CustomAttributesTests.cs,OrderedAttributes,The following statement contains a magic number: TestModule ("ordered-attrs.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Main");  				var attributes = method.CustomAttributes;  				Assert.AreEqual (6' attributes.Count);    				Assert.AreEqual ("AAttribute"' attributes [0].AttributeType.Name);  				Assert.AreEqual ("Main.A1"' attributes [0].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [1].AttributeType.Name);  				Assert.AreEqual ("Main.A2"' attributes [1].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [2].AttributeType.Name);  				Assert.AreEqual ("Main.B1"' attributes [2].Fields [0].Argument.Value as string);    				Assert.AreEqual ("AAttribute"' attributes [3].AttributeType.Name);  				Assert.AreEqual ("Main.A3"' attributes [3].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [4].AttributeType.Name);  				Assert.AreEqual ("Main.B2"' attributes [4].Fields [0].Argument.Value as string);    				Assert.AreEqual ("BAttribute"' attributes [5].AttributeType.Name);  				Assert.AreEqual ("Main.B3"' attributes [5].Fields [0].Argument.Value as string);  			});
Magic Number,Mono.Cecil.Tests,EventTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\EventTests.cs,OtherMethod,The following statement contains a magic number: TestIL ("others.il"' module => {  				var type = module.GetType ("Others");    				Assert.IsTrue (type.HasEvents);    				var events = type.Events;    				Assert.AreEqual (1' events.Count);    				var @event = events [0];    				Assert.IsNotNull (@event);  				Assert.AreEqual ("Handler"' @event.Name);  				Assert.IsNotNull (@event.EventType);  				Assert.AreEqual ("System.EventHandler"' @event.EventType.FullName);    				Assert.IsTrue (@event.HasOtherMethods);    				Assert.AreEqual (2' @event.OtherMethods.Count);    				var other = @event.OtherMethods [0];  				Assert.AreEqual ("dang_Handler"' other.Name);    				other = @event.OtherMethods [1];  				Assert.AreEqual ("fang_Handler"' other.Name);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,FieldLayout,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var foo = module.GetType ("Foo");  				Assert.IsNotNull (foo);    				Assert.IsTrue (foo.HasFields);    				var fields = foo.Fields;    				var field = fields [0];    				Assert.AreEqual ("Bar"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (0' field.Offset);    				field = fields [1];    				Assert.AreEqual ("Baz"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (2' field.Offset);    				field = fields [2];    				Assert.AreEqual ("Gazonk"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (4' field.Offset);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,FieldLayout,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var foo = module.GetType ("Foo");  				Assert.IsNotNull (foo);    				Assert.IsTrue (foo.HasFields);    				var fields = foo.Fields;    				var field = fields [0];    				Assert.AreEqual ("Bar"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (0' field.Offset);    				field = fields [1];    				Assert.AreEqual ("Baz"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (2' field.Offset);    				field = fields [2];    				Assert.AreEqual ("Gazonk"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (4' field.Offset);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,FieldLayout,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var foo = module.GetType ("Foo");  				Assert.IsNotNull (foo);    				Assert.IsTrue (foo.HasFields);    				var fields = foo.Fields;    				var field = fields [0];    				Assert.AreEqual ("Bar"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (0' field.Offset);    				field = fields [1];    				Assert.AreEqual ("Baz"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (2' field.Offset);    				field = fields [2];    				Assert.AreEqual ("Gazonk"' field.Name);  				Assert.IsTrue (field.HasLayoutInfo);  				Assert.AreEqual (4' field.Offset);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,FieldRVA,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var priv_impl = GetPrivateImplementationType (module);  				Assert.IsNotNull (priv_impl);    				Assert.AreEqual (1' priv_impl.Fields.Count);    				var field = priv_impl.Fields [0];    				Assert.IsNotNull (field);  				Assert.AreNotEqual (0' field.RVA);  				Assert.IsNotNull (field.InitialValue);  				Assert.AreEqual (16' field.InitialValue.Length);    				var buffer = new ByteBuffer (field.InitialValue);    				Assert.AreEqual (1' buffer.ReadUInt32 ());  				Assert.AreEqual (2' buffer.ReadUInt32 ());  				Assert.AreEqual (3' buffer.ReadUInt32 ());  				Assert.AreEqual (4' buffer.ReadUInt32 ());  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,FieldRVA,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var priv_impl = GetPrivateImplementationType (module);  				Assert.IsNotNull (priv_impl);    				Assert.AreEqual (1' priv_impl.Fields.Count);    				var field = priv_impl.Fields [0];    				Assert.IsNotNull (field);  				Assert.AreNotEqual (0' field.RVA);  				Assert.IsNotNull (field.InitialValue);  				Assert.AreEqual (16' field.InitialValue.Length);    				var buffer = new ByteBuffer (field.InitialValue);    				Assert.AreEqual (1' buffer.ReadUInt32 ());  				Assert.AreEqual (2' buffer.ReadUInt32 ());  				Assert.AreEqual (3' buffer.ReadUInt32 ());  				Assert.AreEqual (4' buffer.ReadUInt32 ());  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,FieldRVA,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var priv_impl = GetPrivateImplementationType (module);  				Assert.IsNotNull (priv_impl);    				Assert.AreEqual (1' priv_impl.Fields.Count);    				var field = priv_impl.Fields [0];    				Assert.IsNotNull (field);  				Assert.AreNotEqual (0' field.RVA);  				Assert.IsNotNull (field.InitialValue);  				Assert.AreEqual (16' field.InitialValue.Length);    				var buffer = new ByteBuffer (field.InitialValue);    				Assert.AreEqual (1' buffer.ReadUInt32 ());  				Assert.AreEqual (2' buffer.ReadUInt32 ());  				Assert.AreEqual (3' buffer.ReadUInt32 ());  				Assert.AreEqual (4' buffer.ReadUInt32 ());  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,FieldRVA,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var priv_impl = GetPrivateImplementationType (module);  				Assert.IsNotNull (priv_impl);    				Assert.AreEqual (1' priv_impl.Fields.Count);    				var field = priv_impl.Fields [0];    				Assert.IsNotNull (field);  				Assert.AreNotEqual (0' field.RVA);  				Assert.IsNotNull (field.InitialValue);  				Assert.AreEqual (16' field.InitialValue.Length);    				var buffer = new ByteBuffer (field.InitialValue);    				Assert.AreEqual (1' buffer.ReadUInt32 ());  				Assert.AreEqual (2' buffer.ReadUInt32 ());  				Assert.AreEqual (3' buffer.ReadUInt32 ());  				Assert.AreEqual (4' buffer.ReadUInt32 ());  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,ArrayFields,The following statement contains a magic number: TestIL ("types.il"' module => {  				var types = module.GetType ("Types");  				Assert.IsNotNull (types);    				var rank_two = types.GetField ("rank_two");    				var array = rank_two.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (2' array.Rank);  				Assert.IsFalse (array.Dimensions [0].IsSized);  				Assert.IsFalse (array.Dimensions [1].IsSized);    				var rank_two_low_bound_zero = types.GetField ("rank_two_low_bound_zero");    				array = rank_two_low_bound_zero.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (2' array.Rank);  				Assert.IsTrue (array.Dimensions [0].IsSized);  				Assert.AreEqual (0' array.Dimensions [0].LowerBound);  				Assert.AreEqual (null' array.Dimensions [0].UpperBound);  				Assert.IsTrue (array.Dimensions [1].IsSized);  				Assert.AreEqual (0' array.Dimensions [1].LowerBound);  				Assert.AreEqual (null' array.Dimensions [1].UpperBound);    				var rank_one_low_bound_m1 = types.GetField ("rank_one_low_bound_m1");  				array = rank_one_low_bound_m1.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (1' array.Rank);  				Assert.IsTrue (array.Dimensions [0].IsSized);  				Assert.AreEqual (-1' array.Dimensions [0].LowerBound);  				Assert.AreEqual (4' array.Dimensions [0].UpperBound);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,ArrayFields,The following statement contains a magic number: TestIL ("types.il"' module => {  				var types = module.GetType ("Types");  				Assert.IsNotNull (types);    				var rank_two = types.GetField ("rank_two");    				var array = rank_two.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (2' array.Rank);  				Assert.IsFalse (array.Dimensions [0].IsSized);  				Assert.IsFalse (array.Dimensions [1].IsSized);    				var rank_two_low_bound_zero = types.GetField ("rank_two_low_bound_zero");    				array = rank_two_low_bound_zero.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (2' array.Rank);  				Assert.IsTrue (array.Dimensions [0].IsSized);  				Assert.AreEqual (0' array.Dimensions [0].LowerBound);  				Assert.AreEqual (null' array.Dimensions [0].UpperBound);  				Assert.IsTrue (array.Dimensions [1].IsSized);  				Assert.AreEqual (0' array.Dimensions [1].LowerBound);  				Assert.AreEqual (null' array.Dimensions [1].UpperBound);    				var rank_one_low_bound_m1 = types.GetField ("rank_one_low_bound_m1");  				array = rank_one_low_bound_m1.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (1' array.Rank);  				Assert.IsTrue (array.Dimensions [0].IsSized);  				Assert.AreEqual (-1' array.Dimensions [0].LowerBound);  				Assert.AreEqual (4' array.Dimensions [0].UpperBound);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,ArrayFields,The following statement contains a magic number: TestIL ("types.il"' module => {  				var types = module.GetType ("Types");  				Assert.IsNotNull (types);    				var rank_two = types.GetField ("rank_two");    				var array = rank_two.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (2' array.Rank);  				Assert.IsFalse (array.Dimensions [0].IsSized);  				Assert.IsFalse (array.Dimensions [1].IsSized);    				var rank_two_low_bound_zero = types.GetField ("rank_two_low_bound_zero");    				array = rank_two_low_bound_zero.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (2' array.Rank);  				Assert.IsTrue (array.Dimensions [0].IsSized);  				Assert.AreEqual (0' array.Dimensions [0].LowerBound);  				Assert.AreEqual (null' array.Dimensions [0].UpperBound);  				Assert.IsTrue (array.Dimensions [1].IsSized);  				Assert.AreEqual (0' array.Dimensions [1].LowerBound);  				Assert.AreEqual (null' array.Dimensions [1].UpperBound);    				var rank_one_low_bound_m1 = types.GetField ("rank_one_low_bound_m1");  				array = rank_one_low_bound_m1.FieldType as ArrayType;  				Assert.IsNotNull (array);    				Assert.AreEqual (1' array.Rank);  				Assert.IsTrue (array.Dimensions [0].IsSized);  				Assert.AreEqual (-1' array.Dimensions [0].LowerBound);  				Assert.AreEqual (4' array.Dimensions [0].UpperBound);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,EnumFieldsConstant,The following statement contains a magic number: TestCSharp ("Fields.cs"' module => {  				var pim = module.GetType ("Pim");  				Assert.IsNotNull (pim);    				var field = pim.GetField ("Pam");  				Assert.IsTrue (field.HasConstant);  				Assert.AreEqual (1' (int) field.Constant);    				field = pim.GetField ("Poum");  				Assert.AreEqual (2' (int) field.Constant);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,NestedEnumOfGenericTypeDefinition,The following statement contains a magic number: TestCSharp ("Generics.cs"' module => {  				var dang = module.GetType ("Bongo`1/Dang");  				Assert.IsNotNull (dang);    				var field = dang.GetField ("Ding");  				Assert.IsNotNull (field);  				Assert.AreEqual (2' field.Constant);    				field = dang.GetField ("Dong");  				Assert.IsNotNull (field);  				Assert.AreEqual (12' field.Constant);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,NestedEnumOfGenericTypeDefinition,The following statement contains a magic number: TestCSharp ("Generics.cs"' module => {  				var dang = module.GetType ("Bongo`1/Dang");  				Assert.IsNotNull (dang);    				var field = dang.GetField ("Ding");  				Assert.IsNotNull (field);  				Assert.AreEqual (2' field.Constant);    				field = dang.GetField ("Dong");  				Assert.IsNotNull (field);  				Assert.AreEqual (12' field.Constant);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,MarshalAsFixedStr,The following statement contains a magic number: TestModule ("marshal.dll"' module => {  				var boc = module.GetType ("Boc");  				var field = boc.GetField ("a");    				Assert.IsNotNull (field);    				Assert.IsTrue (field.HasMarshalInfo);    				var info = (FixedSysStringMarshalInfo) field.MarshalInfo;    				Assert.AreEqual (42' info.Size);  			});
Magic Number,Mono.Cecil.Tests,FieldTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\FieldTests.cs,MarshalAsFixedArray,The following statement contains a magic number: TestModule ("marshal.dll"' module => {  				var boc = module.GetType ("Boc");  				var field = boc.GetField ("b");    				Assert.IsNotNull (field);    				Assert.IsTrue (field.HasMarshalInfo);    				var info = (FixedArrayMarshalInfo) field.MarshalInfo;    				Assert.AreEqual (12' info.Size);  				Assert.AreEqual (NativeType.Boolean' info.ElementType);  			});
Magic Number,Mono.Cecil.Tests,Formatter,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\Formatter.cs,FormatLabel,The following statement contains a magic number: return "IL_" + label.Substring (label.Length - 4);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,ImageSections,The following statement contains a magic number: Assert.AreEqual (3' image.Sections.Length);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,ImageSections,The following statement contains a magic number: Assert.AreEqual (".reloc"' image.Sections [2].Name);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,TablesHeap,The following statement contains a magic number: Assert.AreEqual (4' heap [Table.TypeRef].Length);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,TablesHeap,The following statement contains a magic number: Assert.AreEqual (2' heap [Table.TypeDef].Length);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,TablesHeap,The following statement contains a magic number: Assert.AreEqual (2' heap [Table.Method].Length);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,TablesHeap,The following statement contains a magic number: Assert.AreEqual (4' heap [Table.MemberRef].Length);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,TablesHeap,The following statement contains a magic number: Assert.AreEqual (2' heap [Table.CustomAttribute].Length);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,WindowsRuntimeComponentAssembly,The following statement contains a magic number: TestModule("winrtcomp.winmd"' module => {  				Assert.IsTrue (module.Assembly.Name.IsWindowsRuntime);  				Assert.AreEqual (6' module.Image.SubSystemMajor);  				Assert.AreEqual (2' module.Image.SubSystemMinor);  			}' verify: false' assemblyResolver: resolver);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,WindowsRuntimeComponentAssembly,The following statement contains a magic number: TestModule("winrtcomp.winmd"' module => {  				Assert.IsTrue (module.Assembly.Name.IsWindowsRuntime);  				Assert.AreEqual (6' module.Image.SubSystemMajor);  				Assert.AreEqual (2' module.Image.SubSystemMinor);  			}' verify: false' assemblyResolver: resolver);
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,Net471TargetingAssembly,The following statement contains a magic number: TestModule ("net471.exe"' module => {  				Assert.AreEqual (6' module.Image.SubSystemMajor);  				Assert.AreEqual (0' module.Image.SubSystemMinor);  			});
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,ExternalPdbDeterministicAssembly,The following statement contains a magic number: TestModule ("ExternalPdbDeterministic.dll"' module => {  				Assert.IsTrue (module.HasDebugHeader);    				var header = module.GetDebugHeader ();    				Assert.AreEqual (2' header.Entries.Length);  				Assert.IsTrue (header.Entries.Any (e => e.Directory.Type == ImageDebugType.CodeView));  				Assert.IsTrue (header.Entries.Any (e => e.Directory.Type == ImageDebugType.Deterministic));  			}' symbolReaderProvider: typeof (PortablePdbReaderProvider)' symbolWriterProvider: typeof (PortablePdbWriterProvider));
Magic Number,Mono.Cecil.Tests,ImageReadTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImageReadTests.cs,EmbeddedPdbDeterministicAssembly,The following statement contains a magic number: TestModule ("EmbeddedPdbDeterministic.dll"' module => {  				Assert.IsTrue (module.HasDebugHeader);    				var header = module.GetDebugHeader ();    				Assert.AreEqual (3' header.Entries.Length);  				Assert.IsTrue (header.Entries.Any (e => e.Directory.Type == ImageDebugType.CodeView));  				Assert.IsTrue (header.Entries.Any (e => e.Directory.Type == ImageDebugType.Deterministic));  				Assert.IsTrue (header.Entries.Any (e => e.Directory.Type == ImageDebugType.EmbeddedPortablePdb));  			}' symbolReaderProvider: typeof (EmbeddedPortablePdbReaderProvider)' symbolWriterProvider: typeof (EmbeddedPortablePdbWriterProvider));
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportStringArray,The following statement contains a magic number: var array = new string [2' 2];
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportStringArray,The following statement contains a magic number: var array = new string [2' 2];
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportGenericMethod,The following statement contains a magic number: Assert.AreEqual (42' generic_identity (new Generic<int> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportGenericMethod,The following statement contains a magic number: Assert.AreEqual (42' generic_identity (new Generic<int> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportComplexGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportCecilTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportCecilTests.cs,ImportComplexGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportInt,The following statement contains a magic number: Assert.AreEqual (42' add (40' 2));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportInt,The following statement contains a magic number: Assert.AreEqual (42' add (40' 2));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportInt,The following statement contains a magic number: Assert.AreEqual (42' add (40' 2));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportStringArray,The following statement contains a magic number: var array = new string [2' 2];
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportStringArray,The following statement contains a magic number: var array = new string [2' 2];
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethod,The following statement contains a magic number: Assert.AreEqual (42' generic_identity (new Generic<int> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethod,The following statement contains a magic number: Assert.AreEqual (42' generic_identity (new Generic<int> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportComplexGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,ImportReflectionTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ImportReflectionTests.cs,ImportComplexGenericMethodSpec,The following statement contains a magic number: Assert.AreEqual (42' gen_spec_id (new Generic<string> ()' 42));
Magic Number,Mono.Cecil.Tests,MethodBodyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\MethodBodyTests.cs,FilterMaxStack,The following statement contains a magic number: TestIL ("hello.il"' module => {  				var type = module.GetType ("Foo");  				var method = type.GetMethod ("TestFilter");    				Assert.IsNotNull (method);  				Assert.AreEqual (2' method.Body.MaxStackSize);  			});
Magic Number,Mono.Cecil.Tests,MethodBodyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\MethodBodyTests.cs,InsertAfterLastInstruction,The following statement contains a magic number: body.Instructions.Insert (2' third);
Magic Number,Mono.Cecil.Tests,MethodTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\MethodTests.cs,AbstractMethod,The following statement contains a magic number: TestCSharp ("Methods.cs"' module => {  				var type = module.Types [1];  				Assert.AreEqual ("Foo"' type.Name);  				Assert.AreEqual (2' type.Methods.Count);    				var method = type.GetMethod ("Bar");  				Assert.AreEqual ("Bar"' method.Name);  				Assert.IsTrue (method.IsAbstract);  				Assert.IsNotNull (method.ReturnType);    				Assert.AreEqual (1' method.Parameters.Count);    				var parameter = method.Parameters [0];    				Assert.AreEqual ("a"' parameter.Name);  				Assert.AreEqual ("System.Int32"' parameter.ParameterType.FullName);  			});
Magic Number,Mono.Cecil.Tests,MethodTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\MethodTests.cs,VarArgs,The following statement contains a magic number: TestModule ("varargs.exe"' module => {  				var module_type = module.Types [0];    				Assert.AreEqual (3' module_type.Methods.Count);    				var bar = module_type.GetMethod ("Bar");  				var baz = module_type.GetMethod ("Baz");  				var foo = module_type.GetMethod ("Foo");    				Assert.IsTrue (bar.IsVarArg ());  				Assert.IsFalse (baz.IsVarArg ());    				Assert.IsTrue (foo.IsVarArg ());    				var foo_reference = (MethodReference) baz.Body.Instructions.First (i => i.Offset == 0x000a).Operand;    				Assert.IsTrue (foo_reference.IsVarArg ());  				Assert.AreEqual (0' foo_reference.GetSentinelPosition ());    				Assert.AreEqual (foo' foo_reference.Resolve ());    				var bar_reference = (MethodReference) baz.Body.Instructions.First (i => i.Offset == 0x0023).Operand;    				Assert.IsTrue (bar_reference.IsVarArg ());    				Assert.AreEqual (1' bar_reference.GetSentinelPosition ());    				Assert.AreEqual (bar' bar_reference.Resolve ());  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,MultiModules,The following statement contains a magic number: TestModule("mma.exe"' module => {  				var assembly = module.Assembly;    				Assert.AreEqual (3' assembly.Modules.Count);    				Assert.AreEqual ("mma.exe"' assembly.Modules [0].Name);  				Assert.AreEqual (ModuleKind.Console' assembly.Modules [0].Kind);    				Assert.AreEqual ("moda.netmodule"' assembly.Modules [1].Name);  				Assert.AreEqual ("eedb4721-6c3e-4d9a-be30-49021121dd92"' assembly.Modules [1].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [1].Kind);    				Assert.AreEqual ("modb.netmodule"' assembly.Modules [2].Name);  				Assert.AreEqual ("46c5c577-11b2-4ea0-bb3c-3c71f1331dd0"' assembly.Modules [2].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [2].Kind);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,MultiModules,The following statement contains a magic number: TestModule("mma.exe"' module => {  				var assembly = module.Assembly;    				Assert.AreEqual (3' assembly.Modules.Count);    				Assert.AreEqual ("mma.exe"' assembly.Modules [0].Name);  				Assert.AreEqual (ModuleKind.Console' assembly.Modules [0].Kind);    				Assert.AreEqual ("moda.netmodule"' assembly.Modules [1].Name);  				Assert.AreEqual ("eedb4721-6c3e-4d9a-be30-49021121dd92"' assembly.Modules [1].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [1].Kind);    				Assert.AreEqual ("modb.netmodule"' assembly.Modules [2].Name);  				Assert.AreEqual ("46c5c577-11b2-4ea0-bb3c-3c71f1331dd0"' assembly.Modules [2].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [2].Kind);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,MultiModules,The following statement contains a magic number: TestModule("mma.exe"' module => {  				var assembly = module.Assembly;    				Assert.AreEqual (3' assembly.Modules.Count);    				Assert.AreEqual ("mma.exe"' assembly.Modules [0].Name);  				Assert.AreEqual (ModuleKind.Console' assembly.Modules [0].Kind);    				Assert.AreEqual ("moda.netmodule"' assembly.Modules [1].Name);  				Assert.AreEqual ("eedb4721-6c3e-4d9a-be30-49021121dd92"' assembly.Modules [1].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [1].Kind);    				Assert.AreEqual ("modb.netmodule"' assembly.Modules [2].Name);  				Assert.AreEqual ("46c5c577-11b2-4ea0-bb3c-3c71f1331dd0"' assembly.Modules [2].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [2].Kind);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,MultiModules,The following statement contains a magic number: TestModule("mma.exe"' module => {  				var assembly = module.Assembly;    				Assert.AreEqual (3' assembly.Modules.Count);    				Assert.AreEqual ("mma.exe"' assembly.Modules [0].Name);  				Assert.AreEqual (ModuleKind.Console' assembly.Modules [0].Kind);    				Assert.AreEqual ("moda.netmodule"' assembly.Modules [1].Name);  				Assert.AreEqual ("eedb4721-6c3e-4d9a-be30-49021121dd92"' assembly.Modules [1].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [1].Kind);    				Assert.AreEqual ("modb.netmodule"' assembly.Modules [2].Name);  				Assert.AreEqual ("46c5c577-11b2-4ea0-bb3c-3c71f1331dd0"' assembly.Modules [2].Mvid.ToString ());  				Assert.AreEqual (ModuleKind.NetModule' assembly.Modules [2].Kind);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,AssemblyReferences,The following statement contains a magic number: TestModule ("hello.exe"' module => {  				Assert.AreEqual (1' module.AssemblyReferences.Count);    				var reference = module.AssemblyReferences [0];    				Assert.AreEqual ("mscorlib"' reference.Name);  				Assert.AreEqual (new Version (2' 0' 0' 0)' reference.Version);  				Assert.AreEqual (new byte [] { 0xB7' 0x7A' 0x5C' 0x56' 0x19' 0x34' 0xE0' 0x89 }' reference.PublicKeyToken);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,ModuleReferences,The following statement contains a magic number: TestModule ("pinvoke.exe"' module => {  				Assert.AreEqual (2' module.ModuleReferences.Count);  				Assert.AreEqual ("kernel32.dll"' module.ModuleReferences [0].Name);  				Assert.AreEqual ("shell32.dll"' module.ModuleReferences [1].Name);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,Types,The following statement contains a magic number: TestModule ("hello.exe"' module => {  				Assert.AreEqual (2' module.Types.Count);  				Assert.AreEqual ("<Module>"' module.Types [0].FullName);  				Assert.AreEqual ("<Module>"' module.GetType ("<Module>").FullName);  				Assert.AreEqual ("Program"' module.Types [1].FullName);  				Assert.AreEqual ("Program"' module.GetType ("Program").FullName);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,ExportedTypeFromNetModule,The following statement contains a magic number: TestModule ("mma.exe"' module => {  				Assert.IsTrue (module.HasExportedTypes);  				Assert.AreEqual (2' module.ExportedTypes.Count);    				var exported_type = module.ExportedTypes [0];    				Assert.AreEqual ("Module.A.Foo"' exported_type.FullName);  				Assert.AreEqual ("moda.netmodule"' exported_type.Scope.Name);    				exported_type = module.ExportedTypes [1];    				Assert.AreEqual ("Module.B.Baz"' exported_type.FullName);  				Assert.AreEqual ("modb.netmodule"' exported_type.Scope.Name);  			});
Magic Number,Mono.Cecil.Tests,ModuleTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ModuleTests.cs,NestedTypeForwarder,The following statement contains a magic number: TestCSharp ("CustomAttributes.cs"' module => {  				Assert.IsTrue (module.HasExportedTypes);  				Assert.AreEqual (2' module.ExportedTypes.Count);    				var exported_type = module.ExportedTypes [0];    				Assert.AreEqual ("System.Diagnostics.DebuggableAttribute"' exported_type.FullName);  				Assert.AreEqual (Platform.OnCoreClr ? "System.Private.CoreLib" : "mscorlib"' exported_type.Scope.Name);  				Assert.IsTrue (exported_type.IsForwarder);    				var nested_exported_type = module.ExportedTypes [1];    				Assert.AreEqual ("System.Diagnostics.DebuggableAttribute/DebuggingModes"' nested_exported_type.FullName);  				Assert.AreEqual (exported_type' nested_exported_type.DeclaringType);  				Assert.AreEqual (Platform.OnCoreClr ? "System.Private.CoreLib" : "mscorlib"' nested_exported_type.Scope.Name);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,ArrayMarshaler,The following statement contains a magic number: TestModule ("marshal.dll"' module => {  				var bar = module.GetType ("Bar");  				var pan = bar.GetMethod ("PanPan");    				var parameter = pan.Parameters [1];    				Assert.IsTrue (parameter.HasMarshalInfo);    				var info = (ArrayMarshalInfo) parameter.MarshalInfo;    				Assert.AreEqual (NativeType.I8' info.ElementType);  				Assert.AreEqual (66' info.Size);  				Assert.AreEqual (2' info.SizeParameterIndex);    				parameter = pan.Parameters [3];    				Assert.IsTrue (parameter.HasMarshalInfo);    				info = (ArrayMarshalInfo) parameter.MarshalInfo;    				Assert.AreEqual (NativeType.I2' info.ElementType);  				Assert.AreEqual (-1' info.Size);  				Assert.AreEqual (-1' info.SizeParameterIndex);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,ArrayMarshaler,The following statement contains a magic number: TestModule ("marshal.dll"' module => {  				var bar = module.GetType ("Bar");  				var pan = bar.GetMethod ("PanPan");    				var parameter = pan.Parameters [1];    				Assert.IsTrue (parameter.HasMarshalInfo);    				var info = (ArrayMarshalInfo) parameter.MarshalInfo;    				Assert.AreEqual (NativeType.I8' info.ElementType);  				Assert.AreEqual (66' info.Size);  				Assert.AreEqual (2' info.SizeParameterIndex);    				parameter = pan.Parameters [3];    				Assert.IsTrue (parameter.HasMarshalInfo);    				info = (ArrayMarshalInfo) parameter.MarshalInfo;    				Assert.AreEqual (NativeType.I2' info.ElementType);  				Assert.AreEqual (-1' info.Size);  				Assert.AreEqual (-1' info.SizeParameterIndex);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,ArrayMarshaler,The following statement contains a magic number: TestModule ("marshal.dll"' module => {  				var bar = module.GetType ("Bar");  				var pan = bar.GetMethod ("PanPan");    				var parameter = pan.Parameters [1];    				Assert.IsTrue (parameter.HasMarshalInfo);    				var info = (ArrayMarshalInfo) parameter.MarshalInfo;    				Assert.AreEqual (NativeType.I8' info.ElementType);  				Assert.AreEqual (66' info.Size);  				Assert.AreEqual (2' info.SizeParameterIndex);    				parameter = pan.Parameters [3];    				Assert.IsTrue (parameter.HasMarshalInfo);    				info = (ArrayMarshalInfo) parameter.MarshalInfo;    				Assert.AreEqual (NativeType.I2' info.ElementType);  				Assert.AreEqual (-1' info.Size);  				Assert.AreEqual (-1' info.SizeParameterIndex);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,NullableConstant,The following statement contains a magic number: TestModule ("nullable-constant.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Foo");    				Assert.IsTrue (method.Parameters [0].HasConstant);  				Assert.IsTrue (method.Parameters [1].HasConstant);  				Assert.IsTrue (method.Parameters [2].HasConstant);    				Assert.AreEqual (1234' method.Parameters [0].Constant);  				Assert.AreEqual (null' method.Parameters [1].Constant);  				Assert.AreEqual (12' method.Parameters [2].Constant);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,NullableConstant,The following statement contains a magic number: TestModule ("nullable-constant.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Foo");    				Assert.IsTrue (method.Parameters [0].HasConstant);  				Assert.IsTrue (method.Parameters [1].HasConstant);  				Assert.IsTrue (method.Parameters [2].HasConstant);    				Assert.AreEqual (1234' method.Parameters [0].Constant);  				Assert.AreEqual (null' method.Parameters [1].Constant);  				Assert.AreEqual (12' method.Parameters [2].Constant);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,NullableConstant,The following statement contains a magic number: TestModule ("nullable-constant.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Foo");    				Assert.IsTrue (method.Parameters [0].HasConstant);  				Assert.IsTrue (method.Parameters [1].HasConstant);  				Assert.IsTrue (method.Parameters [2].HasConstant);    				Assert.AreEqual (1234' method.Parameters [0].Constant);  				Assert.AreEqual (null' method.Parameters [1].Constant);  				Assert.AreEqual (12' method.Parameters [2].Constant);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,NullableConstant,The following statement contains a magic number: TestModule ("nullable-constant.exe"' module => {  				var type = module.GetType ("Program");  				var method = type.GetMethod ("Foo");    				Assert.IsTrue (method.Parameters [0].HasConstant);  				Assert.IsTrue (method.Parameters [1].HasConstant);  				Assert.IsTrue (method.Parameters [2].HasConstant);    				Assert.AreEqual (1234' method.Parameters [0].Constant);  				Assert.AreEqual (null' method.Parameters [1].Constant);  				Assert.AreEqual (12' method.Parameters [2].Constant);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,RemoveAtParameterIndex,The following statement contains a magic number: Assert.AreEqual (2' z.Index);
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,RemoveParameterIndex,The following statement contains a magic number: Assert.AreEqual (2' z.Index);
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,InsertParameterIndex,The following statement contains a magic number: Assert.AreEqual (2' z.Index);
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,NullablePrimitiveParameterConstant,The following statement contains a magic number: TestModule ("nullable-parameter.dll"' module => {  				var test = module.GetType ("Test");  				var method = test.GetMethod ("Foo");    				Assert.IsNotNull (method);    				var param = method.Parameters [0];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (1234' param.Constant);    				param = method.Parameters [1];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (null' param.Constant);    				param = method.Parameters [2];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (12' param.Constant);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,NullablePrimitiveParameterConstant,The following statement contains a magic number: TestModule ("nullable-parameter.dll"' module => {  				var test = module.GetType ("Test");  				var method = test.GetMethod ("Foo");    				Assert.IsNotNull (method);    				var param = method.Parameters [0];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (1234' param.Constant);    				param = method.Parameters [1];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (null' param.Constant);    				param = method.Parameters [2];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (12' param.Constant);  			});
Magic Number,Mono.Cecil.Tests,ParameterTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ParameterTests.cs,NullablePrimitiveParameterConstant,The following statement contains a magic number: TestModule ("nullable-parameter.dll"' module => {  				var test = module.GetType ("Test");  				var method = test.GetMethod ("Foo");    				Assert.IsNotNull (method);    				var param = method.Parameters [0];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (1234' param.Constant);    				param = method.Parameters [1];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (null' param.Constant);    				param = method.Parameters [2];  				Assert.IsTrue (param.HasConstant);  				Assert.AreEqual (12' param.Constant);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalVariables,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalVariables,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalVariables,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalVariables,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				var variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (2' variable.Index);    				scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("s"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (3' variable.Index);    				Assert.IsTrue (scope.HasScopes);  				Assert.AreEqual (1' scope.Scopes.Count);    				scope = scope.Scopes [0];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasVariables);  				Assert.AreEqual (1' scope.Variables.Count);    				variable = scope.Variables [0];    				Assert.AreEqual ("u"' variable.Name);  				Assert.IsFalse (variable.IsDebuggerHidden);  				Assert.AreEqual (5' variable.Index);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalConstants,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalConstants,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalConstants,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalConstants,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalConstants,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalConstants,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,LocalConstants,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasScopes);  				Assert.AreEqual (2' debug_info.Scope.Scopes.Count);    				var scope = debug_info.Scope.Scopes [1];    				Assert.IsNotNull (scope);  				Assert.IsTrue (scope.HasConstants);  				Assert.AreEqual (2' scope.Constants.Count);    				var constant = scope.Constants [0];    				Assert.AreEqual ("b"' constant.Name);  				Assert.AreEqual (12' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = scope.Constants [1];  				Assert.AreEqual ("c"' constant.Name);  				Assert.AreEqual ((decimal) 74' constant.Value);  				Assert.AreEqual (MetadataType.ValueType' constant.ConstantType.MetadataType);    				method = type.GetMethod ("Foo");  				debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);  				Assert.IsTrue (debug_info.Scope.HasConstants);  				Assert.AreEqual (4' debug_info.Scope.Constants.Count);    				constant = debug_info.Scope.Constants [0];  				Assert.AreEqual ("s"' constant.Name);  				Assert.AreEqual ("const string"' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [1];  				Assert.AreEqual ("f"' constant.Name);  				Assert.AreEqual (1' constant.Value);  				Assert.AreEqual (MetadataType.Int32' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [2];  				Assert.AreEqual ("o"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.Object' constant.ConstantType.MetadataType);    				constant = debug_info.Scope.Constants [3];  				Assert.AreEqual ("u"' constant.Name);  				Assert.AreEqual (null' constant.Value);  				Assert.AreEqual (MetadataType.String' constant.ConstantType.MetadataType);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ImportScope,The following statement contains a magic number: TestPortablePdbModule (module => {  				var type = module.GetType ("PdbTarget.Program");  				var method = type.GetMethod ("Bar");  				var debug_info = method.DebugInformation;    				Assert.IsNotNull (debug_info.Scope);    				var import = debug_info.Scope.Import;  				Assert.IsNotNull (import);    				Assert.IsFalse (import.HasTargets);  				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (9' import.Targets.Count);  				var target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.ImportAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);    				target = import.Targets [1];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System"' target.Namespace);    				target = import.Targets [2];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Collections.Generic"' target.Namespace);    				target = import.Targets [3];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.IO"' target.Namespace);    				target = import.Targets [4];    				Assert.AreEqual (ImportTargetKind.ImportNamespace' target.Kind);  				Assert.AreEqual ("System.Threading.Tasks"' target.Namespace);    				target = import.Targets [5];    				Assert.AreEqual (ImportTargetKind.ImportNamespaceInAssembly' target.Kind);  				Assert.AreEqual ("System.Xml.Resolvers"' target.Namespace);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);      				target = import.Targets [6];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Console"' target.Type.FullName);    				target = import.Targets [7];    				Assert.AreEqual (ImportTargetKind.ImportType' target.Kind);  				Assert.AreEqual ("System.Math"' target.Type.FullName);    				target = import.Targets [8];    				Assert.AreEqual (ImportTargetKind.DefineTypeAlias' target.Kind);  				Assert.AreEqual ("Foo"' target.Alias);  				Assert.AreEqual ("System.Xml.XmlDocumentType"' target.Type.FullName);    				Assert.IsNotNull (import.Parent);    				import = import.Parent;    				Assert.IsTrue (import.HasTargets);  				Assert.AreEqual (1' import.Targets.Count);  				Assert.IsNull (import.Parent);    				target = import.Targets [0];    				Assert.AreEqual (ImportTargetKind.DefineAssemblyAlias' target.Kind);  				Assert.AreEqual ("XML"' target.Alias);  				Assert.AreEqual ("System.Xml"' target.AssemblyReference.Name);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,StateMachineCustomDebugInformation,The following statement contains a magic number: TestPortablePdbModule (module => {  				var state_machine = module.GetType ("PdbTarget.Program/<Baz>d__7");  				var move_next = state_machine.GetMethod ("MoveNext");    				Assert.IsTrue (move_next.HasCustomDebugInformations);    				var state_machine_scope = move_next.CustomDebugInformations.OfType<StateMachineScopeDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (state_machine_scope);  				Assert.AreEqual (3' state_machine_scope.Scopes.Count);  				Assert.AreEqual (0' state_machine_scope.Scopes [0].Start.Offset);  				Assert.IsTrue (state_machine_scope.Scopes [0].End.IsEndOfMethod);    				Assert.AreEqual (0' state_machine_scope.Scopes [1].Start.Offset);  				Assert.AreEqual (0' state_machine_scope.Scopes [1].End.Offset);    				Assert.AreEqual (184' state_machine_scope.Scopes [2].Start.Offset);  				Assert.AreEqual (343' state_machine_scope.Scopes [2].End.Offset);    				var async_body = move_next.CustomDebugInformations.OfType<AsyncMethodBodyDebugInformation> ().FirstOrDefault ();  				Assert.IsNotNull (async_body);  				Assert.AreEqual (-1' async_body.CatchHandler.Offset);    				Assert.AreEqual (2' async_body.Yields.Count);  				Assert.AreEqual (61' async_body.Yields [0].Offset);  				Assert.AreEqual (221' async_body.Yields [1].Offset);    				Assert.AreEqual (2' async_body.Resumes.Count);  				Assert.AreEqual (91' async_body.Resumes [0].Offset);  				Assert.AreEqual (252' async_body.Resumes [1].Offset);    				Assert.AreEqual (move_next' async_body.ResumeMethods [0]);  				Assert.AreEqual (move_next' async_body.ResumeMethods [1]);  			});
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,EmbeddedCompressedPortablePdb,The following statement contains a magic number: TestModule("EmbeddedCompressedPdbTarget.exe"' module => {  				Assert.IsTrue (module.HasDebugHeader);    				var header = module.GetDebugHeader ();    				Assert.IsNotNull (header);  				Assert.AreEqual (2' header.Entries.Length);    				var cv = header.Entries [0];  				Assert.AreEqual (ImageDebugType.CodeView' cv.Directory.Type);    				var eppdb = header.Entries [1];  				Assert.AreEqual (ImageDebugType.EmbeddedPortablePdb' eppdb.Directory.Type);  				Assert.AreEqual (0x0100' eppdb.Directory.MajorVersion);  				Assert.AreEqual (0x0100' eppdb.Directory.MinorVersion);  			}' symbolReaderProvider: typeof (EmbeddedPortablePdbReaderProvider)' symbolWriterProvider: typeof (EmbeddedPortablePdbWriterProvider));
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,GetDebugHeaderPdbPath,The following statement contains a magic number: var length = Array.IndexOf (cv.Data' (byte)0' 24) - 24;
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,GetDebugHeaderPdbPath,The following statement contains a magic number: var length = Array.IndexOf (cv.Data' (byte)0' 24) - 24;
Magic Number,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,GetDebugHeaderPdbPath,The following statement contains a magic number: Buffer.BlockCopy (cv.Data' 24' bytes' 0' length);
Magic Number,Mono.Cecil.Tests,SymbolWriter,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,ProcessEntry,The following statement contains a magic number: writer.WriteBytes (reader.ReadBytes (16));
Magic Number,Mono.Cecil.Tests,PropertyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PropertyTests.cs,AbstractMethod,The following statement contains a magic number: TestCSharp ("Properties.cs"' module => {  				var type = module.GetType ("Foo");    				Assert.IsTrue (type.HasProperties);    				var properties = type.Properties;    				Assert.AreEqual (3' properties.Count);    				var property = properties [0];    				Assert.IsNotNull (property);  				Assert.AreEqual ("Bar"' property.Name);  				Assert.IsNotNull (property.PropertyType);  				Assert.AreEqual ("System.Int32"' property.PropertyType.FullName);    				Assert.IsNotNull (property.GetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Getter' property.GetMethod.SemanticsAttributes);  				Assert.IsNull (property.SetMethod);    				property = properties [1];    				Assert.IsNotNull (property);  				Assert.AreEqual ("Baz"' property.Name);  				Assert.IsNotNull (property.PropertyType);  				Assert.AreEqual ("System.String"' property.PropertyType.FullName);    				Assert.IsNotNull (property.GetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Getter' property.GetMethod.SemanticsAttributes);  				Assert.IsNotNull (property.SetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Setter' property.SetMethod.SemanticsAttributes);    				property = properties [2];    				Assert.IsNotNull (property);  				Assert.AreEqual ("Gazonk"' property.Name);  				Assert.IsNotNull (property.PropertyType);  				Assert.AreEqual ("System.String"' property.PropertyType.FullName);    				Assert.IsNull (property.GetMethod);  				Assert.IsNotNull (property.SetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Setter' property.SetMethod.SemanticsAttributes);  			});
Magic Number,Mono.Cecil.Tests,PropertyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PropertyTests.cs,AbstractMethod,The following statement contains a magic number: TestCSharp ("Properties.cs"' module => {  				var type = module.GetType ("Foo");    				Assert.IsTrue (type.HasProperties);    				var properties = type.Properties;    				Assert.AreEqual (3' properties.Count);    				var property = properties [0];    				Assert.IsNotNull (property);  				Assert.AreEqual ("Bar"' property.Name);  				Assert.IsNotNull (property.PropertyType);  				Assert.AreEqual ("System.Int32"' property.PropertyType.FullName);    				Assert.IsNotNull (property.GetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Getter' property.GetMethod.SemanticsAttributes);  				Assert.IsNull (property.SetMethod);    				property = properties [1];    				Assert.IsNotNull (property);  				Assert.AreEqual ("Baz"' property.Name);  				Assert.IsNotNull (property.PropertyType);  				Assert.AreEqual ("System.String"' property.PropertyType.FullName);    				Assert.IsNotNull (property.GetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Getter' property.GetMethod.SemanticsAttributes);  				Assert.IsNotNull (property.SetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Setter' property.SetMethod.SemanticsAttributes);    				property = properties [2];    				Assert.IsNotNull (property);  				Assert.AreEqual ("Gazonk"' property.Name);  				Assert.IsNotNull (property.PropertyType);  				Assert.AreEqual ("System.String"' property.PropertyType.FullName);    				Assert.IsNull (property.GetMethod);  				Assert.IsNotNull (property.SetMethod);  				Assert.AreEqual (MethodSemanticsAttributes.Setter' property.SetMethod.SemanticsAttributes);  			});
Magic Number,Mono.Cecil.Tests,PropertyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PropertyTests.cs,OtherMethod,The following statement contains a magic number: TestIL ("others.il"' module => {  				var type = module.GetType ("Others");    				Assert.IsTrue (type.HasProperties);    				var properties = type.Properties;    				Assert.AreEqual (1' properties.Count);    				var property = properties [0];    				Assert.IsNotNull (property);  				Assert.AreEqual ("Context"' property.Name);  				Assert.IsNotNull (property.PropertyType);  				Assert.AreEqual ("System.String"' property.PropertyType.FullName);    				Assert.IsTrue (property.HasOtherMethods);    				Assert.AreEqual (2' property.OtherMethods.Count);    				var other = property.OtherMethods [0];  				Assert.AreEqual ("let_Context"' other.Name);    				other = property.OtherMethods [1];  				Assert.AreEqual ("bet_Context"' other.Name);  			});
Magic Number,Mono.Cecil.Tests,PropertyTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PropertyTests.cs,SetOnlyIndexer,The following statement contains a magic number: TestCSharp ("Properties.cs"' module => {  				var type = module.GetType ("Bar");  				var indexer = type.Properties.Where (property => property.Name == "Item").First ();    				var parameters = indexer.Parameters;    				Assert.AreEqual (2' parameters.Count);  				Assert.AreEqual ("System.Int32"' parameters [0].ParameterType.FullName);  				Assert.AreEqual ("System.String"' parameters [1].ParameterType.FullName);  			});
Magic Number,Mono.Cecil.Tests,ResolveTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ResolveTests.cs,RectangularArrayResolveGetMethod,The following statement contains a magic number: var get_a_b = GetReference<Func<int[']' int>' MethodReference> (matrix => matrix [2' 2]);
Magic Number,Mono.Cecil.Tests,ResolveTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\ResolveTests.cs,RectangularArrayResolveGetMethod,The following statement contains a magic number: var get_a_b = GetReference<Func<int[']' int>' MethodReference> (matrix => matrix [2' 2]);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,OpenGenericType,The following statement contains a magic number: Assert.AreEqual (2' type.GenericParameters.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,ThreeDimensionalArray,The following statement contains a magic number: Assert.AreEqual (3' array.Rank);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceExternArguments,The following statement contains a magic number: Assert.AreEqual (2' instance.GenericArguments.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceExternArguments,The following statement contains a magic number: Assert.AreEqual (2' type.GenericParameters.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceMixedArguments,The following statement contains a magic number: Assert.AreEqual (2' instance.GenericArguments.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceMixedArguments,The following statement contains a magic number: Assert.AreEqual (2' type.GenericParameters.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceTwoNonFqArguments,The following statement contains a magic number: Assert.AreEqual (2' instance.GenericArguments.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,GenericInstanceTwoNonFqArguments,The following statement contains a magic number: Assert.AreEqual (2' type.GenericParameters.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,ComplexGenericInstanceMixedArguments,The following statement contains a magic number: Assert.AreEqual (2' instance.GenericArguments.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,ComplexGenericInstanceMixedArguments,The following statement contains a magic number: Assert.AreEqual (2' type.GenericParameters.Count);
Magic Number,Mono.Cecil.Tests,TypeParserTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeParserTests.cs,ComplexGenericInstanceMixedArguments,The following statement contains a magic number: Assert.AreEqual (2' instance.GenericArguments.Count);
Magic Number,Mono.Cecil.Tests,TypeTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeTests.cs,TypeLayout,The following statement contains a magic number: TestCSharp ("Layouts.cs"' module => {  				var foo = module.GetType ("Foo");  				Assert.IsNotNull (foo);  				Assert.IsTrue (foo.IsValueType);    				Assert.IsTrue (foo.HasLayoutInfo);  				Assert.AreEqual (16' foo.ClassSize);    				var babar = module.GetType ("Babar");  				Assert.IsNotNull (babar);  				Assert.IsFalse (babar.IsValueType);  				Assert.IsFalse (babar.HasLayoutInfo);  			});
Magic Number,Mono.Cecil.Tests,TypeTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeTests.cs,SimpleInterfaces,The following statement contains a magic number: TestIL ("types.il"' module => {  				var ibaz = module.GetType ("IBaz");  				Assert.IsNotNull (ibaz);    				Assert.IsTrue (ibaz.HasInterfaces);    				var interfaces = ibaz.Interfaces;    				Assert.AreEqual (2' interfaces.Count);    				// Mono's ilasm and .NET's are ordering interfaces differently  				Assert.IsNotNull (interfaces.Single (i => i.InterfaceType.FullName == "IBar"));  				Assert.IsNotNull (interfaces.Single (i => i.InterfaceType.FullName == "IFoo"));  			});
Magic Number,Mono.Cecil.Tests,TypeTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeTests.cs,GenericTypeDefinition,The following statement contains a magic number: TestCSharp ("Generics.cs"' module => {  				var foo = module.GetType ("Foo`2");  				Assert.IsNotNull (foo);    				Assert.IsTrue (foo.HasGenericParameters);  				Assert.AreEqual (2' foo.GenericParameters.Count);    				var tbar = foo.GenericParameters [0];    				Assert.AreEqual ("TBar"' tbar.Name);  				Assert.AreEqual (foo' tbar.Owner);    				var tbaz = foo.GenericParameters [1];    				Assert.AreEqual ("TBaz"' tbaz.Name);  				Assert.AreEqual (foo' tbaz.Owner);  			});
Magic Number,Mono.Cecil.Tests,TypeTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeTests.cs,ConstrainedGenericType,The following statement contains a magic number: TestCSharp ("Generics.cs"' module => {  				var bongo_t = module.GetType ("Bongo`1");  				Assert.IsNotNull (bongo_t);    				var t = bongo_t.GenericParameters [0];  				Assert.IsNotNull (t);  				Assert.AreEqual ("T"' t.Name);    				Assert.IsTrue (t.HasConstraints);  				Assert.AreEqual (2' t.Constraints.Count);    				Assert.AreEqual ("Zap"' t.Constraints [0].ConstraintType.FullName);  				Assert.AreEqual ("IZoom"' t.Constraints [1].ConstraintType.FullName);  			});
Magic Number,Mono.Cecil.Tests,TypeTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeTests.cs,GenericConstraintOnGenericParameter,The following statement contains a magic number: TestCSharp ("Generics.cs"' module => {  				var duel = module.GetType ("Duel`3");    				Assert.AreEqual (3' duel.GenericParameters.Count);    				var t1 = duel.GenericParameters [0];  				var t2 = duel.GenericParameters [1];  				var t3 = duel.GenericParameters [2];    				Assert.AreEqual (t1' t2.Constraints [0].ConstraintType);  				Assert.AreEqual (t2' t3.Constraints [0].ConstraintType);  			});
Magic Number,Mono.Cecil.Tests,TypeTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\TypeTests.cs,GenericConstraintOnGenericParameter,The following statement contains a magic number: TestCSharp ("Generics.cs"' module => {  				var duel = module.GetType ("Duel`3");    				Assert.AreEqual (3' duel.GenericParameters.Count);    				var t1 = duel.GenericParameters [0];  				var t2 = duel.GenericParameters [1];  				var t3 = duel.GenericParameters [2];    				Assert.AreEqual (t1' t2.Constraints [0].ConstraintType);  				Assert.AreEqual (t2' t3.Constraints [0].ConstraintType);  			});
Magic Number,Mono.Cecil.Tests,VariableTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\VariableTests.cs,RemoveAtVariableIndex,The following statement contains a magic number: Assert.AreEqual (2' z.Index);
Magic Number,Mono.Cecil.Tests,VariableTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\VariableTests.cs,RemoveVariableIndex,The following statement contains a magic number: Assert.AreEqual (2' z.Index);
Magic Number,Mono.Cecil.Tests,VariableTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\VariableTests.cs,InsertVariableIndex,The following statement contains a magic number: Assert.AreEqual (2' z.Index);
Duplicate Code,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,EmbeddedSource,The method contains a code clone-set at the following line numbers (starting from the method definition): ((13' 32)' (14' 33)' (15' 34)' (16' 35)' (17' 36))
Duplicate Code,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,EmbeddedSource,The method contains a code clone-set at the following line numbers (starting from the method definition): ((13' 35)' (14' 36))
Duplicate Code,Mono.Cecil.Tests,PortablePdbTests,D:\research\architectureSmells\repos\jbevain_cecil\Test\Mono.Cecil.Tests\PortablePdbTests.cs,EmbeddedSource,The method contains a code clone-set at the following line numbers (starting from the method definition): ((13' 32)' (15' 34)' (16' 35)' (17' 36))
