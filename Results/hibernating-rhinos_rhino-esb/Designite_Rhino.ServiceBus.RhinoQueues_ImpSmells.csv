Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,ReceiveMessage,The method has 113 lines of code.
Long Parameter List,Rhino.ServiceBus.RhinoQueues,RhinoQueuesOneWayBus,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesOneWayBus.cs,RhinoQueuesOneWayBus,The method has 6 parameters. Parameters: messageOwners' messageSerializer' path' enablePerformanceCounters' messageBuilder' queueManagerConfiguration
Long Parameter List,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,RhinoQueuesTransport,The method has 10 parameters. Parameters: endpoint' endpointRouter' messageSerializer' threadCount' path' queueIsolationLevel' numberOfRetries' enablePerformanceCounters' messageBuilder' queueManagerConfiguration
Long Parameter List,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,ProcessMessage,The method has 6 parameters. Parameters: message' tx' messageRecieved' messageCompleted' beforeTransactionCommit' beforeTransactionRollback
Long Identifier,Rhino.ServiceBus.RhinoQueues,PhtSubscriptionStorage,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\PhtSubscriptionStorage.cs,,The length of the parameter currentlyLoadingPersistentData is 30.
Long Identifier,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,SelectAvailablePort,The length of the parameter START_OF_IANA_PRIVATE_PORT_RANGE is 32.
Long Identifier,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,SelectAvailablePort,The length of the parameter orderedListOfPrivateInUserTcpPorts is 34.
Long Statement,Rhino.ServiceBus.Config,RhinoQueuesOneWayBusConfigurationAware,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\Config\RhinoQueuesOneWayBusConfigurationAware.cs,RegisterRhinoQueuesOneWay,The length of the statement  "            b.RegisterSingleton<IMessageBuilder<MessagePayload>>(() => (IMessageBuilder<MessagePayload>)new RhinoQueuesMessageBuilder( " is 122.
Long Statement,Rhino.ServiceBus.Config,RhinoQueuesConfigurationAware,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\Config\RhinoQueuesConfigurationAware.cs,RegisterRhinoQueuesTransport,The length of the statement  "            b.RegisterSingleton<IMessageBuilder<MessagePayload>>(() => (IMessageBuilder<MessagePayload>)new RhinoQueuesMessageBuilder( " is 122.
Long Statement,Rhino.ServiceBus.RhinoQueues,RhinoQueuesMessageBuilder,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesMessageBuilder.cs,BuildFromMessageBatch,The length of the statement  "                throw new InvalidOperationException("A source endpoint is required for Rhino Queues transport' did you Initialize me? try providing a null Uri.");" is 146.
Long Statement,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,Start,The length of the statement  "                endpoint = new Uri(endpoint.OriginalString.Replace(endpoint.Host + ":" + ANY_AVAILABLE_PORT' endpoint.Host + ":" + port)); " is 122.
Long Statement,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,ProcessMessage,The length of the statement  "                var messageHandlingCompletion = new MessageHandlingCompletion(tx' null' ex' messageCompleted' beforeTransactionCommit' beforeTransactionRollback' logger' " is 153.
Empty Catch Block,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,ConfigureAndStartQueueManagerOnAnyAvailablePort,The method has an empty catch block.
Magic Number,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,DisposeQueueManager,The following statement contains a magic number: if (queueManager != null)              {                  const int retries = 5;                  int tries = 0;                  bool disposeRudely = false;                  while (true)                  {                      try                      {                          queueManager.Dispose();                          break;                      }                      catch (EsentErrorException e)                      {                          tries += 1;                          if (tries > retries)                          {                              disposeRudely = true;                              break;                          }                          if (e.Error != JET_err.TooManyActiveUsers)                              throw;                          // let the other threads a chance to complete their work                          Thread.Sleep(50);                      }                  }                  if (disposeRudely)                      queueManager.DisposeRudely();              }
Magic Number,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,DisposeQueueManager,The following statement contains a magic number: if (queueManager != null)              {                  const int retries = 5;                  int tries = 0;                  bool disposeRudely = false;                  while (true)                  {                      try                      {                          queueManager.Dispose();                          break;                      }                      catch (EsentErrorException e)                      {                          tries += 1;                          if (tries > retries)                          {                              disposeRudely = true;                              break;                          }                          if (e.Error != JET_err.TooManyActiveUsers)                              throw;                          // let the other threads a chance to complete their work                          Thread.Sleep(50);                      }                  }                  if (disposeRudely)                      queueManager.DisposeRudely();              }
Magic Number,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,Start,The following statement contains a magic number: if (port == -1)                  port = 2200;
Magic Number,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,ConfigureAndStartQueueManagerOnAnyAvailablePort,The following statement contains a magic number: while (true)              {                  port = SelectAvailablePort();                  try                  {                      ConfigureAndStartQueueManager(port);                      break;                  }                  catch (SocketException ex)                  {                      if (ex.Message == "Only one usage of each socket address (protocol/network address/port) is normally permitted")                      {                          try                          {                              queueManager.Dispose();                              Thread.Sleep(1000); //allow time for queue storage to be release                          }                           catch{ }                          //Another process managed to grab our selected port before we could open it' so try again                          continue;                      }                      throw;                  }              }
Magic Number,Rhino.ServiceBus.RhinoQueues,RhinoQueuesTransport,C:\repos\hibernating-rhinos_rhino-esb\Rhino.ServiceBus.RhinoQueues\RhinoQueues\RhinoQueuesTransport.cs,SelectAvailablePort,The following statement contains a magic number: const int START_OF_IANA_PRIVATE_PORT_RANGE = 49152;
