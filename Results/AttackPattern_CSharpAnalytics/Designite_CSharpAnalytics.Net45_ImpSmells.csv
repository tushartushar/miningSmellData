Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSharpAnalytics.Protocols.Measurement,MeasurementActivityParameterBuilder,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Protocols\Measurement\MeasurementActivityParameterBuilder.cs,GetActivityParameters,Cyclomatic complexity of the method is 9
Complex Method,CSharpAnalytics.Protocols.Measurement,MeasurementActivityParameterBuilder,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Protocols\Measurement\MeasurementActivityParameterBuilder.cs,GetParameters,Cyclomatic complexity of the method is 9
Long Parameter List,CSharpAnalytics.Activities,ContentViewActivity,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Activities\ContentViewActivity.cs,ContentViewActivity,The method has 5 parameters. Parameters: documentLocation' documentTitle' contentDescription' documentPath' documentHostName
Long Parameter List,CSharpAnalytics.Activities,EventActivity,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Activities\EventActivity.cs,EventActivity,The method has 5 parameters. Parameters: action' category' label' value' nonInteraction
Long Parameter List,CSharpAnalytics.Activities,TransactionItemActivity,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Activities\TransactionItemActivity.cs,TransactionItemActivity,The method has 5 parameters. Parameters: code' name' price' quantity' variation
Long Parameter List,CSharpAnalytics.Activities,TransactionItemExtensions,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Activities\TransactionItemActivity.cs,AddItem,The method has 6 parameters. Parameters: transaction' code' name' price' quantity' variation
Long Parameter List,CSharpAnalytics.Protocols.Measurement,MeasurementAnalyticsClient,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Protocols\Measurement\MeasurementAnalyticsClient.cs,TrackContentView,The method has 5 parameters. Parameters: documentLocation' documentTitle' contentDescription' documentPath' documentHostName
Long Parameter List,CSharpAnalytics.Protocols.Measurement,MeasurementAnalyticsClient,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Protocols\Measurement\MeasurementAnalyticsClient.cs,TrackEvent,The method has 5 parameters. Parameters: action' category' label' value' nonInteraction
Long Statement,CSharpAnalytics,BaseAutoMeasurement,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\AutoMeasurement\BaseAutoMeasurement.cs,SetOptOut,The length of the statement  "                System.Diagnostics.Debug.WriteLine("Switching VisitorStatus from {0} to {1}"' sessionManager.VisitorStatus' newVisitorStatus); " is 126.
Long Statement,CSharpAnalytics,BaseAutoMeasurement,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\AutoMeasurement\BaseAutoMeasurement.cs,GetScreenName,The length of the statement  "            var screenNameAttribute = page.GetTypeInfo().GetCustomAttribute(typeof(AnalyticsScreenNameAttribute)) as AnalyticsScreenNameAttribute; " is 134.
Long Statement,CSharpAnalytics.Network,BackgroundUriRequester,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Network\BackgroundUriRequester.cs,Start,The length of the statement  "            backgroundTask = Task.Factory.StartNew(RequestLoop' cancellationTokenSource.Token' TaskCreationOptions.LongRunning' TaskScheduler.Default); " is 139.
Long Statement,CSharpAnalytics.Network,HttpClientRequester,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Network\HttpClientRequester.cs,CreateRequest,The length of the statement  "            var uriWithoutQuery = new Uri(uri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.Unescaped)); " is 122.
Long Statement,CSharpAnalytics.Network,HttpClientRequester,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Network\HttpClientRequester.cs,CreateRequest,The length of the statement  "            return new HttpRequestMessage(HttpMethod.Post' uriWithoutQuery) { Content = new StringContent(uri.GetComponents(UriComponents.Query' UriFormat.UriEscaped)) }; " is 158.
Long Statement,CSharpAnalytics.Network,HttpWebRequester,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Network\HttpWebRequester.cs,CreatePostRequest,The length of the statement  "            var uriWithoutQuery = new Uri(requestUri.GetComponents(UriComponents.SchemeAndServer | UriComponents.Path' UriFormat.Unescaped)); " is 129.
Long Statement,CSharpAnalytics.Protocols.Measurement,MeasurementUriBuilder,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Protocols\Measurement\MeasurementUriBuilder.cs,GetParameters,The length of the statement  "            yield return KeyValuePair.Create("de"' environment.CharacterSet == null ? "-" : environment.CharacterSet.ToUpperInvariant()); " is 125.
Long Statement,CSharpAnalytics.Protocols.Measurement,MeasurementUriBuilder,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Protocols\Measurement\MeasurementUriBuilder.cs,GetParameters,The length of the statement  "                yield return KeyValuePair.Create("sr"' string.Format(ResolutionFormat' environment.ScreenWidth' environment.ScreenHeight)); " is 123.
Long Statement,CSharpAnalytics.Protocols.Measurement,MeasurementUriBuilder,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Protocols\Measurement\MeasurementUriBuilder.cs,GetParameters,The length of the statement  "                yield return KeyValuePair.Create("vp"' string.Format(ResolutionFormat' environment.ViewportWidth' environment.ViewportHeight)); " is 127.
Empty Catch Block,CSharpAnalytics.Network,BackgroundUriRequester,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Network\BackgroundUriRequester.cs,RequestLoop,The method has an empty catch block.
Magic Number,CSharpAnalytics,BaseAutoMeasurement,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\AutoMeasurement\BaseAutoMeasurement.cs,Start,The following statement contains a magic number: if (!isStarted)              {                  isStarted = true;                  lastUploadInterval = uploadInterval ?? TimeSpan.FromSeconds(5);                    var sessionState = await Load<SessionState>(SessionStorageName);                  sessionManager = new SessionManager(sessionState' configuration.SampleRate);  				await StartRequesterAsync();    				if (delayedOptOut != null) SetOptOut(delayedOptOut.Value);                    Client.Configure(configuration' sessionManager' GetEnvironment()' Add);                    // Sometimes apps crash so preserve at least session number and visitor id on launch                  await Save(sessionManager.GetState()' SessionStorageName);                    HookEvents();              }
Magic Number,CSharpAnalytics,BaseAutoMeasurement,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\AutoMeasurement\BaseAutoMeasurement.cs,GetScreenName,The following statement contains a magic number: if (screenName.EndsWith("Page"))                  screenName = screenName.Substring(0' screenName.Length - 4);
Magic Number,CSharpAnalytics.Debugging,ProtocolDebugger,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Debugging\ProtocolDebugger.cs,DumpParameter,The following statement contains a magic number: if (!String.IsNullOrWhiteSpace(formattedValue))                  writer(label.PadRight(24) + ": " + formattedValue);
Magic Number,CSharpAnalytics.Serializers,AppDataContractSerializer,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Serializers\AppDataContractSerializer.cs,Restore,The following statement contains a magic number: try              {                  var file = GetFilePath<T>(filename);                    try                  {                      using (var inputStream = new FileStream(file' FileMode.Open' FileAccess.Read' FileShare.Read' 4096' true))                      {                          if (inputStream.Length == 0)                          {                              return default(T);                          }                            using (var memoryStream = new MemoryStream())                          {                              await inputStream.CopyToAsync(memoryStream);                              await inputStream.FlushAsync();                              memoryStream.Seek(0' SeekOrigin.Begin);                                return (T)serializer.ReadObject(memoryStream);                          }                      }                  }                  catch (SerializationException)                  {                      if (deleteBadData)                          File.Delete(file);                      throw;                  }              }              catch (FileNotFoundException)              {                  return default(T);              }
Magic Number,CSharpAnalytics.Serializers,AppDataContractSerializer,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Serializers\AppDataContractSerializer.cs,Save,The following statement contains a magic number: using (var memoryStream = new MemoryStream())              {                  serializer.WriteObject(memoryStream' value);                    using (var fileStream = new FileStream(file' FileMode.Create' FileAccess.Write' FileShare.None' 4096' true))                  {                      memoryStream.Seek(0' SeekOrigin.Begin);                      await memoryStream.CopyToAsync(fileStream);                      await fileStream.FlushAsync();                  }              }
Magic Number,CSharpAnalytics.Sessions,SessionManager,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Sessions\SessionManager.cs,ShouldTrackThisNewVisitor,The following statement contains a magic number: if (sampleRate >= 100.0) return true;
Magic Number,CSharpAnalytics.SystemInfo,WindowsSystemInfo,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\SystemInfo\WindowsSystemInfo.cs,GetPlatform,The following statement contains a magic number: switch (sysInfo.ProcessorArchitecture)              {                  case 0:                      return "x86";                  case 6:                      return "IA64";                  case 9:                      return "x64";                  default:                      return string.Empty;              }
Magic Number,CSharpAnalytics.SystemInfo,WindowsSystemInfo,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\SystemInfo\WindowsSystemInfo.cs,GetPlatform,The following statement contains a magic number: switch (sysInfo.ProcessorArchitecture)              {                  case 0:                      return "x86";                  case 6:                      return "IA64";                  case 9:                      return "x64";                  default:                      return string.Empty;              }
Missing Default,CSharpAnalytics.Sessions,SessionManager,C:\repos\AttackPattern_CSharpAnalytics\Source\CSharpAnalytics\Sessions\SessionManager.cs,MoveToNextSessionStatus,The following switch statement is missing a default case: switch (SessionStatus)              {                  case SessionStatus.Ending:                      SessionStatus = SessionStatus.Starting;                      break;                  case SessionStatus.Starting:                      SessionStatus = SessionStatus.Active;                      break;              }
