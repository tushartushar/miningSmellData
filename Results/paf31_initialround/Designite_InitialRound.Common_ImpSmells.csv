Implementation smell,Namespace,Class,File,Method,Description
Complex Method,InitialRound.Common.Helpers,CSVReader,C:\repos\paf31_initialround\InitialRound.Common\Helpers\CSVReader.cs,Read,Cyclomatic complexity of the method is 21
Long Parameter List,InitialRound.Common.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.Common\Controllers\DataController.cs,Query,The method has 6 parameters.
Long Parameter List,InitialRound.Common.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.Common\Controllers\DataController.cs,Get,The method has 6 parameters.
Long Parameter List,InitialRound.Common.Extensions,EnumerableExtensions,C:\repos\paf31_initialround\InitialRound.Common\Extensions\EnumerableExtensions.cs,Shuffle,The method has 6 parameters.
Long Statement,InitialRound.Common.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.Common\Controllers\DataController.cs,Query,The length of the statement  "	IQueryable<TEntity> allEntities = serviceContext.CreateQuery<TEntity> (entitySetName.Name).Where (a => a.PartitionKey == partitionKey); " is 135.
Long Statement,InitialRound.Common.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.Common\Controllers\DataController.cs,Get,The length of the statement  "	return serviceContext.CreateQuery<TEntity> (entitySetName.Name).Where (a => a.PartitionKey == partitionKey).Where (a => a.RowKey == rowKey).FirstOrDefault (); " is 158.
Long Statement,InitialRound.Common.Extensions,EnumExtensions,C:\repos\paf31_initialround\InitialRound.Common\Extensions\EnumExtensions.cs,GetDescription,The length of the statement  "	return typeof(TEnum).GetFields (BindingFlags.Public | BindingFlags.Static).Where (f => f.GetValue (null).Equals (value)).SelectMany (f => f.GetCustomAttributes (false).OfType<DescriptionAttribute> ()).Select (d => d.Description).FirstOrDefault (); " is 247.
Long Statement,InitialRound.Common.Helpers,ValidationHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\ValidationHelper.cs,ValidateStringLength,The length of the statement  "	Assert (value == null || value.Length <= maxLength' string.Format ("{0} must be less than {1} characters long."' fieldName' maxLength)); " is 136.
Long Statement,InitialRound.Common.Helpers,ValidationHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\ValidationHelper.cs,ValidateMinStringLength,The length of the statement  "	Assert (value == null || value.Length >= minLength' string.Format ("{0} must be at least {1} characters long."' fieldName' minLength)); " is 135.
Long Statement,InitialRound.Common.Helpers,ValidationHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\ValidationHelper.cs,ValidateUsername,The length of the statement  "	Assert (username != null && username.Length >= 4 && username.All (char.IsLetterOrDigit)' "Your username must contain at least four characters and consist of only letters and digits."); " is 184.
Magic Number,InitialRound.Common.Extensions,RandomExtensions,C:\repos\paf31_initialround\InitialRound.Common\Extensions\RandomExtensions.cs,NextString,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	builder.Append ((char)('a' + random.Next (26)));  }  
Magic Number,InitialRound.Common.Extensions,RandomExtensions,C:\repos\paf31_initialround\InitialRound.Common\Extensions\RandomExtensions.cs,NextString,The following statement contains a magic number: builder.Append ((char)('a' + random.Next (26)));  
Magic Number,InitialRound.Common.Helpers,CSVReader,C:\repos\paf31_initialround\InitialRound.Common\Helpers\CSVReader.cs,Read,The following statement contains a magic number: for (int i = 0; i < csv.Length; i++) {  	char c = csv [i];  	switch (c) {  	case '"':  		if (insideQuote) {  			if (i <= csv.Length - 2 && csv [i + 1] == '"') {  				i++;  				currentCell.Append ('"');  			}  			else {  				insideQuote = false;  			}  		}  		else {  			insideQuote = true;  		}  		break;  	case ''':  		if (insideQuote) {  			currentCell.Append (''');  		}  		else {  			currentRow.Add (currentCell.ToString ());  			currentCell.Clear ();  		}  		break;  	case '\r':  		if (insideQuote) {  			currentCell.Append (c);  		}  		break;  	case '\n':  		if (insideQuote) {  			currentCell.Append (c);  		}  		else {  			currentRow.Add (currentCell.ToString ());  			currentCell.Clear ();  			yield return currentRow.ToArray ();  			currentRow.Clear ();  		}  		break;  	default:  		currentCell.Append (c);  		break;  	}  }  
Magic Number,InitialRound.Common.Helpers,CSVReader,C:\repos\paf31_initialround\InitialRound.Common\Helpers\CSVReader.cs,Read,The following statement contains a magic number: switch (c) {  case '"':  	if (insideQuote) {  		if (i <= csv.Length - 2 && csv [i + 1] == '"') {  			i++;  			currentCell.Append ('"');  		}  		else {  			insideQuote = false;  		}  	}  	else {  		insideQuote = true;  	}  	break;  case ''':  	if (insideQuote) {  		currentCell.Append (''');  	}  	else {  		currentRow.Add (currentCell.ToString ());  		currentCell.Clear ();  	}  	break;  case '\r':  	if (insideQuote) {  		currentCell.Append (c);  	}  	break;  case '\n':  	if (insideQuote) {  		currentCell.Append (c);  	}  	else {  		currentRow.Add (currentCell.ToString ());  		currentCell.Clear ();  		yield return currentRow.ToArray ();  		currentRow.Clear ();  	}  	break;  default:  	currentCell.Append (c);  	break;  }  
Magic Number,InitialRound.Common.Helpers,CSVReader,C:\repos\paf31_initialround\InitialRound.Common\Helpers\CSVReader.cs,Read,The following statement contains a magic number: if (insideQuote) {  	if (i <= csv.Length - 2 && csv [i + 1] == '"') {  		i++;  		currentCell.Append ('"');  	}  	else {  		insideQuote = false;  	}  }  else {  	insideQuote = true;  }  
Magic Number,InitialRound.Common.Helpers,CSVReader,C:\repos\paf31_initialround\InitialRound.Common\Helpers\CSVReader.cs,Read,The following statement contains a magic number: if (i <= csv.Length - 2 && csv [i + 1] == '"') {  	i++;  	currentCell.Append ('"');  }  else {  	insideQuote = false;  }  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,EncryptBytes,The following statement contains a magic number: using (RijndaelManaged rijndael = new RijndaelManaged ()) {  	rijndael.KeySize = 256;  	rijndael.BlockSize = 128;  	rijndael.Mode = CipherMode.CBC;  	rijndael.Padding = PaddingMode.ISO10126;  	return rijndael.CreateEncryptor (keyBytes' vectorBytes).TransformFinalBlock (bytes' 0' bytes.Length);  }  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,EncryptBytes,The following statement contains a magic number: using (RijndaelManaged rijndael = new RijndaelManaged ()) {  	rijndael.KeySize = 256;  	rijndael.BlockSize = 128;  	rijndael.Mode = CipherMode.CBC;  	rijndael.Padding = PaddingMode.ISO10126;  	return rijndael.CreateEncryptor (keyBytes' vectorBytes).TransformFinalBlock (bytes' 0' bytes.Length);  }  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,EncryptBytes,The following statement contains a magic number: rijndael.KeySize = 256;  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,EncryptBytes,The following statement contains a magic number: rijndael.BlockSize = 128;  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,DecryptBytes,The following statement contains a magic number: using (RijndaelManaged rijndael = new RijndaelManaged ()) {  	rijndael.KeySize = 256;  	rijndael.BlockSize = 128;  	rijndael.Mode = CipherMode.CBC;  	rijndael.Padding = PaddingMode.ISO10126;  	return rijndael.CreateDecryptor (keyBytes' vectorBytes).TransformFinalBlock (encryptedBytes' 0' encryptedBytes.Length);  }  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,DecryptBytes,The following statement contains a magic number: using (RijndaelManaged rijndael = new RijndaelManaged ()) {  	rijndael.KeySize = 256;  	rijndael.BlockSize = 128;  	rijndael.Mode = CipherMode.CBC;  	rijndael.Padding = PaddingMode.ISO10126;  	return rijndael.CreateDecryptor (keyBytes' vectorBytes).TransformFinalBlock (encryptedBytes' 0' encryptedBytes.Length);  }  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,DecryptBytes,The following statement contains a magic number: rijndael.KeySize = 256;  
Magic Number,InitialRound.Common.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\EncryptionHelper.cs,DecryptBytes,The following statement contains a magic number: rijndael.BlockSize = 128;  
Magic Number,InitialRound.Common.Helpers,RandomHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\RandomHelper.cs,RandomLong,The following statement contains a magic number: using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ()) {  	byte[] bytes = new byte[8];  	rng.GetBytes (bytes);  	long int64 = 0;  	foreach (byte b in bytes) {  		int64 = (int64 << 8) | b;  	}  	return int64;  }  
Magic Number,InitialRound.Common.Helpers,RandomHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\RandomHelper.cs,RandomLong,The following statement contains a magic number: using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ()) {  	byte[] bytes = new byte[8];  	rng.GetBytes (bytes);  	long int64 = 0;  	foreach (byte b in bytes) {  		int64 = (int64 << 8) | b;  	}  	return int64;  }  
Magic Number,InitialRound.Common.Helpers,RandomHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\RandomHelper.cs,RandomLong,The following statement contains a magic number: foreach (byte b in bytes) {  	int64 = (int64 << 8) | b;  }  
Magic Number,InitialRound.Common.Helpers,RandomHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\RandomHelper.cs,RandomLong,The following statement contains a magic number: int64 = (int64 << 8) | b;  
Magic Number,InitialRound.Common.Helpers,ValidationHelper,C:\repos\paf31_initialround\InitialRound.Common\Helpers\ValidationHelper.cs,ValidateUsername,The following statement contains a magic number: Assert (username != null && username.Length >= 4 && username.All (char.IsLetterOrDigit)' "Your username must contain at least four characters and consist of only letters and digits.");  
