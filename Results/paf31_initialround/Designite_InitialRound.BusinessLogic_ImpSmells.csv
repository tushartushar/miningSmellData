Implementation smell,Namespace,Class,File,Method,Description
Complex Method,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,MaxWaterLevel,Cyclomatic complexity of the method is 10
Complex Method,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,Cyclomatic complexity of the method is 10
Long Parameter List,InitialRound.BusinessLogic.Classes,AuthToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AuthToken.cs,AuthToken,The method has 5 parameters.
Long Parameter List,InitialRound.BusinessLogic.CodedTests,BuyingWater,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\BuyingWater.cs,BuyingWater,The method has 9 parameters.
Long Parameter List,InitialRound.BusinessLogic.CodedTests,BuyingWater,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\BuyingWater.cs,ValidateOutput,The method has 6 parameters.
Long Parameter List,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,LargestInitialSegmentMedian,The method has 5 parameters.
Long Parameter List,InitialRound.BusinessLogic.CodedTests,Outliers,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Outliers.cs,Outliers,The method has 7 parameters.
Long Parameter List,InitialRound.BusinessLogic.CodedTests,Outliers,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Outliers.cs,ValidateOutput,The method has 8 parameters.
Long Parameter List,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,SortedLCS,The method has 6 parameters.
Long Parameter List,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,GenerateTestCase,The method has 7 parameters.
Long Parameter List,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendInvitationEmail,The method has 7 parameters.
Long Parameter List,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendInvitationEmail,The method has 6 parameters.
Long Parameter List,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendInterviewCompletedEmail,The method has 5 parameters.
Long Parameter List,InitialRound.BusinessLogic.Controllers,PracticeController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\PracticeController.cs,ValidateOutput,The method has 5 parameters.
Long Parameter List,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,UpdateUser,The method has 6 parameters.
Long Parameter List,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,CreateUser,The method has 7 parameters.
Long Parameter List,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,CreateUser,The method has 7 parameters.
Long Statement,InitialRound.BusinessLogic.Classes,AntiForgeryToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AntiForgeryToken.cs,ToString,The length of the statement  "	return string.Format ("[Username='{0}'' IPAddress='{1}'' ExpiresOn={2}' Random={3}]"' Username' IPAddress' ExpiresOn' Random); " is 126.
Long Statement,InitialRound.BusinessLogic.Classes,AuthToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AuthToken.cs,ToString,The length of the statement  "	return string.Format ("[Username='{0}'' IPAddress='{1}'' ExpiresOn={2}' IsAdmin={3}' Random={4}]"' Username' IPAddress' ExpiresOn' IsAdmin' Random); " is 148.
Long Statement,InitialRound.BusinessLogic.CodedTests,BuyingWater,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\BuyingWater.cs,ToInput,The length of the statement  "	return string.Format ("{0};{1}"' testData.Money' string.Join (";"' testData.Values.Select (v => string.Format ("{0}'{1}"' v.PricePerUnit' v.AvailableUnits)))); " is 159.
Long Statement,InitialRound.BusinessLogic.CodedTests,BuyingWater,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\BuyingWater.cs,ValidateOutput,The length of the statement  "	while (values.Any (v => v.AvailableUnits > 0) && remainingMoney >= values.Where (v => v.AvailableUnits > 0).Select (v => v.PricePerUnit).Min ()) { " is 146.
Long Statement,InitialRound.BusinessLogic.CodedTests,BuyingWater,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\BuyingWater.cs,ValidateOutput,The length of the statement  "			int unitsPurchasedAtThisPrice = Math.Min (values [minIndex].AvailableUnits' remainingMoney / values [minIndex].PricePerUnit); " is 125.
Long Statement,InitialRound.BusinessLogic.CodedTests,GeneralizedFizzBuzz,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\GeneralizedFizzBuzz.cs,ToInput,The length of the statement  "	return string.Format ("{0};{1}"' string.Join ("'"' testData.Divisors.Select (d => d.Item1))' string.Join ("'"' testData.Divisors.Select (d => d.Item2))); " is 153.
Long Statement,InitialRound.BusinessLogic.CodedTests,LineByLineCodedTest,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LineByLineCodedTest.cs,RunTests,The length of the statement  "		throw new ValidationException (string.Format ("Invalid output. Expected {0} lines' found {1}."' testCases.Length' outputs.Length)); " is 131.
Long Statement,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The length of the statement  "			heights [i' j] = (heights [i - 1' j] + heights [i' j - 1] + heights [i - 1' j - 1]) / 3 + random.Next (roughness * 2 + 1) - roughness; " is 134.
Long Statement,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,ToInput,The length of the statement  "	return string.Join (";"' Enumerable.Range (0' testData.Dimensions).Select (y => string.Join ("'"' Enumerable.Range (0' testData.Dimensions).Select (x => testData.Heights [x' y])))); " is 181.
Long Statement,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,GenerateTestCase,The length of the statement  "	var numberOfCommonValues = minNumberOfCommonValues + random.Next (maxNumberOfCommonValues - minNumberOfCommonValues + 1); " is 121.
Long Statement,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,GenerateTestCase,The length of the statement  "	var numberOfAdditionalValues1 = minNumberOfAdditionalValues + random.Next (maxNumberOfAdditionalValues - minNumberOfAdditionalValues + 1); " is 138.
Long Statement,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,GenerateTestCase,The length of the statement  "	var numberOfAdditionalValues2 = minNumberOfAdditionalValues + random.Next (maxNumberOfAdditionalValues - minNumberOfAdditionalValues + 1); " is 138.
Long Statement,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,GenerateTestCase,The length of the statement  "	var common = Enumerable.Range (0' numberOfCommonValues).Select (_ => random.Next (maxValue)).OrderBy (n => n).ToArray (); " is 121.
Long Statement,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,GenerateTestCase,The length of the statement  "	var values1 = Enumerable.Range (0' numberOfAdditionalValues1).Select (_ => random.Next (maxValue)).Concat (common).OrderBy (n => n).ToArray (); " is 143.
Long Statement,InitialRound.BusinessLogic.CodedTests,SortedLCS,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\SortedLCS.cs,GenerateTestCase,The length of the statement  "	var values2 = Enumerable.Range (0' numberOfAdditionalValues2).Select (_ => random.Next (maxValue)).Concat (common).OrderBy (n => n).ToArray (); " is 143.
Long Statement,InitialRound.BusinessLogic.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\DataController.cs,CreateTablesIfNecessary,The length of the statement  "	string tableStorageConnectionString = Microsoft.WindowsAzure.CloudConfigurationManager.GetSetting ("TableStorageConnectionString"); " is 131.
Long Statement,InitialRound.BusinessLogic.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\DataController.cs,CreateServiceContext,The length of the statement  "	string tableStorageConnectionString = Microsoft.WindowsAzure.CloudConfigurationManager.GetSetting ("TableStorageConnectionString"); " is 131.
Long Statement,InitialRound.BusinessLogic.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\DataController.cs,GetEmailQueue,The length of the statement  "	string queueStorageConnectionString = Microsoft.WindowsAzure.CloudConfigurationManager.GetSetting ("QueueStorageConnectionString"); " is 131.
Long Statement,InitialRound.BusinessLogic.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\DataController.cs,CreateBlobClient,The length of the statement  "	string blobStorageConnectionString = Microsoft.WindowsAzure.CloudConfigurationManager.GetSetting ("BlobStorageConnectionString"); " is 129.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendEmail,The length of the statement  "	using (SmtpClient smtpClient = new SmtpClient (CloudConfigurationManager.GetSetting ("SmtpHost")' int.Parse (CloudConfigurationManager.GetSetting ("SmtpPort")))) { " is 163.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendEmail,The length of the statement  "		smtpClient.Credentials = new NetworkCredential (CloudConfigurationManager.GetSetting ("SmtpUsername")' CloudConfigurationManager.GetSetting ("SmtpPassword")); " is 158.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendNewUserEmail,The length of the statement  "	string body = Interpolate (UserActivationTemplate' KeyValue.Of ("FullName"' fullName)' KeyValue.Of ("Username"' username)' KeyValue.Of ("LoginURL"' loginUrl)); " is 159.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendInvitationEmail,The length of the statement  "	string body = Interpolate (InvitationTemplate' KeyValue.Of ("SenderName"' senderFullName)' KeyValue.Of ("InterviewURI"' HttpUtility.UrlEncode (encryptedToken))); " is 161.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendInvitationEmail,The length of the statement  "	EmailController.SendInvitationEmail (interviewInfo.Applicant.FirstName' interviewInfo.Applicant.LastName' interviewInfo.Applicant.EmailAddress' userInfo.FirstName' userInfo.LastName' userInfo.EmailAddress' interviewId); " is 219.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendInterviewCompletedEmail,The length of the statement  "	string interviewUri = string.Format ("{0}Interviews/Details/{1}"' CloudConfigurationManager.GetSetting ("RootURI")' interviewId.ToString ()); " is 141.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendInterviewCompletedEmail,The length of the statement  "	string body = Interpolate (InterviewCompletedTemplate' KeyValue.Of ("RecipientName"' recipientName)' KeyValue.Of ("ApplicantName"' applicantName)' KeyValue.Of ("InterviewURI"' interviewUri)); " is 191.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendPasswordResetEmail,The length of the statement  "	string resetUri = string.Format ("{0}Account/CompletePasswordReset?Token={1}"' CloudConfigurationManager.GetSetting ("RootURI")' HttpUtility.UrlEncode (encryptedToken)); " is 169.
Long Statement,InitialRound.BusinessLogic.Controllers,EmailController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\EmailController.cs,SendPasswordResetEmail,The length of the statement  "	string body = Interpolate (ResetPasswordTemplate' KeyValue.Of ("FullName"' recipientName)' KeyValue.Of ("ResetURI"' resetUri)); " is 127.
Long Statement,InitialRound.BusinessLogic.Controllers,PracticeController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\PracticeController.cs,ValidateOutput,The length of the statement  "		throw new ValidationException (string.Format ("Invalid output. Expected {0} lines' found {1}."' input.Length' parsedOutput.Length)); " is 132.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,ValidateUser,The length of the statement  "		throw new AuthenticationException (string.Format ("Please wait at least {0} seconds between login attempts."' Settings.Default.MinTimeBetweenLoginAttempts.Seconds)); " is 165.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,ValidateUser,The length of the statement  "	if (DateTime.UtcNow - user.LastLoginDate < Settings.Default.AccountLockDuration && user.LoginAttempts > Settings.Default.MaxLoginAttempts) { " is 140.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,ValidateUser,The length of the statement  "		throw new AuthenticationException (string.Format ("Your account has been locked for {0} minutes due to too many incorrect login attempts."' Settings.Default.AccountLockDuration.Minutes)); " is 187.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,ValidateUser,The length of the statement  "		token = new AuthToken (username' GetCallerIPAddress ()' expiresOn' user.IsAdmin' Common.Helpers.RandomHelper.RandomLong ()); " is 124.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,ValidateUser,The length of the statement  "			throw new AuthenticationException (string.Format ("Your account has been locked for {0} minutes due to too many incorrect login attempts."' Settings.Default.AccountLockDuration.Minutes)); " is 187.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,KeepSessionAlive,The length of the statement  "	return new AuthToken (token.Username' GetCallerIPAddress ()' expiresOn' token.IsAdmin' Common.Helpers.RandomHelper.RandomLong ()); " is 130.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,NewAntiForgeryToken,The length of the statement  "	AntiForgeryToken antiForgeryToken = new AntiForgeryToken (username' GetCallerIPAddress ()' DateTime.UtcNow + Settings.Default.AntiForgeryTokenExpiryInterval' Common.Helpers.RandomHelper.RandomLong ()); " is 201.
Long Statement,InitialRound.BusinessLogic.Controllers,UserController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\UserController.cs,SendPasswordResetEmail,The length of the statement  "	EmailController.SendPasswordResetEmail (userInfo.FirstName' userInfo.LastName' userInfo.EmailAddress' userInfo.UserName); " is 121.
Long Statement,InitialRound.BusinessLogic.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Helpers\EncryptionHelper.cs,EncryptAntiForgeryToken,The length of the statement  "	return Common.Helpers.EncryptionHelper.EncryptBytes (plainText' Keys.Default.AntiForgeryKey' Keys.Default.AntiForgeryVector); " is 125.
Long Statement,InitialRound.BusinessLogic.Helpers,EncryptionHelper,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Helpers\EncryptionHelper.cs,DecryptAntiForgeryToken,The length of the statement  "	return Common.Helpers.EncryptionHelper.DecryptBytes (encryptedToken' Keys.Default.AntiForgeryKey' Keys.Default.AntiForgeryVector); " is 130.
Long Statement,InitialRound.BusinessLogic.Helpers,ValidationHelper,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Helpers\ValidationHelper.cs,ValidatePassword,The length of the statement  "	string message = string.Format ("Your password must be at least {0} characters long' and contain at least one upper case character' one lower case character and " + "one numeric digit."' Settings.Default.MinimumPasswordLength); " is 227.
Long Statement,InitialRound.BusinessLogic.Helpers,ValidationHelper,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Helpers\ValidationHelper.cs,ValidatePassword,The length of the statement  "	Common.Helpers.ValidationHelper.Assert (password != null && password.Length >= Settings.Default.MinimumPasswordLength && password.Any (char.IsUpper) && password.Any (char.IsLower) && password.Any (char.IsDigit)' message); " is 221.
Empty Catch Block,InitialRound.BusinessLogic.Helpers,ExceptionHelper,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Helpers\ExceptionHelper.cs,Log,The method has an empty catch block.
Magic Number,InitialRound.BusinessLogic.Classes,AttemptToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AttemptToken.cs,Serialize,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (token.InterviewQuestionID.ToByteArray ()' 0' 16);  	writer.Write (token.Random);  	writer.Write (token.MostRecentAttemptID.ToByteArray ()' 0' 16);  }  
Magic Number,InitialRound.BusinessLogic.Classes,AttemptToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AttemptToken.cs,Serialize,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (token.InterviewQuestionID.ToByteArray ()' 0' 16);  	writer.Write (token.Random);  	writer.Write (token.MostRecentAttemptID.ToByteArray ()' 0' 16);  }  
Magic Number,InitialRound.BusinessLogic.Classes,AttemptToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AttemptToken.cs,Serialize,The following statement contains a magic number: writer.Write (token.InterviewQuestionID.ToByteArray ()' 0' 16);  
Magic Number,InitialRound.BusinessLogic.Classes,AttemptToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AttemptToken.cs,Serialize,The following statement contains a magic number: writer.Write (token.MostRecentAttemptID.ToByteArray ()' 0' 16);  
Magic Number,InitialRound.BusinessLogic.Classes,AttemptToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AttemptToken.cs,Deserialize,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (stream)) {  	var interviewQuestionId = reader.ReadBytes (16);  	var random = reader.ReadInt64 ();  	var mostRecentAttemptId = reader.ReadBytes (16);  	return new AttemptToken (new Guid (interviewQuestionId)' random' new Guid (mostRecentAttemptId));  }  
Magic Number,InitialRound.BusinessLogic.Classes,AttemptToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\AttemptToken.cs,Deserialize,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (stream)) {  	var interviewQuestionId = reader.ReadBytes (16);  	var random = reader.ReadInt64 ();  	var mostRecentAttemptId = reader.ReadBytes (16);  	return new AttemptToken (new Guid (interviewQuestionId)' random' new Guid (mostRecentAttemptId));  }  
Magic Number,InitialRound.BusinessLogic.Classes,InterviewToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\InterviewToken.cs,Serialize,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream)) {  	writer.Write (token.InterviewID.ToByteArray ()' 0' 16);  	writer.Write (token.Random);  }  
Magic Number,InitialRound.BusinessLogic.Classes,InterviewToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\InterviewToken.cs,Serialize,The following statement contains a magic number: writer.Write (token.InterviewID.ToByteArray ()' 0' 16);  
Magic Number,InitialRound.BusinessLogic.Classes,InterviewToken,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Classes\InterviewToken.cs,Deserialize,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (stream)) {  	var interviewId = reader.ReadBytes (16);  	var random = reader.ReadInt64 ();  	return new InterviewToken (new Guid (interviewId)' random);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,GeneralizedFizzBuzz,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\GeneralizedFizzBuzz.cs,GenerateTestCase,The following statement contains a magic number: for (int i = 0; i < numberOfDivisors; i++) {  	int divisor = 2 + random.Next (maxDivisor - 2);  	string word = random.NextString (wordSize);  	divisors [i] = Tuple.Create (divisor' word);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,GeneralizedFizzBuzz,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\GeneralizedFizzBuzz.cs,GenerateTestCase,The following statement contains a magic number: for (int i = 0; i < numberOfDivisors; i++) {  	int divisor = 2 + random.Next (maxDivisor - 2);  	string word = random.NextString (wordSize);  	divisors [i] = Tuple.Create (divisor' word);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,GeneralizedFizzBuzz,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\GeneralizedFizzBuzz.cs,ValidateOutput,The following statement contains a magic number: for (int i = 1; i <= 100; i++) {  	foreach (var divisor in testData.Divisors) {  		if (i % divisor.Item1 == 0) {  			parts.Add (divisor.Item2);  			break;  		}  	}  	parts.Add (i.ToString ());  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: foreach (var value in testData.Values) {  	values.Add (Tuple.Create (value' index++)' value);  	int median;  	if (values.Count % 2 == 0) {  		median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  	}  	else {  		median = values.Values.ElementAt ((values.Count - 1) / 2);  	}  	if (median > maxMedian) {  		maxMedian = median;  	}  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: foreach (var value in testData.Values) {  	values.Add (Tuple.Create (value' index++)' value);  	int median;  	if (values.Count % 2 == 0) {  		median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  	}  	else {  		median = values.Values.ElementAt ((values.Count - 1) / 2);  	}  	if (median > maxMedian) {  		maxMedian = median;  	}  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: foreach (var value in testData.Values) {  	values.Add (Tuple.Create (value' index++)' value);  	int median;  	if (values.Count % 2 == 0) {  		median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  	}  	else {  		median = values.Values.ElementAt ((values.Count - 1) / 2);  	}  	if (median > maxMedian) {  		maxMedian = median;  	}  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: foreach (var value in testData.Values) {  	values.Add (Tuple.Create (value' index++)' value);  	int median;  	if (values.Count % 2 == 0) {  		median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  	}  	else {  		median = values.Values.ElementAt ((values.Count - 1) / 2);  	}  	if (median > maxMedian) {  		maxMedian = median;  	}  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: foreach (var value in testData.Values) {  	values.Add (Tuple.Create (value' index++)' value);  	int median;  	if (values.Count % 2 == 0) {  		median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  	}  	else {  		median = values.Values.ElementAt ((values.Count - 1) / 2);  	}  	if (median > maxMedian) {  		maxMedian = median;  	}  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: if (values.Count % 2 == 0) {  	median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  }  else {  	median = values.Values.ElementAt ((values.Count - 1) / 2);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: if (values.Count % 2 == 0) {  	median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  }  else {  	median = values.Values.ElementAt ((values.Count - 1) / 2);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: if (values.Count % 2 == 0) {  	median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  }  else {  	median = values.Values.ElementAt ((values.Count - 1) / 2);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: if (values.Count % 2 == 0) {  	median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  }  else {  	median = values.Values.ElementAt ((values.Count - 1) / 2);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: if (values.Count % 2 == 0) {  	median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  }  else {  	median = values.Values.ElementAt ((values.Count - 1) / 2);  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: median = (values.Values.ElementAt (values.Count / 2) + values.Values.ElementAt (values.Count / 2 - 1)) / 2;  
Magic Number,InitialRound.BusinessLogic.CodedTests,LargestInitialSegmentMedian,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\LargestInitialSegmentMedian.cs,Solve,The following statement contains a magic number: median = values.Values.ElementAt ((values.Count - 1) / 2);  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: for (int i = 1; i < dimensions; i++) {  	heights [i' 0] = heights [i - 1' 0] + random.Next (roughness * 2 + 1) - roughness;  	heights [0' i] = heights [0' i - 1] + random.Next (roughness * 2 + 1) - roughness;  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: for (int i = 1; i < dimensions; i++) {  	heights [i' 0] = heights [i - 1' 0] + random.Next (roughness * 2 + 1) - roughness;  	heights [0' i] = heights [0' i - 1] + random.Next (roughness * 2 + 1) - roughness;  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: heights [i' 0] = heights [i - 1' 0] + random.Next (roughness * 2 + 1) - roughness;  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: heights [0' i] = heights [0' i - 1] + random.Next (roughness * 2 + 1) - roughness;  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: for (int i = 1; i < dimensions; i++) {  	for (int j = 1; j < dimensions; j++) {  		heights [i' j] = (heights [i - 1' j] + heights [i' j - 1] + heights [i - 1' j - 1]) / 3 + random.Next (roughness * 2 + 1) - roughness;  	}  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: for (int i = 1; i < dimensions; i++) {  	for (int j = 1; j < dimensions; j++) {  		heights [i' j] = (heights [i - 1' j] + heights [i' j - 1] + heights [i - 1' j - 1]) / 3 + random.Next (roughness * 2 + 1) - roughness;  	}  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: for (int j = 1; j < dimensions; j++) {  	heights [i' j] = (heights [i - 1' j] + heights [i' j - 1] + heights [i - 1' j - 1]) / 3 + random.Next (roughness * 2 + 1) - roughness;  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: for (int j = 1; j < dimensions; j++) {  	heights [i' j] = (heights [i - 1' j] + heights [i' j - 1] + heights [i - 1' j - 1]) / 3 + random.Next (roughness * 2 + 1) - roughness;  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: heights [i' j] = (heights [i - 1' j] + heights [i' j - 1] + heights [i - 1' j - 1]) / 3 + random.Next (roughness * 2 + 1) - roughness;  
Magic Number,InitialRound.BusinessLogic.CodedTests,MakingIslands,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\MakingIslands.cs,GenerateTestCase,The following statement contains a magic number: heights [i' j] = (heights [i - 1' j] + heights [i' j - 1] + heights [i - 1' j - 1]) / 3 + random.Next (roughness * 2 + 1) - roughness;  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: if (sortedValues.Length % 2 == 0) {  	median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  }  else {  	median = sortedValues [(sortedValues.Length - 1) / 2];  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: if (sortedValues.Length % 2 == 0) {  	median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  }  else {  	median = sortedValues [(sortedValues.Length - 1) / 2];  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: if (sortedValues.Length % 2 == 0) {  	median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  }  else {  	median = sortedValues [(sortedValues.Length - 1) / 2];  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: if (sortedValues.Length % 2 == 0) {  	median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  }  else {  	median = sortedValues [(sortedValues.Length - 1) / 2];  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: if (sortedValues.Length % 2 == 0) {  	median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  }  else {  	median = sortedValues [(sortedValues.Length - 1) / 2];  }  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: median = (sortedValues [sortedValues.Length / 2] + sortedValues [sortedValues.Length / 2 - 1]) / 2;  
Magic Number,InitialRound.BusinessLogic.CodedTests,Median,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\Median.cs,ValidateOutput,The following statement contains a magic number: median = sortedValues [(sortedValues.Length - 1) / 2];  
Magic Number,InitialRound.BusinessLogic.CodedTests,NonConsecutiveSum,C:\repos\paf31_initialround\InitialRound.BusinessLogic\CodedTests\NonConsecutiveSum.cs,GenerateTestCase,The following statement contains a magic number: return new TestCase {  	Values = Enumerable.Range (0' numberOfValues).Select (_ => random.Next (maxValue * 2) - maxValue).ToArray ()  };  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following statement contains a magic number: return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  
Magic Number,InitialRound.BusinessLogic.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\DataController.cs,DownloadBlob,The following statement contains a magic number: try {  	blob.FetchAttributes ();  	using (MemoryStream stream = new MemoryStream ()) {  		blob.DownloadToStream (stream);  		stream.Position = 0;  		using (StreamReader reader = new StreamReader (stream)) {  			return reader.ReadToEnd ();  		}  	}  }  catch (Microsoft.WindowsAzure.Storage.StorageException e) {  	if (e.RequestInformation.HttpStatusCode == 404) {  		return string.Empty;  	}  	else {  		throw;  	}  }  
Magic Number,InitialRound.BusinessLogic.Controllers,DataController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\DataController.cs,DownloadBlob,The following statement contains a magic number: if (e.RequestInformation.HttpStatusCode == 404) {  	return string.Empty;  }  else {  	throw;  }  
Missing Default,InitialRound.BusinessLogic.Controllers,CodedQuestionController,C:\repos\paf31_initialround\InitialRound.BusinessLogic\Controllers\CodedQuestionController.cs,CreateCodedTest,The following switch statement is missing a default case: switch (codedTestId) {  case GeneralizedFizzBuzz:  	return new GeneralizedFizzBuzz (Settings.Default.TestsExecutedPerQuestion' 5' 20' 5);  case InOrderToPostOrder:  	return new InOrderToPostOrder (Settings.Default.TestsExecutedPerQuestion' 7' 100);  case MakingIslands:  	return new MakingIslands (Settings.Default.TestsExecutedPerQuestion' 5' 20' 3);  case Outliers:  	return new Outliers (Settings.Default.TestsExecutedPerQuestion' 10' 10' 100' 1' 10' 2);  case SortedLCS:  	return new SortedLCS (Settings.Default.TestsExecutedPerQuestion' 0' 100' 20' 100' 1000000);  case CuttingSquares:  	return new CuttingSquares (Settings.Default.TestsExecutedPerQuestion' 1' 100);  case Median:  	return new Median (Settings.Default.TestsExecutedPerQuestion' 1' 100' 1000);  case BuyingWater:  	return new BuyingWater (Settings.Default.TestsExecutedPerQuestion' 0' 5' 0' 1000000' 1' 1000' 1' 10000);  case NonConsecutiveSum:  	return new NonConsecutiveSum (Settings.Default.TestsExecutedPerQuestion' 10' 100' 1000000);  case LargestInitialSegmentMedian:  	return new LargestInitialSegmentMedian (Settings.Default.TestsExecutedPerQuestion' 10' 100' -1000000' 1000000);  }  
