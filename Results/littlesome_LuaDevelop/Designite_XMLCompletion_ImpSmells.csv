Implementation smell,Namespace,Class,File,Method,Description
Long Method,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The method has 274 lines of code.
Long Method,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandZen,The method has 149 lines of code.
Complex Method,XMLCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\PluginMain.cs,HandleEvent,Cyclomatic complexity of the method is 16
Complex Method,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,TryLoadDeclaration,Cyclomatic complexity of the method is 20
Complex Method,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,Cyclomatic complexity of the method is 91
Complex Method,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnShortCut,Cyclomatic complexity of the method is 17
Complex Method,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,GetXMLContextTag,Cyclomatic complexity of the method is 13
Complex Method,XMLCompletion,ZenSettings,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,ReadZenSettings,Cyclomatic complexity of the method is 9
Complex Method,XMLCompletion,ZenSettings,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,ReadZenLang,Cyclomatic complexity of the method is 9
Complex Method,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandSnippet,Cyclomatic complexity of the method is 11
Complex Method,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandZen,Cyclomatic complexity of the method is 34
Long Statement,XMLCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\PluginMain.cs,AddEventHandlers,The length of the statement  "	EventType eventType = EventType.FileSwitch | EventType.SyntaxChange | EventType.Keys | EventType.Command | EventType.Completion; " is 128.
Long Statement,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,TryLoadDeclaration,The length of the statement  "					htag = new HTMLTag ((toUpper) ? tag.Name.ToUpper () : tag.Name' (ns != null) ? ns.Value : null' isLeaf != null && isLeaf.Value == "yes"); " is 137.
Long Statement,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The length of the statement  "			if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) { " is 165.
Long Statement,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The length of the statement  "			if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) { " is 165.
Complex Conditional,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The conditional expression  "(text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")"  is complex.
Complex Conditional,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The conditional expression  "c > 32 && c != '/' && c != '>' && c != '<'"  is complex.
Complex Conditional,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The conditional expression  "ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)"  is complex.
Complex Conditional,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,GetXMLContextTag,The conditional expression  "(inComment && !tag.StartsWith ("<!--")) || (inCDATA && !tag.StartsWith ("<![CDATA["))"  is complex.
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (sci.BaseStyleAt (position) == 6 && value != '"')  	return;  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (Control.ModifierKeys == Keys.Shift) {  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  		int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  		sci.SetSel (start' position);  		sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  		sci.SetSel (start + 5' start + 5);  		return;  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (Control.ModifierKeys == Keys.Shift) {  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  		int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  		sci.SetSel (start' position);  		sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  		sci.SetSel (start + 5' start + 5);  		return;  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (Control.ModifierKeys == Keys.Shift) {  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  		int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  		sci.SetSel (start' position);  		sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  		sci.SetSel (start + 5' start + 5);  		return;  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  	int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  	sci.SetSel (start' position);  	sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  	sci.SetSel (start + 5' start + 5);  	return;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  	int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  	sci.SetSel (start' position);  	sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  	sci.SetSel (start + 5' start + 5);  	return;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  	int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  	sci.SetSel (start' position);  	sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  	sci.SetSel (start + 5' start + 5);  	return;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: sci.SetSel (start + 5' start + 5);  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: sci.SetSel (start + 5' start + 5);  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (value == '/') {  	if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  		return;  	ctag = new XMLContextTag ();  	ctag.Closing = true;  }  else {  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null)  		return;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (value == '/') {  	if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  		return;  	ctag = new XMLContextTag ();  	ctag.Closing = true;  }  else {  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null)  		return;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  	return;  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  	return;  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  	return;  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (c > 32 && c != '/' && c != '>' && c != '<')  	return;  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (PluginSettings.InsertQuotes) {  	ctag = GetXMLContextTag (sci' position);  	position = sci.CurrentPos - 2;  	if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  		position = sci.CurrentPos;  		c = (Char)sci.CharAt (position);  		if (c > 32 && c != '>')  			sci.ReplaceSel ("\"\" ");  		else  			sci.ReplaceSel ("\"\"");  		sci.SetSel (position + 1' position + 1);  		justInsertedQuotesAt = position + 1;  		// Allow another plugin to handle this  		de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  		EventManager.DispatchEvent (PluginBase.MainForm' de);  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (PluginSettings.InsertQuotes) {  	ctag = GetXMLContextTag (sci' position);  	position = sci.CurrentPos - 2;  	if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  		position = sci.CurrentPos;  		c = (Char)sci.CharAt (position);  		if (c > 32 && c != '>')  			sci.ReplaceSel ("\"\" ");  		else  			sci.ReplaceSel ("\"\"");  		sci.SetSel (position + 1' position + 1);  		justInsertedQuotesAt = position + 1;  		// Allow another plugin to handle this  		de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  		EventManager.DispatchEvent (PluginBase.MainForm' de);  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: position = sci.CurrentPos - 2;  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  	position = sci.CurrentPos;  	c = (Char)sci.CharAt (position);  	if (c > 32 && c != '>')  		sci.ReplaceSel ("\"\" ");  	else  		sci.ReplaceSel ("\"\"");  	sci.SetSel (position + 1' position + 1);  	justInsertedQuotesAt = position + 1;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  	EventManager.DispatchEvent (PluginBase.MainForm' de);  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (c > 32 && c != '>')  	sci.ReplaceSel ("\"\" ");  else  	sci.ReplaceSel ("\"\"");  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  	// TODO  Colorize text change to highlight what's been done  	if (justInsertedQuotesAt == position - 1) {  		justInsertedQuotesAt = -1;  		c = (Char)sci.CharAt (position - 2);  		if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  			sci.SetSel (position - 2' position);  			sci.ReplaceSel ("\"");  		}  		// Allow another plugin to handle this  		de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  		EventManager.DispatchEvent (PluginBase.MainForm' de);  	}  	else {  		c = (Char)sci.CharAt (position - 1);  		if (c == '"' && (Char)sci.CharAt (position) == '"') {  			sci.SetSel (position - 1' position + 1);  			sci.ReplaceSel ("\"");  		}  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  	// TODO  Colorize text change to highlight what's been done  	if (justInsertedQuotesAt == position - 1) {  		justInsertedQuotesAt = -1;  		c = (Char)sci.CharAt (position - 2);  		if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  			sci.SetSel (position - 2' position);  			sci.ReplaceSel ("\"");  		}  		// Allow another plugin to handle this  		de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  		EventManager.DispatchEvent (PluginBase.MainForm' de);  	}  	else {  		c = (Char)sci.CharAt (position - 1);  		if (c == '"' && (Char)sci.CharAt (position) == '"') {  			sci.SetSel (position - 1' position + 1);  			sci.ReplaceSel ("\"");  		}  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  	// TODO  Colorize text change to highlight what's been done  	if (justInsertedQuotesAt == position - 1) {  		justInsertedQuotesAt = -1;  		c = (Char)sci.CharAt (position - 2);  		if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  			sci.SetSel (position - 2' position);  			sci.ReplaceSel ("\"");  		}  		// Allow another plugin to handle this  		de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  		EventManager.DispatchEvent (PluginBase.MainForm' de);  	}  	else {  		c = (Char)sci.CharAt (position - 1);  		if (c == '"' && (Char)sci.CharAt (position) == '"') {  			sci.SetSel (position - 1' position + 1);  			sci.ReplaceSel ("\"");  		}  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (justInsertedQuotesAt == position - 1) {  	justInsertedQuotesAt = -1;  	c = (Char)sci.CharAt (position - 2);  	if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  		sci.SetSel (position - 2' position);  		sci.ReplaceSel ("\"");  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  	EventManager.DispatchEvent (PluginBase.MainForm' de);  }  else {  	c = (Char)sci.CharAt (position - 1);  	if (c == '"' && (Char)sci.CharAt (position) == '"') {  		sci.SetSel (position - 1' position + 1);  		sci.ReplaceSel ("\"");  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (justInsertedQuotesAt == position - 1) {  	justInsertedQuotesAt = -1;  	c = (Char)sci.CharAt (position - 2);  	if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  		sci.SetSel (position - 2' position);  		sci.ReplaceSel ("\"");  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  	EventManager.DispatchEvent (PluginBase.MainForm' de);  }  else {  	c = (Char)sci.CharAt (position - 1);  	if (c == '"' && (Char)sci.CharAt (position) == '"') {  		sci.SetSel (position - 1' position + 1);  		sci.ReplaceSel ("\"");  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (justInsertedQuotesAt == position - 1) {  	justInsertedQuotesAt = -1;  	c = (Char)sci.CharAt (position - 2);  	if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  		sci.SetSel (position - 2' position);  		sci.ReplaceSel ("\"");  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  	EventManager.DispatchEvent (PluginBase.MainForm' de);  }  else {  	c = (Char)sci.CharAt (position - 1);  	if (c == '"' && (Char)sci.CharAt (position) == '"') {  		sci.SetSel (position - 1' position + 1);  		sci.ReplaceSel ("\"");  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: c = (Char)sci.CharAt (position - 2);  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  	sci.SetSel (position - 2' position);  	sci.ReplaceSel ("\"");  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  	sci.SetSel (position - 2' position);  	sci.ReplaceSel ("\"");  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: sci.SetSel (position - 2' position);  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (PluginSettings.CloseTags && position > 1) {  	ctag = GetXMLContextTag (sci' position - 2);  	if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  		if ((Char)sci.CharAt (position - 2) == '<') {  			sci.ReplaceSel ((Char)value + ">");  			sci.SetSel (position' position);  		}  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (PluginSettings.CloseTags && position > 1) {  	ctag = GetXMLContextTag (sci' position - 2);  	if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  		if ((Char)sci.CharAt (position - 2) == '<') {  			sci.ReplaceSel ((Char)value + ">");  			sci.SetSel (position' position);  		}  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: ctag = GetXMLContextTag (sci' position - 2);  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  	if ((Char)sci.CharAt (position - 2) == '<') {  		sci.ReplaceSel ((Char)value + ">");  		sci.SetSel (position' position);  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if ((Char)sci.CharAt (position - 2) == '<') {  	sci.ReplaceSel ((Char)value + ">");  	sci.SetSel (position' position);  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (PluginSettings.CloseTags && position > 1) {  	ctag = GetXMLContextTag (sci' position - 2);  	if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  		if ((Char)sci.CharAt (position - 2) == '<') {  			CompletionList.Show (xmlBlocks' true);  		}  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (PluginSettings.CloseTags && position > 1) {  	ctag = GetXMLContextTag (sci' position - 2);  	if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  		if ((Char)sci.CharAt (position - 2) == '<') {  			CompletionList.Show (xmlBlocks' true);  		}  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: ctag = GetXMLContextTag (sci' position - 2);  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  	if ((Char)sci.CharAt (position - 2) == '<') {  		CompletionList.Show (xmlBlocks' true);  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following statement contains a magic number: if ((Char)sci.CharAt (position - 2) == '<') {  	CompletionList.Show (xmlBlocks' true);  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnShortCut,The following statement contains a magic number: if (keys == (Keys.Control | Keys.Space)) {  	ITabbedDocument document = PluginBase.MainForm.CurrentDocument;  	if (!document.IsEditable)  		return false;  	ScintillaControl sci = document.SciControl;  	XMLContextTag ctag = GetXMLContextTag (sci' sci.CurrentPos);  	// Starting tag  	if (ctag.Tag == null && (sci.CurrentPos > 0)) {  		if ((Char)sci.CharAt (sci.CurrentPos - 1) == '<') {  			ctag.Tag = "<";  			ctag.Name = "";  		}  		else  			return false;  	}  	else if (ctag.Tag.EndsWith (">")) {  		return false;  	}  	// Closing tag  	else if (ctag.Tag.StartsWith ("</") && (ctag.Tag.IndexOf (' ') < 0)) {  		ctag.Name = ctag.Tag.Substring (2);  		ctag.Tag = "<" + ctag.Name;  		ctag.Closing = true;  	}  	// Element completion  	if (ctag.Name != null && (ctag.Tag.Length == ctag.Name.Length + 1)) {  		// Allow another plugin to handle this  		DataEvent de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return true;  		if (cType == XMLType.Known) {  			List<ICompletionListItem> items = new List<ICompletionListItem> ();  			String previous = null;  			foreach (HTMLTag tag in knownTags)  				if (tag.Name != previous) {  					items.Add (new HtmlTagItem (tag.Name' tag.Tag));  					previous = tag.Name;  				}  			CompletionList.Show (items' false' ctag.Name);  		}  	}  	// Attribute completion  	else {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return true;  		Int32 position = sci.CurrentPos - 1;  		String word = GetWordLeft (sci' ref position);  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			word  		};  		DataEvent de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return true;  		if (cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true' word.Trim ());  					return true;  				}  		}  	}  	return true;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnShortCut,The following statement contains a magic number: if (ctag.Tag == null && (sci.CurrentPos > 0)) {  	if ((Char)sci.CharAt (sci.CurrentPos - 1) == '<') {  		ctag.Tag = "<";  		ctag.Name = "";  	}  	else  		return false;  }  else if (ctag.Tag.EndsWith (">")) {  	return false;  }  // Closing tag  else if (ctag.Tag.StartsWith ("</") && (ctag.Tag.IndexOf (' ') < 0)) {  	ctag.Name = ctag.Tag.Substring (2);  	ctag.Tag = "<" + ctag.Name;  	ctag.Closing = true;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnShortCut,The following statement contains a magic number: if (ctag.Tag.EndsWith (">")) {  	return false;  }  // Closing tag  else if (ctag.Tag.StartsWith ("</") && (ctag.Tag.IndexOf (' ') < 0)) {  	ctag.Name = ctag.Tag.Substring (2);  	ctag.Tag = "<" + ctag.Name;  	ctag.Closing = true;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnShortCut,The following statement contains a magic number: if (ctag.Tag.StartsWith ("</") && (ctag.Tag.IndexOf (' ') < 0)) {  	ctag.Name = ctag.Tag.Substring (2);  	ctag.Tag = "<" + ctag.Name;  	ctag.Closing = true;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnShortCut,The following statement contains a magic number: ctag.Name = ctag.Tag.Substring (2);  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,GetXMLContextTag,The following statement contains a magic number: while (position > 0) {  	position--;  	c = (Char)sci.CharAt (position);  	tag = c + tag;  	if (tag == "]]>")  		inCDATA = true;  	else if (tag == "-->")  		inComment = true;  	if (c == '<') {  		if ((inComment && !tag.StartsWith ("<!--")) || (inCDATA && !tag.StartsWith ("<![CDATA[")))  			continue;  		break;  	}  	if (inCDATA || inComment)  		continue;  	if (c == '>') {  		xtag.Position = position + 1;  		return xtag;  	}  	else if (c == '{' && sci.BaseStyleAt (position) != 6/*XML attribute value*/) {  		// code probably not inside a tag: most likely style or script tag without CDATA or comment  		return xtag;  	}  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,GetXMLContextTag,The following statement contains a magic number: if (c == '>') {  	xtag.Position = position + 1;  	return xtag;  }  else if (c == '{' && sci.BaseStyleAt (position) != 6/*XML attribute value*/) {  	// code probably not inside a tag: most likely style or script tag without CDATA or comment  	return xtag;  }  
Magic Number,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,GetXMLContextTag,The following statement contains a magic number: if (c == '{' && sci.BaseStyleAt (position) != 6/*XML attribute value*/) {  	// code probably not inside a tag: most likely style or script tag without CDATA or comment  	return xtag;  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,init,The following statement contains a magic number: if (!inited) {  	inited = true;  	LoadResource ("zen_settings.js");  	if (delayOpenConfig == null)// timer for opening config files  	 {  		delayOpenConfig = new Timer ();  		delayOpenConfig.Interval = 100;  		delayOpenConfig.Tick += new EventHandler (delayOpenConfig_Tick);  	}  	if (watcherConfig == null)// watching config files changes  	 {  		watcherConfig = new FileSystemWatcher (Path.Combine (PathHelper.DataDir' "XMLCompletion")' "zen*");  		watcherConfig.Changed += new FileSystemEventHandler (watcherConfig_Changed);  		watcherConfig.Created += new FileSystemEventHandler (watcherConfig_Changed);  		watcherConfig.EnableRaisingEvents = true;  	}  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,init,The following statement contains a magic number: if (delayOpenConfig == null)// timer for opening config files   {  	delayOpenConfig = new Timer ();  	delayOpenConfig.Interval = 100;  	delayOpenConfig.Tick += new EventHandler (delayOpenConfig_Tick);  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,init,The following statement contains a magic number: delayOpenConfig.Interval = 100;  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandSnippet,The following statement contains a magic number: if (data ["snippet"] == null) {  	ScintillaControl sci = PluginBase.MainForm.CurrentDocument.SciControl;  	if (sci == null)  		return false;  	// extract zen expression  	int pos = sci.CurrentPos - 1;  	int lastValid = sci.CurrentPos;  	char c = ' ';  	while (pos >= 0) {  		c = (char)sci.CharAt (pos);  		if (c <= 32) {  			lastValid = pos + 1;  			break;  		}  		if (c == '>') {  			if (lastValid - 1 <= pos)  				break;  			lastValid = pos + 1;  		}  		else if (!Char.IsLetterOrDigit (c) && "+*$.#:-".IndexOf (c) < 0)  			break;  		pos--;  		if (pos < 0)  			lastValid = 0;  	}  	// expand  	if (lastValid < sci.CurrentPos) {  		sci.SetSel (lastValid' sci.CurrentPos);  		try {  			string expr = expandExpression (sci.SelText);  			if (expr == null)  				return false;  			if (expr.IndexOf ("$(EntryPoint)") < 0)  				expr += "$(EntryPoint)";  			data ["snippet"] = expr;  		}  		catch (ZenExpandException zex) {  			// error in expression' no snippet display  			TraceManager.AddAsync (zex.Message);  			return true;  		}  		// insert modified snippet or show snippet list  		return false;  	}  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandSnippet,The following statement contains a magic number: while (pos >= 0) {  	c = (char)sci.CharAt (pos);  	if (c <= 32) {  		lastValid = pos + 1;  		break;  	}  	if (c == '>') {  		if (lastValid - 1 <= pos)  			break;  		lastValid = pos + 1;  	}  	else if (!Char.IsLetterOrDigit (c) && "+*$.#:-".IndexOf (c) < 0)  		break;  	pos--;  	if (pos < 0)  		lastValid = 0;  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandSnippet,The following statement contains a magic number: if (c <= 32) {  	lastValid = pos + 1;  	break;  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandZen,The following statement contains a magic number: foreach (string part in parts) {  	if (part.Length == 0)  		throw new ZenExpandException ("Empty sub-expression found (sub1>sub2)");  	string subSrc = src;  	src = "";  	string[] sparts = part.Split ('+');  	foreach (string spart in sparts) {  		if (spart.Length == 0)  			throw new ZenExpandException ("Empty sub-expression part found (part1+part2)");  		if (!inline && src.Length > 0)  			src += "\n";  		int multiply = 1;  		string tag = spart;  		// read multiplier  		string mult = extractEnd ('*'' ref tag);  		if (mult != null) {  			multiply = -1;  			int.TryParse (mult' out multiply);  			if (multiply < 0)  				throw new ZenExpandException ("Invalid multiplier value (" + mult + ")");  		}  		// read css classes  		string css = "";  		string cssClass;  		do {  			cssClass = extractEnd ('.'' ref tag);  			if (cssClass != null)  				css = cssClass + " " + css;  		}  		while (cssClass != null);  		// read ID  		string id = extractEnd ('#'' ref tag) ?? "";  		// build attributes  		string atId = id.Length > 0 ? " id=\"" + id + "\"" : "";  		string atClass = css.Length > 0 ? " class=\"" + css.Trim () + "\"" : "";  		// build tag  		string tagStart = "";  		string tagEnd = "";  		bool closedTag = false;  		// custom HTML  		bool customExpand = false;  		bool customChildIndent = false;  		if (lang.snippets.ContainsKey (tag)) {  			tag = (string)lang.snippets [tag];  			customExpand = true;  		}  		else if (lang.abbreviations.ContainsKey (tag)) {  			tag = (string)lang.abbreviations [tag];  			customExpand = true;  			if (tag.Length > 2 && tag [0] == '<')// insert attributes  			 {  				if (tag [1] != '!') {  					int sp = tag.IndexOf (' ');  					if (sp >= 0) {  						tagStart = tag.Substring (0' sp);  						tagEnd = tag.Substring (sp);  						tag = tagStart;  						if (atId.Length > 0) {  							if (tagEnd.IndexOf (" id=") < 0)  								tag += atId;  							else  								tagEnd = tagEnd.Replace (" id=\"\""' atId);  						}  						if (atClass.Length > 0) {  							if (tagEnd.IndexOf (" class=") < 0)  								tag += atClass;  							else  								tagEnd = tagEnd.Replace (" class=\"\""' atClass);  						}  						tag += tagEnd;  					}  				}  			}  		}  		else  			extractEnd (':'' ref tag);  		if (customExpand) {  			if (tag.IndexOf ("${") >= 0)  				tag = ProcessVars (tag);  			tag = tag.Replace ("\\n"' "\n").Replace ("\\t"' "\t");  			if (tag.IndexOf ('|') < 0)  				tag = tag.Replace ("\"\""' "\"|\"");  			int child = tag.IndexOf ("${child}");  			if (child >= 0) {  				tag = tag.Replace ("${child}"' "");  				customChildIndent = true;  			}  			else {  				child = tag.IndexOf ("><");  				if (child > 0)  					child++;  			}  			if (child > 0) {  				tagStart = tag.Substring (0' child);  				tagEnd = "|" + tag.Substring (child);  			}  			else  				closedTag = true;  		}  		else {  			closedTag = lang.element_types.empty.ContainsKey (tag);  			if (closedTag)  				tag = "<" + tag + "/>";  		}  		if (tag.Length > 0 && tag [0] != '<') {  			tagStart = "<" + tag + atId + atClass + ">";  			tagEnd = "</" + tag + ">";  		}  		string master;  		string temp = spart == sparts [sparts.Length - 1] ? subSrc : "";  		if (closedTag) {  			inline = sparts.Length == 1 && isInline (tag);  			master = tag;  		}  		else {  			string wrapIn = "";  			string wrapOut = "";  			if (temp.Length > 0 && (!inline || isBlock (tag))) {  				wrapIn = customChildIndent ? "" : "\n\t";  				wrapOut = customChildIndent ? "" : "\n";  				temp = addIndent (temp);  			}  			if (temp.Length == 0)  				temp = "|";  			inline = sparts.Length == 1 && isInline (tag);  			master = tagStart + wrapIn + temp + wrapOut + tagEnd;  		}  		for (int i = 1; i <= multiply; i++) {  			if (multiply > 1) {  				index = i;  				src += master.Replace ("$"' index.ToString ());  			}  			else  				src += master;  			if (!inline && i < multiply)  				src += "\n";  		}  	}  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandZen,The following statement contains a magic number: foreach (string spart in sparts) {  	if (spart.Length == 0)  		throw new ZenExpandException ("Empty sub-expression part found (part1+part2)");  	if (!inline && src.Length > 0)  		src += "\n";  	int multiply = 1;  	string tag = spart;  	// read multiplier  	string mult = extractEnd ('*'' ref tag);  	if (mult != null) {  		multiply = -1;  		int.TryParse (mult' out multiply);  		if (multiply < 0)  			throw new ZenExpandException ("Invalid multiplier value (" + mult + ")");  	}  	// read css classes  	string css = "";  	string cssClass;  	do {  		cssClass = extractEnd ('.'' ref tag);  		if (cssClass != null)  			css = cssClass + " " + css;  	}  	while (cssClass != null);  	// read ID  	string id = extractEnd ('#'' ref tag) ?? "";  	// build attributes  	string atId = id.Length > 0 ? " id=\"" + id + "\"" : "";  	string atClass = css.Length > 0 ? " class=\"" + css.Trim () + "\"" : "";  	// build tag  	string tagStart = "";  	string tagEnd = "";  	bool closedTag = false;  	// custom HTML  	bool customExpand = false;  	bool customChildIndent = false;  	if (lang.snippets.ContainsKey (tag)) {  		tag = (string)lang.snippets [tag];  		customExpand = true;  	}  	else if (lang.abbreviations.ContainsKey (tag)) {  		tag = (string)lang.abbreviations [tag];  		customExpand = true;  		if (tag.Length > 2 && tag [0] == '<')// insert attributes  		 {  			if (tag [1] != '!') {  				int sp = tag.IndexOf (' ');  				if (sp >= 0) {  					tagStart = tag.Substring (0' sp);  					tagEnd = tag.Substring (sp);  					tag = tagStart;  					if (atId.Length > 0) {  						if (tagEnd.IndexOf (" id=") < 0)  							tag += atId;  						else  							tagEnd = tagEnd.Replace (" id=\"\""' atId);  					}  					if (atClass.Length > 0) {  						if (tagEnd.IndexOf (" class=") < 0)  							tag += atClass;  						else  							tagEnd = tagEnd.Replace (" class=\"\""' atClass);  					}  					tag += tagEnd;  				}  			}  		}  	}  	else  		extractEnd (':'' ref tag);  	if (customExpand) {  		if (tag.IndexOf ("${") >= 0)  			tag = ProcessVars (tag);  		tag = tag.Replace ("\\n"' "\n").Replace ("\\t"' "\t");  		if (tag.IndexOf ('|') < 0)  			tag = tag.Replace ("\"\""' "\"|\"");  		int child = tag.IndexOf ("${child}");  		if (child >= 0) {  			tag = tag.Replace ("${child}"' "");  			customChildIndent = true;  		}  		else {  			child = tag.IndexOf ("><");  			if (child > 0)  				child++;  		}  		if (child > 0) {  			tagStart = tag.Substring (0' child);  			tagEnd = "|" + tag.Substring (child);  		}  		else  			closedTag = true;  	}  	else {  		closedTag = lang.element_types.empty.ContainsKey (tag);  		if (closedTag)  			tag = "<" + tag + "/>";  	}  	if (tag.Length > 0 && tag [0] != '<') {  		tagStart = "<" + tag + atId + atClass + ">";  		tagEnd = "</" + tag + ">";  	}  	string master;  	string temp = spart == sparts [sparts.Length - 1] ? subSrc : "";  	if (closedTag) {  		inline = sparts.Length == 1 && isInline (tag);  		master = tag;  	}  	else {  		string wrapIn = "";  		string wrapOut = "";  		if (temp.Length > 0 && (!inline || isBlock (tag))) {  			wrapIn = customChildIndent ? "" : "\n\t";  			wrapOut = customChildIndent ? "" : "\n";  			temp = addIndent (temp);  		}  		if (temp.Length == 0)  			temp = "|";  		inline = sparts.Length == 1 && isInline (tag);  		master = tagStart + wrapIn + temp + wrapOut + tagEnd;  	}  	for (int i = 1; i <= multiply; i++) {  		if (multiply > 1) {  			index = i;  			src += master.Replace ("$"' index.ToString ());  		}  		else  			src += master;  		if (!inline && i < multiply)  			src += "\n";  	}  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandZen,The following statement contains a magic number: if (lang.snippets.ContainsKey (tag)) {  	tag = (string)lang.snippets [tag];  	customExpand = true;  }  else if (lang.abbreviations.ContainsKey (tag)) {  	tag = (string)lang.abbreviations [tag];  	customExpand = true;  	if (tag.Length > 2 && tag [0] == '<')// insert attributes  	 {  		if (tag [1] != '!') {  			int sp = tag.IndexOf (' ');  			if (sp >= 0) {  				tagStart = tag.Substring (0' sp);  				tagEnd = tag.Substring (sp);  				tag = tagStart;  				if (atId.Length > 0) {  					if (tagEnd.IndexOf (" id=") < 0)  						tag += atId;  					else  						tagEnd = tagEnd.Replace (" id=\"\""' atId);  				}  				if (atClass.Length > 0) {  					if (tagEnd.IndexOf (" class=") < 0)  						tag += atClass;  					else  						tagEnd = tagEnd.Replace (" class=\"\""' atClass);  				}  				tag += tagEnd;  			}  		}  	}  }  else  	extractEnd (':'' ref tag);  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandZen,The following statement contains a magic number: if (lang.abbreviations.ContainsKey (tag)) {  	tag = (string)lang.abbreviations [tag];  	customExpand = true;  	if (tag.Length > 2 && tag [0] == '<')// insert attributes  	 {  		if (tag [1] != '!') {  			int sp = tag.IndexOf (' ');  			if (sp >= 0) {  				tagStart = tag.Substring (0' sp);  				tagEnd = tag.Substring (sp);  				tag = tagStart;  				if (atId.Length > 0) {  					if (tagEnd.IndexOf (" id=") < 0)  						tag += atId;  					else  						tagEnd = tagEnd.Replace (" id=\"\""' atId);  				}  				if (atClass.Length > 0) {  					if (tagEnd.IndexOf (" class=") < 0)  						tag += atClass;  					else  						tagEnd = tagEnd.Replace (" class=\"\""' atClass);  				}  				tag += tagEnd;  			}  		}  	}  }  else  	extractEnd (':'' ref tag);  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,expandZen,The following statement contains a magic number: if (tag.Length > 2 && tag [0] == '<')// insert attributes   {  	if (tag [1] != '!') {  		int sp = tag.IndexOf (' ');  		if (sp >= 0) {  			tagStart = tag.Substring (0' sp);  			tagEnd = tag.Substring (sp);  			tag = tagStart;  			if (atId.Length > 0) {  				if (tagEnd.IndexOf (" id=") < 0)  					tag += atId;  				else  					tagEnd = tagEnd.Replace (" id=\"\""' atId);  			}  			if (atClass.Length > 0) {  				if (tagEnd.IndexOf (" class=") < 0)  					tag += atClass;  				else  					tagEnd = tagEnd.Replace (" class=\"\""' atClass);  			}  			tag += tagEnd;  		}  	}  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,isInline,The following statement contains a magic number: if (tag.Length > 3 && tag [0] == '<') {  	// extract tag name  	tag = tag.Substring (1).Split (new char[] {  		' ''  		'"''  		'\'''  		'/''  		'|''  		'>'  	}' 2) [0];  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,isInline,The following statement contains a magic number: if (tag.Length > 3 && tag [0] == '<') {  	// extract tag name  	tag = tag.Substring (1).Split (new char[] {  		' ''  		'"''  		'\'''  		'/''  		'|''  		'>'  	}' 2) [0];  }  
Magic Number,XMLCompletion,ZenCoding,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\ZenCoding.cs,isInline,The following statement contains a magic number: tag = tag.Substring (1).Split (new char[] {  	' ''  	'"''  	'\'''  	'/''  	'|''  	'>'  }' 2) [0];  
Missing Default,XMLCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\PluginMain.cs,HandleEvent,The following switch statement is missing a default case: switch (e.Type) {  case EventType.FileSwitch:  case EventType.SyntaxChange:  	XMLComplete.CurrentFile = PluginBase.MainForm.CurrentDocument.FileName;  	break;  case EventType.Completion:  	if (XMLComplete.Active)  		e.Handled = true;  	return;  case EventType.Keys:  	e.Handled = XMLComplete.OnShortCut (((KeyEvent)e).Value);  	break;  case EventType.Command:  	DataEvent de = (DataEvent)e;  	if (XMLComplete.Active && !settingObject.DisableZenCoding && de.Action == "SnippetManager.Expand") {  		Hashtable data = (Hashtable)de.Data;  		if (ZenCoding.expandSnippet (data))  			de.Handled = true;  	}  	break;  }  
Missing Default,XMLCompletion,XMLComplete,C:\repos\littlesome_LuaDevelop\External\Plugins\XMLCompletion\XMLComplete.cs,OnChar,The following switch statement is missing a default case: switch (value) {  case 10:  	// Shift+Enter to insert <BR/>  	Int32 line = sci.LineFromPosition (position);  	if (Control.ModifierKeys == Keys.Shift) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			int start = sci.PositionFromLine (line) - ((sci.EOLMode == 0) ? 2 : 1);  			sci.SetSel (start' position);  			sci.ReplaceSel ((PluginSettings.UpperCaseHtmlTags) ? "<BR/>" : "<br/>");  			sci.SetSel (start + 5' start + 5);  			return;  		}  	}  	if (PluginSettings.SmartIndenter) {  		// Get last non-empty line  		String text = "";  		Int32 line2 = line - 1;  		while (line2 >= 0 && text.Length == 0) {  			text = sci.GetLine (line2).TrimEnd ();  			line2--;  		}  		if ((text.EndsWith (">") && !text.EndsWith ("?>") && !text.EndsWith ("%>") && !closingTag.IsMatch (text)) || text.EndsWith ("<!--") || text.EndsWith ("<![CDATA[")) {  			// Get the previous tag  			do {  				position--;  				c = (Char)sci.CharAt (position);  			}  			while (position > 0 && c != '>');  			ctag = GetXMLContextTag (sci' c == '>' ? position + 1 : position);  			if ((Char)sci.CharAt (position - 1) == '/')  				return;  			// Insert blank line if we pressed Enter between a tag & it's closing tag  			Int32 indent = sci.GetLineIndentation (line2 + 1);  			String checkStart = null;  			bool subIndent = true;  			if (text.EndsWith ("<!--")) {  				checkStart = "-->";  				subIndent = false;  			}  			else if (text.EndsWith ("<![CDATA[")) {  				checkStart = "]]>";  				subIndent = false;  			}  			else if (ctag.Closed)  				subIndent = false;  			else if (ctag.Name != null) {  				checkStart = "</" + ctag.Name;  				if (ctag.Name.ToLower () == "script" || ctag.Name.ToLower () == "style")  					subIndent = false;  				if (ctag.Tag.IndexOf ('\r') > 0 || ctag.Tag.IndexOf ('\n') > 0)  					subIndent = false;  			}  			if (checkStart != null) {  				text = sci.GetLine (line).TrimStart ();  				if (text.StartsWith (checkStart)) {  					sci.SetLineIndentation (line' indent);  					sci.InsertText (sci.PositionFromLine (line)' LineEndDetector.GetNewLineMarker (sci.EOLMode));  				}  			}  			// Indent the code  			if (subIndent)  				indent += sci.Indent;  			sci.SetLineIndentation (line' indent);  			position = sci.LineIndentPosition (line);  			sci.SetSel (position' position);  			return;  		}  	}  	break;  case '<':  case '/':  	if (value == '/') {  		if ((position < 2) || ((Char)sci.CharAt (position - 2) != '<'))  			return;  		ctag = new XMLContextTag ();  		ctag.Closing = true;  	}  	else {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Tag != null)  			return;  	}  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Element"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// New tag  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (string ns in namespaces) {  			items.Add (new NamespaceItem (ns));  		}  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && (tag.NS == "" || tag.NS == defaultNS)) {  				items.Add (new HtmlTagItem (tag.Name' tag.Tag));  				previous = tag.Name;  			}  		items.Sort (new ListItemComparer ());  		CompletionList.Show (items' true);  	}  	return;  case ':':  	ctag = GetXMLContextTag (sci' position);  	if (ctag.NameSpace == null || position - ctag.Position > ctag.Name.Length + 2)  		return;  	// Allow another plugin to handle this  	de = new DataEvent (EventType.Command' "XMLCompletion.Namespace"' ctag);  	EventManager.DispatchEvent (PluginBase.MainForm' de);  	if (de.Handled)  		return;  	// Show namespace's tags  	if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  		List<ICompletionListItem> items = new List<ICompletionListItem> ();  		String previous = null;  		foreach (HTMLTag tag in knownTags)  			if (tag.Name != previous && tag.NS == ctag.NameSpace) {  				items.Add (new HtmlTagItem (tag.Name' tag.Name));  				previous = tag.Name;  			}  		CompletionList.Show (items' true);  	}  	return;  case '>':  	if (PluginSettings.CloseTags) {  		ctag = GetXMLContextTag (sci' position);  		if (ctag.Name != null && !ctag.Closed) {  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.CloseElement"' ctag);  			EventManager.DispatchEvent (PluginBase.MainForm' de);  			if (de.Handled)  				return;  			if (ctag.Closing)  				return;  			Boolean isLeaf = false;  			if (cType == XMLType.Known)  				foreach (HTMLTag tag in knownTags) {  					if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  						isLeaf = tag.IsLeaf;  						break;  					}  				}  			if (isLeaf) {  				sci.SetSel (position - 1' position);  				sci.ReplaceSel ("/>");  				sci.SetSel (position + 1' position + 1);  			}  			else {  				String closeTag = "</" + ctag.Name + ">";  				sci.ReplaceSel (closeTag);  				sci.SetSel (position' position);  			}  		}  	}  	return;  case ' ':  	c = (char)sci.CharAt (position);  	if (c > 32 && c != '/' && c != '>' && c != '<')  		return;  	ctag = GetXMLContextTag (sci' position);  	if (ctag.Tag != null) {  		if (InQuotes (ctag.Tag) || ctag.Tag.LastIndexOf ('"') < ctag.Tag.LastIndexOf ('='))  			return;  		// Allow another plugin to handle this  		Object[] obj = new Object[] {  			ctag'  			""  		};  		de = new DataEvent (EventType.Command' "XMLCompletion.Attribute"' obj);  		EventManager.DispatchEvent (PluginBase.MainForm' de);  		if (de.Handled)  			return;  		if (PluginSettings.EnableXMLCompletion && cType == XMLType.Known) {  			foreach (HTMLTag tag in knownTags)  				if (String.Compare (tag.Tag' ctag.Name' true) == 0) {  					List<ICompletionListItem> items = new List<ICompletionListItem> ();  					String previous = null;  					foreach (String attr in tag.Attributes)  						if (attr != previous) {  							items.Add (new HtmlAttributeItem (attr));  							previous = attr;  						}  					CompletionList.Show (items' true);  					return;  				}  		}  	}  	/*else                     {                         if (Control.ModifierKeys == Keys.Shift)                         {                             sci.SetSel(position - 1' position);                             sci.ReplaceSel("&nbsp;");                         }                     }*/return;  case '=':  	if (PluginSettings.InsertQuotes) {  		ctag = GetXMLContextTag (sci' position);  		position = sci.CurrentPos - 2;  		if (ctag.Tag != null && !String.IsNullOrEmpty (ctag.Name) && Char.IsLetter (ctag.Name [0]) && !InQuotes (ctag.Tag) && (GetWordLeft (sci' ref position).Length > 0)) {  			position = sci.CurrentPos;  			c = (Char)sci.CharAt (position);  			if (c > 32 && c != '>')  				sci.ReplaceSel ("\"\" ");  			else  				sci.ReplaceSel ("\"\"");  			sci.SetSel (position + 1' position + 1);  			justInsertedQuotesAt = position + 1;  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  	}  	return;  case '"':  	ctag = GetXMLContextTag (sci' position);  	if (position > 1 && ctag.Tag != null && !ctag.Tag.StartsWith ("<!")) {  		// TODO  Colorize text change to highlight what's been done  		if (justInsertedQuotesAt == position - 1) {  			justInsertedQuotesAt = -1;  			c = (Char)sci.CharAt (position - 2);  			if (c == '"' && (Char)sci.CharAt (position - 2) == '"') {  				sci.SetSel (position - 2' position);  				sci.ReplaceSel ("\"");  			}  			// Allow another plugin to handle this  			de = new DataEvent (EventType.Command' "XMLCompletion.AttributeValue"' new XMLContextTag ());  			EventManager.DispatchEvent (PluginBase.MainForm' de);  		}  		else {  			c = (Char)sci.CharAt (position - 1);  			if (c == '"' && (Char)sci.CharAt (position) == '"') {  				sci.SetSel (position - 1' position + 1);  				sci.ReplaceSel ("\"");  			}  		}  	}  	break;  case '?':  case '%':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				sci.ReplaceSel ((Char)value + ">");  				sci.SetSel (position' position);  			}  		}  	}  	break;  case '!':  	if (PluginSettings.CloseTags && position > 1) {  		ctag = GetXMLContextTag (sci' position - 2);  		if (ctag.Tag == null || ctag.Tag.EndsWith (">")) {  			if ((Char)sci.CharAt (position - 2) == '<') {  				CompletionList.Show (xmlBlocks' true);  			}  		}  	}  	break;  }  
