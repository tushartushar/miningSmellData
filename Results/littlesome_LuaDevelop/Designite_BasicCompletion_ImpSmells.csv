Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,HandleEvent,Cyclomatic complexity of the method is 23
Complex Method,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,GetCompletionListItems,Cyclomatic complexity of the method is 10
Long Statement,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,AddEventHandlers,The length of the statement  "	EventType eventTypes = EventType.Keys | EventType.FileSave | EventType.ApplySettings | EventType.SyntaxChange | EventType.FileSwitch | EventType.Command | EventType.UIStarted; " is 175.
Complex Conditional,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlCharAdded,The conditional expression  "insert == AutoInsert.Never || (insert == AutoInsert.CPP && sci.Lexer != 3/*CPP*/) || lang == "text""  is complex.
Empty Catch Block,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,LoadProjectKeywords,The method has an empty catch block.
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,InitTimer,The following statement contains a magic number: this.updateTimer.Interval = 500;  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,AddBaseKeywords,The following statement contains a magic number: for (Int32 i = 0; i < lang.usekeywords.Length; i++) {  	UseKeyword usekeyword = lang.usekeywords [i];  	KeywordClass kc = ScintillaControl.Configuration.GetKeywordClass (usekeyword.cls);  	if (kc != null && kc.val != null) {  		String entry = Regex.Replace (kc.val' @"\t|\n|\r"' " ");  		String[] words = entry.Split (new char[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		for (Int32 j = 0; j < words.Length; j++) {  			if (words [j].Length > 3 && !keywords.Contains (words [j]) && !words [j].StartsWith ("\x5E")) {  				keywords.Add (words [j]);  			}  		}  	}  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,AddBaseKeywords,The following statement contains a magic number: if (kc != null && kc.val != null) {  	String entry = Regex.Replace (kc.val' @"\t|\n|\r"' " ");  	String[] words = entry.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	for (Int32 j = 0; j < words.Length; j++) {  		if (words [j].Length > 3 && !keywords.Contains (words [j]) && !words [j].StartsWith ("\x5E")) {  			keywords.Add (words [j]);  		}  	}  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,AddBaseKeywords,The following statement contains a magic number: for (Int32 j = 0; j < words.Length; j++) {  	if (words [j].Length > 3 && !keywords.Contains (words [j]) && !words [j].StartsWith ("\x5E")) {  		keywords.Add (words [j]);  	}  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,AddBaseKeywords,The following statement contains a magic number: if (words [j].Length > 3 && !keywords.Contains (words [j]) && !words [j].StartsWith ("\x5E")) {  	keywords.Add (words [j]);  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlCharAdded,The following statement contains a magic number: if (this.isSupported) {  	String lang = sci.ConfigurationLanguage;  	AutoInsert insert = settingObject.AutoInsertType;  	Language config = ScintillaControl.Configuration.GetLanguage (lang);  	String characters = config.characterclass.Characters;  	// Do not autocomplete in word  	Char c = (char)sci.CharAt (sci.CurrentPos);  	if (characters.IndexOf (c) >= 0)  		return;  	// Autocomplete after typing word chars only  	if (characters.IndexOf ((char)value) < 0)  		return;  	String curWord = sci.GetWordLeft (sci.CurrentPos - 1' false);  	if (curWord == null || curWord.Length < 3)  		return;  	List<ICompletionListItem> items = this.GetCompletionListItems (lang' sci.FileName);  	if (items != null && items.Count > 0) {  		items.Sort ();  		CompletionList.Show (items' true' curWord);  		if (insert == AutoInsert.Never || (insert == AutoInsert.CPP && sci.Lexer != 3/*CPP*/) || lang == "text") {  			CompletionList.DisableAutoInsertion ();  		}  	}  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlCharAdded,The following statement contains a magic number: if (this.isSupported) {  	String lang = sci.ConfigurationLanguage;  	AutoInsert insert = settingObject.AutoInsertType;  	Language config = ScintillaControl.Configuration.GetLanguage (lang);  	String characters = config.characterclass.Characters;  	// Do not autocomplete in word  	Char c = (char)sci.CharAt (sci.CurrentPos);  	if (characters.IndexOf (c) >= 0)  		return;  	// Autocomplete after typing word chars only  	if (characters.IndexOf ((char)value) < 0)  		return;  	String curWord = sci.GetWordLeft (sci.CurrentPos - 1' false);  	if (curWord == null || curWord.Length < 3)  		return;  	List<ICompletionListItem> items = this.GetCompletionListItems (lang' sci.FileName);  	if (items != null && items.Count > 0) {  		items.Sort ();  		CompletionList.Show (items' true' curWord);  		if (insert == AutoInsert.Never || (insert == AutoInsert.CPP && sci.Lexer != 3/*CPP*/) || lang == "text") {  			CompletionList.DisableAutoInsertion ();  		}  	}  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlCharAdded,The following statement contains a magic number: if (curWord == null || curWord.Length < 3)  	return;  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlCharAdded,The following statement contains a magic number: if (items != null && items.Count > 0) {  	items.Sort ();  	CompletionList.Show (items' true' curWord);  	if (insert == AutoInsert.Never || (insert == AutoInsert.CPP && sci.Lexer != 3/*CPP*/) || lang == "text") {  		CompletionList.DisableAutoInsertion ();  	}  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlCharAdded,The following statement contains a magic number: if (insert == AutoInsert.Never || (insert == AutoInsert.CPP && sci.Lexer != 3/*CPP*/) || lang == "text") {  	CompletionList.DisableAutoInsertion ();  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlTextChanged,The following statement contains a magic number: if (this.isSupported) {  	this.updateTimer.Stop ();  	this.updateTimer.Interval = Math.Max (500' sci.Length / 10);  	this.updateTimer.Start ();  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlTextChanged,The following statement contains a magic number: if (this.isSupported) {  	this.updateTimer.Stop ();  	this.updateTimer.Interval = Math.Max (500' sci.Length / 10);  	this.updateTimer.Start ();  }  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlTextChanged,The following statement contains a magic number: this.updateTimer.Interval = Math.Max (500' sci.Length / 10);  
Magic Number,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,SciControlTextChanged,The following statement contains a magic number: this.updateTimer.Interval = Math.Max (500' sci.Length / 10);  
Missing Default,BasicCompletion,PluginMain,C:\repos\littlesome_LuaDevelop\External\Plugins\BasicCompletion\PluginMain.cs,HandleEvent,The following switch statement is missing a default case: switch (e.Type) {  case EventType.Keys: {  	Keys keys = (e as KeyEvent).Value;  	if (this.isSupported && keys == (Keys.Control | Keys.Space)) {  		String lang = document.SciControl.ConfigurationLanguage;  		List<ICompletionListItem> items = this.GetCompletionListItems (lang' document.FileName);  		if (items != null && items.Count > 0) {  			items.Sort ();  			Int32 curPos = document.SciControl.CurrentPos - 1;  			String curWord = document.SciControl.GetWordLeft (curPos' false);  			if (curWord == null)  				curWord = String.Empty;  			CompletionList.Show (items' false' curWord);  			e.Handled = true;  		}  	}  	else if (this.isSupported && keys == (Keys.Control | Keys.Alt | Keys.Space)) {  		PluginBase.MainForm.CallCommand ("InsertSnippet"' "null");  		e.Handled = true;  	}  	break;  }  case EventType.UIStarted:  case EventType.FileSwitch: {  	this.isSupported = false;  	break;  }  case EventType.Completion: {  	if (!e.Handled) {  		this.isSupported = true;  		e.Handled = true;  	}  	this.HandleFile (document);  	break;  }  case EventType.SyntaxChange:  case EventType.ApplySettings: {  	this.HandleFile (document);  	break;  }  case EventType.FileSave: {  	TextEvent te = e as TextEvent;  	if (te.Value == document.FileName && this.isSupported)  		this.AddDocumentKeywords (document);  	else {  		ITabbedDocument saveDoc = DocumentManager.FindDocument (te.Value);  		if (saveDoc != null)  			this.updateTable [te.Value] = true;  	}  	break;  }  case EventType.Command: {  	DataEvent de = e as DataEvent;  	if (de.Action == "ProjectManager.Project") {  		IProject project = de.Data as IProject;  		if (project != null)  			this.LoadProjectKeywords (project);  	}  	break;  }  }  
