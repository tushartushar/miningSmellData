Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TP_CS,MainInterface,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\MainInterface.cs,EventZoomImage,Cyclomatic complexity of the method is 10
Long Parameter List,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The method has 5 parameters.
Long Statement,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generateImage,The length of the statement  "	bd = _resultImage.LockBits (new Rectangle (0' 0' _width' _height)' System.Drawing.Imaging.ImageLockMode.WriteOnly' _resultImage.PixelFormat); " is 141.
Magic Number,TP_CS,MainInterface,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\MainInterface.cs,MainInterface,The following statement contains a magic number: _viewPort = new RectangleF (-1' -1' 2' 2);  
Magic Number,TP_CS,MainInterface,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\MainInterface.cs,MainInterface,The following statement contains a magic number: _viewPort = new RectangleF (-1' -1' 2' 2);  
Magic Number,TP_CS,MainInterface,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\MainInterface.cs,getRenderingParam,The following statement contains a magic number: rp.RedParam = (float)(scrollRed.Value / 100.0);  
Magic Number,TP_CS,MainInterface,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\MainInterface.cs,getRenderingParam,The following statement contains a magic number: rp.BlueParam = (float)(scrollBlue.Value / 100.0);  
Magic Number,TP_CS,MainInterface,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\MainInterface.cs,getRenderingParam,The following statement contains a magic number: rp.GreenParam = (float)(scrollGreen.Value / 100.0);  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,btExport_Click,The following statement contains a magic number: try {  	width = int.Parse (tbWidth.Text);  	height = int.Parse (tbHeight.Text);  	sfd = new SaveFileDialog ();  	sfd.DefaultExt = ".png";  	sfd.AddExtension = true;  	sfd.CheckPathExists = true;  	sfd.Filter = "Image png (*.png)|*.png|Image jpeg (*.jpg)|*.jpg";  	if (sfd.ShowDialog () == DialogResult.OK) {  		fileName = sfd.FileName;  		// Forced AA * 4 (size *2 on with' Height)  		_fractalP.width = width * 2;  		_fractalP.height = height * 2;  		_fractalP.viewPort.X = float.Parse (txtViewPosX.Text);  		_fractalP.viewPort.Y = float.Parse (txtViewPosY.Text);  		_fractalP.viewPort.Width = float.Parse (txtViewWidth.Text);  		_fractalP.viewPort.Height = float.Parse (txtViewHeight.Text);  		_fractalP.highQuality = true;  		this.Enabled = false;  		this.tbHeight.Enabled = false;  		this.tbWidth.Enabled = false;  		fractalG = new FractalGenerator (width' height);  		fractalG.generate (_fractalP' null);  		fractalG.generateImage (_renderP' null);  		im = fractalG.Image;  		this.Enabled = true;  		// 2x High quality downscaling  		Bitmap tmpImage = new Bitmap (width' height' im.PixelFormat);  		Graphics handle = Graphics.FromImage (tmpImage);  		handle.InterpolationMode = InterpolationMode.HighQualityBicubic;  		handle.DrawImage (fractalG.Image' 0' 0' width' height);  		// Save the image  		tmpImage.Save (fileName);  		this.Close ();  	}  }  catch (FormatException) {  	MessageBox.Show ("Invalid Numerical Value"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  }  catch (ArgumentException exc) {  	MessageBox.Show ("Invalid Image name : " + exc.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  }  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,btExport_Click,The following statement contains a magic number: try {  	width = int.Parse (tbWidth.Text);  	height = int.Parse (tbHeight.Text);  	sfd = new SaveFileDialog ();  	sfd.DefaultExt = ".png";  	sfd.AddExtension = true;  	sfd.CheckPathExists = true;  	sfd.Filter = "Image png (*.png)|*.png|Image jpeg (*.jpg)|*.jpg";  	if (sfd.ShowDialog () == DialogResult.OK) {  		fileName = sfd.FileName;  		// Forced AA * 4 (size *2 on with' Height)  		_fractalP.width = width * 2;  		_fractalP.height = height * 2;  		_fractalP.viewPort.X = float.Parse (txtViewPosX.Text);  		_fractalP.viewPort.Y = float.Parse (txtViewPosY.Text);  		_fractalP.viewPort.Width = float.Parse (txtViewWidth.Text);  		_fractalP.viewPort.Height = float.Parse (txtViewHeight.Text);  		_fractalP.highQuality = true;  		this.Enabled = false;  		this.tbHeight.Enabled = false;  		this.tbWidth.Enabled = false;  		fractalG = new FractalGenerator (width' height);  		fractalG.generate (_fractalP' null);  		fractalG.generateImage (_renderP' null);  		im = fractalG.Image;  		this.Enabled = true;  		// 2x High quality downscaling  		Bitmap tmpImage = new Bitmap (width' height' im.PixelFormat);  		Graphics handle = Graphics.FromImage (tmpImage);  		handle.InterpolationMode = InterpolationMode.HighQualityBicubic;  		handle.DrawImage (fractalG.Image' 0' 0' width' height);  		// Save the image  		tmpImage.Save (fileName);  		this.Close ();  	}  }  catch (FormatException) {  	MessageBox.Show ("Invalid Numerical Value"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  }  catch (ArgumentException exc) {  	MessageBox.Show ("Invalid Image name : " + exc.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  }  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,btExport_Click,The following statement contains a magic number: if (sfd.ShowDialog () == DialogResult.OK) {  	fileName = sfd.FileName;  	// Forced AA * 4 (size *2 on with' Height)  	_fractalP.width = width * 2;  	_fractalP.height = height * 2;  	_fractalP.viewPort.X = float.Parse (txtViewPosX.Text);  	_fractalP.viewPort.Y = float.Parse (txtViewPosY.Text);  	_fractalP.viewPort.Width = float.Parse (txtViewWidth.Text);  	_fractalP.viewPort.Height = float.Parse (txtViewHeight.Text);  	_fractalP.highQuality = true;  	this.Enabled = false;  	this.tbHeight.Enabled = false;  	this.tbWidth.Enabled = false;  	fractalG = new FractalGenerator (width' height);  	fractalG.generate (_fractalP' null);  	fractalG.generateImage (_renderP' null);  	im = fractalG.Image;  	this.Enabled = true;  	// 2x High quality downscaling  	Bitmap tmpImage = new Bitmap (width' height' im.PixelFormat);  	Graphics handle = Graphics.FromImage (tmpImage);  	handle.InterpolationMode = InterpolationMode.HighQualityBicubic;  	handle.DrawImage (fractalG.Image' 0' 0' width' height);  	// Save the image  	tmpImage.Save (fileName);  	this.Close ();  }  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,btExport_Click,The following statement contains a magic number: if (sfd.ShowDialog () == DialogResult.OK) {  	fileName = sfd.FileName;  	// Forced AA * 4 (size *2 on with' Height)  	_fractalP.width = width * 2;  	_fractalP.height = height * 2;  	_fractalP.viewPort.X = float.Parse (txtViewPosX.Text);  	_fractalP.viewPort.Y = float.Parse (txtViewPosY.Text);  	_fractalP.viewPort.Width = float.Parse (txtViewWidth.Text);  	_fractalP.viewPort.Height = float.Parse (txtViewHeight.Text);  	_fractalP.highQuality = true;  	this.Enabled = false;  	this.tbHeight.Enabled = false;  	this.tbWidth.Enabled = false;  	fractalG = new FractalGenerator (width' height);  	fractalG.generate (_fractalP' null);  	fractalG.generateImage (_renderP' null);  	im = fractalG.Image;  	this.Enabled = true;  	// 2x High quality downscaling  	Bitmap tmpImage = new Bitmap (width' height' im.PixelFormat);  	Graphics handle = Graphics.FromImage (tmpImage);  	handle.InterpolationMode = InterpolationMode.HighQualityBicubic;  	handle.DrawImage (fractalG.Image' 0' 0' width' height);  	// Save the image  	tmpImage.Save (fileName);  	this.Close ();  }  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,btExport_Click,The following statement contains a magic number: _fractalP.width = width * 2;  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,btExport_Click,The following statement contains a magic number: _fractalP.height = height * 2;  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,ClickAspectRatio,The following statement contains a magic number: try {  	double aspectRatio;  	double oldViewPortWidth' newViewPortWidth' diffViewPortWidth;  	double newViewPortPosX;  	aspectRatio = double.Parse (tbWidth.Text) / double.Parse (tbHeight.Text);  	oldViewPortWidth = double.Parse (txtViewHeight.Text);  	newViewPortWidth = oldViewPortWidth * aspectRatio;  	diffViewPortWidth = newViewPortWidth - oldViewPortWidth;  	newViewPortPosX = double.Parse (txtViewPosX.Text) - diffViewPortWidth / 2.0;  	txtViewPosX.Text = newViewPortPosX.ToString ();  	txtViewWidth.Text = newViewPortWidth.ToString ();  }  catch (FormatException) {  	MessageBox.Show ("Invalid Numerical Value"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  }  
Magic Number,TP_CS,ExportImage,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\ExportImage.cs,ClickAspectRatio,The following statement contains a magic number: newViewPortPosX = double.Parse (txtViewPosX.Text) - diffViewPortWidth / 2.0;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,init,The following statement contains a magic number: _tabResultImage = new byte[4 * height * width];  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generateImage,The following statement contains a magic number: try {  	Parallel.For (0' _height' po' j =>  {  		byte valR' valG' valB;  		float val;  		int posPixel = bd.Stride * j;  		for (int i = 0; i < _width; i++) {  			/**                          * Convert the iteration number in a byte => iteration space to image space                          * result = log(iter) * contrast + brightness                          * log(iter) has already been performed in the generation                          * Do not perform boundary checking                          **/val = getValAt (i' j) * rp.contrast + rp.brightness;  			valR = castFloatToByte (val * rp.RedParam' rp.RedExp);  			valG = castFloatToByte (val * rp.GreenParam' rp.GreenExp);  			valB = castFloatToByte (val * rp.BlueParam' rp.BlueExp);  			_tabResultImage [posPixel + 0] = valB;  			_tabResultImage [posPixel + 1] = valG;  			_tabResultImage [posPixel + 2] = valR;  			posPixel += pixelSize;  		}  	});  	Marshal.Copy (_tabResultImage' 0' bd.Scan0' _height * bd.Stride);  }  catch (OperationCanceledException e) {  	throw e;  }  finally {  	_resultImage.UnlockBits (bd);  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generateImage,The following statement contains a magic number: Parallel.For (0' _height' po' j =>  {  	byte valR' valG' valB;  	float val;  	int posPixel = bd.Stride * j;  	for (int i = 0; i < _width; i++) {  		/**                          * Convert the iteration number in a byte => iteration space to image space                          * result = log(iter) * contrast + brightness                          * log(iter) has already been performed in the generation                          * Do not perform boundary checking                          **/val = getValAt (i' j) * rp.contrast + rp.brightness;  		valR = castFloatToByte (val * rp.RedParam' rp.RedExp);  		valG = castFloatToByte (val * rp.GreenParam' rp.GreenExp);  		valB = castFloatToByte (val * rp.BlueParam' rp.BlueExp);  		_tabResultImage [posPixel + 0] = valB;  		_tabResultImage [posPixel + 1] = valG;  		_tabResultImage [posPixel + 2] = valR;  		posPixel += pixelSize;  	}  });  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generateImage,The following statement contains a magic number: for (int i = 0; i < _width; i++) {  	/**                          * Convert the iteration number in a byte => iteration space to image space                          * result = log(iter) * contrast + brightness                          * log(iter) has already been performed in the generation                          * Do not perform boundary checking                          **/val = getValAt (i' j) * rp.contrast + rp.brightness;  	valR = castFloatToByte (val * rp.RedParam' rp.RedExp);  	valG = castFloatToByte (val * rp.GreenParam' rp.GreenExp);  	valB = castFloatToByte (val * rp.BlueParam' rp.BlueExp);  	_tabResultImage [posPixel + 0] = valB;  	_tabResultImage [posPixel + 1] = valG;  	_tabResultImage [posPixel + 2] = valR;  	posPixel += pixelSize;  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generateImage,The following statement contains a magic number: _tabResultImage [posPixel + 2] = valR;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: for (iter = 0; iter < maxIter && z.AbsSq () < N * N; iter++) {  	// z^{n+1} = z^n * z^n + c  	// also : z.SquareAddIP(c);  	// almost x2 speedup by inlining code' no property used  	newImag = 2 * z._real * z._imag + c._imag;  	z._real = z._real * z._real - z._imag * z._imag + c._real;  	z._imag = newImag;  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: newImag = 2 * z._real * z._imag + c._imag;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: if (smoothing) {  	double val = Math.Log (Math.Sqrt (z.AbsSq ()) / Math.Log (N));  	if (val <= 0)  		return -1000;  	else  		value -= Math.Log (val' 2);  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: if (smoothing) {  	double val = Math.Log (Math.Sqrt (z.AbsSq ()) / Math.Log (N));  	if (val <= 0)  		return -1000;  	else  		value -= Math.Log (val' 2);  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: if (val <= 0)  	return -1000;  else  	value -= Math.Log (val' 2);  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: if (val <= 0)  	return -1000;  else  	value -= Math.Log (val' 2);  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: return -1000;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeValAt,The following statement contains a magic number: value -= Math.Log (val' 2);  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: for (iter = 0; iter < maxIter && z.AbsSq () < N * N; iter++) {  	// Burning ship "special trick"  	z._real = Math.Abs (z._real);  	z._imag = Math.Abs (z._imag);  	// z^{n+1} = z^n * z^n + c  	// also : z.SquareAddIP(c);  	// almost x2 speedup by inlining code' no property used  	newImag = 2 * z._real * z._imag + c._imag;  	z._real = z._real * z._real - z._imag * z._imag + c._real;  	z._imag = newImag;  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: newImag = 2 * z._real * z._imag + c._imag;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: if (smoothing) {  	double val = Math.Log (Math.Sqrt (z.AbsSq ()) / Math.Log (N));  	if (val <= 0)  		return -1000;  	else  		value -= Math.Log (val' 2);  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: if (smoothing) {  	double val = Math.Log (Math.Sqrt (z.AbsSq ()) / Math.Log (N));  	if (val <= 0)  		return -1000;  	else  		value -= Math.Log (val' 2);  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: if (val <= 0)  	return -1000;  else  	value -= Math.Log (val' 2);  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: if (val <= 0)  	return -1000;  else  	value -= Math.Log (val' 2);  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: return -1000;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,ComputeAbsValAt,The following statement contains a magic number: value -= Math.Log (val' 2);  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: if (fp.highQuality) {  	bailout = 1000;  	maxIter = 3000;  }  else {  	bailout = 2;  	maxIter = 255;  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: if (fp.highQuality) {  	bailout = 1000;  	maxIter = 3000;  }  else {  	bailout = 2;  	maxIter = 255;  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: if (fp.highQuality) {  	bailout = 1000;  	maxIter = 3000;  }  else {  	bailout = 2;  	maxIter = 255;  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: if (fp.highQuality) {  	bailout = 1000;  	maxIter = 3000;  }  else {  	bailout = 2;  	maxIter = 255;  }  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: bailout = 1000;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: maxIter = 3000;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: bailout = 2;  
Magic Number,TP_CS,FractalGenerator,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\FractalGenerator.cs,generate,The following statement contains a magic number: maxIter = 255;  
Magic Number,TP_CS,RectangleF,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\RectangleF.cs,Shrink,The following statement contains a magic number: _x += (_width - (val * _width)) / 2;  
Magic Number,TP_CS,RectangleF,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\RectangleF.cs,Shrink,The following statement contains a magic number: _y += (_height - (val * _height)) / 2;  
Missing Default,TP_CS,MainInterface,C:\repos\Blizarre_FractalExplorer\Fractal Explorer\MainInterface.cs,EventZoomImage,The following switch statement is missing a default case: switch (mea.Button) {  case MouseButtons.Left:  	moveView (mea.X' mea.Y);  	_viewPort.Shrink (0.5f);  	break;  case MouseButtons.Right:  	_viewPort.Shrink (2f);  	break;  case MouseButtons.Middle:  	moveView (mea.X' mea.Y);  	break;  }  
