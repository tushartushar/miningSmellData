Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ScanningManager,UsbRelay,C:\repos\IritLevin_ScanningManager\UsbRelay.cs,WriteAduDevice,The method has 5 parameters.
Long Parameter List,ScanningManager,UsbRelay,C:\repos\IritLevin_ScanningManager\UsbRelay.cs,ReadAduDevice,The method has 5 parameters.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,calcExperimentEnd,The length of the statement  "	dtpEndDateTime.Value = dtpStartDateTime.Value.AddMinutes (Convert.ToInt32 (tbRepetitions.Text) * Convert.ToDouble (tbTimeGap.Text)); " is 132.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,calcStartGapEndTime,The length of the statement  "	tbStartGap.Text = Convert.ToString (Convert.ToInt32 ((dtpStartDateTime.Value - DateTime.Now).Ticks / HunderdNano2Sec / 60)); " is 124.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,MainFormFormClosing,The length of the statement  "		DialogResult result = MessageBox.Show (@"Are you sure you want to exit?"' @"Exit Confirmation"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 145.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CbScanStopCheckedChanged,The length of the statement  "			Scanners [i].SelectDevice (ScannersList [SelectedInd [i]]' Convert.ToInt32 (ConfigurationManager.AppSettings ["ScanningDPI"])); " is 127.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CbScanStopCheckedChanged,The length of the statement  "		DialogResult result = MessageBox.Show (@"Are you sure you want to stop scanning?"' @"Stop Confirmation"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning); " is 154.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,ScanNow,The length of the statement  "				StatusLabel.Text = @"Scanning is in progress (scanner " + (i + 1).ToString () + @"/" + NumberOfScanners.ToString () + ")"; " is 122.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,ScanNow,The length of the statement  "				LastScans [i] = Scanners [i].Scan (tbOutputPath.Text + @"\" + tbFileName.Text + @"_" + i.ToString () + @"_" + GetDateString (DateTime.Now) + @".tif"); " is 150.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,ScanNow,The length of the statement  "				string ErrMsg = DateTime.Now.ToString ("dd/MM/yyyy HH:mm") + " - " + e.Message.ToString () + Environment.NewLine + tbLog.Text; " is 126.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,ScanNow,The length of the statement  "				string ErrMsg = DateTime.Now.ToString ("dd/MM/yyyy HH:mm") + " - " + e.Message.ToString () + Environment.NewLine + tbLog.Text; " is 126.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,EnableAllScanners,The length of the statement  "			tbLog.Text = DateTime.Now.ToShortDateString () + " " + DateTime.Now.ToShortTimeString () + " - " + e.Message.ToString () + Environment.NewLine + tbLog.Text; " is 156.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,UpdateNextScanProgress,The length of the statement  "		lblProgress.Text = @"Time Left: " + Seconds2hhmmssString (Convert.ToInt32 ((dtpEndDateTime.Value - DateTime.Now).Ticks / (HunderdNano2Sec))); " is 141.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,BtnTestEmailSmsClick,The length of the statement  "			DialogResult result = MessageBox.Show (ex.ToString ()' @"Error Sending Email"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 123.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,BtnTestEmailSmsClick,The length of the statement  "			DialogResult result = MessageBox.Show (ex.ToString ()' @"Error Sending SMS"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 121.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartLogging,The length of the statement  "	scnMngrLog.LogInfo (@"ScanningManager version :" + System.Reflection.Assembly.GetExecutingAssembly ().GetName (false).Version.ToString ()); " is 139.
Long Statement,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartLogging,The length of the statement  "	ExpParameters = @"Repetitions: " + tbRepetitions.Text + @"   Time Gap: " + tbTimeGap.Text + @"   Start After: " + tbStartGap.Text + @"   Start Time: " + dtpStartDateTime.Text + @"   End Time: " + dtpEndDateTime.Text; " is 216.
Long Statement,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The length of the statement  "			if (Devcon.GetDeviceStatus (InstanceID) == (int)ConnectionStatus.Connected && PowerMethod != (int)ScnPowerMethod.NONE) { " is 120.
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,calcStartGapEndTime,The following statement contains a magic number: tbStartGap.Text = Convert.ToString (Convert.ToInt32 ((dtpStartDateTime.Value - DateTime.Now).Ticks / HunderdNano2Sec / 60));  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartTimerTick,The following statement contains a magic number: ScanningTimer.Interval = Convert.ToInt32 (Decimal.Floor (Convert.ToDecimal (tbTimeGap.Text) * 60 * 1000));  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartTimerTick,The following statement contains a magic number: ScanningTimer.Interval = Convert.ToInt32 (Decimal.Floor (Convert.ToDecimal (tbTimeGap.Text) * 60 * 1000));  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartTimerTick,The following statement contains a magic number: lblTimeToNextScan.Text = @"Time To Next Scan: " + Seconds2hhmmssString ((Convert.ToInt32 (tbTimeGap.Text) * 60));  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartTimerTick,The following statement contains a magic number: progTimeToNextScan.Maximum = Convert.ToInt32 (tbTimeGap.Text) * 60;  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartTimerTick,The following statement contains a magic number: ScanningTimer.Interval = Convert.ToInt32 (Decimal.Floor (Convert.ToDecimal (tbTimeGap.Text) * 60 * 1000));  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,StartTimerTick,The following statement contains a magic number: ScanningTimer.Interval = Convert.ToInt32 (Decimal.Floor (Convert.ToDecimal (tbTimeGap.Text) * 60 * 1000));  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CbScanStopCheckedChanged,The following statement contains a magic number: if (cbScanStop.Checked) {  	StartLogging ();  	// disabling the configuration and enabling the status group  	// ----------------------------------------------------------  	gbExperimentStatus.Enabled = true;  	gbScanningConfiguration.Enabled = false;  	gbExperimentConfiguration.Enabled = false;  	cbScanStop.Text = "Stop";  	cbScanStop.Enabled = false;  	// Initializing the properties of scanning for each scanner  	// ---------------------------------------------------------  	AllScannersEnabled = false;  	NumberOfScanners = lbScannersList.SelectedItems.Count;  	Scanners = new ScannerControl[NumberOfScanners];  	LastScans = new Bitmap[NumberOfScanners];  	ListBox.SelectedIndexCollection SelectedInd = lbScannersList.SelectedIndices;  	cmbActiveScanners.Items.Clear ();  	for (int i = 0; i < NumberOfScanners; i++) {  		Scanners [i] = new ScannerControl (LogFileName);  		Scanners [i].SelectDevice (ScannersList [SelectedInd [i]]' Convert.ToInt32 (ConfigurationManager.AppSettings ["ScanningDPI"]));  		cmbActiveScanners.Items.Add (lbScannersList.SelectedItems [i]);  	}  	// taking the fisrt picture  	// -------------------------  	if (cbRecordEnvRoom.Checked) {  		LogEnvRoom ();  	}  	ScanNow ();  	// total experiment progress bar  	progExperimentProgress.Minimum = 0;  	progExperimentProgress.Maximum = Convert.ToInt32 ((dtpEndDateTime.Value - DateTime.Now).Ticks / (HunderdNano2Sec));  	progExperimentProgress.Value = 0;  	// Setting the timer to the first picture  	// ---------------------------------------  	int TimeToFirstScan = Convert.ToInt32 ((dtpStartDateTime.Value - DateTime.Now).Ticks / HunderdNano2Sec);  	if (TimeToFirstScan < 0) {  		// starting experiment immediatly  		StartTimerTick (this' new EventArgs ());  	}  	else {  		// starting experiment with delay  		StartTimer.Interval = TimeToFirstScan * 1000;  		StartTimer.Start ();  		// starting progress bar  		NextScan = dtpStartDateTime.Value;  		progTimeToNextScan.Minimum = 0;  		progTimeToNextScan.Maximum = TimeToFirstScan;  		progTimeToNextScan.Value = 0;  		lblTimeToNextScan.Text = @"Time To Next Scan: " + Seconds2hhmmssString (TimeToFirstScan);  		//TimeToFirstScan.ToString() + " seconds";  	}  	UpdateProgressTimer.Start ();  }  // ---------------------------------------------  // if the button was unpressed - stops scanning  // ---------------------------------------------  else {  	DialogResult result = MessageBox.Show (@"Are you sure you want to stop scanning?"' @"Stop Confirmation"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning);  	if (result == DialogResult.Yes) {  		StatusLabel.Text = "please wait while scanners are reconnected";  		this.Refresh ();  		ScanningTimer.Stop ();  		StartTimer.Stop ();  		UpdateProgressTimer.Stop ();  		gbScanningConfiguration.Enabled = true;  		gbExperimentConfiguration.Enabled = true;  		gbExperimentStatus.Enabled = true;  		EnableAllScanners ();  		string msgText = "Process was stopped by user at: " + DateTime.Now.ToString ("dd/MM/yyyy HH:mm");  		StatusLabel.Text = msgText;  		scnMngrLog.LogInfo (msgText);  		cbScanStop.Text = "Scan";  		cbScanStop.Enabled = true;  	}  	else {  		cbScanStop.Checked = true;  	}  }  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CbScanStopCheckedChanged,The following statement contains a magic number: if (TimeToFirstScan < 0) {  	// starting experiment immediatly  	StartTimerTick (this' new EventArgs ());  }  else {  	// starting experiment with delay  	StartTimer.Interval = TimeToFirstScan * 1000;  	StartTimer.Start ();  	// starting progress bar  	NextScan = dtpStartDateTime.Value;  	progTimeToNextScan.Minimum = 0;  	progTimeToNextScan.Maximum = TimeToFirstScan;  	progTimeToNextScan.Value = 0;  	lblTimeToNextScan.Text = @"Time To Next Scan: " + Seconds2hhmmssString (TimeToFirstScan);  	//TimeToFirstScan.ToString() + " seconds";  }  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CbScanStopCheckedChanged,The following statement contains a magic number: StartTimer.Interval = TimeToFirstScan * 1000;  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CreateDefaultPicture,The following statement contains a magic number: point2 = new Point (100' 100);  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CreateDefaultPicture,The following statement contains a magic number: point2 = new Point (100' 100);  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CreateDefaultPicture,The following statement contains a magic number: point1 = new Point (100' 0);  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CreateDefaultPicture,The following statement contains a magic number: point2 = new Point (0' 100);  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CreateDefaultPicture,The following statement contains a magic number: drawPoint = new PointF (5' 40);  
Magic Number,ScanningManager,MainForm,C:\repos\IritLevin_ScanningManager\MainForm.cs,CreateDefaultPicture,The following statement contains a magic number: drawPoint = new PointF (5' 40);  
Magic Number,ScanningManager,ScannerControl,C:\repos\IritLevin_ScanningManager\ScannerControl.cs,Scan,The following statement contains a magic number: while (trial <= MaxTrials && !RT) {  	try {  		InitScanner ((DeviceInfo)myDeviceInfo);  		if (Scanner != null) {  			// transfer picture to our temporary file  			string currFilename = Path.GetTempFileName ();  			File.Delete (currFilename);  			// transfer picture to our temporary file  			ImageFile IF = (ImageFile)wiaItem.Transfer (FormatID.wiaFormatBMP);  			IF.SaveFile (currFilename);  			// Create a Bitmap from the loaded file (Image.FromFile locks the file...)  			FileStream fs = new FileStream (currFilename' FileMode.Open' FileAccess.Read);  			// KLUDGE: Must wrap the FromStream Image with a new Bitmap.  			// Otherwise get OutOfMemoryException later when using ColorMatrix on it.  			myBitmap = new Bitmap (Image.FromStream (fs));  			fs.Close ();  			SaveBitmapAsTiff (myBitmap' FileName);  			// Don't leave junk behind!  			File.Delete (currFilename);  			System.Threading.Thread.Sleep (10000);  			Disable ();  			RT = true;  		}  		else {  			throw new ScnCtrlException ("Device should be Selected First");  		}  	}  	catch (ScnrPwrMngrException e) {  		string errMsg = e.ToString () + Environment.NewLine + "   Trial: " + trial.ToString ();  		scnMngrLog.LogError (errMsg);  		trial++;  	}  	catch (System.Runtime.InteropServices.COMException e) {  		string errMsg = e.ToString () + Environment.NewLine + "   Trial: " + trial.ToString ();  		scnMngrLog.LogError (errMsg);  		trial++;  	}  }  
Magic Number,ScanningManager,ScannerControl,C:\repos\IritLevin_ScanningManager\ScannerControl.cs,Scan,The following statement contains a magic number: try {  	InitScanner ((DeviceInfo)myDeviceInfo);  	if (Scanner != null) {  		// transfer picture to our temporary file  		string currFilename = Path.GetTempFileName ();  		File.Delete (currFilename);  		// transfer picture to our temporary file  		ImageFile IF = (ImageFile)wiaItem.Transfer (FormatID.wiaFormatBMP);  		IF.SaveFile (currFilename);  		// Create a Bitmap from the loaded file (Image.FromFile locks the file...)  		FileStream fs = new FileStream (currFilename' FileMode.Open' FileAccess.Read);  		// KLUDGE: Must wrap the FromStream Image with a new Bitmap.  		// Otherwise get OutOfMemoryException later when using ColorMatrix on it.  		myBitmap = new Bitmap (Image.FromStream (fs));  		fs.Close ();  		SaveBitmapAsTiff (myBitmap' FileName);  		// Don't leave junk behind!  		File.Delete (currFilename);  		System.Threading.Thread.Sleep (10000);  		Disable ();  		RT = true;  	}  	else {  		throw new ScnCtrlException ("Device should be Selected First");  	}  }  catch (ScnrPwrMngrException e) {  	string errMsg = e.ToString () + Environment.NewLine + "   Trial: " + trial.ToString ();  	scnMngrLog.LogError (errMsg);  	trial++;  }  catch (System.Runtime.InteropServices.COMException e) {  	string errMsg = e.ToString () + Environment.NewLine + "   Trial: " + trial.ToString ();  	scnMngrLog.LogError (errMsg);  	trial++;  }  
Magic Number,ScanningManager,ScannerControl,C:\repos\IritLevin_ScanningManager\ScannerControl.cs,Scan,The following statement contains a magic number: if (Scanner != null) {  	// transfer picture to our temporary file  	string currFilename = Path.GetTempFileName ();  	File.Delete (currFilename);  	// transfer picture to our temporary file  	ImageFile IF = (ImageFile)wiaItem.Transfer (FormatID.wiaFormatBMP);  	IF.SaveFile (currFilename);  	// Create a Bitmap from the loaded file (Image.FromFile locks the file...)  	FileStream fs = new FileStream (currFilename' FileMode.Open' FileAccess.Read);  	// KLUDGE: Must wrap the FromStream Image with a new Bitmap.  	// Otherwise get OutOfMemoryException later when using ColorMatrix on it.  	myBitmap = new Bitmap (Image.FromStream (fs));  	fs.Close ();  	SaveBitmapAsTiff (myBitmap' FileName);  	// Don't leave junk behind!  	File.Delete (currFilename);  	System.Threading.Thread.Sleep (10000);  	Disable ();  	RT = true;  }  else {  	throw new ScnCtrlException ("Device should be Selected First");  }  
Magic Number,ScanningManager,ScannerControl,C:\repos\IritLevin_ScanningManager\ScannerControl.cs,Scan,The following statement contains a magic number: System.Threading.Thread.Sleep (10000);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The following statement contains a magic number: while (trial <= MaxTrials && !RT) {  	try {  		RT = true;  		// Disconnect  		if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  			Devcon.DevconDisable (InstanceID);  		}  		else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  			Devcon.DevconDisable (InstanceID);  			PowerOff ();  		}  		// Check if got disconnected  		if (Devcon.GetDeviceStatus (InstanceID) == (int)ConnectionStatus.Connected && PowerMethod != (int)ScnPowerMethod.NONE) {  			RT = false;  			string errMsg = "Scanner " + ScannerName + " was not disconnected. Trial: " + trial.ToString ();  			scnMngrLog.LogWarn (errMsg);  			System.Threading.Thread.Sleep (1000);  		}  	}  	catch (RelayException e) {  		string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  		scnMngrLog.LogError (errMsg);  		RT = false;  		System.Threading.Thread.Sleep (1000);  	}  	trial++;  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The following statement contains a magic number: while (trial <= MaxTrials && !RT) {  	try {  		RT = true;  		// Disconnect  		if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  			Devcon.DevconDisable (InstanceID);  		}  		else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  			Devcon.DevconDisable (InstanceID);  			PowerOff ();  		}  		// Check if got disconnected  		if (Devcon.GetDeviceStatus (InstanceID) == (int)ConnectionStatus.Connected && PowerMethod != (int)ScnPowerMethod.NONE) {  			RT = false;  			string errMsg = "Scanner " + ScannerName + " was not disconnected. Trial: " + trial.ToString ();  			scnMngrLog.LogWarn (errMsg);  			System.Threading.Thread.Sleep (1000);  		}  	}  	catch (RelayException e) {  		string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  		scnMngrLog.LogError (errMsg);  		RT = false;  		System.Threading.Thread.Sleep (1000);  	}  	trial++;  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The following statement contains a magic number: try {  	RT = true;  	// Disconnect  	if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  		Devcon.DevconDisable (InstanceID);  	}  	else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  		Devcon.DevconDisable (InstanceID);  		PowerOff ();  	}  	// Check if got disconnected  	if (Devcon.GetDeviceStatus (InstanceID) == (int)ConnectionStatus.Connected && PowerMethod != (int)ScnPowerMethod.NONE) {  		RT = false;  		string errMsg = "Scanner " + ScannerName + " was not disconnected. Trial: " + trial.ToString ();  		scnMngrLog.LogWarn (errMsg);  		System.Threading.Thread.Sleep (1000);  	}  }  catch (RelayException e) {  	string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  	scnMngrLog.LogError (errMsg);  	RT = false;  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The following statement contains a magic number: try {  	RT = true;  	// Disconnect  	if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  		Devcon.DevconDisable (InstanceID);  	}  	else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  		Devcon.DevconDisable (InstanceID);  		PowerOff ();  	}  	// Check if got disconnected  	if (Devcon.GetDeviceStatus (InstanceID) == (int)ConnectionStatus.Connected && PowerMethod != (int)ScnPowerMethod.NONE) {  		RT = false;  		string errMsg = "Scanner " + ScannerName + " was not disconnected. Trial: " + trial.ToString ();  		scnMngrLog.LogWarn (errMsg);  		System.Threading.Thread.Sleep (1000);  	}  }  catch (RelayException e) {  	string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  	scnMngrLog.LogError (errMsg);  	RT = false;  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The following statement contains a magic number: if (Devcon.GetDeviceStatus (InstanceID) == (int)ConnectionStatus.Connected && PowerMethod != (int)ScnPowerMethod.NONE) {  	RT = false;  	string errMsg = "Scanner " + ScannerName + " was not disconnected. Trial: " + trial.ToString ();  	scnMngrLog.LogWarn (errMsg);  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,DisableScanner,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,EnableScanner,The following statement contains a magic number: while (trial <= MaxTrials && !RT) {  	try {  		RT = true;  		// Connect  		if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  			Devcon.DevconEnable (InstanceID);  		}  		else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  			Devcon.DevconEnable (InstanceID);  			PowerOn ();  		}  		// Check if got connected  		if (Devcon.GetDeviceStatus (InstanceID) != (int)ConnectionStatus.Connected) {  			RT = false;  			string errMsg = "Scanner " + ScannerName + " was not connected. Trial: " + trial.ToString ();  			scnMngrLog.LogWarn (errMsg);  			System.Threading.Thread.Sleep (1000);  		}  	}  	catch (RelayException e) {  		string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  		scnMngrLog.LogError (errMsg);  		RT = false;  		System.Threading.Thread.Sleep (1000);  	}  	trial++;  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,EnableScanner,The following statement contains a magic number: while (trial <= MaxTrials && !RT) {  	try {  		RT = true;  		// Connect  		if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  			Devcon.DevconEnable (InstanceID);  		}  		else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  			Devcon.DevconEnable (InstanceID);  			PowerOn ();  		}  		// Check if got connected  		if (Devcon.GetDeviceStatus (InstanceID) != (int)ConnectionStatus.Connected) {  			RT = false;  			string errMsg = "Scanner " + ScannerName + " was not connected. Trial: " + trial.ToString ();  			scnMngrLog.LogWarn (errMsg);  			System.Threading.Thread.Sleep (1000);  		}  	}  	catch (RelayException e) {  		string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  		scnMngrLog.LogError (errMsg);  		RT = false;  		System.Threading.Thread.Sleep (1000);  	}  	trial++;  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,EnableScanner,The following statement contains a magic number: try {  	RT = true;  	// Connect  	if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  		Devcon.DevconEnable (InstanceID);  	}  	else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  		Devcon.DevconEnable (InstanceID);  		PowerOn ();  	}  	// Check if got connected  	if (Devcon.GetDeviceStatus (InstanceID) != (int)ConnectionStatus.Connected) {  		RT = false;  		string errMsg = "Scanner " + ScannerName + " was not connected. Trial: " + trial.ToString ();  		scnMngrLog.LogWarn (errMsg);  		System.Threading.Thread.Sleep (1000);  	}  }  catch (RelayException e) {  	string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  	scnMngrLog.LogError (errMsg);  	RT = false;  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,EnableScanner,The following statement contains a magic number: try {  	RT = true;  	// Connect  	if (PowerMethod == (int)ScnPowerMethod.DEVCON) {  		Devcon.DevconEnable (InstanceID);  	}  	else if (PowerMethod == (int)ScnPowerMethod.RELAY) {  		Devcon.DevconEnable (InstanceID);  		PowerOn ();  	}  	// Check if got connected  	if (Devcon.GetDeviceStatus (InstanceID) != (int)ConnectionStatus.Connected) {  		RT = false;  		string errMsg = "Scanner " + ScannerName + " was not connected. Trial: " + trial.ToString ();  		scnMngrLog.LogWarn (errMsg);  		System.Threading.Thread.Sleep (1000);  	}  }  catch (RelayException e) {  	string errMsg = e.ToString () + Environment.NewLine + "Trial: " + trial.ToString ();  	scnMngrLog.LogError (errMsg);  	RT = false;  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,EnableScanner,The following statement contains a magic number: if (Devcon.GetDeviceStatus (InstanceID) != (int)ConnectionStatus.Connected) {  	RT = false;  	string errMsg = "Scanner " + ScannerName + " was not connected. Trial: " + trial.ToString ();  	scnMngrLog.LogWarn (errMsg);  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,EnableScanner,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,EnableScanner,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,PowerOff,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,PowerOff,The following statement contains a magic number: System.Threading.Thread.Sleep (5000);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,PowerOff,The following statement contains a magic number: System.Threading.Thread.Sleep (5000);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,PowerOn,The following statement contains a magic number: System.Threading.Thread.Sleep (500);  
Magic Number,ScanningManager,ScannerPowerManager,C:\repos\IritLevin_ScanningManager\ScannerPowerManager.cs,PowerOn,The following statement contains a magic number: System.Threading.Thread.Sleep (28000);  
Magic Number,ScanningManager,ScnDevcon,C:\repos\IritLevin_ScanningManager\ScnDevcon.cs,AnalayzeReturnedData,The following statement contains a magic number: for (int i = 0; i < NOR; i++) {  	if (ReturnedDataArray [i].IndexOf (@"Name:") > 0) {  		tmpImagingDevice.InstanceID = ReturnedDataArray [i - 1].Trim ();  		tmpImagingDevice.Name = ReturnedDataArray [i].Trim ().Remove (0' 6);  		ImagingDeviceList.Add (tmpImagingDevice);  	}  }  
Magic Number,ScanningManager,ScnDevcon,C:\repos\IritLevin_ScanningManager\ScnDevcon.cs,AnalayzeReturnedData,The following statement contains a magic number: if (ReturnedDataArray [i].IndexOf (@"Name:") > 0) {  	tmpImagingDevice.InstanceID = ReturnedDataArray [i - 1].Trim ();  	tmpImagingDevice.Name = ReturnedDataArray [i].Trim ().Remove (0' 6);  	ImagingDeviceList.Add (tmpImagingDevice);  }  
Magic Number,ScanningManager,ScnDevcon,C:\repos\IritLevin_ScanningManager\ScnDevcon.cs,AnalayzeReturnedData,The following statement contains a magic number: tmpImagingDevice.Name = ReturnedDataArray [i].Trim ().Remove (0' 6);  
Magic Number,ScanningManager,ScnDevcon,C:\repos\IritLevin_ScanningManager\ScnDevcon.cs,DevconDisable,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,ScanningManager,ScnDevcon,C:\repos\IritLevin_ScanningManager\ScnDevcon.cs,DevconEnable,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,ScanningManager,UsbRelay,C:\repos\IritLevin_ScanningManager\UsbRelay.cs,UsbRelay,The following statement contains a magic number: hAdu = OpenAduDeviceBySerialNumber (UsbRelayHardwareId' 500);  
Magic Number,ScanningManager,UsbRelay,C:\repos\IritLevin_ScanningManager\UsbRelay.cs,SendRelayCommand,The following statement contains a magic number: bRC = WriteAduDevice (hAdu' Command' uiLength' out uiWritten' 500);  
Magic Number,ScanningManager,UsbRelay,C:\repos\IritLevin_ScanningManager\UsbRelay.cs,ReadRelayStatus,The following statement contains a magic number: bRC = ReadAduDevice (hAdu' sBuffer' uiLength' out uiRead' 500);  
