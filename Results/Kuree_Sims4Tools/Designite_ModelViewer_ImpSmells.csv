Implementation smell,Namespace,Class,File,Method,Description
Long Method,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The method has 111 lines of code.
Complex Method,s3piwrappers.ModelViewer,App,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\App.cs,Main,Cyclomatic complexity of the method is 11
Complex Method,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,Cyclomatic complexity of the method is 23
Complex Method,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,UpdateMaterials,Cyclomatic complexity of the method is 13
Long Statement,s3piwrappers.ModelViewer,App,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\App.cs,Main,The length of the statement  "	//                    "Unable to locate parent process.  If this was started through another program' you will have to close it manually."); " is 140.
Long Statement,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The length of the statement  "				VRTF vrtf = (VRTF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexFormatIndex) ?? VRTF.CreateDefaultForMesh (m); " is 123.
Long Statement,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The length of the statement  "						GeometryModel3D state = DrawModel (vbuf.GetVertices (m' vrtf' m.GeometryStates [i]' uvscale)' ibuf.GetIndices (m' m.GeometryStates [i])' mHiddenMaterial); " is 154.
Long Statement,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The length of the statement  "					MessageBox.Show ("Unable to load Geostates.  You may have some corrupted data: " + ex.ToString ()' "Unable to load Geostates..."); " is 130.
Long Statement,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,GetMATDParam,The length of the statement  "	return matd == null ? null : (matd.Mtrl != null ? matd.Mtrl.SData : matd.Mtrl.SData).FirstOrDefault (x => x.Field == type) as T; " is 128.
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: if (chunk != null) {  	var mlod = chunk.RCOLBlock as MLOD;  	foreach (MLOD.Mesh m in mlod.Meshes) {  		try {  			vertCount += m.VertexCount;  			polyCount += m.PrimitiveCount;  			var vbuf = (VBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexBufferIndex);  			var ibuf = (IBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.IndexBufferIndex);  			VRTF vrtf = (VRTF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexFormatIndex) ?? VRTF.CreateDefaultForMesh (m);  			IRCOLBlock material = GenericRCOLResource.ChunkReference.GetBlock (rcol' m.MaterialIndex);  			MATD matd = FindMainMATD (rcol' material);  			float[] uvscale = GetUvScales (matd);  			if (uvscale != null)  				Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  			else  				Debug.WriteLine ("No scales");  			GeometryModel3D model = DrawModel (vbuf.GetVertices (m' vrtf' uvscale)' ibuf.GetIndices (m)' mNonSelectedMaterial);  			var sceneMesh = new SceneMlodMesh (m' model);  			if (matd != null) {  				sceneMesh.Shader = matd.Shader;  				switch (matd.Shader) {  				case ShaderType.ShadowMap:  				case ShaderType.DropShadow:  					break;  				default:  					var maskWidth = GetMATDParam<ElementInt> (matd' FieldType.MaskWidth);  					var maskHeight = GetMATDParam<ElementInt> (matd' FieldType.MaskHeight);  					if (maskWidth != null && maskHeight != null) {  						float scalar = Math.Max (maskWidth.Data' maskHeight.Data);  						mCheckerBrush.Transform = new ScaleTransform (maskHeight.Data / scalar' maskWidth.Data / scalar);  					}  					break;  				}  			}  			try {  				var sceneGeostates = new SceneGeostate[m.GeometryStates.Count];  				for (int i = 0; i < sceneGeostates.Length; i++) {  					GeometryModel3D state = DrawModel (vbuf.GetVertices (m' vrtf' m.GeometryStates [i]' uvscale)' ibuf.GetIndices (m' m.GeometryStates [i])' mHiddenMaterial);  					mGroupMeshes.Children.Add (state);  					sceneGeostates [i] = new SceneGeostate (sceneMesh' m.GeometryStates [i]' state);  				}  				sceneMesh.States = sceneGeostates;  			} catch (Exception ex) {  				MessageBox.Show ("Unable to load Geostates.  You may have some corrupted data: " + ex.ToString ()' "Unable to load Geostates...");  			}  			mGroupMeshes.Children.Add (model);  			mSceneMeshes.Add (sceneMesh);  		} catch (Exception ex) {  			MessageBox.Show (String.Format ("Unable to load mesh id 0x{0:X8}"' m.Name));  		}  	}  } else {  	GenericRCOLResource.ChunkEntry geomChunk = rcol.ChunkEntries.FirstOrDefault ();  	var geom = new GEOM (0' null' geomChunk.RCOLBlock.Stream);  	var verts = new List<Vertex> ();  	polyCount = geom.Faces.Count;  	vertCount = geom.VertexData.Count;  	foreach (GEOM.VertexDataElement vd in geom.VertexData) {  		var v = new Vertex ();  		var pos = (GEOM.PositionElement)vd.Vertex.FirstOrDefault (e => e is GEOM.PositionElement);  		if (pos != null) {  			v.Position = new[] {  				pos.X'  				pos.Y'  				pos.Z  			};  		}  		var norm = (GEOM.NormalElement)vd.Vertex.FirstOrDefault (e => e is GEOM.NormalElement);  		if (norm != null) {  			v.Normal = new[] {  				norm.X'  				norm.Y'  				norm.Z  			};  		}  		var uv = (GEOM.UVElement)vd.Vertex.FirstOrDefault (e => e is GEOM.UVElement);  		if (uv != null) {  			v.UV = new[] {  				new[] {  					uv.U'  					uv.V  				}  			};  		}  		verts.Add (v);  	}  	var facepoints = new List<int> ();  	foreach (GEOM.Face face in geom.Faces) {  		facepoints.Add (face.VertexDataIndex0);  		facepoints.Add (face.VertexDataIndex1);  		facepoints.Add (face.VertexDataIndex2);  	}  	GeometryModel3D model = DrawModel (verts.ToArray ()' facepoints.ToArray ()' mNonSelectedMaterial);  	var sceneMesh = new SceneGeomMesh (geom' model);  	mGroupMeshes.Children.Add (model);  	mSceneMeshes.Add (sceneMesh);  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: if (chunk != null) {  	var mlod = chunk.RCOLBlock as MLOD;  	foreach (MLOD.Mesh m in mlod.Meshes) {  		try {  			vertCount += m.VertexCount;  			polyCount += m.PrimitiveCount;  			var vbuf = (VBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexBufferIndex);  			var ibuf = (IBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.IndexBufferIndex);  			VRTF vrtf = (VRTF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexFormatIndex) ?? VRTF.CreateDefaultForMesh (m);  			IRCOLBlock material = GenericRCOLResource.ChunkReference.GetBlock (rcol' m.MaterialIndex);  			MATD matd = FindMainMATD (rcol' material);  			float[] uvscale = GetUvScales (matd);  			if (uvscale != null)  				Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  			else  				Debug.WriteLine ("No scales");  			GeometryModel3D model = DrawModel (vbuf.GetVertices (m' vrtf' uvscale)' ibuf.GetIndices (m)' mNonSelectedMaterial);  			var sceneMesh = new SceneMlodMesh (m' model);  			if (matd != null) {  				sceneMesh.Shader = matd.Shader;  				switch (matd.Shader) {  				case ShaderType.ShadowMap:  				case ShaderType.DropShadow:  					break;  				default:  					var maskWidth = GetMATDParam<ElementInt> (matd' FieldType.MaskWidth);  					var maskHeight = GetMATDParam<ElementInt> (matd' FieldType.MaskHeight);  					if (maskWidth != null && maskHeight != null) {  						float scalar = Math.Max (maskWidth.Data' maskHeight.Data);  						mCheckerBrush.Transform = new ScaleTransform (maskHeight.Data / scalar' maskWidth.Data / scalar);  					}  					break;  				}  			}  			try {  				var sceneGeostates = new SceneGeostate[m.GeometryStates.Count];  				for (int i = 0; i < sceneGeostates.Length; i++) {  					GeometryModel3D state = DrawModel (vbuf.GetVertices (m' vrtf' m.GeometryStates [i]' uvscale)' ibuf.GetIndices (m' m.GeometryStates [i])' mHiddenMaterial);  					mGroupMeshes.Children.Add (state);  					sceneGeostates [i] = new SceneGeostate (sceneMesh' m.GeometryStates [i]' state);  				}  				sceneMesh.States = sceneGeostates;  			} catch (Exception ex) {  				MessageBox.Show ("Unable to load Geostates.  You may have some corrupted data: " + ex.ToString ()' "Unable to load Geostates...");  			}  			mGroupMeshes.Children.Add (model);  			mSceneMeshes.Add (sceneMesh);  		} catch (Exception ex) {  			MessageBox.Show (String.Format ("Unable to load mesh id 0x{0:X8}"' m.Name));  		}  	}  } else {  	GenericRCOLResource.ChunkEntry geomChunk = rcol.ChunkEntries.FirstOrDefault ();  	var geom = new GEOM (0' null' geomChunk.RCOLBlock.Stream);  	var verts = new List<Vertex> ();  	polyCount = geom.Faces.Count;  	vertCount = geom.VertexData.Count;  	foreach (GEOM.VertexDataElement vd in geom.VertexData) {  		var v = new Vertex ();  		var pos = (GEOM.PositionElement)vd.Vertex.FirstOrDefault (e => e is GEOM.PositionElement);  		if (pos != null) {  			v.Position = new[] {  				pos.X'  				pos.Y'  				pos.Z  			};  		}  		var norm = (GEOM.NormalElement)vd.Vertex.FirstOrDefault (e => e is GEOM.NormalElement);  		if (norm != null) {  			v.Normal = new[] {  				norm.X'  				norm.Y'  				norm.Z  			};  		}  		var uv = (GEOM.UVElement)vd.Vertex.FirstOrDefault (e => e is GEOM.UVElement);  		if (uv != null) {  			v.UV = new[] {  				new[] {  					uv.U'  					uv.V  				}  			};  		}  		verts.Add (v);  	}  	var facepoints = new List<int> ();  	foreach (GEOM.Face face in geom.Faces) {  		facepoints.Add (face.VertexDataIndex0);  		facepoints.Add (face.VertexDataIndex1);  		facepoints.Add (face.VertexDataIndex2);  	}  	GeometryModel3D model = DrawModel (verts.ToArray ()' facepoints.ToArray ()' mNonSelectedMaterial);  	var sceneMesh = new SceneGeomMesh (geom' model);  	mGroupMeshes.Children.Add (model);  	mSceneMeshes.Add (sceneMesh);  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: foreach (MLOD.Mesh m in mlod.Meshes) {  	try {  		vertCount += m.VertexCount;  		polyCount += m.PrimitiveCount;  		var vbuf = (VBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexBufferIndex);  		var ibuf = (IBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.IndexBufferIndex);  		VRTF vrtf = (VRTF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexFormatIndex) ?? VRTF.CreateDefaultForMesh (m);  		IRCOLBlock material = GenericRCOLResource.ChunkReference.GetBlock (rcol' m.MaterialIndex);  		MATD matd = FindMainMATD (rcol' material);  		float[] uvscale = GetUvScales (matd);  		if (uvscale != null)  			Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  		else  			Debug.WriteLine ("No scales");  		GeometryModel3D model = DrawModel (vbuf.GetVertices (m' vrtf' uvscale)' ibuf.GetIndices (m)' mNonSelectedMaterial);  		var sceneMesh = new SceneMlodMesh (m' model);  		if (matd != null) {  			sceneMesh.Shader = matd.Shader;  			switch (matd.Shader) {  			case ShaderType.ShadowMap:  			case ShaderType.DropShadow:  				break;  			default:  				var maskWidth = GetMATDParam<ElementInt> (matd' FieldType.MaskWidth);  				var maskHeight = GetMATDParam<ElementInt> (matd' FieldType.MaskHeight);  				if (maskWidth != null && maskHeight != null) {  					float scalar = Math.Max (maskWidth.Data' maskHeight.Data);  					mCheckerBrush.Transform = new ScaleTransform (maskHeight.Data / scalar' maskWidth.Data / scalar);  				}  				break;  			}  		}  		try {  			var sceneGeostates = new SceneGeostate[m.GeometryStates.Count];  			for (int i = 0; i < sceneGeostates.Length; i++) {  				GeometryModel3D state = DrawModel (vbuf.GetVertices (m' vrtf' m.GeometryStates [i]' uvscale)' ibuf.GetIndices (m' m.GeometryStates [i])' mHiddenMaterial);  				mGroupMeshes.Children.Add (state);  				sceneGeostates [i] = new SceneGeostate (sceneMesh' m.GeometryStates [i]' state);  			}  			sceneMesh.States = sceneGeostates;  		} catch (Exception ex) {  			MessageBox.Show ("Unable to load Geostates.  You may have some corrupted data: " + ex.ToString ()' "Unable to load Geostates...");  		}  		mGroupMeshes.Children.Add (model);  		mSceneMeshes.Add (sceneMesh);  	} catch (Exception ex) {  		MessageBox.Show (String.Format ("Unable to load mesh id 0x{0:X8}"' m.Name));  	}  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: foreach (MLOD.Mesh m in mlod.Meshes) {  	try {  		vertCount += m.VertexCount;  		polyCount += m.PrimitiveCount;  		var vbuf = (VBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexBufferIndex);  		var ibuf = (IBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.IndexBufferIndex);  		VRTF vrtf = (VRTF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexFormatIndex) ?? VRTF.CreateDefaultForMesh (m);  		IRCOLBlock material = GenericRCOLResource.ChunkReference.GetBlock (rcol' m.MaterialIndex);  		MATD matd = FindMainMATD (rcol' material);  		float[] uvscale = GetUvScales (matd);  		if (uvscale != null)  			Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  		else  			Debug.WriteLine ("No scales");  		GeometryModel3D model = DrawModel (vbuf.GetVertices (m' vrtf' uvscale)' ibuf.GetIndices (m)' mNonSelectedMaterial);  		var sceneMesh = new SceneMlodMesh (m' model);  		if (matd != null) {  			sceneMesh.Shader = matd.Shader;  			switch (matd.Shader) {  			case ShaderType.ShadowMap:  			case ShaderType.DropShadow:  				break;  			default:  				var maskWidth = GetMATDParam<ElementInt> (matd' FieldType.MaskWidth);  				var maskHeight = GetMATDParam<ElementInt> (matd' FieldType.MaskHeight);  				if (maskWidth != null && maskHeight != null) {  					float scalar = Math.Max (maskWidth.Data' maskHeight.Data);  					mCheckerBrush.Transform = new ScaleTransform (maskHeight.Data / scalar' maskWidth.Data / scalar);  				}  				break;  			}  		}  		try {  			var sceneGeostates = new SceneGeostate[m.GeometryStates.Count];  			for (int i = 0; i < sceneGeostates.Length; i++) {  				GeometryModel3D state = DrawModel (vbuf.GetVertices (m' vrtf' m.GeometryStates [i]' uvscale)' ibuf.GetIndices (m' m.GeometryStates [i])' mHiddenMaterial);  				mGroupMeshes.Children.Add (state);  				sceneGeostates [i] = new SceneGeostate (sceneMesh' m.GeometryStates [i]' state);  			}  			sceneMesh.States = sceneGeostates;  		} catch (Exception ex) {  			MessageBox.Show ("Unable to load Geostates.  You may have some corrupted data: " + ex.ToString ()' "Unable to load Geostates...");  		}  		mGroupMeshes.Children.Add (model);  		mSceneMeshes.Add (sceneMesh);  	} catch (Exception ex) {  		MessageBox.Show (String.Format ("Unable to load mesh id 0x{0:X8}"' m.Name));  	}  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: try {  	vertCount += m.VertexCount;  	polyCount += m.PrimitiveCount;  	var vbuf = (VBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexBufferIndex);  	var ibuf = (IBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.IndexBufferIndex);  	VRTF vrtf = (VRTF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexFormatIndex) ?? VRTF.CreateDefaultForMesh (m);  	IRCOLBlock material = GenericRCOLResource.ChunkReference.GetBlock (rcol' m.MaterialIndex);  	MATD matd = FindMainMATD (rcol' material);  	float[] uvscale = GetUvScales (matd);  	if (uvscale != null)  		Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  	else  		Debug.WriteLine ("No scales");  	GeometryModel3D model = DrawModel (vbuf.GetVertices (m' vrtf' uvscale)' ibuf.GetIndices (m)' mNonSelectedMaterial);  	var sceneMesh = new SceneMlodMesh (m' model);  	if (matd != null) {  		sceneMesh.Shader = matd.Shader;  		switch (matd.Shader) {  		case ShaderType.ShadowMap:  		case ShaderType.DropShadow:  			break;  		default:  			var maskWidth = GetMATDParam<ElementInt> (matd' FieldType.MaskWidth);  			var maskHeight = GetMATDParam<ElementInt> (matd' FieldType.MaskHeight);  			if (maskWidth != null && maskHeight != null) {  				float scalar = Math.Max (maskWidth.Data' maskHeight.Data);  				mCheckerBrush.Transform = new ScaleTransform (maskHeight.Data / scalar' maskWidth.Data / scalar);  			}  			break;  		}  	}  	try {  		var sceneGeostates = new SceneGeostate[m.GeometryStates.Count];  		for (int i = 0; i < sceneGeostates.Length; i++) {  			GeometryModel3D state = DrawModel (vbuf.GetVertices (m' vrtf' m.GeometryStates [i]' uvscale)' ibuf.GetIndices (m' m.GeometryStates [i])' mHiddenMaterial);  			mGroupMeshes.Children.Add (state);  			sceneGeostates [i] = new SceneGeostate (sceneMesh' m.GeometryStates [i]' state);  		}  		sceneMesh.States = sceneGeostates;  	} catch (Exception ex) {  		MessageBox.Show ("Unable to load Geostates.  You may have some corrupted data: " + ex.ToString ()' "Unable to load Geostates...");  	}  	mGroupMeshes.Children.Add (model);  	mSceneMeshes.Add (sceneMesh);  } catch (Exception ex) {  	MessageBox.Show (String.Format ("Unable to load mesh id 0x{0:X8}"' m.Name));  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: try {  	vertCount += m.VertexCount;  	polyCount += m.PrimitiveCount;  	var vbuf = (VBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexBufferIndex);  	var ibuf = (IBUF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.IndexBufferIndex);  	VRTF vrtf = (VRTF)GenericRCOLResource.ChunkReference.GetBlock (rcol' m.VertexFormatIndex) ?? VRTF.CreateDefaultForMesh (m);  	IRCOLBlock material = GenericRCOLResource.ChunkReference.GetBlock (rcol' m.MaterialIndex);  	MATD matd = FindMainMATD (rcol' material);  	float[] uvscale = GetUvScales (matd);  	if (uvscale != null)  		Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  	else  		Debug.WriteLine ("No scales");  	GeometryModel3D model = DrawModel (vbuf.GetVertices (m' vrtf' uvscale)' ibuf.GetIndices (m)' mNonSelectedMaterial);  	var sceneMesh = new SceneMlodMesh (m' model);  	if (matd != null) {  		sceneMesh.Shader = matd.Shader;  		switch (matd.Shader) {  		case ShaderType.ShadowMap:  		case ShaderType.DropShadow:  			break;  		default:  			var maskWidth = GetMATDParam<ElementInt> (matd' FieldType.MaskWidth);  			var maskHeight = GetMATDParam<ElementInt> (matd' FieldType.MaskHeight);  			if (maskWidth != null && maskHeight != null) {  				float scalar = Math.Max (maskWidth.Data' maskHeight.Data);  				mCheckerBrush.Transform = new ScaleTransform (maskHeight.Data / scalar' maskWidth.Data / scalar);  			}  			break;  		}  	}  	try {  		var sceneGeostates = new SceneGeostate[m.GeometryStates.Count];  		for (int i = 0; i < sceneGeostates.Length; i++) {  			GeometryModel3D state = DrawModel (vbuf.GetVertices (m' vrtf' m.GeometryStates [i]' uvscale)' ibuf.GetIndices (m' m.GeometryStates [i])' mHiddenMaterial);  			mGroupMeshes.Children.Add (state);  			sceneGeostates [i] = new SceneGeostate (sceneMesh' m.GeometryStates [i]' state);  		}  		sceneMesh.States = sceneGeostates;  	} catch (Exception ex) {  		MessageBox.Show ("Unable to load Geostates.  You may have some corrupted data: " + ex.ToString ()' "Unable to load Geostates...");  	}  	mGroupMeshes.Children.Add (model);  	mSceneMeshes.Add (sceneMesh);  } catch (Exception ex) {  	MessageBox.Show (String.Format ("Unable to load mesh id 0x{0:X8}"' m.Name));  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: if (uvscale != null)  	Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  else  	Debug.WriteLine ("No scales");  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: if (uvscale != null)  	Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  else  	Debug.WriteLine ("No scales");  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,InitScene,The following statement contains a magic number: Debug.WriteLine (string.Format ("{0} - {1} - {2}"' uvscale [0]' uvscale [2]' uvscale [2]));  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,DrawModel,The following statement contains a magic number: for (int k = 0; k < verts.Length; k++) {  	Vertex v = verts [k];  	if (v.Position != null)  		mesh.Positions.Add (new Point3D (v.Position [0]' -v.Position [2]' v.Position [1]));  	if (v.Normal != null)  		mesh.Normals.Add (new Vector3D (v.Normal [0]' v.Normal [1]' v.Normal [2]));  	if (v.UV != null && v.UV.Length > 0)  		mesh.TextureCoordinates.Add (new Point (v.UV [0] [0]' v.UV [0] [1]));  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,DrawModel,The following statement contains a magic number: for (int k = 0; k < verts.Length; k++) {  	Vertex v = verts [k];  	if (v.Position != null)  		mesh.Positions.Add (new Point3D (v.Position [0]' -v.Position [2]' v.Position [1]));  	if (v.Normal != null)  		mesh.Normals.Add (new Vector3D (v.Normal [0]' v.Normal [1]' v.Normal [2]));  	if (v.UV != null && v.UV.Length > 0)  		mesh.TextureCoordinates.Add (new Point (v.UV [0] [0]' v.UV [0] [1]));  }  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,DrawModel,The following statement contains a magic number: if (v.Position != null)  	mesh.Positions.Add (new Point3D (v.Position [0]' -v.Position [2]' v.Position [1]));  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,DrawModel,The following statement contains a magic number: mesh.Positions.Add (new Point3D (v.Position [0]' -v.Position [2]' v.Position [1]));  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,DrawModel,The following statement contains a magic number: if (v.Normal != null)  	mesh.Normals.Add (new Vector3D (v.Normal [0]' v.Normal [1]' v.Normal [2]));  
Magic Number,s3piwrappers.ModelViewer,MainWindow,F:\newReposMay17\Kuree_Sims4Tools\s4pe Helpers\ModelViewer\MainWindow.xaml.cs,DrawModel,The following statement contains a magic number: mesh.Normals.Add (new Vector3D (v.Normal [0]' v.Normal [1]' v.Normal [2]));  
