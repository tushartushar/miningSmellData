Implementation smell,Namespace,Class,File,Method,Description
Complex Method,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,Cyclomatic complexity of the method is 10
Complex Method,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,ToString,Cyclomatic complexity of the method is 17
Long Parameter List,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,AResourceKey,The method has 5 parameters. Parameters: APIversion' handler' resourceType' resourceGroup' instance
Long Parameter List,s4pi.Interfaces,Vertex,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\BoundingBox.cs,Vertex,The method has 5 parameters. Parameters: APIversion' handler' x' y' z
Long Parameter List,s4pi.Interfaces,IndexList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,IndexList,The method has 7 parameters. Parameters: handler' createElement' writeElement' size' readCount' writeCount' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,IndexList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,IndexList,The method has 8 parameters. Parameters: handler' s' createElement' writeElement' size' readCount' writeCount' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,IndexList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,IndexList,The method has 8 parameters. Parameters: handler' collection' createElement' writeElement' size' readCount' writeCount' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,IndexList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,IndexList,The method has 8 parameters. Parameters: handler' collection' createElement' writeElement' size' readCount' writeCount' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,ByteIndexList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,ByteIndexList,The method has 5 parameters. Parameters: handler' readCount' writeCount' size' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,ByteIndexList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,ByteIndexList,The method has 6 parameters. Parameters: handler' basis' readCount' writeCount' size' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,ByteIndexList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,ByteIndexList,The method has 6 parameters. Parameters: handler' s' readCount' writeCount' size' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,Int32IndexList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,Int32IndexList,The method has 5 parameters. Parameters: handler' size' readCount' writeCount' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,Int32IndexList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,Int32IndexList,The method has 6 parameters. Parameters: handler' basis' size' readCount' writeCount' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,Int32IndexList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,Int32IndexList,The method has 6 parameters. Parameters: handler' s' size' readCount' writeCount' ParentTGIBlocks
Long Parameter List,s4pi.Interfaces,Quaternion,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\Quaternion.cs,Quaternion,The method has 6 parameters. Parameters: APIversion' handler' a' b' c' d
Long Parameter List,s4pi.Interfaces,CountedTGIBlockList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DependentList.cs,CountedTGIBlockList,The method has 5 parameters. Parameters: handler' order' count' s' size
Long Parameter List,s4pi.Interfaces,CountedTGIBlockList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DependentList.cs,CountedTGIBlockList,The method has 5 parameters. Parameters: handler' order' count' s' size
Long Parameter List,s4pi.Interfaces,TGIBlockList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DependentList.cs,TGIBlockList,The method has 6 parameters. Parameters: handler' s' tgiPosn' tgiSize' addEight' ignoreTgiSize
Long Parameter List,s4pi.Interfaces,SimpleList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\SimpleList.cs,SimpleList,The method has 6 parameters. Parameters: handler' createElement' writeElement' size' readCount' writeCount
Long Parameter List,s4pi.Interfaces,SimpleList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\SimpleList.cs,SimpleList,The method has 7 parameters. Parameters: handler' s' createElement' writeElement' size' readCount' writeCount
Long Parameter List,s4pi.Interfaces,SimpleList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\SimpleList.cs,SimpleList,The method has 7 parameters. Parameters: handler' collection' createElement' writeElement' size' readCount' writeCount
Long Parameter List,s4pi.Interfaces,SimpleList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\SimpleList.cs,SimpleList,The method has 7 parameters. Parameters: handler' collection' createElement' writeElement' size' readCount' writeCount
Long Parameter List,s4pi.Interfaces,TGIBlock,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TGIBlock.cs,TGIBlock,The method has 5 parameters. Parameters: APIversion' handler' resourceType' resourceGroup' instance
Long Parameter List,s4pi.Interfaces,TGIBlock,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TGIBlock.cs,TGIBlock,The method has 6 parameters. Parameters: APIversion' handler' order' resourceType' resourceGroup' instance
Long Parameter List,s4pi.Interfaces,TGIBlock,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TGIBlock.cs,TGIBlock,The method has 6 parameters. Parameters: APIversion' handler' order' resourceType' resourceGroup' instance
Long Statement,s4pi.Interfaces,IndexList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\IndexList.cs,CreateElement,The length of the statement  "{ return new TGIBlockListIndex<T>(0' elementHandler' createElement == null ? default(T) : createElement(s)' _ParentTGIBlocks); }" is 128.
Long Statement,s4pi.Interfaces,DependentList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DependentList.cs,Parse,The length of the statement  "{ base.Clear(); bool inc = true; for (int i = ReadCount(s); i > 0; i = i - (inc ? 1 : 0)) base.Add(CreateElement(s' out inc)); }" is 128.
Long Statement,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,Clone,The length of the statement  "            if (typeof(ICloneable).IsAssignableFrom(this.Type)) return new TypedValue(this.Type' ((ICloneable)this.Value).Clone()' this.format); " is 132.
Virtual Method Call from Constructor,s4pi.Interfaces,DependentList<T>,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DependentList.cs,DependentList,The constructor "DependentList" calls a virtual method "Clone".
Empty Catch Block,s4pi.Interfaces,AApiVersionedFields,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AApiVersionedFields.cs,GetTGIBlocks,The method has an empty catch block.
Magic Number,s4pi.Interfaces,AApiVersionedFields,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AApiVersionedFields.cs,FOURCC,The following statement contains a magic number: if (s.Length > 8) throw new ArgumentLengthException("String"' 8);
Magic Number,s4pi.Interfaces,AApiVersionedFields,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AApiVersionedFields.cs,FOURCC,The following statement contains a magic number: if (s.Length > 8) throw new ArgumentLengthException("String"' 8);
Magic Number,s4pi.Interfaces,AApiVersionedFields,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AApiVersionedFields.cs,FOURCC,The following statement contains a magic number: for (int j = s.Length - 1; j >= 0; j--) i += ((uint)s[j]) << (j * 8);
Magic Number,s4pi.Interfaces,AApiVersionedFields,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AApiVersionedFields.cs,FOURCC,The following statement contains a magic number: for (int j = 7; j >= 0; j--) { char c = (char)((i >> (j * 8)) & 0xff); if (s.Length > 0 || c != 0) s = c + s; }
Magic Number,s4pi.Interfaces,AApiVersionedFields,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AApiVersionedFields.cs,FOURCC,The following statement contains a magic number: for (int j = 7; j >= 0; j--) { char c = (char)((i >> (j * 8)) & 0xff); if (s.Length > 0 || c != 0) s = c + s; }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,DataBlobHandler,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DataBlobHandler.cs,BuildHexDisplay,The following statement contains a magic number: if (this.data.Length > 0)              {                  int i' j' k' size;                  char[] buffer = null;                  if (includeASCII) buffer = new char[16];                  size = (this.data.Length / 16 + 1) * (indent + 60 + (includeASCII ? 11 : 0));                  StringBuilder sb = new StringBuilder(size);                  i = 2;                  size = 256;                  while (size < this.data.Length && size < 0x10000000)                  {                      i++;                      size *= 16;                  }                  size = this.data.Length;                  string format = string.Concat("X"' i.ToString());                  sb.Append(new string(' '' indent + i));                  sb.Append(" | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F");                  for (i = 0; i < size; i++)                  {                      if (i % 16 == 0)                      {                          sb.AppendLine();                          sb.Append(new string(' '' indent));                          sb.Append(i.ToString(format));                          sb.Append(" |");                      }                      sb.Append(" ");                      sb.Append(this.data[i].ToString("X2"));                      if (includeASCII && i % 16 == 15)                      {                          sb.Append(" | ");                          Array.Clear(buffer' 0' 16);                          k = (i / 16) * 16;                          for (j = 0; j < 16; j++)                          {                              buffer[j] = conversionTable[this.data[k]];                              k++;                          }                          sb.Append(buffer' 0' 16);                      }                  }                  if (includeASCII && size % 16 != 0)                  {                      sb.Append(new string(' '' 3 * (16 - (size % 16))));                      sb.Append(" | ");                      Array.Clear(buffer' 0' 16);                      k = (size / 16) * 16;                      size = size % 16;                      for (j = 0; j < size; j++)                      {                          buffer[j] = conversionTable[this.data[k]];                          k++;                      }                      sb.Append(buffer' 0' size);                  }                  return sb.ToString();              }              else              {                  return "{Empty Data Blob}";              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,AResourceKey,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\AResourceKey.cs,TryParse,The following statement contains a magic number: if (value.Contains("-"))              {                  string[] tgi = value.Trim().ToLower().Split('-');                  if (tgi.Length != 3) return false;                  foreach (var x in tgi) if (!x.StartsWith("0x")) return false;                    if (!uint.TryParse(tgi[0].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2].Substring(2)' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }              else              {                  string[] tgi = value.Trim().ToLower().Split(':');                  if (tgi.Length == 4 && tgi[0].ToLower() == "key")                      Array.Copy(tgi' 1' tgi' 0' 3);                  else if (tgi.Length != 3) return false;                    if (!uint.TryParse(tgi[0]' System.Globalization.NumberStyles.HexNumber' null' out t)) return false;                  if (!uint.TryParse(tgi[1]' System.Globalization.NumberStyles.HexNumber' null' out g)) return false;                  if (!ulong.TryParse(tgi[2]' System.Globalization.NumberStyles.HexNumber' null' out i)) return false;              }
Magic Number,s4pi.Interfaces,TGIBlockList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DependentList.cs,Parse,The following statement contains a magic number: if (checking && !ignoreTgiSize) if (tgiSize != s.Position - tgiPosn + (addEight ? 8 : 0))                      throw new InvalidDataException(String.Format("Size of TGIBlock read: 0x{0:X8}' actual: 0x{1:X8}; at 0x{2:X8}"'                          tgiSize' s.Position - tgiPosn' s.Position));
Magic Number,s4pi.Interfaces,TGIBlockList,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\DependentList.cs,UnParse,The following statement contains a magic number: w.Write((uint)(pos - tgiPosn + (addEight ? 8 : 0)));
Magic Number,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,ToANSIString,The following statement contains a magic number: for (int i = 0; i < unicode.Length; i += 2) t.Append((char)((((char)unicode[i]) << 8) + (char)unicode[i + 1]));
Magic Number,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,ToANSIString,The following statement contains a magic number: for (int i = 0; i < unicode.Length; i += 2) t.Append((char)((((char)unicode[i]) << 8) + (char)unicode[i + 1]));
Magic Number,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,FromSimpleArray,The following statement contains a magic number: for (int i = 0; i < ary.Length; i++)              {                  object v = ary.GetValue(i);                  TypedValue tv = new TypedValue(v.GetType()' v' "X");                  sb.Append(String.Format(" [{0:X}:'{1}']"' i' "" + tv));                  if (i % 16 == 15) sb.Append("\n");              }
Magic Number,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,FromSimpleArray,The following statement contains a magic number: for (int i = 0; i < ary.Length; i++)              {                  object v = ary.GetValue(i);                  TypedValue tv = new TypedValue(v.GetType()' v' "X");                  sb.Append(String.Format(" [{0:X}:'{1}']"' i' "" + tv));                  if (i % 16 == 15) sb.Append("\n");              }
Magic Number,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,ToDisplayString,The following statement contains a magic number: foreach (char c in text)              {                  if (c < 32 && c != '\n')                      t.Append(string.Format("<{0}>"' LowNames[c]));                  else if (c == 127)                      t.Append("<DEL>");                  else if (c > 127)                      t.Append(string.Format("<U+{0:X4}>"' (int)c));                  else                      t.Append(c);              }
Magic Number,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,ToDisplayString,The following statement contains a magic number: foreach (char c in text)              {                  if (c < 32 && c != '\n')                      t.Append(string.Format("<{0}>"' LowNames[c]));                  else if (c == 127)                      t.Append("<DEL>");                  else if (c > 127)                      t.Append(string.Format("<U+{0:X4}>"' (int)c));                  else                      t.Append(c);              }
Magic Number,s4pi.Interfaces,TypedValue,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TypedValue.cs,ToDisplayString,The following statement contains a magic number: foreach (char c in text)              {                  if (c < 32 && c != '\n')                      t.Append(string.Format("<{0}>"' LowNames[c]));                  else if (c == 127)                      t.Append("<DEL>");                  else if (c > 127)                      t.Append(string.Format("<U+{0:X4}>"' (int)c));                  else                      t.Append(c);              }
Missing Default,s4pi.Interfaces,TGIBlock,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TGIBlock.cs,Parse,The following switch statement is missing a default case: switch (c)                  {                      case 'T': resourceType = r.ReadUInt32(); break;                      case 'G': resourceGroup = r.ReadUInt32(); break;                      case 'I': instance = r.ReadUInt64(); break;                  }
Missing Default,s4pi.Interfaces,TGIBlock,C:\repos\Kuree_Sims4Tools\s4pi\Interfaces\TGIBlock.cs,UnParse,The following switch statement is missing a default case: switch (c)                  {                      case 'T': w.Write(resourceType); break;                      case 'G': w.Write(resourceGroup); break;                      case 'I': w.Write(instance); break;                  }
