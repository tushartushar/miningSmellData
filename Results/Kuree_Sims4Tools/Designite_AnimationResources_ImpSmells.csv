Implementation smell,Namespace,Class,File,Method,Description
Complex Method,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,Parse,Cyclomatic complexity of the method is 20
Complex Method,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,UnParse,Cyclomatic complexity of the method is 23
Complex Method,s4pi.Animation.S3CLIP,Clip,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Clip.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,s4pi.Animation.S3CLIP,Clip,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Clip.cs,UnParse,Cyclomatic complexity of the method is 9
Complex Method,s4pi.Animation,ClipResource,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResource.cs,UnParse,Cyclomatic complexity of the method is 12
Complex Method,s4pi.Animation,ClipResourceSims3,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResourceSims3.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,Cyclomatic complexity of the method is 8
Long Parameter List,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,Curve,The method has 7 parameters.
Long Parameter List,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,Frame,The method has 5 parameters.
Long Parameter List,s4pi.Animation.S3CLIP,FrameList,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\FrameList.cs,FrameList,The method has 5 parameters.
Long Parameter List,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,TrackMask,The method has 5 parameters.
Long Parameter List,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,TrackMask,The method has 7 parameters.
Long Statement,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,Parse,The length of the statement  "			for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / Curve.GetPackedCount (DataType); packedIndex++) { " is 122.
Long Statement,s4pi.Animation.S3CLIP,Clip,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Clip.cs,UnParse,The length of the statement  "				Boolean isIndexed = curve.Frames.Count == 0 ? true : curve.Type == CurveType.Position ? IsIndexed (curve.Frames.Cast<Frame> ()) : false; " is 136.
Long Statement,s4pi.Animation.S3CLIP,Clip,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Clip.cs,UnParse,The length of the statement  "	var frameOffset = (uint)(curveDataOffset + (20 * curveDataInfos.Count) + mAnimName.Length + mSrcName.Length + 2 + (sizeof(Single) * indexedFloats.Count)); " is 154.
Virtual Method Call from Constructor,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,Curve,The constructor "Curve" calls a virtual method "Parse".
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetBitsPerFloat,The following statement contains a magic number: switch (curveType) {  case CurveDataType.Float3:  	return 10;  case CurveDataType.Float4:  	return 12;  default:  	throw new NotSupportedException ();  }  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetBitsPerFloat,The following statement contains a magic number: switch (curveType) {  case CurveDataType.Float3:  	return 10;  case CurveDataType.Float4:  	return 12;  default:  	throw new NotSupportedException ();  }  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetBitsPerFloat,The following statement contains a magic number: return 10;  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetBitsPerFloat,The following statement contains a magic number: return 12;  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetFloatCount,The following statement contains a magic number: switch (curveType) {  case CurveDataType.Float3:  	return 3;  case CurveDataType.Float4:  	return 4;  default:  	Debug.WriteLine ("Testing unknown data type: " + curveType);  	return 1;  }  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetFloatCount,The following statement contains a magic number: switch (curveType) {  case CurveDataType.Float3:  	return 3;  case CurveDataType.Float4:  	return 4;  default:  	Debug.WriteLine ("Testing unknown data type: " + curveType);  	return 1;  }  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetFloatCount,The following statement contains a magic number: return 3;  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetFloatCount,The following statement contains a magic number: return 4;  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetPackedCount,The following statement contains a magic number: switch (curveType) {  case CurveDataType.Float3:  	return 1;  case CurveDataType.Float4:  	return 4;  default:  	throw new NotSupportedException ();  }  
Magic Number,s4pi.Animation.S3CLIP,Curve,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Curve.cs,GetPackedCount,The following statement contains a magic number: return 4;  
Magic Number,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,Parse,The following statement contains a magic number: mFlags = (UInt16)(flags >> 4);  
Magic Number,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,Parse,The following statement contains a magic number: switch (info.Flags.Format) {  case CurveDataFormat.Indexed:  	for (int floatsRead = 0; floatsRead < Curve.GetFloatCount (DataType); floatsRead++) {  		float val = indexedFloats [br.ReadUInt16 ()];  		if ((flags & 1 << floatsRead) != 0 ? true : false)  			val *= -1;  		mData [floatsRead] = Unpack (val' info.Offset' info.Scale);  	}  	break;  case CurveDataFormat.Packed:  	for (int packedRead = 0; packedRead < Curve.GetPackedCount (DataType); packedRead++) {  		ulong packed;  		switch (DataType) {  		case CurveDataType.Float4:  		case CurveDataType.Float1:  			packed = br.ReadUInt16 ();  			break;  		case CurveDataType.Float3:  			packed = br.ReadUInt32 ();  			break;  		default:  			packed = br.ReadUInt16 ();  			break;  		}  		for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / Curve.GetPackedCount (DataType); packedIndex++) {  			int floatIndex = packedIndex + packedRead;  			int bitsPerFloat = Curve.GetBitsPerFloat (DataType);  			var maxPackedVal = (ulong)(Math.Pow (2' bitsPerFloat) - 1);  			ulong mask = (maxPackedVal << (packedIndex * bitsPerFloat));  			float val = ((packed & mask) >> (packedIndex * bitsPerFloat)) / (float)maxPackedVal;  			if ((flags & 1 << floatIndex) != 0 ? true : false)  				val *= -1;  			mData [floatIndex] = Unpack (val' info.Offset' info.Scale);  		}  	}  	break;  }  
Magic Number,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,Parse,The following statement contains a magic number: for (int packedRead = 0; packedRead < Curve.GetPackedCount (DataType); packedRead++) {  	ulong packed;  	switch (DataType) {  	case CurveDataType.Float4:  	case CurveDataType.Float1:  		packed = br.ReadUInt16 ();  		break;  	case CurveDataType.Float3:  		packed = br.ReadUInt32 ();  		break;  	default:  		packed = br.ReadUInt16 ();  		break;  	}  	for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / Curve.GetPackedCount (DataType); packedIndex++) {  		int floatIndex = packedIndex + packedRead;  		int bitsPerFloat = Curve.GetBitsPerFloat (DataType);  		var maxPackedVal = (ulong)(Math.Pow (2' bitsPerFloat) - 1);  		ulong mask = (maxPackedVal << (packedIndex * bitsPerFloat));  		float val = ((packed & mask) >> (packedIndex * bitsPerFloat)) / (float)maxPackedVal;  		if ((flags & 1 << floatIndex) != 0 ? true : false)  			val *= -1;  		mData [floatIndex] = Unpack (val' info.Offset' info.Scale);  	}  }  
Magic Number,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,Parse,The following statement contains a magic number: for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / Curve.GetPackedCount (DataType); packedIndex++) {  	int floatIndex = packedIndex + packedRead;  	int bitsPerFloat = Curve.GetBitsPerFloat (DataType);  	var maxPackedVal = (ulong)(Math.Pow (2' bitsPerFloat) - 1);  	ulong mask = (maxPackedVal << (packedIndex * bitsPerFloat));  	float val = ((packed & mask) >> (packedIndex * bitsPerFloat)) / (float)maxPackedVal;  	if ((flags & 1 << floatIndex) != 0 ? true : false)  		val *= -1;  	mData [floatIndex] = Unpack (val' info.Offset' info.Scale);  }  
Magic Number,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,UnParse,The following statement contains a magic number: switch (info.Flags.Format) {  case CurveDataFormat.Indexed:  	indices = new ushort[Curve.GetFloatCount (DataType)];  	for (int i = 0; i < Curve.GetFloatCount (DataType); i++) {  		float packedIndex = Pack (mData [i]' info.Offset' info.Scale);  		if (packedIndex < 0)  			flags |= (1 << i);  		packedIndex = Math.Abs (packedIndex);  		if (!indexedFloats.Contains (packedIndex))  			indexedFloats.Add (packedIndex);  		indices [i] = (UInt16)indexedFloats.IndexOf (packedIndex);  	}  	break;  case CurveDataFormat.Packed:  	packedVals = new ulong[Curve.GetPackedCount (DataType)];  	for (int packedWritten = 0; packedWritten < packedVals.Length; packedWritten++) {  		ulong packed = 0;  		for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / packedVals.Length; packedIndex++) {  			int floatIndex = packedWritten + packedIndex;  			double maxPackedVal = Math.Pow (2' Curve.GetBitsPerFloat (DataType)) - 1;  			float val = (mData [floatIndex] - info.Offset) / info.Scale;  			if (val < 0)  				flags |= (1 << floatIndex);  			val = Math.Abs (val);  			packed |= (ulong)Math.Floor (val * maxPackedVal) << (packedIndex * Curve.GetBitsPerFloat (DataType));  		}  		packedVals [packedWritten] = packed;  	}  	break;  }  
Magic Number,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,UnParse,The following statement contains a magic number: for (int packedWritten = 0; packedWritten < packedVals.Length; packedWritten++) {  	ulong packed = 0;  	for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / packedVals.Length; packedIndex++) {  		int floatIndex = packedWritten + packedIndex;  		double maxPackedVal = Math.Pow (2' Curve.GetBitsPerFloat (DataType)) - 1;  		float val = (mData [floatIndex] - info.Offset) / info.Scale;  		if (val < 0)  			flags |= (1 << floatIndex);  		val = Math.Abs (val);  		packed |= (ulong)Math.Floor (val * maxPackedVal) << (packedIndex * Curve.GetBitsPerFloat (DataType));  	}  	packedVals [packedWritten] = packed;  }  
Magic Number,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,UnParse,The following statement contains a magic number: for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / packedVals.Length; packedIndex++) {  	int floatIndex = packedWritten + packedIndex;  	double maxPackedVal = Math.Pow (2' Curve.GetBitsPerFloat (DataType)) - 1;  	float val = (mData [floatIndex] - info.Offset) / info.Scale;  	if (val < 0)  		flags |= (1 << floatIndex);  	val = Math.Abs (val);  	packed |= (ulong)Math.Floor (val * maxPackedVal) << (packedIndex * Curve.GetBitsPerFloat (DataType));  }  
Magic Number,s4pi.Animation.S3CLIP,Clip,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Clip.cs,UnParse,The following statement contains a magic number: s.Seek (4 * sizeof(UInt32)' SeekOrigin.Current);  
Magic Number,s4pi.Animation.S3CLIP,Clip,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Clip.cs,IsIndexed,The following statement contains a magic number: if (source.Count () < 5)  	return false;  
Magic Number,s4pi.Animation,ClipResource,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResource.cs,Parse,The following statement contains a magic number: this.unknown_floats = new float[8];  
Magic Number,s4pi.Animation,ClipResource,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResource.cs,Parse,The following statement contains a magic number: this.unknown_hashes = new uint[3];  
Magic Number,s4pi.Animation,ClipResourceSims3,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResourceSims3.cs,Parse,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	if (br.ReadByte () != 0 && checking)  		throw new InvalidDataException ("Expected 0x00");  }  
Magic Number,s4pi.Animation,ClipResourceSims3,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResourceSims3.cs,Parse,The following statement contains a magic number: s.Seek (-16' SeekOrigin.End);  
Magic Number,s4pi.Animation,ClipResourceSims3,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResourceSims3.cs,WritePadding,The following statement contains a magic number: while ((s.Position % 4) != 0)  	bw.Write ((byte)0x7E);  
Magic Number,s4pi.Animation,ClipResourceSims3,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResourceSims3.cs,UnParse,The following statement contains a magic number: s.Seek (52' SeekOrigin.Current);  
Magic Number,s4pi.Animation,ClipResourceSims3,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\ClipResourceSims3.cs,UnParse,The following statement contains a magic number: bw.Write (new byte[16]);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,TrackMask,The following statement contains a magic number: mUnused = unused ?? (version < 0x201 ? new byte[48] : new byte[28]);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,TrackMask,The following statement contains a magic number: mUnused = unused ?? (version < 0x201 ? new byte[48] : new byte[28]);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,TrackMask,The following statement contains a magic number: mUnused = unused ?? (version < 0x201 ? new byte[48] : new byte[28]);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,TrackMask,The following statement contains a magic number: mUnused = unused ?? (version < 0x201 ? new byte[48] : new byte[28]);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,Parse,The following statement contains a magic number: if (mVersion < 0x201) {  	mUnused = br.ReadBytes (48);  } else {  	mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder' s);  	mVertexAnimBlendWeight = br.ReadSingle ();  	mUnused = br.ReadBytes (28);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,Parse,The following statement contains a magic number: if (mVersion < 0x201) {  	mUnused = br.ReadBytes (48);  } else {  	mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder' s);  	mVertexAnimBlendWeight = br.ReadSingle ();  	mUnused = br.ReadBytes (28);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,Parse,The following statement contains a magic number: mUnused = br.ReadBytes (48);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,Parse,The following statement contains a magic number: mUnused = br.ReadBytes (28);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mVersion < 0x201) {  	if (mUnused == null)  		mUnused = new byte[48];  	if (mUnused.Length != 48) {  		byte[] unused = mUnused;  		mUnused = new byte[48];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  	}  	bw.Write (mUnused);  } else {  	if (mRigKey == null)  		mRigKey = new TGIBlock (requestedApiVersion' handler' kRigKeyOrder);  	mRigKey.UnParse (s);  	bw.Write (mVertexAnimBlendWeight);  	if (mUnused == null)  		mUnused = new byte[28];  	if (mUnused.Length != 28) {  		byte[] unused = mUnused;  		mUnused = new byte[28];  		Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  	}  	bw.Write (mUnused);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused == null)  	mUnused = new byte[48];  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: mUnused = new byte[48];  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 48) {  	byte[] unused = mUnused;  	mUnused = new byte[48];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 48) {  	byte[] unused = mUnused;  	mUnused = new byte[48];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 48) {  	byte[] unused = mUnused;  	mUnused = new byte[48];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 48) {  	byte[] unused = mUnused;  	mUnused = new byte[48];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: mUnused = new byte[48];  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: Array.Copy (unused' 0' mUnused' 0' unused.Length < 48 ? unused.Length : 48);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused == null)  	mUnused = new byte[28];  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: mUnused = new byte[28];  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 28) {  	byte[] unused = mUnused;  	mUnused = new byte[28];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 28) {  	byte[] unused = mUnused;  	mUnused = new byte[28];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 28) {  	byte[] unused = mUnused;  	mUnused = new byte[28];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: if (mUnused.Length != 28) {  	byte[] unused = mUnused;  	mUnused = new byte[28];  	Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  }  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: mUnused = new byte[28];  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  
Magic Number,s4pi.Animation,TrackMask,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\TrackMask.cs,UnParse,The following statement contains a magic number: Array.Copy (unused' 0' mUnused' 0' unused.Length < 28 ? unused.Length : 28);  
Missing Default,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,UnParse,The following switch statement is missing a default case: switch (info.Flags.Format) {  case CurveDataFormat.Indexed:  	indices = new ushort[Curve.GetFloatCount (DataType)];  	for (int i = 0; i < Curve.GetFloatCount (DataType); i++) {  		float packedIndex = Pack (mData [i]' info.Offset' info.Scale);  		if (packedIndex < 0)  			flags |= (1 << i);  		packedIndex = Math.Abs (packedIndex);  		if (!indexedFloats.Contains (packedIndex))  			indexedFloats.Add (packedIndex);  		indices [i] = (UInt16)indexedFloats.IndexOf (packedIndex);  	}  	break;  case CurveDataFormat.Packed:  	packedVals = new ulong[Curve.GetPackedCount (DataType)];  	for (int packedWritten = 0; packedWritten < packedVals.Length; packedWritten++) {  		ulong packed = 0;  		for (int packedIndex = 0; packedIndex < Curve.GetFloatCount (DataType) / packedVals.Length; packedIndex++) {  			int floatIndex = packedWritten + packedIndex;  			double maxPackedVal = Math.Pow (2' Curve.GetBitsPerFloat (DataType)) - 1;  			float val = (mData [floatIndex] - info.Offset) / info.Scale;  			if (val < 0)  				flags |= (1 << floatIndex);  			val = Math.Abs (val);  			packed |= (ulong)Math.Floor (val * maxPackedVal) << (packedIndex * Curve.GetBitsPerFloat (DataType));  		}  		packedVals [packedWritten] = packed;  	}  	break;  }  
Missing Default,s4pi.Animation.S3CLIP,Frame,F:\newReposMay17\Kuree_Sims4Tools\s4pi Wrappers\AnimationResources\S3CLIP\Frame.cs,UnParse,The following switch statement is missing a default case: switch (info.Flags.Format) {  case CurveDataFormat.Indexed:  	for (int i = 0; i < indices.Length; i++)  		bw.Write (indices [i]);  	break;  case CurveDataFormat.Packed:  	for (int i = 0; i < packedVals.Length; i++)  		Debug.WriteLine ("broken");  	//WritePacked(s' packedVals[i]);  	break;  }  
