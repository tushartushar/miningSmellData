Implementation smell,Namespace,Class,File,Method,Description
Long Method,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,Parse,The method has 100 lines of code.
Complex Method,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,Cyclomatic complexity of the method is 24
Complex Method,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,Cyclomatic complexity of the method is 20
Complex Method,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,Cyclomatic complexity of the method is 28
Complex Method,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,Cyclomatic complexity of the method is 13
Long Parameter List,CatalogResource,ObjectExtensions,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,CopyFields,The method has 6 parameters. Parameters: originalObject' visited' cloneObject' typeToReflect' bindingFlags' filter
Long Parameter List,CatalogResource,ObjectExtensions,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,CopyFields,The method has 6 parameters. Parameters: originalObject' visited' cloneObject' typeToReflect' bindingFlags' filter
Long Parameter List,ArrayExtensions,ObjectExtensions,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,CopyFields,The method has 6 parameters. Parameters: originalObject' visited' cloneObject' typeToReflect' bindingFlags' filter
Long Statement,CatalogResource,_48C28979CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\48C28979CatalogResource.cs,UnParse,The length of the statement  "            if (this.dataBlob1 == null) this.dataBlob1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[29]); " is 121.
Long Statement,CatalogResource,_48C28979CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\48C28979CatalogResource.cs,UnParse,The length of the statement  "                if (this.dataBlob2 == null) this.dataBlob2 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[16]); " is 121.
Long Statement,CatalogResource,A8F7B517CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\A8F7B517CatalogResource.cs,UnParse,The length of the statement  "            if (this.cobjTGIReference1 == null) this.cobjTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,A8F7B517CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\A8F7B517CatalogResource.cs,UnParse,The length of the statement  "            if (this.cobjTGIReference2 == null) this.cobjTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,A8F7B517CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\A8F7B517CatalogResource.cs,UnParse,The length of the statement  "            if (this.cobjTGIReference3 == null) this.cobjTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,Parse,The length of the statement  "            if (base.Version >= 0x19) this.dataBlob2 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(16)); " is 122.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "            if (this.dataBlob1 == null) this.dataBlob1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[17]); " is 121.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.dataBlob2 == null) this.dataBlob2 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[16]); " is 121.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference1 == null) this.modlTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference2 == null) this.modlTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference3 == null) this.modlTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference4 == null) this.modlTGIReference4 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference5 == null) this.modlTGIReference5 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference6 == null) this.modlTGIReference6 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference7 == null) this.modlTGIReference7 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference8 == null) this.modlTGIReference8 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.modlTGIReference9 == null) this.modlTGIReference9 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference1 == null) this.ftptTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference2 == null) this.ftptTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference3 == null) this.ftptTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference4 == null) this.ftptTGIReference4 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference5 == null) this.ftptTGIReference5 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference6 == null) this.ftptTGIReference6 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference7 == null) this.ftptTGIReference7 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference8 == null) this.ftptTGIReference8 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.ftptTGIReference9 == null) this.ftptTGIReference9 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.nullTGIReference1 == null) this.nullTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.nullTGIReference2 == null) this.nullTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.nullTGIReference3 == null) this.nullTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The length of the statement  "                if (this.nullTGIReference4 == null) this.nullTGIReference4 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ThumbnailEntry,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\Common\ThumbnailList.cs,Parse,The length of the statement  "            this.thumGroupTGI = Tuple.Create(new TGIBlock(recommendedApiVersion' handler' "ITG"' s)' new TGIBlock(recommendedApiVersion' handler' "ITG"' s)' new TGIBlock(recommendedApiVersion' handler' "ITG"' s)); " is 201.
Long Statement,CatalogResource,ThumbnailEntry,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\Common\ThumbnailList.cs,UnParse,The length of the statement  "            if (this.thumGroupTGI == null) this.thumGroupTGI = new Tuple<TGIBlock' TGIBlock' TGIBlock>(new TGIBlock(recommendedApiVersion' handler)' new TGIBlock(recommendedApiVersion' handler)' new TGIBlock(recommendedApiVersion' handler)); " is 229.
Long Statement,CatalogResource,ExteriorTrimResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ExteriorTrimResource.cs,UnParse,The length of the statement  "            if (this.trimTGIReference == null) this.trimTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ExteriorTrimResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ExteriorTrimResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference == null) this.modlTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference1 == null) this.modlTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference2 == null) this.modlTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference3 == null) this.modlTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference4 == null) this.modlTGIReference4 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference5 == null) this.modlTGIReference5 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference6 == null) this.modlTGIReference6 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference7 == null) this.modlTGIReference7 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FenceCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FenceCatalogResource.cs,UnParse,The length of the statement  "            if (this.rsltTGIReference == null) this.rsltTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,FoundationResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FoundationResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference1 == null) this.modlTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FoundationResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FoundationResource.cs,UnParse,The length of the statement  "            if (this.trimTGIReference == null) this.trimTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,FoundationResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FoundationResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference2 == null) this.modlTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FountainTrimsResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FountainTrimsResource.cs,UnParse,The length of the statement  "            if (this.unknownTGIReference1 == null) this.unknownTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 129.
Long Statement,CatalogResource,FountainTrimsResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FountainTrimsResource.cs,UnParse,The length of the statement  "            if (this.unknownTGIReference2 == null) this.unknownTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 129.
Long Statement,CatalogResource,FriezeCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FriezeCatalogResource.cs,UnParse,The length of the statement  "            if (this.trimTGIReference == null) this.trimTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,FriezeCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FriezeCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference1 == null) this.modlTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,FriezeCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\FriezeCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference2 == null) this.modlTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,UnParse,The length of the statement  "            foreach (var tgi in this.catalogStyleTGIList) { /* bug in peter's code. Dirty fix*/w.Write(tgi.Instance); w.Write(tgi.ResourceType); w.Write(tgi.ResourceGroup); } " is 162.
Long Statement,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,UnParse,The length of the statement  "            foreach (var tgi in this.catalogStyleTGIList) { /* bug in peter's code. Dirty fix*/w.Write(tgi.Instance); w.Write(tgi.ResourceType); w.Write(tgi.ResourceGroup); } " is 162.
Long Statement,CatalogResource,ObjectExtensions,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,RecursiveCopyBaseTypePrivateFields,The length of the statement  "                CopyFields(originalObject' visited' cloneObject' typeToReflect.BaseType' BindingFlags.Instance | BindingFlags.NonPublic' info => info.IsPrivate); " is 145.
Long Statement,CatalogResource,ObjectExtensions,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,RecursiveCopyBaseTypePrivateFields,The length of the statement  "                CopyFields(originalObject' visited' cloneObject' typeToReflect.BaseType' BindingFlags.Instance | BindingFlags.NonPublic' info => info.IsPrivate); " is 145.
Long Statement,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,UnParse,The length of the statement  "            if (this.unknown1 == null) this.unknown1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[7 * 4]); " is 122.
Long Statement,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,UnParse,The length of the statement  "            if (this.unknownFlags == null) this.unknownFlags = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[5]); " is 126.
Long Statement,CatalogResource,PoolTrimResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\PoolTrimResource.cs,UnParse,The length of the statement  "            if (this.trimTGIReference == null) this.trimTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,PoolTrimResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\PoolTrimResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference == null) this.modlTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cwalTGIReference1 == null) this.cwalTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cwalTGIReference2 == null) this.cwalTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cfenTGIReference == null) this.cfenTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cspnTGIReference == null) this.cspnTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cflrTGIReference1 == null) this.cflrTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cflrTGIReference2 == null) this.cflrTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cobjTGIReference1 == null) this.cobjTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cobjTGIReference2 == null) this.cobjTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.unknTGIReference == null) this.unknTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cfndTGIReference == null) this.cfndTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.ccolTGIReference == null) this.ccolTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cstrTGIReference == null) this.cstrTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.crmtTGIReference == null) this.crmtTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cobjTGIReference3 == null) this.cobjTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cxtrTGIReference == null) this.cxtrTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.nullTGIReference1 == null) this.nullTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.crtrTGIReference == null) this.crtrTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cfrzTGIReference == null) this.cfrzTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cwalTGIReference3 == null) this.cwalTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cflrTGIReference3 == null) this.cflrTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "            if (this.cflrTGIReference4 == null) this.cflrTGIReference4 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "                if (this.nullTGIReference2 == null) this.nullTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "                if (this.nullTGIReference3 == null) this.nullTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "                if (this.cwalTGIReference4 == null) this.cwalTGIReference4 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,ProductStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ProductStyleResource.cs,UnParse,The length of the statement  "                if (this.cflrTGIReference5 == null) this.cflrTGIReference5 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,RoofPatternResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofPatternResource.cs,UnParse,The length of the statement  "            if (this.matdTGIReference == null) this.matdTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,RoofPatternResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofPatternResource.cs,UnParse,The length of the statement  "            if (this.cflrTGIReference == null) this.cflrTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,RoofStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofStyleResource.cs,UnParse,The length of the statement  "            if (this.crmtTGIReference == null) this.crmtTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,RoofStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofStyleResource.cs,UnParse,The length of the statement  "            if (this.crtrTGIReference1 == null) this.crtrTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,RoofStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofStyleResource.cs,UnParse,The length of the statement  "            if (this.crtrTGIReference2 == null) this.crtrTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,RoofStyleResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofStyleResource.cs,UnParse,The length of the statement  "            if (this.toolTGIReference == null) this.toolTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 121.
Long Statement,CatalogResource,RoofTrimResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofTrimResource.cs,UnParse,The length of the statement  "            if (this.unknownTGIReference1 == null) this.unknownTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 129.
Long Statement,CatalogResource,RoofTrimResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RoofTrimResource.cs,UnParse,The length of the statement  "            if (this.unknownTGIReference2 == null) this.unknownTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 129.
Long Statement,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference1 == null) this.modlTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference2 == null) this.modlTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference3 == null) this.modlTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference4 == null) this.modlTGIReference4 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference5 == null) this.modlTGIReference5 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference6 == null) this.modlTGIReference6 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,SpandrelCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\SpandrelCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference7 == null) this.modlTGIReference7 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,StairCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\StairCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference1 == null) this.modlTGIReference1 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,StairCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\StairCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference2 == null) this.modlTGIReference2 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,StairCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\StairCatalogResource.cs,UnParse,The length of the statement  "            if (this.modlTGIReference3 == null) this.modlTGIReference3 = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 123.
Long Statement,CatalogResource,StairCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\StairCatalogResource.cs,UnParse,The length of the statement  "            if (this.unknownTGIreference == null) this.unknownTGIreference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 127.
Long Statement,CatalogResource,StyledRoomResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\StyledRoomResource.cs,UnParse,The length of the statement  "            if (this.unknownTGIReference == null) this.unknownTGIReference = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"); " is 127.
Long Statement,ArrayExtensions,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,UnParse,The length of the statement  "            foreach (var tgi in this.catalogStyleTGIList) { /* bug in peter's code. Dirty fix*/w.Write(tgi.Instance); w.Write(tgi.ResourceType); w.Write(tgi.ResourceGroup); } " is 162.
Long Statement,ArrayExtensions,ObjectExtensions,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,RecursiveCopyBaseTypePrivateFields,The length of the statement  "                CopyFields(originalObject' visited' cloneObject' typeToReflect.BaseType' BindingFlags.Instance | BindingFlags.NonPublic' info => info.IsPrivate); " is 145.
Virtual Method Call from Constructor,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ObjectCatalogResource,The constructor "ObjectCatalogResource" calls a virtual method "OnResourceChanged".
Virtual Method Call from Constructor,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ObjectCatalogResource,The constructor "ObjectCatalogResource" calls a virtual method "Parse".
Virtual Method Call from Constructor,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ObjectCatalogResource,The constructor "ObjectCatalogResource" calls a virtual method "OnResourceChanged".
Virtual Method Call from Constructor,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ObjectCatalogResource,The constructor "ObjectCatalogResource" calls a virtual method "Parse".
Virtual Method Call from Constructor,ArrayExtensions,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ObjectCatalogResource,The constructor "ObjectCatalogResource" calls a virtual method "OnResourceChanged".
Virtual Method Call from Constructor,ArrayExtensions,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ObjectCatalogResource,The constructor "ObjectCatalogResource" calls a virtual method "Parse".
Magic Number,CatalogResource,_48C28979CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\48C28979CatalogResource.cs,Parse,The following statement contains a magic number: this.dataBlob1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(29));
Magic Number,CatalogResource,_48C28979CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\48C28979CatalogResource.cs,Parse,The following statement contains a magic number: if (base.Version >= 0x19)                  this.dataBlob2 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(16));
Magic Number,CatalogResource,_48C28979CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\48C28979CatalogResource.cs,UnParse,The following statement contains a magic number: if (this.dataBlob1 == null) this.dataBlob1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[29]);
Magic Number,CatalogResource,_48C28979CatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\48C28979CatalogResource.cs,UnParse,The following statement contains a magic number: if (base.Version >= 0x19)              {                  if (this.dataBlob2 == null) this.dataBlob2 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[16]);                  this.dataBlob2.UnParse(s);              }
Magic Number,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,Parse,The following statement contains a magic number: this.dataBlob1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(17));
Magic Number,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,Parse,The following statement contains a magic number: if (base.Version >= 0x19) this.dataBlob2 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(16));
Magic Number,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The following statement contains a magic number: if (this.dataBlob1 == null) this.dataBlob1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[17]);
Magic Number,CatalogResource,ColumnCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ColumnCatalogResource.cs,UnParse,The following statement contains a magic number: if (base.Version >= 0x19)              {                  if (this.dataBlob2 == null) this.dataBlob2 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[16]);                  this.dataBlob2.UnParse(s);              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,Parse,The following statement contains a magic number: this.unknown1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(7 * 4));
Magic Number,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,Parse,The following statement contains a magic number: this.unknown1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(7 * 4));
Magic Number,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,Parse,The following statement contains a magic number: this.unknownFlags = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' r.ReadBytes(5));
Magic Number,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,UnParse,The following statement contains a magic number: if (this.unknown1 == null) this.unknown1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[7 * 4]);
Magic Number,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,UnParse,The following statement contains a magic number: if (this.unknown1 == null) this.unknown1 = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[7 * 4]);
Magic Number,CatalogResource,ObjectInstanceResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectInstanceResource.cs,UnParse,The following statement contains a magic number: if (this.unknownFlags == null) this.unknownFlags = new DataBlobHandler(RecommendedApiVersion' OnResourceChanged' new byte[5]);
Magic Number,CatalogResource,RailingResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RailingResource.cs,Parse,The following statement contains a magic number: TGIBlock[] tgiList = new TGIBlock[8];
Magic Number,CatalogResource,RailingResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RailingResource.cs,Parse,The following statement contains a magic number: for (int i = 0; i < 8; i++) tgiList[i] = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG"' s);
Magic Number,CatalogResource,RailingResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RailingResource.cs,UnParse,The following statement contains a magic number: if (this.modlList == null)              {                                                             TGIBlock[] tgiList = new TGIBlock[8];                  for (int i = 0; i < 8; i++) tgiList[i] = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG");                  this.modlList = new CountedTGIBlockList(OnResourceChanged' tgiList);              }
Magic Number,CatalogResource,RailingResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\RailingResource.cs,UnParse,The following statement contains a magic number: if (this.modlList == null)              {                                                             TGIBlock[] tgiList = new TGIBlock[8];                  for (int i = 0; i < 8; i++) tgiList[i] = new TGIBlock(RecommendedApiVersion' OnResourceChanged' "ITG");                  this.modlList = new CountedTGIBlockList(OnResourceChanged' tgiList);              }
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,ReadTGIBlock,The following statement contains a magic number: int count = r.ReadInt32() / 4;
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,ReadTGIBlock,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  ulong instance = 0;                  uint type = 0;                  uint group = 0;                  if (order == TGIBlock.Order.ITG)                  {                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                      type = r.ReadUInt32();                      group = r.ReadUInt32();                    }                  else if (order == TGIBlock.Order.TGI)                  {                      type = r.ReadUInt32();                      group = r.ReadUInt32();                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                  }                  tgiblockList.Add(new TGIBlock(recommendedApiVersion' handler' type' group' instance));              }
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,ReadTGIBlock,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  ulong instance = 0;                  uint type = 0;                  uint group = 0;                  if (order == TGIBlock.Order.ITG)                  {                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                      type = r.ReadUInt32();                      group = r.ReadUInt32();                    }                  else if (order == TGIBlock.Order.TGI)                  {                      type = r.ReadUInt32();                      group = r.ReadUInt32();                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                  }                  tgiblockList.Add(new TGIBlock(recommendedApiVersion' handler' type' group' instance));              }
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,ReadTGIBlock,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  ulong instance = 0;                  uint type = 0;                  uint group = 0;                  if (order == TGIBlock.Order.ITG)                  {                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                      type = r.ReadUInt32();                      group = r.ReadUInt32();                    }                  else if (order == TGIBlock.Order.TGI)                  {                      type = r.ReadUInt32();                      group = r.ReadUInt32();                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                  }                  tgiblockList.Add(new TGIBlock(recommendedApiVersion' handler' type' group' instance));              }
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,ReadTGIBlock,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  ulong instance = 0;                  uint type = 0;                  uint group = 0;                  if (order == TGIBlock.Order.ITG)                  {                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                      type = r.ReadUInt32();                      group = r.ReadUInt32();                    }                  else if (order == TGIBlock.Order.TGI)                  {                      type = r.ReadUInt32();                      group = r.ReadUInt32();                      instance = r.ReadUInt64();                      instance = (instance << 32) | (instance >> 32); // swap instance                  }                  tgiblockList.Add(new TGIBlock(recommendedApiVersion' handler' type' group' instance));              }
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,WriteTGIBlock,The following statement contains a magic number: w.Write(value.Count * 4);
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,WriteTGIBlock,The following statement contains a magic number: foreach (var tgi in value)              {                  ulong instance = (tgi.Instance << 32) | (tgi.Instance >> 32);                  if (order == TGIBlock.Order.ITG)                  {                      w.Write(instance);                      w.Write(tgi.ResourceType);                      w.Write(tgi.ResourceGroup);                  }                  else if (order == TGIBlock.Order.TGI)                  {                      w.Write(tgi.ResourceType);                      w.Write(tgi.ResourceGroup);                      w.Write(instance);                  }              }
Magic Number,CatalogResource,ObjectDefinitionResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectDefinitionResource.cs,WriteTGIBlock,The following statement contains a magic number: foreach (var tgi in value)              {                  ulong instance = (tgi.Instance << 32) | (tgi.Instance >> 32);                  if (order == TGIBlock.Order.ITG)                  {                      w.Write(instance);                      w.Write(tgi.ResourceType);                      w.Write(tgi.ResourceGroup);                  }                  else if (order == TGIBlock.Order.TGI)                  {                      w.Write(tgi.ResourceType);                      w.Write(tgi.ResourceGroup);                      w.Write(instance);                  }              }
Magic Number,ArrayExtensions,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,ArrayExtensions,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,ArrayExtensions,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
Magic Number,ArrayExtensions,ObjectCatalogResource,C:\repos\Kuree_Sims4Tools\s4pi Wrappers\CatalogResource\ObjectCatalogResource.cs,ChangePropertyFromString,The following statement contains a magic number: foreach (var fieldName in filedNames)              {                  var prop = result.GetType().GetProperty(fieldName);                  if (prop == null) continue;                  var value = prop.GetValue(result' null);                  if (value == null) continue;                  if (value.GetType() == typeof(int) || value.GetType() == typeof(Int32))                  {                      int v = (int)value;                      int newValue = v ^ (int)FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(uint) || value.GetType() == typeof(UInt32))                  {                      uint v = (uint)value;                      uint newValue = v ^ FNV32.GetHash(hashsalt);                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(short) || value.GetType() == typeof(Int16))                  {                      short v = (short)value;                      short newValue = Convert.ToInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(ushort) || value.GetType() == typeof(UInt16))                  {                      ushort v = (ushort)value;                      ushort newValue = Convert.ToUInt16((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(byte) || value.GetType() == typeof(Byte))                  {                      byte v = (byte)value;                      byte newValue = Convert.ToByte((uint)v ^ FNV32.GetHash(hashsalt));                      SetProperty(result' fieldName' newValue);                  }                  else if (value.GetType() == typeof(TGIBlock))                  {                      TGIBlock v = value as TGIBlock;                      if (v != null)                      {                          v.Instance ^= FNV64.GetHash(hashsalt);                          if (setHighBit) { v.Instance |= (ulong)1 << 63; v.ResourceGroup |= (uint)1 << 31; }                      }                      SetProperty(result' fieldName' v);                  }                  else if (value.GetType() == typeof(TGIBlock[]))                  {                      TGIBlock[] v = value as TGIBlock[];                      if (v != null)                      {                          foreach (var tgi in v)                          {                              tgi.Instance ^= FNV64.GetHash(hashsalt);                              if (setHighBit) { tgi.Instance |= (ulong)1 << 63; tgi.ResourceGroup |= (uint)1 << 31; }                          }                      }                      SetProperty(result' fieldName' v);                  }              }
