Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The method has 121 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHuffman,The method has 103 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The method has 108 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterDynHeader.cs,Decode,The method has 116 lines of code.
Complex Method,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Checksums\Adler32.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,SetLevel,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateFast,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateSlow,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,FlushBlock,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,CalcBLFreq,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,WriteTree,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHuffman,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,Cyclomatic complexity of the method is 23
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,Cyclomatic complexity of the method is 10
Complex Method,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,UncompressStream,Cyclomatic complexity of the method is 8
Complex Method,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,OldDecompress,Cyclomatic complexity of the method is 8
Complex Method,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,packedChunk,Cyclomatic complexity of the method is 9
Complex Method,s4pi.Package,PackageIndex,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\PackageIndex.cs,Save,Cyclomatic complexity of the method is 9
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\DeflaterOutputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\DeflaterOutputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\InflaterInputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,CopyCompressedText,The method has 5 parameters. Parameters: r' Data' numToCopy' position' copyOffest
Long Statement,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateSlow,The length of the statement  "						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) { " is 123.
Long Statement,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,SaveAs,The length of the statement  "            uint indexType = (uint)(lIh.Count <= 1 ? 0x04 : 0x00) | (uint)(lG.Count <= 1 ? 0x02 : 0x00) | (uint)(lT.Count <= 1 ? 0x01 : 0x00); " is 130.
Long Statement,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,OpenPackage,The length of the statement  "            return new Package(APIversion' new FileStream(packagePath' FileMode.Open' readwrite ? FileAccess.ReadWrite : FileAccess.Read' FileShare.ReadWrite)); " is 148.
Long Statement,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,NameMatch,The length of the statement  "            for (int i = 0; i < names.Length; i++) if (!target.ContentFields.Contains(names[i]) || !values[i].Equals(target[names[i]])) return false; " is 137.
Long Statement,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,packedChunk,The length of the statement  "                        throw new OverflowException(String.Format("packedChunk' dirty resource - T: 0x{0:X}' G: 0x{1:X}' I: 0x{2:X}: Length expected: 0x{3:X}' read: 0x{4:X}"' " is 150.
Long Statement,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,packedChunk,The length of the statement  "                        throw new InvalidOperationException(String.Format("Clean resource with undefined \"current package\" - T: 0x{0:X}' G: 0x{1:X}' I: 0x{2:X}"' " is 139.
Long Statement,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,packedChunk,The length of the statement  "                        throw new OverflowException(String.Format("packedChunk' clean resource - T: 0x{0:X}' G: 0x{1:X}' I: 0x{2:X}: Length expected: 0x{3:X}' read: 0x{4:X}"' " is 150.
Long Statement,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,CheckHeader,The length of the statement  "                throw new InvalidDataException("Expected major version(s) '" + string.Join("' "' majors) + "'.  Found '" + Major.ToString() + "'."); " is 132.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[curMatch + best_len] != scan_end      ||   					window[curMatch + best_len - 1] != scan_end1 ||   					window[curMatch] != window[scan]             ||   					window[curMatch + 1] != window[scan + 1]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&  					(scan < strend)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateStored,The conditional expression  "(storedLength >= DeflaterConstants.MAX_BLOCK_SIZE) || // Block is full  				(blockStart < WSIZE && storedLength >= MAX_DIST) ||   // Block may move out of window  				flush"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateFast,The conditional expression  "lookahead >= MIN_MATCH &&   					(hashHead = InsertString()) != 0 &&   					strategy != DeflateStrategy.HuffmanOnly &&  					strstart - hashHead <= MAX_DIST &&   					FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))"  is complex.
Empty Catch Block,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,ClosePackage,The method has an empty catch block.
Empty Catch Block,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,Dispose,The method has an empty catch block.
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) + s1;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Checksums\Adler32.cs,Update,The following statement contains a magic number: int n = 3800;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) | s1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflater,The following statement contains a magic number: level = 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,SetLevel,The following statement contains a magic number: level = 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: level_flags = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: level_flags < 0 || level_flags > 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header |= level_flags << 6;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header += 31 - (header % 31);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: header += 31 - (header % 31);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Deflater.cs,Deflate,The following statement contains a magic number: pending.WriteShortMSB(chksum >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflaterEngine,The following statement contains a magic number: window = new byte[2 * WSIZE];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,SetDictionary,The following statement contains a magic number: strstart += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,SetLevel,The following statement contains a magic number: (level < 0) || (level > 9)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,FillWindow,The following statement contains a magic number: int more = 2 * WSIZE - lookahead - strstart;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: chainLength >>= 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: match = curMatch + 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: scan += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateFast,The following statement contains a magic number: strstart > 2 * WSIZE - MIN_LOOKAHEAD
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: strstart >= 2 * WSIZE - MIN_LOOKAHEAD
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: prevLen -= 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x030 + i) << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 144
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 9;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: i < 280
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticLLength[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticDCodes[i] = BitReverse(i << 11);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: staticDLength[i] = 5;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: distTree    = new Tree(this' DIST_NUM' 1' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree      = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree      = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(distTree.numCodes - 1' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTree.length[BL_ORDER[rank]]' 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: int bits = (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: int bits = (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: bits > 0 && bits <= 5
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: bits = dc / 2 - 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,FlushStoredBlock,The following statement contains a magic number: pending.WriteBits((DeflaterConstants.STORED_BLOCK << 1) + (lastBlock ? 1 : 0)' 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int blTreeCodes = 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +   				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +   				extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +   				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +   				extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: storedOffset >= 0 && storedLength + 4 < opt_len >> 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: storedOffset >= 0 && storedLength + 4 < opt_len >> 3
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: l_buf[last_lit++] = (byte)(length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: int lc = Lcode(length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += (lc - 261) / 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: lc >= 265 && lc < 285
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: lc >= 265 && lc < 285
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: extra_bits += dc / 2 - 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: dc >= 4
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: return 285;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: length == 255
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: int code = 257;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: code += 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: length >= 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: code += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: distance >= 4
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: code += bl_counts[bits] << (15 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: nextCode[bits-1] += 1 << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: pos > 0 && freqs[heap[ppos = (pos - 1) / 2]] > freq
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int node = maxCode < 2 ? ++maxCode : 0;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: heapLen < 2
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] values = new int[2 * heapLen - 1];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * i]   = node;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * i + 1] = -1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: values[i] = freqs[node] << 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: path = path * 2 + 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: (path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * last] = first;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: childs[2 * last + 1] = second;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: path = ppos * 2 + 1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: (path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: heap[0] != childs.Length / 2 - 1
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: max_count = 138;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: min_count = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: max_count = 138;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: min_count = 3;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numNodes = childs.Length / 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numLeafs = (numNodes + 1) / 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: childs[2 * i + 1] != -1
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: bl_counts[maxLength-2] -= overflow;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int nodePtr = 2 * numLeafs;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int childPtr = 2*childs[nodePtr++];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: int header = input.PeekBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header % 31 != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: (header & 0x0f00) != (Deflater.DEFLATED << 8)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: int dictByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: readAdler = (readAdler << 8) | dictByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: free >= 258
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: int chkByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: readAdler = (readAdler << 8) | chkByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: byte[] codeLengths = new byte[288];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 144
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 9;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 280
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 288
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths = new byte[32];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 5;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 32
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treeSize = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code += blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treeSize += (end - start) >> (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treePtr = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code -= blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treePtr += 1 << (bits-9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[revcode] = (short) ((i << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits <= 9
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: nextCode[bits] = code + (1 << (16 - bits));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int subtree = -(symbol >> 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int bitlen = symbol & 15;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: symbol = tree[subtree | (lookahead >> 9)];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: (lookahead = input.PeekBits(9)) >= 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteShort,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 24));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (bits >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: bitCount > 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (bits >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bits >>= 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bitCount -= 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: bitCount >= 16
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,WriteShortMSB,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (s >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bits >>= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bitCount -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: bitCount >= 8
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\DeflaterOutputStream.cs,DeflaterOutputStream,The following statement contains a magic number: bufferSize < 512
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: bufferSize = 1024;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: bufferSize < 1024
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\InflaterInputStream.cs,ReadLeShort,The following statement contains a magic number: return ReadLeByte() | (ReadLeByte() << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\InflaterInputStream.cs,ReadLeInt,The following statement contains a magic number: return ReadLeShort() | (ReadLeShort() << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\InflaterInputStream.cs,ReadLeLong,The following statement contains a magic number: return (uint)ReadLeInt() | ((long)ReadLeInt() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: buffer_ |= (uint)((window_[windowStart_++] & 0xff |  								 (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: bitsInBuffer_ += 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: buffer_ >>= (bitsInBuffer_ & 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: bitsInBuffer_ &= ~7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: (bitsInBuffer_ & 7) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: buffer_ >>= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\Streams\StreamManipulator.cs,SetInput,The following statement contains a magic number: bitsInBuffer_ += 8;
Magic Number,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,UncompressStream,The following statement contains a magic number: byte[] header = r.ReadBytes(2);
Magic Number,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,UncompressStream,The following statement contains a magic number: stream.Position -= 2;
Magic Number,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,OldDecompress,The following statement contains a magic number: byte[] sizeArray = new byte[4];
Magic Number,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,OldDecompress,The following statement contains a magic number: int numToCopy = ((byte0 & 0x1C) >> 2) + 3;
Magic Number,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,OldDecompress,The following statement contains a magic number: int numToCopy = ((byte0 & 0x1C) >> 2) + 3;
Magic Number,s4pi.Package,Compression,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression.cs,OldDecompress,The following statement contains a magic number: int copyOffest = ((byte0 & 0x60) << 3) + byte1 + 1;
Magic Number,s4pi.Package,ResourceIndexEntry,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\ResourceIndexEntry.cs,ResourceIndexEntry,The following statement contains a magic number: indexEntry = new byte[(header.Length + entry.Length) * 4];
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,SaveAs,The following statement contains a magic number: this.Index.ForEach(x =>              {                  if (!lT.Contains(x.ResourceType)) lT.Add(x.ResourceType);                  if (!lG.Contains(x.ResourceGroup)) lG.Add(x.ResourceGroup);                  if (!lIh.Contains((uint)(x.Instance >> 32))) lIh.Add((uint)(x.Instance >> 32));              });
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,SaveAs,The following statement contains a magic number: this.Index.ForEach(x =>              {                  if (!lT.Contains(x.ResourceType)) lT.Add(x.ResourceType);                  if (!lG.Contains(x.ResourceGroup)) lG.Add(x.ResourceGroup);                  if (!lIh.Contains((uint)(x.Instance >> 32))) lIh.Add((uint)(x.Instance >> 32));              });
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,setIndexcount,The following statement contains a magic number: w.BaseStream.Position = 36;
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,setIndexsize,The following statement contains a magic number: w.BaseStream.Position = 44;
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,setIndexversion,The following statement contains a magic number: w.BaseStream.Position = 60;
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,setIndexversion,The following statement contains a magic number: w.Write(3);
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,setIndexposition,The following statement contains a magic number: w.BaseStream.Position = 40;
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,setIndexposition,The following statement contains a magic number: w.BaseStream.Position = 64;
Magic Number,s4pi.Package,Package,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Package.cs,CheckHeader,The following statement contains a magic number: header.Length != 96
Magic Number,s4pi.Package,PackageIndex,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\PackageIndex.cs,Save,The following statement contains a magic number: r = new BinaryReader(new MemoryStream(new byte[numFields * 4]));
Magic Number,s4pi.Package,PackageIndex,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\PackageIndex.cs,Save,The following statement contains a magic number: r.BaseStream.Position = 4;
Magic Number,s4pi.Package,PackageIndex,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\PackageIndex.cs,Save,The following statement contains a magic number: r.BaseStream.Position = 4;
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\DeflaterEngine.cs,SetLevel,The following switch statement is missing a default case: switch (compressionFunction) {  					case DEFLATE_STORED:  						if (strstart > blockStart) {  							huffman.FlushStoredBlock(window' blockStart'  								strstart - blockStart' false);  							blockStart = strstart;  						}  						UpdateHash();  						break;    					case DEFLATE_FAST:  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart'  								false);  							blockStart = strstart;  						}  						break;    					case DEFLATE_SLOW:  						if (prevAvailable) {  							huffman.TallyLit(window[strstart-1] & 0xff);  						}  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart' false);  							blockStart = strstart;  						}  						prevAvailable = false;  						matchLen = MIN_MATCH - 1;  						break;  				}
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\Kuree_Sims4Tools\s4pi\Package\Compression\InflaterDynHeader.cs,Decode,The following switch statement is missing a default case: switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}
