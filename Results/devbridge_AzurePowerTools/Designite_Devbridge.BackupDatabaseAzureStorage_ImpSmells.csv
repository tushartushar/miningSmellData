Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Devbridge.BackupDatabaseAzureStorage,ImportExportHelper,C:\repos\devbridge_AzurePowerTools\Devbridge.BackupDatabaseAzureStorage\ImportExportHelper.cs,CheckRequestStatus,The length of the statement  "            WebRequest webRequest = WebRequest.Create(this.EndPointUri + string.Format("/Status?servername={0}&username={1}&password={2}&reqId={3}"' " is 136.
Magic Number,Devbridge.BackupDatabaseAzureStorage,ImportExportHelper,C:\repos\devbridge_AzurePowerTools\Devbridge.BackupDatabaseAzureStorage\ImportExportHelper.cs,DoExport,The following statement contains a magic number: try              {                  //Initialize the WebResponse to the response from the WebRequest                  webResponse = webRequest.GetResponse();                    xmlStreamReader = XmlReader.Create(webResponse.GetResponseStream());                  xmlStreamReader.ReadToFollowing("guid");                  requestGuid = xmlStreamReader.ReadElementContentAsString();                  logger.Info(String.Format("Your Export Request Guid is: {0}"' requestGuid));                    //Get Export Operation Status                  while (!exportComplete)                  {                      logger.Info("Checking export status...");                      List<StatusInfo> statusInfoList = CheckRequestStatus(requestGuid);                      StatusInfo statusInfo = statusInfoList.FirstOrDefault();                      logger.Info(statusInfo.Status);                        if (statusInfo.Status == "Failed")                      {                          logger.Info(String.Format("Database export failed: {0}"' statusInfo.ErrorMessage));                          exportComplete = true;                      }                        if (statusInfo.Status == "Completed")                      {                          exportedBlobPath = statusInfo.BlobUri;                          logger.Info(String.Format("Export Complete - Database exported to: {0}\n\r"' exportedBlobPath));                          exportComplete = true;                      }                        if (!exportComplete)                      {                          Thread.Sleep(3000);                      }                  }                    return exportedBlobPath;              }              catch (WebException responseException)              {                  logger.ErrorFormat("Request Falied:{0}"' responseException'responseException.Message);                  if (responseException.Response != null)                  {                      logger.ErrorFormat("Status Code: {0}"' ((HttpWebResponse)responseException.Response).StatusCode);                      logger.ErrorFormat("Status Description: {0}\n\r"' ((HttpWebResponse)responseException.Response).StatusDescription);                  }                  return null;              }
