Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HypermediaAppServer.ExpenseApp,ReceiptController,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\ExpenseApp\ReceiptController.cs,Get,Cyclomatic complexity of the method is 12
Long Parameter List,HypermediaAppServer,Program,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,ConfigureApi,The method has 11 parameters.
Long Parameter List,HypermediaAppServer,ConsoleRequestLogger,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,SendAsync,The method has 10 parameters.
Long Statement,HypermediaAppServer,ConsoleRequestLogger,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,SendAsync,The length of the statement  "	Console.WriteLine ("> {0} {1}"' request.Method' request.RequestUri.GetComponents (UriComponents.PathAndQuery' UriFormat.SafeUnescaped)); " is 136.
Long Statement,HypermediaAppServer,HttpConfigurationExtensions,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Tools\UnitySupport.cs,CreateUnityContainer,The length of the statement  "	container.RegisterTypes (AllClasses.FromLoadedAssemblies ().Where (t => t.IsAssignableFrom (typeof(IHttpController)))' WithMappings.FromAllInterfaces); " is 151.
Magic Number,HypermediaAppServer,ConsoleRequestLogger,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,SendAsync,The following statement contains a magic number: if (response.Content != null) {  	ProcessHeader (response.Content.Headers' (name' value) => Console.WriteLine ("< {0}: {1}"' name' value));  	Console.WriteLine ();  	var body = await response.Content.ReadAsStringAsync ();  	if (body.Length > 3000) {  		body = body.Substring (0' 3000) + "...";  	}  	Console.WriteLine (body);  }  
Magic Number,HypermediaAppServer,ConsoleRequestLogger,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,SendAsync,The following statement contains a magic number: if (response.Content != null) {  	ProcessHeader (response.Content.Headers' (name' value) => Console.WriteLine ("< {0}: {1}"' name' value));  	Console.WriteLine ();  	var body = await response.Content.ReadAsStringAsync ();  	if (body.Length > 3000) {  		body = body.Substring (0' 3000) + "...";  	}  	Console.WriteLine (body);  }  
Magic Number,HypermediaAppServer,ConsoleRequestLogger,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,SendAsync,The following statement contains a magic number: if (body.Length > 3000) {  	body = body.Substring (0' 3000) + "...";  }  
Magic Number,HypermediaAppServer,ConsoleRequestLogger,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,SendAsync,The following statement contains a magic number: if (body.Length > 3000) {  	body = body.Substring (0' 3000) + "...";  }  
Magic Number,HypermediaAppServer,ConsoleRequestLogger,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\Program.cs,SendAsync,The following statement contains a magic number: body = body.Substring (0' 3000) + "...";  
Magic Number,HypermediaAppServer.SwitchApp,SwitchController,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\SwitchApp\SwitchController.cs,Get,The following statement contains a magic number: response.Headers.CacheControl = new CacheControlHeaderValue () {  	MaxAge = new TimeSpan (0' 0' 2)  };  
Missing Default,HypermediaAppServer.ExpenseApp,ReceiptController,C:\repos\darrelmiller_HypermediaClients\SampleServer\SwitchApp\ExpenseApp\ReceiptController.cs,Get,The following switch statement is missing a default case: switch (ext) {  case ".jpg":  	httpResponseMessage.Content.Headers.ContentType = new MediaTypeHeaderValue ("image/jpeg");  	break;  case ".png":  	httpResponseMessage.Content.Headers.ContentType = new MediaTypeHeaderValue ("image/png");  	break;  case ".pdf":  	httpResponseMessage.Content.Headers.ContentType = new MediaTypeHeaderValue ("application/pdf");  	break;  case ".tif":  	httpResponseMessage.Content.Headers.ContentType = new MediaTypeHeaderValue ("image/tiff");  	break;  }  
