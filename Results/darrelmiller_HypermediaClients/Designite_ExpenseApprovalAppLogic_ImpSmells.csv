Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,HandleResponseAsync,Cyclomatic complexity of the method is 14
Complex Method,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessShowLinkResponse,Cyclomatic complexity of the method is 11
Complex Method,ExpenseApprovalAppLogic.ViewModels,ListPageViewModel,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ViewModels\ListPageViewModel.cs,LoadItems,Cyclomatic complexity of the method is 9
Long Parameter List,ExpenseApprovalAppLogic.ViewModels,ListPageViewModel,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ViewModels\ListPageViewModel.cs,ListPageViewModel,The method has 9 parameters.
Long Statement,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessClientError,The length of the statement  "		clientState.UserMessage = String.Format ("{0} error returned while following {1} to {2}"' response.ReasonPhrase' contextRelation' response.RequestMessage.RequestUri.OriginalString); " is 181.
Magic Number,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessRedirect,The following statement contains a magic number: if ((int)response.StatusCode >= 300) {  	// Process redirect  	// TODO   }  
Magic Number,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessClientError,The following statement contains a magic number: if ((int)response.StatusCode >= 400) {  	// Server claims we made a bad request  	// Don't change client state other than to record an error has occured  	// Create error instance' add it to the list of errors  	clientState.UserMessage = String.Format ("{0} error returned while following {1} to {2}"' response.ReasonPhrase' contextRelation' response.RequestMessage.RequestUri.OriginalString);  	return true;  }  
Magic Number,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessServerErrors,The following statement contains a magic number: if ((int)response.StatusCode >= 500) {  	// Server failed to process request correctly.  	// Don't change client state other than to record an error has occured  	// Create error instance' add it to the list of errors  	// If we keep getting these' make sure the user can exit the app or select another server  	clientState.UserMessage = "Server failed to process request successfully - " + response.ReasonPhrase;  }  
Magic Number,ExpenseApprovalAppLogic.Tools,HttpStatusCodeExtensions,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\Tools\HttpStatusCodeExtensions.cs,IsClientError,The following statement contains a magic number: return (int)httpStatusCode >= 400 && (int)httpStatusCode > 500;  
Magic Number,ExpenseApprovalAppLogic.Tools,HttpStatusCodeExtensions,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\Tools\HttpStatusCodeExtensions.cs,IsClientError,The following statement contains a magic number: return (int)httpStatusCode >= 400 && (int)httpStatusCode > 500;  
Magic Number,ExpenseApprovalAppLogic.Tools,HttpStatusCodeExtensions,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\Tools\HttpStatusCodeExtensions.cs,IsServerError,The following statement contains a magic number: return (int)httpStatusCode >= 500;  
Magic Number,ExpenseApprovalAppLogic.Tools,HttpStatusCodeExtensions,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\Tools\HttpStatusCodeExtensions.cs,IsRedirect,The following statement contains a magic number: return (int)httpStatusCode >= 300 && (int)httpStatusCode < 400;  
Magic Number,ExpenseApprovalAppLogic.Tools,HttpStatusCodeExtensions,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\Tools\HttpStatusCodeExtensions.cs,IsRedirect,The following statement contains a magic number: return (int)httpStatusCode >= 300 && (int)httpStatusCode < 400;  
Missing Default,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,HandleResponseAsync,The following switch statement is missing a default case: switch (linkRelation) {  case TavisLinkTypes.Show:  	await ProcessShowLinkResponse (response);  	break;  case TavisLinkTypes.Action:  	await ProcessActionLinkResponse (response);  	break;  case TavisLinkTypes.Home:  	await ProcessHomeLinkResponse (response);  	break;  }  
Missing Default,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessShowLinkResponse,The following switch statement is missing a default case: switch (response.Content.Headers.ContentType.MediaType) {  case "application/vnd.collection+json":  	CurrentCollection = CollectionJsonHelper.ParseCollectionJson (contentStream);  	break;  case "image/jpeg":  	CurrentImage = contentStream;  	break;  case "image/tiff":  	break;  case "application/pdf":  	CurrentFile = contentStream;  	break;  }  
Missing Default,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessHomeLinkResponse,The following switch statement is missing a default case: switch (response.Content.Headers.ContentType.MediaType) {  // Currently only support application/home+json  case "application/home+json":  	HomeDocument = HomeDocument.Parse (contentStream' LinkFactory);  	showLink = HomeDocument.GetResource (LinkHelper.GetLinkRelationTypeName<ShowLink> ()) as ShowLink;  	break;  // Add more media types here as desired.  WADL' SWAGGER' API Blueprint' WSDL' etc  }  
Missing Default,ExpenseApprovalAppLogic,ExpenseAppClientState,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ExpenseAppClientState.cs,ProcessActionLinkResponse,The following switch statement is missing a default case: switch (response.Content.Headers.ContentType.MediaType) {  case "application/vnd.collection+json":  	CurrentCollection = CollectionJsonHelper.ParseCollectionJson (contentStream);  	break;  }  
Missing Default,ExpenseApprovalAppLogic.ViewModels,ImagePageViewModel,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ViewModels\ImagePageViewModel.cs,_clientState_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) {  case "CurrentImage":  	Image = _clientState.CurrentImage;  	break;  }  
Missing Default,ExpenseApprovalAppLogic.ViewModels,ListPageViewModel,C:\repos\darrelmiller_HypermediaClients\ExpenseApproval\ExpenseApprovalApp\ExpenseApprovalAppLogic\ViewModels\ListPageViewModel.cs,LoadItems,The following switch statement is missing a default case: switch (link.Rel) {  case "urn:tavis:show":  	links.Add (link.Prompt' new ShowLink () {  		Target = link.Href'  		Context = collection.Href  	});  	break;  case "urn:tavis:action":  	links.Add (link.Prompt' new ActionLink () {  		Target = link.Href'  		Context = collection.Href  	});  	break;  }  
