Implementation smell,Namespace,Class,File,Method,Description
Long Method,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,FetchCacheTexture,The method has 109 lines of code.
Long Method,ActiveTextureManagement,DatabaseLoaderTexture_ATM,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\DatabaseLoaderTexture_ATM.cs,PopulateConfig,The method has 109 lines of code.
Long Method,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The method has 122 lines of code.
Complex Method,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,FetchCacheTexture,Cyclomatic complexity of the method is 11
Complex Method,ActiveTextureManagement,DatabaseLoaderTexture_ATM,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\DatabaseLoaderTexture_ATM.cs,PopulateConfig,Cyclomatic complexity of the method is 15
Complex Method,ActiveTextureManagement,DatabaseLoaderTexture_ATM,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\DatabaseLoaderTexture_ATM.cs,UpdateTexture,Cyclomatic complexity of the method is 11
Complex Method,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,Cyclomatic complexity of the method is 11
Complex Method,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,Cyclomatic complexity of the method is 11
Complex Method,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,Cyclomatic complexity of the method is 8
Complex Method,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,WriteTo,Cyclomatic complexity of the method is 8
Long Parameter List,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The method has 5 parameters. Parameters: originalWidth' originalHeight' originalFormat' originalMipmaps' Texture
Long Parameter List,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,updateMemoryCount,The method has 6 parameters. Parameters: originalWidth' originalHeight' originalFormat' originalMipmaps' Texture' folder
Long Parameter List,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,Resize,The method has 5 parameters. Parameters: texture' width' height' mipmaps' convertToNormalFormat
Long Parameter List,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,ResizePixels,The method has 5 parameters. Parameters: pixels' width' height' newWidth' newHeight
Long Parameter List,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The method has 7 parameters. Parameters: pixels' width' height' w' h' newWidth' newHeight
Long Parameter List,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,DDSToTexture,The method has 5 parameters. Parameters: file' Texture' mipmaps' isCompressed' hasAlpha
Long Parameter List,ActiveTextureManagement,TextureInfoWrapper,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureInfoWrapper.cs,TextureInfoWrapper,The method has 5 parameters. Parameters: file' newTex' nrmMap' readable' compress
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,FetchCacheTexture,The length of the statement  "                    TextureInfoWrapper cacheTexInfo = new TextureInfoWrapper(Texture.file' tex.texture' tex.isNormalMap' tex.isReadable' tex.isCompressed); " is 135.
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,FetchCacheTexture,The length of the statement  "                    if (cacheHash != hashString || compress != isCompressed || mipmaps != hasMipmaps || cacheIsNorm != Texture.isNormalMap || Texture.resizeWidth != cacheWidth || Texture.resizeHeight != cacheHeight) " is 195.
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,RebuildCache,The length of the statement  "            config.AddValue("orig_format"' Path.GetExtension(originalTextureFile)); ActiveTextureManagement.DBGLog("orig_format: " + Path.GetExtension(originalTextureFile)); " is 161.
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,RebuildCache,The length of the statement  "            config.AddValue("orig_width"' Texture.width.ToString()); ActiveTextureManagement.DBGLog("orig_width: " + Texture.width.ToString()); " is 131.
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,RebuildCache,The length of the statement  "            config.AddValue("orig_height"' Texture.height.ToString()); ActiveTextureManagement.DBGLog("orig_height: " + Texture.height.ToString()); " is 135.
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,RebuildCache,The length of the statement  "            config.AddValue("is_normal"' cacheTexture.isNormalMap.ToString()); ActiveTextureManagement.DBGLog("is_normal: " + cacheTexture.isNormalMap.ToString()); " is 151.
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,RebuildCache,The length of the statement  "            config.AddValue("width"' Texture.resizeWidth.ToString()); ActiveTextureManagement.DBGLog("width: " + Texture.resizeWidth.ToString()); " is 133.
Long Statement,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,RebuildCache,The length of the statement  "            config.AddValue("height"' Texture.resizeHeight.ToString()); ActiveTextureManagement.DBGLog("height: " + Texture.resizeHeight.ToString()); " is 137.
Long Statement,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The length of the statement  "            ScrollFolderList = GUI.BeginScrollView(new Rect(15' 25' itemThirdWidth - 10' 195)' ScrollFolderList' new Rect(0' 0' itemThirdWidth - 30' 25 * folderList.Length)); " is 162.
Long Statement,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The length of the statement  "            //selectedMode = GUI.SelectionGrid(new Rect(itemTwoThirdStart' 25' itemQuarterThirdWidth' 25 * Modes.Length)' selectedMode' Modes' 1); " is 134.
Long Statement,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,ResizePixels,The length of the statement  "                    newPixels[index++] = GetPixel(pixels' width' height' ((float)w) / newWidth' ((float)h) / newHeight' newWidth' newHeight); " is 121.
Long Statement,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The length of the statement  "            Color32 cw1 = new Color32()' cw2 = new Color32()' cw3 = new Color32()' cw4 = new Color32()' ch1 = new Color32()' ch2 = new Color32()' ch3 = new Color32()' ch4 = new Color32(); " is 175.
Long Statement,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,DDSToTexture,The length of the statement  "            TextureInfoWrapper newTexInfo = new TextureInfoWrapper(file' newTex' Texture.isNormalMap' !Texture.makeNotReadable' isCompressed); " is 130.
Long Statement,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetReadable,The length of the statement  "            if (File.Exists(pngPath) || File.Exists(pngPathTruecolor) || File.Exists(jpgPath) || File.Exists(tgaPath) || File.Exists(mbmPath)) " is 130.
Long Statement,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,WriteTo,The length of the statement  "                        squish.CompressImage(img' width' height' imageBuffer' compression | SquishFlags.kColourIterativeClusterFit | SquishFlags.kWeightColourByAlpha' DatabaseLoaderTexture_ATM.WaitOnDone); " is 181.
Complex Conditional,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,FetchCacheTexture,The conditional expression  "origWidthString == null || origHeightString == null ||                      cacheHash == null || format == null"  is complex.
Complex Conditional,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,FetchCacheTexture,The conditional expression  "cacheHash != hashString || compress != isCompressed || mipmaps != hasMipmaps || cacheIsNorm != Texture.isNormalMap || Texture.resizeWidth != cacheWidth || Texture.resizeHeight != cacheHeight"  is complex.
Complex Conditional,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetReadable,The conditional expression  "File.Exists(pngPath) || File.Exists(pngPathTruecolor) || File.Exists(jpgPath) || File.Exists(tgaPath) || File.Exists(mbmPath)"  is complex.
Magic Number,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following statement contains a magic number: switch (originalFormat)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      oldSize = 4 * (originalWidth * originalHeight);                      break;                  case TextureFormat.RGB24:                      oldSize = 3 * (originalWidth * originalHeight);                      break;                  case TextureFormat.Alpha8:                      oldSize = originalWidth * originalHeight;                      break;                  case TextureFormat.DXT1:                      oldSize = (originalWidth * originalHeight) / 2;                      break;                  case TextureFormat.DXT5:                      oldSize = originalWidth * originalHeight;                      break;              }
Magic Number,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following statement contains a magic number: switch (originalFormat)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      oldSize = 4 * (originalWidth * originalHeight);                      break;                  case TextureFormat.RGB24:                      oldSize = 3 * (originalWidth * originalHeight);                      break;                  case TextureFormat.Alpha8:                      oldSize = originalWidth * originalHeight;                      break;                  case TextureFormat.DXT1:                      oldSize = (originalWidth * originalHeight) / 2;                      break;                  case TextureFormat.DXT5:                      oldSize = originalWidth * originalHeight;                      break;              }
Magic Number,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following statement contains a magic number: switch (originalFormat)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      oldSize = 4 * (originalWidth * originalHeight);                      break;                  case TextureFormat.RGB24:                      oldSize = 3 * (originalWidth * originalHeight);                      break;                  case TextureFormat.Alpha8:                      oldSize = originalWidth * originalHeight;                      break;                  case TextureFormat.DXT1:                      oldSize = (originalWidth * originalHeight) / 2;                      break;                  case TextureFormat.DXT5:                      oldSize = originalWidth * originalHeight;                      break;              }
Magic Number,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following statement contains a magic number: switch (format)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      newSize = 4 * (width * height);                      break;                  case TextureFormat.RGB24:                      newSize = 3 * (width * height);                      break;                  case TextureFormat.Alpha8:                      newSize = width * height;                      break;                  case TextureFormat.DXT1:                      newSize = (width * height) / 2;                      break;                  case TextureFormat.DXT5:                      newSize = width * height;                      break;              }
Magic Number,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following statement contains a magic number: switch (format)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      newSize = 4 * (width * height);                      break;                  case TextureFormat.RGB24:                      newSize = 3 * (width * height);                      break;                  case TextureFormat.Alpha8:                      newSize = width * height;                      break;                  case TextureFormat.DXT1:                      newSize = (width * height) / 2;                      break;                  case TextureFormat.DXT5:                      newSize = width * height;                      break;              }
Magic Number,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following statement contains a magic number: switch (format)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      newSize = 4 * (width * height);                      break;                  case TextureFormat.RGB24:                      newSize = 3 * (width * height);                      break;                  case TextureFormat.Alpha8:                      newSize = width * height;                      break;                  case TextureFormat.DXT1:                      newSize = (width * height) / 2;                      break;                  case TextureFormat.DXT5:                      newSize = width * height;                      break;              }
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemFullWidth = (int)_mainWindowRect.width - 30;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemHalfWidth = (int)_mainWindowRect.width/2 - 20;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemHalfWidth = (int)_mainWindowRect.width/2 - 20;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemQuarterWidth = (int)_mainWindowRect.width / 4 - 20;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemQuarterWidth = (int)_mainWindowRect.width / 4 - 20;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemMidStart = (int)_mainWindowRect.width - (15 + itemHalfWidth);
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemThirdWidth = (int)_mainWindowRect.width / 3 - 20;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemThirdWidth = (int)_mainWindowRect.width / 3 - 20;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemTwoThirdStart = itemThirdWidth + 20;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemTwoThirdWidth = (int)_mainWindowRect.width - (35+itemThirdWidth);
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: int itemQuarterThirdWidth = itemHalfWidth + 5 - itemTwoThirdStart;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: GUI.Box(new Rect(10' 20' itemThirdWidth' 210)' "");
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: GUI.Box(new Rect(10' 20' itemThirdWidth' 210)' "");
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: GUI.Box(new Rect(10' 20' itemThirdWidth' 210)' "");
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: ScrollFolderList = GUI.BeginScrollView(new Rect(15' 25' itemThirdWidth - 10' 195)' ScrollFolderList' new Rect(0' 0' itemThirdWidth - 30' 25 * folderList.Length));
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: ScrollFolderList = GUI.BeginScrollView(new Rect(15' 25' itemThirdWidth - 10' 195)' ScrollFolderList' new Rect(0' 0' itemThirdWidth - 30' 25 * folderList.Length));
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: ScrollFolderList = GUI.BeginScrollView(new Rect(15' 25' itemThirdWidth - 10' 195)' ScrollFolderList' new Rect(0' 0' itemThirdWidth - 30' 25 * folderList.Length));
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: ScrollFolderList = GUI.BeginScrollView(new Rect(15' 25' itemThirdWidth - 10' 195)' ScrollFolderList' new Rect(0' 0' itemThirdWidth - 30' 25 * folderList.Length));
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: ScrollFolderList = GUI.BeginScrollView(new Rect(15' 25' itemThirdWidth - 10' 195)' ScrollFolderList' new Rect(0' 0' itemThirdWidth - 30' 25 * folderList.Length));
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: ScrollFolderList = GUI.BeginScrollView(new Rect(15' 25' itemThirdWidth - 10' 195)' ScrollFolderList' new Rect(0' 0' itemThirdWidth - 30' 25 * folderList.Length));
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: float folderWidth = folderList.Length > 7 ? itemThirdWidth - 30 : itemThirdWidth - 10;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: float folderWidth = folderList.Length > 7 ? itemThirdWidth - 30 : itemThirdWidth - 10;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: float folderWidth = folderList.Length > 7 ? itemThirdWidth - 30 : itemThirdWidth - 10;
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: selectedFolder = GUI.SelectionGrid(new Rect(0' 0' folderWidth' 25 * folderList.Length)' selectedFolder' folderList' 1);
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: GUI.Label(new Rect(itemMidStart' 55' itemHalfWidth' 25)' memoryString);
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: GUI.Label(new Rect(itemMidStart' 55' itemHalfWidth' 25)' memoryString);
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: selectedMode = GUI.Toolbar(new Rect(itemMidStart' 25' itemHalfWidth' 25)' selectedMode' Modes);
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: selectedMode = GUI.Toolbar(new Rect(itemMidStart' 25' itemHalfWidth' 25)' selectedMode' Modes);
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: if(selectedMode == 0)              {                  GUI.Box(new Rect(itemTwoThirdStart' 85' itemTwoThirdWidth' 145)' "");                }
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: if(selectedMode == 0)              {                  GUI.Box(new Rect(itemTwoThirdStart' 85' itemTwoThirdWidth' 145)' "");                }
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: GUI.DragWindow(new Rect(0' 0' 10000' 10000));
Magic Number,ActiveTextureManagement,ActiveTextureManagement,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ActiveTextureManagement.cs,DrawMainWindow,The following statement contains a magic number: GUI.DragWindow(new Rect(0' 0' 10000' 10000));
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,u,The following statement contains a magic number: return (uint)(color.r | (color.g << 8) | (color.b << 16) | (color.a << 24));
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,u,The following statement contains a magic number: return (uint)(color.r | (color.g << 8) | (color.b << 16) | (color.a << 24));
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,u,The following statement contains a magic number: return (uint)(color.r | (color.g << 8) | (color.b << 16) | (color.a << 24));
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,component,The following statement contains a magic number: return new byte[4] { color.b' color.g' color.r' color.a };
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,ColorExtensions,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\ColorExtensions.cs,bytes,The following statement contains a magic number: if (hasAlpha)              {                  array = new byte[colors.Length * 4];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 4)] = colors[i].r;                      array[(i * 4) + 1] = colors[i].g;                      array[(i * 4) + 2] = colors[i].b;                      array[(i * 4) + 3] = colors[i].a;                  }              }              else              {                  array = new byte[colors.Length * 3];                  for (int i = 0; i < colors.Length; i++)                  {                      array[(i * 3)] = colors[i].r;                      array[(i * 3) + 1] = colors[i].g;                      array[(i * 3) + 2] = colors[i].b;                  }              }
Magic Number,ActiveTextureManagement,DatabaseLoaderTexture_ATM,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\DatabaseLoaderTexture_ATM.cs,UpdateTexture,The following statement contains a magic number: int minSize = 64;
Magic Number,ActiveTextureManagement,DatabaseLoaderTexture_ATM,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\DatabaseLoaderTexture_ATM.cs,IsNormal,The following statement contains a magic number: if (!isNormal && File.Exists(originalTextureFile))              {                  FileStream stream = File.OpenRead(originalTextureFile);                  //while stream is open' if it is an MBM' flag normal maps.                  stream.Position = 12;                  if (stream.ReadByte() == 1)                  {                      isNormal = true;                  }                  stream.Close();              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: int['] posArray = new int[2' 4];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: int['] posArray = new int[2' 4];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: posArray[0' 2] = (int)Math.Ceiling((w * width) + widthDist);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: posArray[0' 3] = (int)Math.Ceiling((w * width) + (2.0 * widthDist));
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: posArray[0' 3] = (int)Math.Ceiling((w * width) + (2.0 * widthDist));
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: posArray[1' 2] = (int)Math.Ceiling((h * height) + heightDist);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: posArray[1' 3] = (int)Math.Ceiling((h * height) + (2.0 * heightDist));
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: posArray[1' 3] = (int)Math.Ceiling((h * height) + (2.0 * heightDist));
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: int w3 = posArray[0' 2];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: int w4 = posArray[0' 3];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: int h3 = posArray[1' 2];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetPixel,The following statement contains a magic number: int h4 = posArray[1' 3];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: mbmStream.Position = 4;
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: for (int b = 0; b < 4; b++)              {                  width >>= 8;                  width |= (uint)(mbmStream.ReadByte() << 24);              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: for (int b = 0; b < 4; b++)              {                  width >>= 8;                  width |= (uint)(mbmStream.ReadByte() << 24);              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: for (int b = 0; b < 4; b++)              {                  width >>= 8;                  width |= (uint)(mbmStream.ReadByte() << 24);              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: for (int b = 0; b < 4; b++)              {                  height >>= 8;                  height |= (uint)(mbmStream.ReadByte() << 24);              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: for (int b = 0; b < 4; b++)              {                  height >>= 8;                  height |= (uint)(mbmStream.ReadByte() << 24);              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: for (int b = 0; b < 4; b++)              {                  height >>= 8;                  height |= (uint)(mbmStream.ReadByte() << 24);              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: mbmStream.Position = 12;
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: mbmStream.Position = 16;
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: mbmStream.Position += 3;
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: int imageSize = (int)(width * height * 3);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: if (format == 32)              {                  imageSize += (int)(width * height);                  texformat = TextureFormat.ARGB32;                  alpha = true;              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,MBMToTexture,The following statement contains a magic number: for (int i = 0; i < width * height; i++)              {                  colors[i].r = imageBuffer[n++];                  colors[i].g = imageBuffer[n++];                  colors[i].b = imageBuffer[n++];                  if (alpha)                  {                      colors[i].a = imageBuffer[n++];                  }                  else                  {                      colors[i].a = 255;                  }                  if(convertToNormalFormat)                  {                      colors[i].a = colors[i].r;                      colors[i].r = colors[i].g;                      colors[i].b = colors[i].g;                  }              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: byte imgType = imageBuffer[2];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int width = imageBuffer[12] | (imageBuffer[13] << 8);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int width = imageBuffer[12] | (imageBuffer[13] << 8);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int width = imageBuffer[12] | (imageBuffer[13] << 8);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int height = imageBuffer[14] | (imageBuffer[15] << 8);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int height = imageBuffer[14] | (imageBuffer[15] << 8);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int height = imageBuffer[14] | (imageBuffer[15] << 8);
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int depth = imageBuffer[16];
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: bool alpha = depth == 32 ? true : false;
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: TextureFormat texFormat = depth == 32 ? TextureFormat.RGBA32 : TextureFormat.RGB24;
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: int n = 18;
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: if (imgType == 2)              {                  for (int i = 0; i < width * height; i++)                  {                      colors[i].b = imageBuffer[n++];                      colors[i].g = imageBuffer[n++];                      colors[i].r = imageBuffer[n++];                      if (alpha)                      {                          colors[i].a = imageBuffer[n++];                      }                      else                      {                          colors[i].a = 255;                      }                      if (convertToNormalFormat)                      {                          colors[i].a = colors[i].r;                          colors[i].r = colors[i].g;                          colors[i].b = colors[i].g;                      }                  }              }              else if (imgType == 10)              {                  int i = 0;                  int run = 0;                  while (i < width * height)                  {                      run = imageBuffer[n++];                      if ((run & 0x80) != 0)                      {                          run = (run ^ 0x80) + 1;                          colors[i].b = imageBuffer[n++];                          colors[i].g = imageBuffer[n++];                          colors[i].r = imageBuffer[n++];                          if (alpha)                          {                              colors[i].a = imageBuffer[n++];                          }                          else                          {                              colors[i].a = 255;                          }                          if (convertToNormalFormat)                          {                              colors[i].a = colors[i].r;                              colors[i].r = colors[i].g;                              colors[i].b = colors[i].g;                          }                          i++;                          for (int c = 1; c < run; c++' i++)                          {                              colors[i] = colors[i - 1];                          }                      }                      else                      {                          run += 1;                          for (int c = 0; c < run; c++' i++)                          {                              colors[i].b = imageBuffer[n++];                              colors[i].g = imageBuffer[n++];                              colors[i].r = imageBuffer[n++];                              if (alpha)                              {                                  colors[i].a = imageBuffer[n++];                              }                              else                              {                                  colors[i].a = 255;                              }                              if (convertToNormalFormat)                              {                                  colors[i].a = colors[i].r;                                  colors[i].r = colors[i].g;                                  colors[i].b = colors[i].g;                              }                          }                      }                  }              }              else              {                  ActiveTextureManagement.DBGLog("TGA format is not supported!");              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: if (imgType == 2)              {                  for (int i = 0; i < width * height; i++)                  {                      colors[i].b = imageBuffer[n++];                      colors[i].g = imageBuffer[n++];                      colors[i].r = imageBuffer[n++];                      if (alpha)                      {                          colors[i].a = imageBuffer[n++];                      }                      else                      {                          colors[i].a = 255;                      }                      if (convertToNormalFormat)                      {                          colors[i].a = colors[i].r;                          colors[i].r = colors[i].g;                          colors[i].b = colors[i].g;                      }                  }              }              else if (imgType == 10)              {                  int i = 0;                  int run = 0;                  while (i < width * height)                  {                      run = imageBuffer[n++];                      if ((run & 0x80) != 0)                      {                          run = (run ^ 0x80) + 1;                          colors[i].b = imageBuffer[n++];                          colors[i].g = imageBuffer[n++];                          colors[i].r = imageBuffer[n++];                          if (alpha)                          {                              colors[i].a = imageBuffer[n++];                          }                          else                          {                              colors[i].a = 255;                          }                          if (convertToNormalFormat)                          {                              colors[i].a = colors[i].r;                              colors[i].r = colors[i].g;                              colors[i].b = colors[i].g;                          }                          i++;                          for (int c = 1; c < run; c++' i++)                          {                              colors[i] = colors[i - 1];                          }                      }                      else                      {                          run += 1;                          for (int c = 0; c < run; c++' i++)                          {                              colors[i].b = imageBuffer[n++];                              colors[i].g = imageBuffer[n++];                              colors[i].r = imageBuffer[n++];                              if (alpha)                              {                                  colors[i].a = imageBuffer[n++];                              }                              else                              {                                  colors[i].a = 255;                              }                              if (convertToNormalFormat)                              {                                  colors[i].a = colors[i].r;                                  colors[i].r = colors[i].g;                                  colors[i].b = colors[i].g;                              }                          }                      }                  }              }              else              {                  ActiveTextureManagement.DBGLog("TGA format is not supported!");              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: if (imgType == 2)              {                  for (int i = 0; i < width * height; i++)                  {                      colors[i].b = imageBuffer[n++];                      colors[i].g = imageBuffer[n++];                      colors[i].r = imageBuffer[n++];                      if (alpha)                      {                          colors[i].a = imageBuffer[n++];                      }                      else                      {                          colors[i].a = 255;                      }                      if (convertToNormalFormat)                      {                          colors[i].a = colors[i].r;                          colors[i].r = colors[i].g;                          colors[i].b = colors[i].g;                      }                  }              }              else if (imgType == 10)              {                  int i = 0;                  int run = 0;                  while (i < width * height)                  {                      run = imageBuffer[n++];                      if ((run & 0x80) != 0)                      {                          run = (run ^ 0x80) + 1;                          colors[i].b = imageBuffer[n++];                          colors[i].g = imageBuffer[n++];                          colors[i].r = imageBuffer[n++];                          if (alpha)                          {                              colors[i].a = imageBuffer[n++];                          }                          else                          {                              colors[i].a = 255;                          }                          if (convertToNormalFormat)                          {                              colors[i].a = colors[i].r;                              colors[i].r = colors[i].g;                              colors[i].b = colors[i].g;                          }                          i++;                          for (int c = 1; c < run; c++' i++)                          {                              colors[i] = colors[i - 1];                          }                      }                      else                      {                          run += 1;                          for (int c = 0; c < run; c++' i++)                          {                              colors[i].b = imageBuffer[n++];                              colors[i].g = imageBuffer[n++];                              colors[i].r = imageBuffer[n++];                              if (alpha)                              {                                  colors[i].a = imageBuffer[n++];                              }                              else                              {                                  colors[i].a = 255;                              }                              if (convertToNormalFormat)                              {                                  colors[i].a = colors[i].r;                                  colors[i].r = colors[i].g;                                  colors[i].b = colors[i].g;                              }                          }                      }                  }              }              else              {                  ActiveTextureManagement.DBGLog("TGA format is not supported!");              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: if (imgType == 2)              {                  for (int i = 0; i < width * height; i++)                  {                      colors[i].b = imageBuffer[n++];                      colors[i].g = imageBuffer[n++];                      colors[i].r = imageBuffer[n++];                      if (alpha)                      {                          colors[i].a = imageBuffer[n++];                      }                      else                      {                          colors[i].a = 255;                      }                      if (convertToNormalFormat)                      {                          colors[i].a = colors[i].r;                          colors[i].r = colors[i].g;                          colors[i].b = colors[i].g;                      }                  }              }              else if (imgType == 10)              {                  int i = 0;                  int run = 0;                  while (i < width * height)                  {                      run = imageBuffer[n++];                      if ((run & 0x80) != 0)                      {                          run = (run ^ 0x80) + 1;                          colors[i].b = imageBuffer[n++];                          colors[i].g = imageBuffer[n++];                          colors[i].r = imageBuffer[n++];                          if (alpha)                          {                              colors[i].a = imageBuffer[n++];                          }                          else                          {                              colors[i].a = 255;                          }                          if (convertToNormalFormat)                          {                              colors[i].a = colors[i].r;                              colors[i].r = colors[i].g;                              colors[i].b = colors[i].g;                          }                          i++;                          for (int c = 1; c < run; c++' i++)                          {                              colors[i] = colors[i - 1];                          }                      }                      else                      {                          run += 1;                          for (int c = 0; c < run; c++' i++)                          {                              colors[i].b = imageBuffer[n++];                              colors[i].g = imageBuffer[n++];                              colors[i].r = imageBuffer[n++];                              if (alpha)                              {                                  colors[i].a = imageBuffer[n++];                              }                              else                              {                                  colors[i].a = 255;                              }                              if (convertToNormalFormat)                              {                                  colors[i].a = colors[i].r;                                  colors[i].r = colors[i].g;                                  colors[i].b = colors[i].g;                              }                          }                      }                  }              }              else              {                  ActiveTextureManagement.DBGLog("TGA format is not supported!");              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The following statement contains a magic number: if (imgType == 2)              {                  for (int i = 0; i < width * height; i++)                  {                      colors[i].b = imageBuffer[n++];                      colors[i].g = imageBuffer[n++];                      colors[i].r = imageBuffer[n++];                      if (alpha)                      {                          colors[i].a = imageBuffer[n++];                      }                      else                      {                          colors[i].a = 255;                      }                      if (convertToNormalFormat)                      {                          colors[i].a = colors[i].r;                          colors[i].r = colors[i].g;                          colors[i].b = colors[i].g;                      }                  }              }              else if (imgType == 10)              {                  int i = 0;                  int run = 0;                  while (i < width * height)                  {                      run = imageBuffer[n++];                      if ((run & 0x80) != 0)                      {                          run = (run ^ 0x80) + 1;                          colors[i].b = imageBuffer[n++];                          colors[i].g = imageBuffer[n++];                          colors[i].r = imageBuffer[n++];                          if (alpha)                          {                              colors[i].a = imageBuffer[n++];                          }                          else                          {                              colors[i].a = 255;                          }                          if (convertToNormalFormat)                          {                              colors[i].a = colors[i].r;                              colors[i].r = colors[i].g;                              colors[i].b = colors[i].g;                          }                          i++;                          for (int c = 1; c < run; c++' i++)                          {                              colors[i] = colors[i - 1];                          }                      }                      else                      {                          run += 1;                          for (int c = 0; c < run; c++' i++)                          {                              colors[i].b = imageBuffer[n++];                              colors[i].g = imageBuffer[n++];                              colors[i].r = imageBuffer[n++];                              if (alpha)                              {                                  colors[i].a = imageBuffer[n++];                              }                              else                              {                                  colors[i].a = 255;                              }                              if (convertToNormalFormat)                              {                                  colors[i].a = colors[i].r;                                  colors[i].r = colors[i].g;                                  colors[i].b = colors[i].g;                              }                          }                      }                  }              }              else              {                  ActiveTextureManagement.DBGLog("TGA format is not supported!");              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetReadable,The following statement contains a magic number: if (File.Exists(pngPath) || File.Exists(pngPathTruecolor) || File.Exists(jpgPath) || File.Exists(tgaPath) || File.Exists(mbmPath))              {                  Texture2D tex = new Texture2D(2' 2);                  String name;                  if (Texture.name.Length > 0)                  {                      name = Texture.name;                  }                  else                  {                      name = Texture.name;                  }                    TextureInfoWrapper newTexture = new TextureInfoWrapper(Texture.file' tex' Texture.isNormalMap' true' false);                  Texture.texture = newTexture;                  newTexture.name = Texture.name;                  if (File.Exists(pngPath))                  {                      Texture.filename = pngPath;                      IMGToTexture(Texture' mipmaps' false);                  }                  else if (File.Exists(pngPathTruecolor))                  {                      Texture.filename = pngPathTruecolor;                      IMGToTexture(Texture' mipmaps' false);                  }                  else if (File.Exists(jpgPath))                  {                      Texture.filename = jpgPath;                      IMGToTexture(Texture' mipmaps' false);                  }                  else if (File.Exists(tgaPath))                  {                      Texture.filename = tgaPath;                      TGAToTexture(Texture' mipmaps);                  }                  else if (File.Exists(mbmPath))                  {                      Texture.filename = mbmPath;                      MBMToTexture(Texture' mipmaps);                                       }                  tex.name = newTexture.name;              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,GetReadable,The following statement contains a magic number: if (File.Exists(pngPath) || File.Exists(pngPathTruecolor) || File.Exists(jpgPath) || File.Exists(tgaPath) || File.Exists(mbmPath))              {                  Texture2D tex = new Texture2D(2' 2);                  String name;                  if (Texture.name.Length > 0)                  {                      name = Texture.name;                  }                  else                  {                      name = Texture.name;                  }                    TextureInfoWrapper newTexture = new TextureInfoWrapper(Texture.file' tex' Texture.isNormalMap' true' false);                  Texture.texture = newTexture;                  newTexture.name = Texture.name;                  if (File.Exists(pngPath))                  {                      Texture.filename = pngPath;                      IMGToTexture(Texture' mipmaps' false);                  }                  else if (File.Exists(pngPathTruecolor))                  {                      Texture.filename = pngPathTruecolor;                      IMGToTexture(Texture' mipmaps' false);                  }                  else if (File.Exists(jpgPath))                  {                      Texture.filename = jpgPath;                      IMGToTexture(Texture' mipmaps' false);                  }                  else if (File.Exists(tgaPath))                  {                      Texture.filename = tgaPath;                      TGAToTexture(Texture' mipmaps);                  }                  else if (File.Exists(mbmPath))                  {                      Texture.filename = mbmPath;                      MBMToTexture(Texture' mipmaps);                                       }                  tex.name = newTexture.name;              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,texHasAlpha,The following statement contains a magic number: for (int i = 3; i < colors.Length; i+=4)              {                  if (colors[i] < byte.MaxValue)                  {                      return true;                  }              }
Magic Number,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,texHasAlpha,The following statement contains a magic number: for (int i = 3; i < colors.Length; i+=4)              {                  if (colors[i] < byte.MaxValue)                  {                      return true;                  }              }
Duplicate Code,ActiveTextureManagement,TextureConverter,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\TextureConverter.cs,TGAToTexture,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 51)' (89' 108))
Missing Default,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following switch statement is missing a default case: switch (originalFormat)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      oldSize = 4 * (originalWidth * originalHeight);                      break;                  case TextureFormat.RGB24:                      oldSize = 3 * (originalWidth * originalHeight);                      break;                  case TextureFormat.Alpha8:                      oldSize = originalWidth * originalHeight;                      break;                  case TextureFormat.DXT1:                      oldSize = (originalWidth * originalHeight) / 2;                      break;                  case TextureFormat.DXT5:                      oldSize = originalWidth * originalHeight;                      break;              }
Missing Default,ActiveTextureManagement,CacheController,C:\repos\rbray89_ActiveTextureManagement\ActiveTextureManagement\CacheController.cs,MemorySaved,The following switch statement is missing a default case: switch (format)              {                  case TextureFormat.ARGB32:                  case TextureFormat.RGBA32:                  case TextureFormat.BGRA32:                      newSize = 4 * (width * height);                      break;                  case TextureFormat.RGB24:                      newSize = 3 * (width * height);                      break;                  case TextureFormat.Alpha8:                      newSize = width * height;                      break;                  case TextureFormat.DXT1:                      newSize = (width * height) / 2;                      break;                  case TextureFormat.DXT5:                      newSize = width * height;                      break;              }
