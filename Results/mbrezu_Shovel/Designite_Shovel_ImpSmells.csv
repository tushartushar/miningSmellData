Implementation smell,Namespace,Class,File,Method,Description
Long Method,Shovel.Compiler,Tokenizer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The method has 181 lines of code.
Long Method,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The method has 136 lines of code.
Long Method,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,ShovelStdlib,The method has 127 lines of code.
Complex Method,Shovel.Compiler,Tokenizer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,Tokenize,Cyclomatic complexity of the method is 8
Complex Method,Shovel.Compiler,Tokenizer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,Cyclomatic complexity of the method is 26
Complex Method,Shovel.Compiler,Parser,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,ParseParenthesizedOrName,Cyclomatic complexity of the method is 8
Complex Method,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileAst,Cyclomatic complexity of the method is 19
Complex Method,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileAtomValue,Cyclomatic complexity of the method is 9
Complex Method,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,Assemble,Cyclomatic complexity of the method is 8
Complex Method,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,Cyclomatic complexity of the method is 65
Complex Method,Shovel,Value,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Value.cs,Equals,Cyclomatic complexity of the method is 14
Complex Method,Shovel,Value,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Value.cs,GetHashCode,Cyclomatic complexity of the method is 13
Complex Method,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,DumpShovelValue,Cyclomatic complexity of the method is 11
Complex Method,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CallPrimitive,Cyclomatic complexity of the method is 8
Complex Method,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsImpl,Cyclomatic complexity of the method is 21
Complex Method,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CheckQuotas,Cyclomatic complexity of the method is 8
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,Add,Cyclomatic complexity of the method is 11
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,LessThan,Cyclomatic complexity of the method is 9
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,LessThanOrEqual,Cyclomatic complexity of the method is 9
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GreaterThan,Cyclomatic complexity of the method is 9
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GreaterThanOrEqual,Cyclomatic complexity of the method is 9
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,AreEqual,Cyclomatic complexity of the method is 15
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,Format,Cyclomatic complexity of the method is 14
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,ArrayOrHashGet,Cyclomatic complexity of the method is 12
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashOrStructGetDot,Cyclomatic complexity of the method is 8
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,Cyclomatic complexity of the method is 8
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,ShovelStringImpl,Cyclomatic complexity of the method is 11
Complex Method,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,ShovelStringRepresentationImpl,Cyclomatic complexity of the method is 10
Complex Method,Shovel.Serialization,BytecodeSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadArguments,Cyclomatic complexity of the method is 19
Complex Method,Shovel.Serialization,BytecodeSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,WriteArguments,Cyclomatic complexity of the method is 19
Complex Method,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,ReadValue,Cyclomatic complexity of the method is 9
Complex Method,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValue,Cyclomatic complexity of the method is 13
Complex Method,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildFromComposite,Cyclomatic complexity of the method is 12
Complex Method,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeShovelValue,Cyclomatic complexity of the method is 13
Long Parameter List,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,FindName,The method has 5 parameters. Parameters: varName' env' startPos' endPos' frameNumber
Long Parameter List,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileSetVar,The method has 5 parameters. Parameters: name' env' useVal' more' astForPos
Long Parameter List,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,Gen,The method has 6 parameters. Parameters: opcode' arguments' pos' comments' startPos' endPos
Long Parameter List,Shovel,Api,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Api.cs,RunVm,The method has 7 parameters. Parameters: bytecode' sources' userPrimitives' state' totalTicksQuota' ticksUntilNextNapQuota' usedCellsQuota
Long Parameter List,Shovel,Api,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Api.cs,RunVm,The method has 6 parameters. Parameters: vm' sources' userPrimitives' totalTicksQuota' ticksUntilNextNapQuota' usedCellsQuota
Long Parameter List,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,RunVm,The method has 8 parameters. Parameters: bytecode' sources' userPrimitives' state' vm' cellsQuota' totalTicksQuota' untilNextNapTicksQuota
Long Parameter List,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CallFunction,The method has 5 parameters. Parameters: callable' vm' numArgs' saveReturnAddress' inApply
Long Parameter List,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CallPrimitive,The method has 5 parameters. Parameters: callable' vm' numArgs' saveReturnAddress' inApply
Long Parameter List,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashOrStructDotSet,The method has 5 parameters. Parameters: vm' api' obj' index' value
Long Parameter List,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,CheckBoundedInteger,The method has 6 parameters. Parameters: api' hash' key' min' max' errorMessageFormat
Long Parameter List,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The method has 5 parameters. Parameters: objects' index' composite' reader' version
Long Parameter List,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The method has 5 parameters. Parameters: objects' index' composite' reader' version
Long Parameter List,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildFromComposite,The method has 5 parameters. Parameters: objects' index' composite' reader' version
Long Statement,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGrefDot,The length of the statement  "            var callGetter = !Prim0.HashOrStructGetDot (vm' vm.api' ref vm.stack.Storage [start]' ref vm.stack.Storage [start + 1]); " is 120.
Long Statement,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CheckVmWithoutError,The length of the statement  "                throw new ShovelException( "An exception has been thrown in a user-defined primitive."' this.userDefinedPrimitiveError );" is 121.
Complex Conditional,Shovel.Compiler,Tokenizer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The conditional expression  "ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == '''"  is complex.
Complex Conditional,Shovel.Compiler,Tokenizer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The conditional expression  "ch == '*' || ch == '/' || ch == '%' || ch == '^'"  is complex.
Complex Conditional,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,Assemble,The conditional expression  "instruction.Opcode == Instruction.Opcodes.Fjump                         || instruction.Opcode == Instruction.Opcodes.Tjump                         || instruction.Opcode == Instruction.Opcodes.Jump                         || instruction.Opcode == Instruction.Opcodes.Block"  is complex.
Complex Conditional,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,ShovelStringRepresentationImpl,The conditional expression  "obj.Kind == Value.Kinds.Null                 || obj.Kind == Value.Kinds.Integer                 || obj.Kind == Value.Kinds.Double                 || obj.Kind == Value.Kinds.Bool                 || obj.Kind == Value.Kinds.Callable"  is complex.
Magic Number,Shovel.Compiler,Tokenizer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizeStringLiteral,The following statement contains a magic number: var result = TokenizePred(Token.Types.LiteralString' (ch) =>              {                  var goOn = quoteCounter < 2;                  if (ch == quote && !escaped)                  {                      quoteCounter++;                  }                  escaped = ch == '\\';                  return goOn;              }              );
Magic Number,Shovel.Compiler,Tokenizer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizeStringLiteral,The following statement contains a magic number: quoteCounter < 2
Magic Number,Shovel.Compiler,Parser,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,RunWeaveMacro,The following statement contains a magic number: var rightSide = source.Children.ElementAt(2);
Magic Number,Shovel.Compiler,Parser,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,MaybeRewriteAsIfExpression,The following statement contains a magic number: var t2 = operands [2];
Magic Number,Shovel.Compiler,Parser,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,ParseInterpolate,The following statement contains a magic number: var tokenizer = new Tokenizer(source' startPos + intStart + 2' endPos);
Magic Number,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileAtomValue,The following statement contains a magic number: switch (label) {             case ParseTree.Labels.Number:                 {                     double doubleResult;                     long longResult;                     if (long.TryParse (content' out longResult)) {                         return Value.MakeInt (longResult);                     } else if (double.TryParse (content' out doubleResult)) {                         return Value.MakeFloat (doubleResult);                     }                 }                 Utils.Panic ();                 return null;             case ParseTree.Labels.String:                 return Value.Make (content.Substring (1' content.Length - 2));             case ParseTree.Labels.Bool:                 switch (content) {                 case "true":                     return Value.Make (true);                 case "false":                     return Value.Make (false);                 default:                     Utils.Panic ();                     return null;                 }             case ParseTree.Labels.Void:                 return Value.Make ();             default:                 Utils.Panic ();                 return null;             }
Magic Number,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileIf,The following statement contains a magic number: var elseAction = ast.Children.ElementAt (2);
Magic Number,Shovel.Compiler,CodeGenerator,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileSet,The following statement contains a magic number: this.CompileAst (ast.Children.ElementAt (2)' env' true' true);
Magic Number,Shovel.Compiler,RawBytecodeOptimizations,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\RawBytecodeOptimizations.cs,OptimizeLsetPopLget,The following statement contains a magic number: var next2 = bytecode[i+2];
Magic Number,Shovel.Compiler,RawBytecodeOptimizations,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\RawBytecodeOptimizations.cs,OptimizeLsetPopLget,The following statement contains a magic number: i += 3;
Magic Number,Shovel.Compiler,RawBytecodeOptimizations,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\RawBytecodeOptimizations.cs,OptimizeLsetPopLget,The following statement contains a magic number: instruction.Opcode == Instruction.Opcodes.Lset && i <= bytecode.Count - 3
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Stack,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,Stack,The following statement contains a magic number: this.storage = new Value[1024];
Magic Number,Shovel,Stack,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,Stack,The following statement contains a magic number: this.storage = new Value[existingValues.Length * 2];
Magic Number,Shovel,Stack,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,UnderTopOne,The following statement contains a magic number: return this.storage [this.length - 2];
Magic Number,Shovel,Stack,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,UnderPopOneAndCopyTop,The following statement contains a magic number: this.storage [this.length - 2] = this.storage [this.length - 1];
Magic Number,Shovel,Stack,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,Push,The following statement contains a magic number: Array.Resize (ref this.storage' this.storage.Length * 2);
Magic Number,Shovel,Callable,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Callable.cs,MakeHostCallable,The following statement contains a magic number: return (vmapi' args' start' length) => callable (vmapi' args [start]' args [start + 1]' args [start + 2]);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,DeserializeState,The following statement contains a magic number: Serialization.Utils.DeserializeWithMd5CheckSum (ms' str => {                     var version = Serialization.Utils.ReadInt (str);                     if (version > Shovel.Api.Version) {                         throw new Exceptions.VersionNotSupportedException ();                     }                     var stackIndex = Serialization.Utils.ReadInt (str);                     var envIndex = Serialization.Utils.ReadInt (str);                     this.programCounter = Serialization.Utils.ReadInt (str);                     var bytes = new byte[32];                     str.Read (bytes' 0' 32);                     var actualBytecodeMd5 = Encoding.UTF8.GetString (bytes);                     if (actualBytecodeMd5 != Utils.GetBytecodeMd5 (this.bytecode)) {                         throw new Exceptions.BytecodeDoesntMatchState ();                     }                     // Read and ignore the source MD5.                     str.Read (bytes' 0' 32);                     // Read the number of ticks executed so far.                     this.executedTicks = Serialization.Utils.ReadLong (ms);                     // Read the number of used cells.                     this.usedCells = Serialization.Utils.ReadInt (ms);                     var ser = new Serialization.VmStateSerializer ();                     ser.Deserialize (str' version' reader => {                         this.stack = new Stack ((Value[])reader (stackIndex));                         this.currentEnvironment = (VmEnvironment)reader (envIndex);                     }                     );                     return null;                 });
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,DeserializeState,The following statement contains a magic number: Serialization.Utils.DeserializeWithMd5CheckSum (ms' str => {                     var version = Serialization.Utils.ReadInt (str);                     if (version > Shovel.Api.Version) {                         throw new Exceptions.VersionNotSupportedException ();                     }                     var stackIndex = Serialization.Utils.ReadInt (str);                     var envIndex = Serialization.Utils.ReadInt (str);                     this.programCounter = Serialization.Utils.ReadInt (str);                     var bytes = new byte[32];                     str.Read (bytes' 0' 32);                     var actualBytecodeMd5 = Encoding.UTF8.GetString (bytes);                     if (actualBytecodeMd5 != Utils.GetBytecodeMd5 (this.bytecode)) {                         throw new Exceptions.BytecodeDoesntMatchState ();                     }                     // Read and ignore the source MD5.                     str.Read (bytes' 0' 32);                     // Read the number of ticks executed so far.                     this.executedTicks = Serialization.Utils.ReadLong (ms);                     // Read the number of used cells.                     this.usedCells = Serialization.Utils.ReadInt (ms);                     var ser = new Serialization.VmStateSerializer ();                     ser.Deserialize (str' version' reader => {                         this.stack = new Stack ((Value[])reader (stackIndex));                         this.currentEnvironment = (VmEnvironment)reader (envIndex);                     }                     );                     return null;                 });
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,DeserializeState,The following statement contains a magic number: Serialization.Utils.DeserializeWithMd5CheckSum (ms' str => {                     var version = Serialization.Utils.ReadInt (str);                     if (version > Shovel.Api.Version) {                         throw new Exceptions.VersionNotSupportedException ();                     }                     var stackIndex = Serialization.Utils.ReadInt (str);                     var envIndex = Serialization.Utils.ReadInt (str);                     this.programCounter = Serialization.Utils.ReadInt (str);                     var bytes = new byte[32];                     str.Read (bytes' 0' 32);                     var actualBytecodeMd5 = Encoding.UTF8.GetString (bytes);                     if (actualBytecodeMd5 != Utils.GetBytecodeMd5 (this.bytecode)) {                         throw new Exceptions.BytecodeDoesntMatchState ();                     }                     // Read and ignore the source MD5.                     str.Read (bytes' 0' 32);                     // Read the number of ticks executed so far.                     this.executedTicks = Serialization.Utils.ReadLong (ms);                     // Read the number of used cells.                     this.usedCells = Serialization.Utils.ReadInt (ms);                     var ser = new Serialization.VmStateSerializer ();                     ser.Deserialize (str' version' reader => {                         this.stack = new Stack ((Value[])reader (stackIndex));                         this.currentEnvironment = (VmEnvironment)reader (envIndex);                     }                     );                     return null;                 });
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleDiv,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleMod,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleIsStructInstance,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleDelete,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleLt,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleAdd,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGref,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGref,The following statement contains a magic number: HandleCallImpl(vm' 2' true);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleEq,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleNeq,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleLte,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGt,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGte,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleApush,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGrefDot,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGrefDot,The following statement contains a magic number: HandleCallImpl(vm' 2' true);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetDotIndexed,The following statement contains a magic number: var start = vm.stack.Count - 3;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetDotIndexed,The following statement contains a magic number: var callSetter = !Prim0.HashOrStructDotSet(vm' vm.api'                                            ref vm.stack.Storage[start]'                                            ref vm.stack.Storage[start + 1]'                                            ref vm.stack.Storage[start + 2]);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetDotIndexed,The following statement contains a magic number: vm.stack.PopMany(2);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSub,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleAnd,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleIor,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleXor,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetIndexed,The following statement contains a magic number: var start = vm.stack.Count - 3;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetIndexed,The following statement contains a magic number: var callSetter = !Prim0.ArrayOrHashSet (vm.api'                                    ref vm.stack.Storage [start]'                                    ref vm.stack.Storage [start + 1]'                                   ref vm.stack.Storage [start + 2]);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetIndexed,The following statement contains a magic number: vm.stack.PopMany(2);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleMul,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleHasKey,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleShl,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleShr,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandlePow,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleFn,The following statement contains a magic number: vm.IncrementCells (5);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleNewFrame,The following statement contains a magic number: vm.IncrementCells (args.Length * 3 + 5);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleNewFrame,The following statement contains a magic number: vm.IncrementCells (args.Length * 3 + 5);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs2,The following statement contains a magic number: vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (2);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs2,The following statement contains a magic number: vm.stack.UnderPopAndCopyTop (2);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (3);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (2);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: vm.currentEnvironment.Frame.Values [2] = vm.stack.UnderTop (1);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: vm.stack.UnderPopAndCopyTop (3);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleBlock,The following statement contains a magic number: vm.IncrementCells (3);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleContext,The following statement contains a magic number: vm.IncrementCells (6 + stackTrace.Length + currentEnvironment.Length);
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsHash,The following statement contains a magic number: var sum = hash.Count * 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsCallable,The following statement contains a magic number: var sum = 5;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsReturnAddress,The following statement contains a magic number: var sum = 2;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsNamedBlock,The following statement contains a magic number: var sum = 3;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsEnvironment,The following statement contains a magic number: var sum = 3;
Magic Number,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsEnvFrame,The following statement contains a magic number: var sum = 3;
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GetPrim0Hash,The following statement contains a magic number: AddPrim0 (result' Callable.MakePrim0 ("setHandlers"' Callable.MakeHostCallable(SetHandlers)' 3));
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GetPrim0Hash,The following statement contains a magic number: AddPrim0 (result' Callable.MakePrim0 ("slice"' Callable.MakeHostCallable (GetSlice)' 3));
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GetPrim0Hash,The following statement contains a magic number: AddPrim0 (result' Callable.MakePrim0 ("hashToStruct"' HashToStruct' 2));
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,StructToHash,The following statement contains a magic number: var sizeIncrease = 1 + 2 * ztruct.Fields.Length;
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,Expt,The following statement contains a magic number: e % 2 == 0
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashConstructor,The following statement contains a magic number: length % 2 != 0
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashConstructor,The following statement contains a magic number: var sizeIncrease = 1 + 2 * length;
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,SetHandlers,The following statement contains a magic number: getter.Kind != Value.Kinds.Null && (getter.Kind != Value.Kinds.Callable || getter.CallableValue.Arity != 2)
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,SetHandlers,The following statement contains a magic number: setter.Kind != Value.Kinds.Null && (setter.Kind != Value.Kinds.Callable || setter.CallableValue.Arity != 3)
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: api.CellsIncrementer (8);
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "second"' 0' 59'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid second '{0}'.");
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "minute"' 0' 59'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid minute '{0}'.");
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "hour"' 0' 59'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid hour '{0}'.");
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "day"' 1' 31'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid day '{0}'.");
Magic Number,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "month"' 1' 12'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid month '{0}'.");
Magic Number,Shovel.Serialization,BytecodeSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,WriteString,The following statement contains a magic number: bytes.Length < 256
Magic Number,Shovel.Serialization,BytecodeSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadArrayOfTwoInts,The following statement contains a magic number: var array = new int[2];
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,Deserialize,The following statement contains a magic number: reader = (index) => {                 if (index < 0) {                     if (index == -1) {                         return null;                     } else if (index == -2) {                         return true;                     } else if (index == -3) {                         return false;                     } else {                         Shovel.Utils.Panic ();                         throw new InvalidOperationException ();                     }                 }                 if (objects [index] == null) {                     if (serArray [index] is string || serArray [index] is long || serArray [index] is double) {                         objects [index] = serArray [index];                     } else if (serArray [index] is Composite) {                         RebuildFromComposite (objects' index' (Composite)serArray [index]' reader' version);                     } else {                         Shovel.Utils.Panic ();                         throw new NotImplementedException ();                     }                 }                  return objects [index];             };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,Deserialize,The following statement contains a magic number: reader = (index) => {                 if (index < 0) {                     if (index == -1) {                         return null;                     } else if (index == -2) {                         return true;                     } else if (index == -3) {                         return false;                     } else {                         Shovel.Utils.Panic ();                         throw new InvalidOperationException ();                     }                 }                 if (objects [index] == null) {                     if (serArray [index] is string || serArray [index] is long || serArray [index] is double) {                         objects [index] = serArray [index];                     } else if (serArray [index] is Composite) {                         RebuildFromComposite (objects' index' (Composite)serArray [index]' reader' version);                     } else {                         Shovel.Utils.Panic ();                         throw new NotImplementedException ();                     }                 }                  return objects [index];             };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,ReadCompositeImpl,The following statement contains a magic number: var lengthInBytes = 4 * length;
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The following statement contains a magic number: length -= 2;
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The following statement contains a magic number: version > 4
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The following statement contains a magic number: version > 4
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The following statement contains a magic number: length -= 2;
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The following statement contains a magic number: version > 4
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The following statement contains a magic number: version > 4
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildCallable,The following statement contains a magic number: result.Arity = (int?)(long?)reader (composite.Elements [2]);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildCallable,The following statement contains a magic number: result.ProgramCounter = (int?)(long?)reader (composite.Elements [3]);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildCallable,The following statement contains a magic number: result.Environment = (VmEnvironment)reader (composite.Elements [4]);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildNamedBlock,The following statement contains a magic number: result.Environment = (VmEnvironment)reader (composite.Elements [2]);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildEnvFrame,The following statement contains a magic number: result.IntroducedAtProgramCounter = (int)(long)reader (composite.Elements [2]);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeBool,The following statement contains a magic number: return -2;
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeHash,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Hash'                  Elements = new int[dict.Count * 2 + 2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeHash,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Hash'                  Elements = new int[dict.Count * 2 + 2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeHash,The following statement contains a magic number: cursor += 2;
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeList,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.ShovelValueList'                  Elements = new int[list.Count + 2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Callable'                  Elements = new int[5]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: composite.Elements [2] = SerializeOne (callable.Arity);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: composite.Elements [3] = SerializeOne (callable.ProgramCounter);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: composite.Elements [4] = Serialize (callable.Environment);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeReturnAddress,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.ReturnAddress'                  Elements = new int[2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeNamedBlock,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.NamedBlock'                 Elements = new int[3]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeNamedBlock,The following statement contains a magic number: composite.Elements [2] = Serialize (namedBlock.Environment);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeEnvironment,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Environment'                  Elements = new int[2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeEnvFrame,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.EnvFrame'                  Elements = new int[3]              };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeEnvFrame,The following statement contains a magic number: composite.Elements [2] = SerializeOne (frame.IntroducedAtProgramCounter);
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeStructInstance,The following statement contains a magic number: var composite = new Composite {                 Kind = ObjectTypes.StructInstance'                 Elements = new int[2]             };
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,WriteString,The following statement contains a magic number: bytes.Length <= 255
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,WriteComposite,The following statement contains a magic number: length < 255
Magic Number,Shovel.Serialization,VmStateSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,WriteComposite,The following statement contains a magic number: var lengthInBytes = 4 * composite.Elements.Length;
Magic Number,Shovel.Serialization,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,DeserializeWithMd5CheckSum,The following statement contains a magic number: byte[] expectedMd5 = new byte[16];
Magic Number,Shovel.Serialization,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadInt,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,Shovel.Serialization,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadInt,The following statement contains a magic number: ms.Read (bytes' 0' 4);
Magic Number,Shovel.Serialization,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadLong,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Shovel.Serialization,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadLong,The following statement contains a magic number: ms.Read (bytes' 0' 8);
Magic Number,Shovel.Compiler.Types,ParseTree,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Types\ParseTree.cs,RenderToStringBuilder,The following statement contains a magic number: child.RenderToStringBuilder (sb' indentation + 2);
Missing Default,Shovel,Utils,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericLabels,The following switch statement is missing a default case: switch (instruction.Opcode) {                 case Instruction.Opcodes.Jump:                     result.Add((int)instruction.Arguments);                     break;                 case Instruction.Opcodes.Fjump:                     result.Add((int)instruction.Arguments);                     break;                               case Instruction.Opcodes.Fn:                     result.Add (((int[])instruction.Arguments)[0]);                     break;                 case Instruction.Opcodes.Block:                     result.Add((int)instruction.Arguments);                     break;                 case Instruction.Opcodes.Tjump:                     result.Add((int)instruction.Arguments);                     break;                 }
Missing Default,Shovel.Vm,Vm,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CallPrimitive,The following switch statement is missing a default case: switch (udpResult.After) {                 case UdpResult.AfterCall.Continue:                     vm.stack.Pop ();                     FinishPrimitiveCall (vm' numArgs' saveReturnAddress' udpResult.Result);                     break;                 case UdpResult.AfterCall.Nap:                     vm.stack.Pop ();                     FinishPrimitiveCall (vm' numArgs' saveReturnAddress' udpResult.Result);                     vm.shouldTakeANap = true;                     break;                 case UdpResult.AfterCall.NapAndRetryOnWakeUp:                     vm.shouldTakeANap = true;                     break;                 }
Missing Default,Shovel.Vm,Prim0,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following switch statement is missing a default case: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Missing Default,Shovel.Serialization,BytecodeSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadArguments,The following switch statement is missing a default case: switch (instruction.Opcode) {              case Instruction.Opcodes.VmVersion:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.VmSourcesMd5:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.VmBytecodeMd5:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.FileName:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.Prim0:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.Prim:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.Const:                  instruction.Arguments = ReadConst (s);                  break;              case Instruction.Opcodes.Block:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Label:                  Shovel.Utils.Panic ();                  break;              case Instruction.Opcodes.Call:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.CallJ:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Lget:                  instruction.Arguments = ReadArrayOfTwoInts (s);                  break;              case Instruction.Opcodes.Fjump:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Jump:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Lset:                  instruction.Arguments = ReadArrayOfTwoInts (s);                  break;              case Instruction.Opcodes.Fn:                  instruction.Arguments = ReadArrayOfTwoInts (s);                  break;              case Instruction.Opcodes.NewFrame:                  instruction.Arguments = ReadArrayOfStrings (s);                  break;              case Instruction.Opcodes.Args:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Tjump:                  instruction.Arguments = Utils.ReadInt (s);                  break;              }
Missing Default,Shovel.Serialization,BytecodeSerializer,D:\research\architectureSmells\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,WriteArguments,The following switch statement is missing a default case: switch (instruction.Opcode) {              case Instruction.Opcodes.VmVersion:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.VmSourcesMd5:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.VmBytecodeMd5:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.FileName:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.Prim0:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.Prim:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.Const:                  WriteConst (stream' (Value)instruction.Arguments);                  break;              case Instruction.Opcodes.Block:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Label:                  Shovel.Utils.Panic ();                  break;              case Instruction.Opcodes.Call:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.CallJ:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Lget:                  WriteArrayOfTwoInts (stream' instruction.Arguments);                  break;              case Instruction.Opcodes.Fjump:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Jump:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Lset:                  WriteArrayOfTwoInts (stream' instruction.Arguments);                  break;              case Instruction.Opcodes.Fn:                  WriteArrayOfTwoInts (stream' instruction.Arguments);                  break;              case Instruction.Opcodes.NewFrame:                  WriteArrayOfStrings (stream' (string[])instruction.Arguments);                  break;              case Instruction.Opcodes.Args:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Tjump:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              }
