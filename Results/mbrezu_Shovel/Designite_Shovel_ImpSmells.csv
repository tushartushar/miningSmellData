Implementation smell,Namespace,Class,File,Method,Description
Long Method,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The method has 181 lines of code.
Long Method,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The method has 136 lines of code.
Long Method,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,ShovelStdlib,The method has 127 lines of code.
Complex Method,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CheckQuotas,Cyclomatic complexity of the method is 8
Long Parameter List,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,FindName,The method has 5 parameters. Parameters: varName' env' startPos' endPos' frameNumber
Long Parameter List,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileSetVar,The method has 5 parameters. Parameters: name' env' useVal' more' astForPos
Long Parameter List,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,Gen,The method has 6 parameters. Parameters: opcode' arguments' pos' comments' startPos' endPos
Long Parameter List,Shovel,Api,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Api.cs,RunVm,The method has 7 parameters. Parameters: bytecode' sources' userPrimitives' state' totalTicksQuota' ticksUntilNextNapQuota' usedCellsQuota
Long Parameter List,Shovel,Api,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Api.cs,RunVm,The method has 6 parameters. Parameters: vm' sources' userPrimitives' totalTicksQuota' ticksUntilNextNapQuota' usedCellsQuota
Long Parameter List,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,RunVm,The method has 8 parameters. Parameters: bytecode' sources' userPrimitives' state' vm' cellsQuota' totalTicksQuota' untilNextNapTicksQuota
Long Parameter List,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CallFunction,The method has 5 parameters. Parameters: callable' vm' numArgs' saveReturnAddress' inApply
Long Parameter List,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CallPrimitive,The method has 5 parameters. Parameters: callable' vm' numArgs' saveReturnAddress' inApply
Long Parameter List,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashOrStructDotSet,The method has 5 parameters. Parameters: vm' api' obj' index' value
Long Parameter List,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,CheckBoundedInteger,The method has 6 parameters. Parameters: api' hash' key' min' max' errorMessageFormat
Long Parameter List,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The method has 5 parameters. Parameters: objects' index' composite' reader' version
Long Parameter List,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The method has 5 parameters. Parameters: objects' index' composite' reader' version
Long Parameter List,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildFromComposite,The method has 5 parameters. Parameters: objects' index' composite' reader' version
Long Statement,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGrefDot,The length of the statement  "            var callGetter = !Prim0.HashOrStructGetDot (vm' vm.api' ref vm.stack.Storage [start]' ref vm.stack.Storage [start + 1]); " is 120.
Long Statement,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CheckVmWithoutError,The length of the statement  "                throw new ShovelException( "An exception has been thrown in a user-defined primitive."' this.userDefinedPrimitiveError );" is 121.
Complex Conditional,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The conditional expression  "ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == '''"  is complex.
Complex Conditional,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The conditional expression  "ch == '*' || ch == '/' || ch == '%' || ch == '^'"  is complex.
Complex Conditional,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,Assemble,The conditional expression  "instruction.Opcode == Instruction.Opcodes.Fjump                         || instruction.Opcode == Instruction.Opcodes.Tjump                         || instruction.Opcode == Instruction.Opcodes.Jump                         || instruction.Opcode == Instruction.Opcodes.Block"  is complex.
Complex Conditional,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,ShovelStringRepresentationImpl,The conditional expression  "obj.Kind == Value.Kinds.Null                 || obj.Kind == Value.Kinds.Integer                 || obj.Kind == Value.Kinds.Double                 || obj.Kind == Value.Kinds.Bool                 || obj.Kind == Value.Kinds.Callable"  is complex.
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizePunctuation,The following statement contains a magic number: if (ch == '.')              {                  var la = this.LookAhead();                  if (la != '.')                  {                      return this.MakePunctuationToken(1);                  }                  else                  {                      var la2 = this.LookAhead(2);                      if (la2 == '.')                      {                          return this.MakePunctuationToken(3);                      }                      else                      {                          RaiseTokenizerError("Unknown token '..'. Did you mean '...'?");                          throw new Exception(); // Just to keep the compiler happy.                      }                  }              }              else if (ch == '(' || ch == ')'                || ch == '[' || ch == ']'                || ch == '{' || ch == '}'                || ch == ''')              {                  if (ch == '{')                  {                      bracketCounter ++;                  }                  else if (ch == '}')                  {                      bracketCounter --;                      if (StringInterpolation && bracketCounter < 0)                      {                          return null;                      }                  }                  return this.MakePunctuationToken(1);              }              else if (ch == '=')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '+')              {                  var result = this.MakePunctuationToken(1);                  result.IsAdderOp = true;                  return result;              }              else if (ch == '-')              {                  var la = this.LookAhead();                  if (la == '>')                  {                      var result = this.MakePunctuationToken(2);                      result.IsPostfixOp = true;                      return result;                  }                  else                  {                      var result = this.MakePunctuationToken(1);                      result.IsAdderOp = true;                      return result;                  }              }              else if (ch == '<' || ch == '>')              {                  var la = this.LookAhead();                  var isLongRelational = la == '=';                  var isMultiplier = ch == '<' && la == '<' || ch == '>' && la == '>';                  var isRelational = isLongRelational || !isMultiplier;                  Token result;                  if (isLongRelational || isMultiplier)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  result.IsMultiplierOp = isMultiplier;                  return result;              }              else if (ch == '*' || ch == '/' || ch == '%' || ch == '^')              {                  var result = this.MakePunctuationToken(1);                  result.IsMultiplierOp = true;                  return result;              }              else if (ch == '|')              {                  var la = this.LookAhead();                  var isLogical = la == '|';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalOrOp = true;                  }                  else                  {                      result.IsAdderOp = true;                  }                  return result;              }              else if (ch == '&')              {                  var la = this.LookAhead();                  var isLogical = la == '&';                  Token result;                  if (isLogical)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  if (isLogical)                  {                      result.IsLogicalAndOp = true;                  }                  else                  {                      result.IsMultiplierOp = true;                  }                  return result;              }              else if (ch == '!')              {                  var la = this.LookAhead();                  var isRelational = la == '=';                  Token result;                  if (isRelational)                  {                      result = this.MakePunctuationToken(2);                  }                  else                  {                      result = this.MakePunctuationToken(1);                  }                  result.IsRelational = isRelational;                  return result;              }              else if (ch == '$')              {                  return this.MakePunctuationToken(1);              }              else if (ch == ':' && StringInterpolation)              {                  return null;              }              else              {                  RaiseTokenizerError(String.Format("Unexpected character '{0}'."' ch));                  throw new Exception(); // Just to keep the compiler happy.              }
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizeStringLiteral,The following statement contains a magic number: var result = TokenizePred(Token.Types.LiteralString' (ch) =>              {                  var goOn = quoteCounter < 2;                  if (ch == quote && !escaped)                  {                      quoteCounter++;                  }                  escaped = ch == '\\';                  return goOn;              }              );
Magic Number,Shovel.Compiler,Tokenizer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Tokenizer.cs,TokenizeStringLiteral,The following statement contains a magic number: if (quoteCounter < 2)              {                  throw new ShovelException()                  {                      ShovelMessage = "Expected an end quote' but reached the end of file."'                      FileName = this.source.FileName'                      AtEof = true                  };              }
Magic Number,Shovel.Compiler,Parser,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,RunWeaveMacro,The following statement contains a magic number: if (IsWeave(source))              {                  var leftSide = source.Children.ElementAt(1);                  var rightSide = source.Children.ElementAt(2);                  var count = new Utils.Wrapper<Int32>(0);                  ReplacePlaceholder(rightSide' leftSide' count);                  if (count.Item == 0)                  {                      RaiseErrorAt(                          "No replacement in postfix call (->' $)."'                          source.StartPos' source.EndPos);                                      }                  return RunWeaveMacro(rightSide);              }              else              {                  source.RunOnChildren(RunWeaveMacro);                  return source;              }
Magic Number,Shovel.Compiler,Parser,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,MaybeRewriteAsIfExpression,The following statement contains a magic number: if (this.IsRequiredPrimitiveCall (parseTree' opName)) {                  var operands = parseTree.Children.ToArray ();                  var op = operands [0];                  var t1 = operands [1];                  var t2 = operands [2];                  return new ParseTree () {                      Label = ParseTree.Labels.If'                      StartPos = op.StartPos'                      EndPos = op.EndPos'                      Children = ifChildren(t1' t2)                  };              } else {                  return parseTree;              }
Magic Number,Shovel.Compiler,Parser,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,ParseInterpolate,The following statement contains a magic number: var tokenizer = new Tokenizer(source' startPos + intStart + 2' endPos);
Magic Number,Shovel.Compiler,Parser,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Parser.cs,ParseLiteralString,The following statement contains a magic number: while (intStart != -1)              {                  if (intStart == 0 || content[intStart - 1] != '\\') {                       return ParseInterpolate(content' startPos' endPos' intStart);                  } else {                      intStart = content.IndexOf("${"' intStart + 2);                  }              }
Magic Number,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileAtomValue,The following statement contains a magic number: switch (label) {             case ParseTree.Labels.Number:                 {                     double doubleResult;                     long longResult;                     if (long.TryParse (content' out longResult)) {                         return Value.MakeInt (longResult);                     } else if (double.TryParse (content' out doubleResult)) {                         return Value.MakeFloat (doubleResult);                     }                 }                 Utils.Panic ();                 return null;             case ParseTree.Labels.String:                 return Value.Make (content.Substring (1' content.Length - 2));             case ParseTree.Labels.Bool:                 switch (content) {                 case "true":                     return Value.Make (true);                 case "false":                     return Value.Make (false);                 default:                     Utils.Panic ();                     return null;                 }             case ParseTree.Labels.Void:                 return Value.Make ();             default:                 Utils.Panic ();                 return null;             }
Magic Number,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileIf,The following statement contains a magic number: if (more) {                 var l1 = this.GenLabel ();                 var l2 = this.GenLabel ();                 var pred = ast.Children.ElementAt (0);                 this.CompileAst (pred' env' true' true);                 this.Gen (Instruction.Opcodes.Fjump' l1);                 var thenAction = ast.Children.ElementAt (1);                 this.CompileAst (thenAction' env' useVal' true);                 this.Gen (Instruction.Opcodes.Jump' l2);                 this.Gen (Instruction.Opcodes.Label' l1);                 var elseAction = ast.Children.ElementAt (2);                 this.CompileAst (elseAction' env' useVal' true);                 this.Gen (Instruction.Opcodes.Label' l2);             } else {                 var l1 = this.GenLabel ();                 var pred = ast.Children.ElementAt (0);                 this.CompileAst (pred' env' true' true);                 this.Gen (Instruction.Opcodes.Fjump' l1);                 var thenAction = ast.Children.ElementAt (1);                 this.CompileAst (thenAction' env' useVal' false);                 this.Gen (Instruction.Opcodes.Label' l1);                 var elseAction = ast.Children.ElementAt (2);                 this.CompileAst (elseAction' env' useVal' false);             }
Magic Number,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileIf,The following statement contains a magic number: if (more) {                 var l1 = this.GenLabel ();                 var l2 = this.GenLabel ();                 var pred = ast.Children.ElementAt (0);                 this.CompileAst (pred' env' true' true);                 this.Gen (Instruction.Opcodes.Fjump' l1);                 var thenAction = ast.Children.ElementAt (1);                 this.CompileAst (thenAction' env' useVal' true);                 this.Gen (Instruction.Opcodes.Jump' l2);                 this.Gen (Instruction.Opcodes.Label' l1);                 var elseAction = ast.Children.ElementAt (2);                 this.CompileAst (elseAction' env' useVal' true);                 this.Gen (Instruction.Opcodes.Label' l2);             } else {                 var l1 = this.GenLabel ();                 var pred = ast.Children.ElementAt (0);                 this.CompileAst (pred' env' true' true);                 this.Gen (Instruction.Opcodes.Fjump' l1);                 var thenAction = ast.Children.ElementAt (1);                 this.CompileAst (thenAction' env' useVal' false);                 this.Gen (Instruction.Opcodes.Label' l1);                 var elseAction = ast.Children.ElementAt (2);                 this.CompileAst (elseAction' env' useVal' false);             }
Magic Number,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileSet,The following statement contains a magic number: if (leftHandSide.Label == ParseTree.Labels.Name) {                 this.CompileAst (ast.Children.ElementAt (2)' env' true' true);                 this.CompileSetVar (leftHandSide.Content' env' useVal' more' ast);             } else {                 if (!this.IsGrefCall (leftHandSide)) {                     this.RaiseError (                         ast.StartPos' ast.EndPos'                         "Assignment only supported for names' arrays and hashes.");                 }                 var arrayOrHash = leftHandSide.Children.ElementAt (1);                 var index = leftHandSide.Children.ElementAt (2);                 var literalStringIndex = index.Label == ParseTree.Labels.String;                 var setOperator = leftHandSide.Children.ElementAt (0);                 var primitiveParseTree = new ParseTree ()                 {                     Label = ParseTree.Labels.Prim0'                     StartPos = setOperator.StartPos'                     EndPos = setOperator.EndPos'                     Content = literalStringIndex ? "svm_set_dot_indexed" : "svm_set_indexed"                 };                 var rightHandSide = ast.Children.ElementAt (2);                 var callParseTree = new ParseTree ()                 {                     Label = ParseTree.Labels.Call'                     StartPos = ast.StartPos'                     EndPos = ast.EndPos'                     Children = new ParseTree[] {                         primitiveParseTree'                         arrayOrHash'                         index'                         rightHandSide                     }                 };                 this.CompileAst (callParseTree' env' useVal' more);             }
Magic Number,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileSet,The following statement contains a magic number: if (leftHandSide.Label == ParseTree.Labels.Name) {                 this.CompileAst (ast.Children.ElementAt (2)' env' true' true);                 this.CompileSetVar (leftHandSide.Content' env' useVal' more' ast);             } else {                 if (!this.IsGrefCall (leftHandSide)) {                     this.RaiseError (                         ast.StartPos' ast.EndPos'                         "Assignment only supported for names' arrays and hashes.");                 }                 var arrayOrHash = leftHandSide.Children.ElementAt (1);                 var index = leftHandSide.Children.ElementAt (2);                 var literalStringIndex = index.Label == ParseTree.Labels.String;                 var setOperator = leftHandSide.Children.ElementAt (0);                 var primitiveParseTree = new ParseTree ()                 {                     Label = ParseTree.Labels.Prim0'                     StartPos = setOperator.StartPos'                     EndPos = setOperator.EndPos'                     Content = literalStringIndex ? "svm_set_dot_indexed" : "svm_set_indexed"                 };                 var rightHandSide = ast.Children.ElementAt (2);                 var callParseTree = new ParseTree ()                 {                     Label = ParseTree.Labels.Call'                     StartPos = ast.StartPos'                     EndPos = ast.EndPos'                     Children = new ParseTree[] {                         primitiveParseTree'                         arrayOrHash'                         index'                         rightHandSide                     }                 };                 this.CompileAst (callParseTree' env' useVal' more);             }
Magic Number,Shovel.Compiler,CodeGenerator,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\CodeGenerator.cs,CompileSet,The following statement contains a magic number: if (leftHandSide.Label == ParseTree.Labels.Name) {                 this.CompileAst (ast.Children.ElementAt (2)' env' true' true);                 this.CompileSetVar (leftHandSide.Content' env' useVal' more' ast);             } else {                 if (!this.IsGrefCall (leftHandSide)) {                     this.RaiseError (                         ast.StartPos' ast.EndPos'                         "Assignment only supported for names' arrays and hashes.");                 }                 var arrayOrHash = leftHandSide.Children.ElementAt (1);                 var index = leftHandSide.Children.ElementAt (2);                 var literalStringIndex = index.Label == ParseTree.Labels.String;                 var setOperator = leftHandSide.Children.ElementAt (0);                 var primitiveParseTree = new ParseTree ()                 {                     Label = ParseTree.Labels.Prim0'                     StartPos = setOperator.StartPos'                     EndPos = setOperator.EndPos'                     Content = literalStringIndex ? "svm_set_dot_indexed" : "svm_set_indexed"                 };                 var rightHandSide = ast.Children.ElementAt (2);                 var callParseTree = new ParseTree ()                 {                     Label = ParseTree.Labels.Call'                     StartPos = ast.StartPos'                     EndPos = ast.EndPos'                     Children = new ParseTree[] {                         primitiveParseTree'                         arrayOrHash'                         index'                         rightHandSide                     }                 };                 this.CompileAst (callParseTree' env' useVal' more);             }
Magic Number,Shovel.Compiler,RawBytecodeOptimizations,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\RawBytecodeOptimizations.cs,OptimizeLsetPopLget,The following statement contains a magic number: while (i < bytecode.Count) {                  var instruction = bytecode[i];                  if (instruction.Opcode == Instruction.Opcodes.Lset && i <= bytecode.Count - 3) {                      var lsetArgs = (int[])instruction.Arguments;                      var next = bytecode[i+1];                      var next2 = bytecode[i+2];                      if (next.Opcode == Instruction.Opcodes.Pop && next2.Opcode == Instruction.Opcodes.Lget) {                          var lgetArgs = (int[])next2.Arguments;                          if (lsetArgs[0] == lgetArgs[0] && lsetArgs[1] == lgetArgs[1]) {                              result.Add (instruction);                              i += 3;                              continue;                          }                      }                  }                  result.Add (instruction);                  i++;              }
Magic Number,Shovel.Compiler,RawBytecodeOptimizations,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\RawBytecodeOptimizations.cs,OptimizeLsetPopLget,The following statement contains a magic number: while (i < bytecode.Count) {                  var instruction = bytecode[i];                  if (instruction.Opcode == Instruction.Opcodes.Lset && i <= bytecode.Count - 3) {                      var lsetArgs = (int[])instruction.Arguments;                      var next = bytecode[i+1];                      var next2 = bytecode[i+2];                      if (next.Opcode == Instruction.Opcodes.Pop && next2.Opcode == Instruction.Opcodes.Lget) {                          var lgetArgs = (int[])next2.Arguments;                          if (lsetArgs[0] == lgetArgs[0] && lsetArgs[1] == lgetArgs[1]) {                              result.Add (instruction);                              i += 3;                              continue;                          }                      }                  }                  result.Add (instruction);                  i++;              }
Magic Number,Shovel.Compiler,RawBytecodeOptimizations,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\RawBytecodeOptimizations.cs,OptimizeLsetPopLget,The following statement contains a magic number: while (i < bytecode.Count) {                  var instruction = bytecode[i];                  if (instruction.Opcode == Instruction.Opcodes.Lset && i <= bytecode.Count - 3) {                      var lsetArgs = (int[])instruction.Arguments;                      var next = bytecode[i+1];                      var next2 = bytecode[i+2];                      if (next.Opcode == Instruction.Opcodes.Pop && next2.Opcode == Instruction.Opcodes.Lget) {                          var lgetArgs = (int[])next2.Arguments;                          if (lsetArgs[0] == lgetArgs[0] && lsetArgs[1] == lgetArgs[1]) {                              result.Add (instruction);                              i += 3;                              continue;                          }                      }                  }                  result.Add (instruction);                  i++;              }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericOpcode,The following statement contains a magic number: switch (opcode)             {                 case Instruction.Opcodes.Jump:                     return 0;                 case Instruction.Opcodes.Const:                     return 1;                 case Instruction.Opcodes.Prim0:                     return 2;                 case Instruction.Opcodes.Prim:                     return 3;                 case Instruction.Opcodes.Call:                     return 4;                 case Instruction.Opcodes.CallJ:                     return 5;                 case Instruction.Opcodes.Fjump:                     return 6;                 case Instruction.Opcodes.Lset:                     return 7;                 case Instruction.Opcodes.Pop:                     return 8;                 case Instruction.Opcodes.Lget:                     return 9;                 case Instruction.Opcodes.Fn:                     return 10;                 case Instruction.Opcodes.NewFrame:                     return 11;                 case Instruction.Opcodes.DropFrame:                     return 12;                 case Instruction.Opcodes.Args:                     return 13;                 case Instruction.Opcodes.Return:                     return 14;                 case Instruction.Opcodes.Block:                     return 15;                 case Instruction.Opcodes.PopBlock:                     return 16;                 case Instruction.Opcodes.BlockReturn:                     return 17;                 case Instruction.Opcodes.Context:                     return 18;                 case Instruction.Opcodes.Tjump:                     return 19;                 case Instruction.Opcodes.FileName:                     return 20;                 case Instruction.Opcodes.VmVersion:                     return 20;                 case Instruction.Opcodes.VmSourcesMd5:                     return 20;                 case Instruction.Opcodes.VmBytecodeMd5:                     return 20;                 case Instruction.Opcodes.Div:                     return 21;                 case Instruction.Opcodes.Mod:                     return 22;                 case Instruction.Opcodes.Neq:                     return 23;                 case Instruction.Opcodes.Lt:                     return 24;                 case Instruction.Opcodes.Add:                     return 25;                 case Instruction.Opcodes.Gref:                     return 26;                 case Instruction.Opcodes.Eq:                     return 27;                 case Instruction.Opcodes.Apush:                     return 28;                 case Instruction.Opcodes.GrefDot:                     return 29;                 case Instruction.Opcodes.Sub:                     return 30;                 case Instruction.Opcodes.Neg:                     return 31;                 case Instruction.Opcodes.Mul:                     return 32;                 case Instruction.Opcodes.Shl:                     return 33;                 case Instruction.Opcodes.Shr:                     return 34;                 case Instruction.Opcodes.Pow:                     return 35;                 case Instruction.Opcodes.Floor:                     return 36;                 case Instruction.Opcodes.Lte:                     return 37;                 case Instruction.Opcodes.Gt:                     return 38;                 case Instruction.Opcodes.Gte:                     return 39;                 case Instruction.Opcodes.Not:                     return 40;                 case Instruction.Opcodes.And:                     return 41;                 case Instruction.Opcodes.Ior:                     return 42;                 case Instruction.Opcodes.Xor:                     return 43;                 case Instruction.Opcodes.Keys:                     return 44;                 case Instruction.Opcodes.HasKey:                     return 45;                 case Instruction.Opcodes.Apop:                     return 46;                 case Instruction.Opcodes.SetIndexed:                     return 47;                 case Instruction.Opcodes.Len:                     return 48;                 case Instruction.Opcodes.IsString:                     return 49;                 case Instruction.Opcodes.IsHash:                     return 50;                 case Instruction.Opcodes.IsBool:                     return 51;                 case Instruction.Opcodes.IsArray:                     return 52;                 case Instruction.Opcodes.IsNumber:                     return 53;                 case Instruction.Opcodes.IsInteger:                     return 54;                 case Instruction.Opcodes.IsCallable:                     return 55;                 case Instruction.Opcodes.Delete:                     return 56;                 case Instruction.Opcodes.IsStruct:                     return 57;                 case Instruction.Opcodes.IsStructInstance:                     return 58;                 case Instruction.Opcodes.SetDotIndexed:                     return 59;                  case Instruction.Opcodes.Apply:                      return 60;                 default:                     Utils.Panic();                     return 0;             }
Magic Number,Shovel,Api,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Api.cs,MakeSourcesFromIEnumerable,The following statement contains a magic number: for (var i = 0; i < namesAndContents.Count(); i += 2) {                  result.Add (new SourceFile ()                  {                      FileName = namesAndContents.ElementAt(i)'                      Content = namesAndContents.ElementAt(i + 1)                  }                  );              }
Magic Number,Shovel,Stack,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,Stack,The following statement contains a magic number: this.storage = new Value[1024];
Magic Number,Shovel,Stack,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,Stack,The following statement contains a magic number: this.storage = new Value[existingValues.Length * 2];
Magic Number,Shovel,Stack,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,UnderTopOne,The following statement contains a magic number: return this.storage [this.length - 2];
Magic Number,Shovel,Stack,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,UnderPopOneAndCopyTop,The following statement contains a magic number: this.storage [this.length - 2] = this.storage [this.length - 1];
Magic Number,Shovel,Stack,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Stack.cs,Push,The following statement contains a magic number: if (this.length == this.storage.Length) {                  Array.Resize (ref this.storage' this.storage.Length * 2);              }
Magic Number,Shovel,Callable,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Callable.cs,MakeHostCallable,The following statement contains a magic number: return (vmapi' args' start' length) => callable (vmapi' args [start]' args [start + 1]' args [start + 2]);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,DeserializeState,The following statement contains a magic number: using (var ms = new MemoryStream(serializedState)) {                 Serialization.Utils.DeserializeWithMd5CheckSum (ms' str => {                     var version = Serialization.Utils.ReadInt (str);                     if (version > Shovel.Api.Version) {                         throw new Exceptions.VersionNotSupportedException ();                     }                     var stackIndex = Serialization.Utils.ReadInt (str);                     var envIndex = Serialization.Utils.ReadInt (str);                     this.programCounter = Serialization.Utils.ReadInt (str);                     var bytes = new byte[32];                     str.Read (bytes' 0' 32);                     var actualBytecodeMd5 = Encoding.UTF8.GetString (bytes);                     if (actualBytecodeMd5 != Utils.GetBytecodeMd5 (this.bytecode)) {                         throw new Exceptions.BytecodeDoesntMatchState ();                     }                     // Read and ignore the source MD5.                     str.Read (bytes' 0' 32);                     // Read the number of ticks executed so far.                     this.executedTicks = Serialization.Utils.ReadLong (ms);                     // Read the number of used cells.                     this.usedCells = Serialization.Utils.ReadInt (ms);                     var ser = new Serialization.VmStateSerializer ();                     ser.Deserialize (str' version' reader => {                         this.stack = new Stack ((Value[])reader (stackIndex));                         this.currentEnvironment = (VmEnvironment)reader (envIndex);                     }                     );                     return null;                 });             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,DeserializeState,The following statement contains a magic number: using (var ms = new MemoryStream(serializedState)) {                 Serialization.Utils.DeserializeWithMd5CheckSum (ms' str => {                     var version = Serialization.Utils.ReadInt (str);                     if (version > Shovel.Api.Version) {                         throw new Exceptions.VersionNotSupportedException ();                     }                     var stackIndex = Serialization.Utils.ReadInt (str);                     var envIndex = Serialization.Utils.ReadInt (str);                     this.programCounter = Serialization.Utils.ReadInt (str);                     var bytes = new byte[32];                     str.Read (bytes' 0' 32);                     var actualBytecodeMd5 = Encoding.UTF8.GetString (bytes);                     if (actualBytecodeMd5 != Utils.GetBytecodeMd5 (this.bytecode)) {                         throw new Exceptions.BytecodeDoesntMatchState ();                     }                     // Read and ignore the source MD5.                     str.Read (bytes' 0' 32);                     // Read the number of ticks executed so far.                     this.executedTicks = Serialization.Utils.ReadLong (ms);                     // Read the number of used cells.                     this.usedCells = Serialization.Utils.ReadInt (ms);                     var ser = new Serialization.VmStateSerializer ();                     ser.Deserialize (str' version' reader => {                         this.stack = new Stack ((Value[])reader (stackIndex));                         this.currentEnvironment = (VmEnvironment)reader (envIndex);                     }                     );                     return null;                 });             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,DeserializeState,The following statement contains a magic number: using (var ms = new MemoryStream(serializedState)) {                 Serialization.Utils.DeserializeWithMd5CheckSum (ms' str => {                     var version = Serialization.Utils.ReadInt (str);                     if (version > Shovel.Api.Version) {                         throw new Exceptions.VersionNotSupportedException ();                     }                     var stackIndex = Serialization.Utils.ReadInt (str);                     var envIndex = Serialization.Utils.ReadInt (str);                     this.programCounter = Serialization.Utils.ReadInt (str);                     var bytes = new byte[32];                     str.Read (bytes' 0' 32);                     var actualBytecodeMd5 = Encoding.UTF8.GetString (bytes);                     if (actualBytecodeMd5 != Utils.GetBytecodeMd5 (this.bytecode)) {                         throw new Exceptions.BytecodeDoesntMatchState ();                     }                     // Read and ignore the source MD5.                     str.Read (bytes' 0' 32);                     // Read the number of ticks executed so far.                     this.executedTicks = Serialization.Utils.ReadLong (ms);                     // Read the number of used cells.                     this.usedCells = Serialization.Utils.ReadInt (ms);                     var ser = new Serialization.VmStateSerializer ();                     ser.Deserialize (str' version' reader => {                         this.stack = new Stack ((Value[])reader (stackIndex));                         this.currentEnvironment = (VmEnvironment)reader (envIndex);                     }                     );                     return null;                 });             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleDiv,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleMod,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleIsStructInstance,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleDelete,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleLt,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleAdd,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGref,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGref,The following statement contains a magic number: if (callGetter)              {                  var obj = vm.stack.Storage[start];                  if (obj.Kind == Value.Kinds.Hash)                  {                      vm.stack.Push(obj.hashValue.IndirectGet);                  }                  else if (obj.Kind == Value.Kinds.Array)                  {                      vm.stack.Push(obj.arrayValue.IndirectGet);                  }                  HandleCallImpl(vm' 2' true);              }              else              {                  vm.stack.Pop();                  vm.programCounter++;              }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleEq,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleNeq,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleLte,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGt,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGte,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleApush,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGrefDot,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleGrefDot,The following statement contains a magic number: if (callGetter)              {                  var obj = vm.stack.Storage[start];                  if (obj.Kind == Value.Kinds.Hash) {                      vm.stack.Push(obj.hashValue.IndirectGet);                      HandleCallImpl(vm' 2' true);                  }              } else {                  vm.stack.Pop ();                 vm.programCounter++;             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetDotIndexed,The following statement contains a magic number: var start = vm.stack.Count - 3;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetDotIndexed,The following statement contains a magic number: var callSetter = !Prim0.HashOrStructDotSet(vm' vm.api'                                            ref vm.stack.Storage[start]'                                            ref vm.stack.Storage[start + 1]'                                            ref vm.stack.Storage[start + 2]);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetDotIndexed,The following statement contains a magic number: if (!callSetter) {                   vm.stack.PopMany(2);                  vm.programCounter++;              }              else              {                  vm.stack.Push(vm.stack.Storage[start].hashValue.IndirectSet);                  HandleCallImpl(vm' 3' true);              }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetDotIndexed,The following statement contains a magic number: if (!callSetter) {                   vm.stack.PopMany(2);                  vm.programCounter++;              }              else              {                  vm.stack.Push(vm.stack.Storage[start].hashValue.IndirectSet);                  HandleCallImpl(vm' 3' true);              }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSub,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleAnd,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleIor,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleXor,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetIndexed,The following statement contains a magic number: var start = vm.stack.Count - 3;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetIndexed,The following statement contains a magic number: var callSetter = !Prim0.ArrayOrHashSet (vm.api'                                    ref vm.stack.Storage [start]'                                    ref vm.stack.Storage [start + 1]'                                   ref vm.stack.Storage [start + 2]);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetIndexed,The following statement contains a magic number: if (!callSetter)              {                  vm.stack.PopMany(2);                  vm.programCounter++;              }              else              {                  var obj = vm.stack.Storage[start];                  if (obj.Kind == Value.Kinds.Hash)                   {                       vm.stack.Push(obj.hashValue.IndirectSet);                  }                  else if (obj.Kind == Value.Kinds.Array)                  {                      vm.stack.Push(obj.arrayValue.IndirectSet);                  }                  HandleCallImpl(vm' 3' true);              }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleSetIndexed,The following statement contains a magic number: if (!callSetter)              {                  vm.stack.PopMany(2);                  vm.programCounter++;              }              else              {                  var obj = vm.stack.Storage[start];                  if (obj.Kind == Value.Kinds.Hash)                   {                       vm.stack.Push(obj.hashValue.IndirectSet);                  }                  else if (obj.Kind == Value.Kinds.Array)                  {                      vm.stack.Push(obj.arrayValue.IndirectSet);                  }                  HandleCallImpl(vm' 3' true);              }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleMul,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleHasKey,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleShl,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleShr,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandlePow,The following statement contains a magic number: var start = vm.stack.Count - 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleFn,The following statement contains a magic number: vm.IncrementCells (5);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleNewFrame,The following statement contains a magic number: vm.IncrementCells (args.Length * 3 + 5);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleNewFrame,The following statement contains a magic number: vm.IncrementCells (args.Length * 3 + 5);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs2,The following statement contains a magic number: if (vm.stack.TopIsReturnAddress ()) {                 vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (2);                 vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (1);                 vm.stack.UnderPopAndCopyTop (2);             } else {                 vm.currentEnvironment.Frame.Values [1] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [0] = vm.stack.PopTop ();             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs2,The following statement contains a magic number: if (vm.stack.TopIsReturnAddress ()) {                 vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (2);                 vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (1);                 vm.stack.UnderPopAndCopyTop (2);             } else {                 vm.currentEnvironment.Frame.Values [1] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [0] = vm.stack.PopTop ();             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: if (vm.stack.TopIsReturnAddress ()) {                 vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (3);                 vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (2);                 vm.currentEnvironment.Frame.Values [2] = vm.stack.UnderTop (1);                 vm.stack.UnderPopAndCopyTop (3);             } else {                 vm.currentEnvironment.Frame.Values [2] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [1] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [0] = vm.stack.PopTop ();             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: if (vm.stack.TopIsReturnAddress ()) {                 vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (3);                 vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (2);                 vm.currentEnvironment.Frame.Values [2] = vm.stack.UnderTop (1);                 vm.stack.UnderPopAndCopyTop (3);             } else {                 vm.currentEnvironment.Frame.Values [2] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [1] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [0] = vm.stack.PopTop ();             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: if (vm.stack.TopIsReturnAddress ()) {                 vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (3);                 vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (2);                 vm.currentEnvironment.Frame.Values [2] = vm.stack.UnderTop (1);                 vm.stack.UnderPopAndCopyTop (3);             } else {                 vm.currentEnvironment.Frame.Values [2] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [1] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [0] = vm.stack.PopTop ();             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: if (vm.stack.TopIsReturnAddress ()) {                 vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (3);                 vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (2);                 vm.currentEnvironment.Frame.Values [2] = vm.stack.UnderTop (1);                 vm.stack.UnderPopAndCopyTop (3);             } else {                 vm.currentEnvironment.Frame.Values [2] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [1] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [0] = vm.stack.PopTop ();             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleArgs3,The following statement contains a magic number: if (vm.stack.TopIsReturnAddress ()) {                 vm.currentEnvironment.Frame.Values [0] = vm.stack.UnderTop (3);                 vm.currentEnvironment.Frame.Values [1] = vm.stack.UnderTop (2);                 vm.currentEnvironment.Frame.Values [2] = vm.stack.UnderTop (1);                 vm.stack.UnderPopAndCopyTop (3);             } else {                 vm.currentEnvironment.Frame.Values [2] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [1] = vm.stack.PopTop ();                 vm.currentEnvironment.Frame.Values [0] = vm.stack.PopTop ();             }
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleBlock,The following statement contains a magic number: vm.IncrementCells (3);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,HandleContext,The following statement contains a magic number: vm.IncrementCells (6 + stackTrace.Length + currentEnvironment.Length);
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsHash,The following statement contains a magic number: var sum = hash.Count * 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsCallable,The following statement contains a magic number: var sum = 5;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsReturnAddress,The following statement contains a magic number: var sum = 2;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsNamedBlock,The following statement contains a magic number: var sum = 3;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsEnvironment,The following statement contains a magic number: var sum = 3;
Magic Number,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CountCellsEnvFrame,The following statement contains a magic number: var sum = 3;
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GetPrim0Hash,The following statement contains a magic number: AddPrim0 (result' Callable.MakePrim0 ("setHandlers"' Callable.MakeHostCallable(SetHandlers)' 3));
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GetPrim0Hash,The following statement contains a magic number: AddPrim0 (result' Callable.MakePrim0 ("slice"' Callable.MakeHostCallable (GetSlice)' 3));
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,GetPrim0Hash,The following statement contains a magic number: AddPrim0 (result' Callable.MakePrim0 ("hashToStruct"' HashToStruct' 2));
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,StructToHash,The following statement contains a magic number: var sizeIncrease = 1 + 2 * ztruct.Fields.Length;
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,Expt,The following statement contains a magic number: while (e > 0) {                 if (e % 2 == 0) {                     e = e >> 1;                     b = b * b;                 } else {                     result *= b;                     e --;                 }             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,CompareStrings,The following statement contains a magic number: if (s1 == null) {                 if (s2 == null) {                     return 0;                 } else {                     return 2;                 }             } else if (s2 == null) {                 return 2;             } else {                 return s1.CompareTo (s2);             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,CompareStrings,The following statement contains a magic number: if (s1 == null) {                 if (s2 == null) {                     return 0;                 } else {                     return 2;                 }             } else if (s2 == null) {                 return 2;             } else {                 return s1.CompareTo (s2);             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashConstructor,The following statement contains a magic number: if (length % 2 != 0) {                 api.RaiseShovelError ("Must provide an even number of arguments.");             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashConstructor,The following statement contains a magic number: var sizeIncrease = 1 + 2 * length;
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,HashConstructor,The following statement contains a magic number: for (var i = start; i < start + length; i += 2) {                 if (args [i].Kind == Value.Kinds.String) {                     result [args [i]] = args [i + 1];                 } else {                     api.RaiseShovelError ("Keys must be strings");                 }             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,SetHandlers,The following statement contains a magic number: if (getter.Kind != Value.Kinds.Null && (getter.Kind != Value.Kinds.Callable || getter.CallableValue.Arity != 2))              {                  api.RaiseShovelError("The second parameter (getter) should be a callable with 2 parameters.");                  throw new InvalidOperationException();              }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,SetHandlers,The following statement contains a magic number: if (setter.Kind != Value.Kinds.Null && (setter.Kind != Value.Kinds.Callable || setter.CallableValue.Arity != 3))              {                  api.RaiseShovelError("The third parameter (setter) should be a callable with 3 parameters.");                  throw new InvalidOperationException();              }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following statement contains a magic number: api.CellsIncrementer (8);
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "second"' 0' 59'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid second '{0}'.");
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "minute"' 0' 59'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid minute '{0}'.");
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "hour"' 0' 59'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid hour '{0}'.");
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "day"' 1' 31'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid day '{0}'.");
Magic Number,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,EncodeTime,The following statement contains a magic number: CheckBoundedInteger (                 api' hash' "month"' 1' 12'                 "Argument must be a valid time hash (as returned by 'decodeTime') - invalid month '{0}'.");
Magic Number,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,WriteString,The following statement contains a magic number: if (bytes.Length < 256) {                  stream.WriteByte (1);                  stream.WriteByte ((byte)bytes.Length);                  Utils.WriteBytes (stream' bytes);              } else {                  stream.WriteByte (4);                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)bytes.Length));                  Utils.WriteBytes (stream' bytes);              }
Magic Number,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,WriteString,The following statement contains a magic number: if (bytes.Length < 256) {                  stream.WriteByte (1);                  stream.WriteByte ((byte)bytes.Length);                  Utils.WriteBytes (stream' bytes);              } else {                  stream.WriteByte (4);                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)bytes.Length));                  Utils.WriteBytes (stream' bytes);              }
Magic Number,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadString,The following statement contains a magic number: if (disc == 1) {                  var size = s.ReadByte ();                  var bytes = new byte[size];                  s.Read (bytes' 0' size);                  return Encoding.UTF8.GetString (bytes);              } else if (disc == 4) {                  var size = Utils.ReadInt (s);                  var bytes = new byte[size];                  s.Read (bytes' 0' size);                  return Encoding.UTF8.GetString (bytes);              } else {                  Shovel.Utils.Panic ();                  return null;              }
Magic Number,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadConst,The following statement contains a magic number: if (result.Kind == Value.Kinds.Integer) {                  result.integerValue = Utils.ReadLong (stream);              } else if (result.Kind == Value.Kinds.Double) {                  // FIXME: these allocate a lot of byte[] objects.                  // Should find a way to avoid this (have the caller pass the byte[]?).                  var bytes = new byte[8];                  stream.Read (bytes' 0' 8);                  result.doubleValue = BitConverter.ToDouble (bytes' 0);              } else if (result.Kind == Value.Kinds.String) {                  result.stringValue = ReadString(stream);              } else if (result.Kind == Value.Kinds.Bool) {                  result.boolValue = stream.ReadByte() == 1;              } else if (result.Kind == Value.Kinds.Null) {                  // Do nothing.              } else {                  Shovel.Utils.Panic ();              }
Magic Number,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadConst,The following statement contains a magic number: if (result.Kind == Value.Kinds.Integer) {                  result.integerValue = Utils.ReadLong (stream);              } else if (result.Kind == Value.Kinds.Double) {                  // FIXME: these allocate a lot of byte[] objects.                  // Should find a way to avoid this (have the caller pass the byte[]?).                  var bytes = new byte[8];                  stream.Read (bytes' 0' 8);                  result.doubleValue = BitConverter.ToDouble (bytes' 0);              } else if (result.Kind == Value.Kinds.String) {                  result.stringValue = ReadString(stream);              } else if (result.Kind == Value.Kinds.Bool) {                  result.boolValue = stream.ReadByte() == 1;              } else if (result.Kind == Value.Kinds.Null) {                  // Do nothing.              } else {                  Shovel.Utils.Panic ();              }
Magic Number,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadArrayOfTwoInts,The following statement contains a magic number: var array = new int[2];
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,Deserialize,The following statement contains a magic number: reader = (index) => {                 if (index < 0) {                     if (index == -1) {                         return null;                     } else if (index == -2) {                         return true;                     } else if (index == -3) {                         return false;                     } else {                         Shovel.Utils.Panic ();                         throw new InvalidOperationException ();                     }                 }                 if (objects [index] == null) {                     if (serArray [index] is string || serArray [index] is long || serArray [index] is double) {                         objects [index] = serArray [index];                     } else if (serArray [index] is Composite) {                         RebuildFromComposite (objects' index' (Composite)serArray [index]' reader' version);                     } else {                         Shovel.Utils.Panic ();                         throw new NotImplementedException ();                     }                 }                  return objects [index];             };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,Deserialize,The following statement contains a magic number: reader = (index) => {                 if (index < 0) {                     if (index == -1) {                         return null;                     } else if (index == -2) {                         return true;                     } else if (index == -3) {                         return false;                     } else {                         Shovel.Utils.Panic ();                         throw new InvalidOperationException ();                     }                 }                 if (objects [index] == null) {                     if (serArray [index] is string || serArray [index] is long || serArray [index] is double) {                         objects [index] = serArray [index];                     } else if (serArray [index] is Composite) {                         RebuildFromComposite (objects' index' (Composite)serArray [index]' reader' version);                     } else {                         Shovel.Utils.Panic ();                         throw new NotImplementedException ();                     }                 }                  return objects [index];             };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,ReadCompositeImpl,The following statement contains a magic number: var lengthInBytes = 4 * length;
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The following statement contains a magic number: if (version > 4)              {                  length -= 2;              }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The following statement contains a magic number: if (version > 4)              {                  length -= 2;              }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildShovelValueList,The following statement contains a magic number: if (version > 4)              {                  // The indirect get/set are stored as the last elements of the array.                  result.IndirectGet = RebuildShovelValue(reader(composite.Elements[length]));                  result.IndirectSet = RebuildShovelValue(reader(composite.Elements[length + 1]));              }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The following statement contains a magic number: if (version > 4)              {                  length -= 2;              }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The following statement contains a magic number: if (version > 4)              {                  length -= 2;              }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The following statement contains a magic number: for (var i = 0; i < length; i+=2) {                 var key = RebuildShovelValue (reader (composite.Elements [i]));                 var value = RebuildShovelValue (reader (composite.Elements [i + 1]));                 result [key] = value;             }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildHash,The following statement contains a magic number: if (version > 4)              {                  // The indirect get/set are stored as the last elements of the hash.                  result.IndirectGet = RebuildShovelValue(reader(composite.Elements[length]));                  result.IndirectSet = RebuildShovelValue(reader(composite.Elements[length + 1]));              }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildCallable,The following statement contains a magic number: result.Arity = (int?)(long?)reader (composite.Elements [2]);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildCallable,The following statement contains a magic number: result.ProgramCounter = (int?)(long?)reader (composite.Elements [3]);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildCallable,The following statement contains a magic number: result.Environment = (VmEnvironment)reader (composite.Elements [4]);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildNamedBlock,The following statement contains a magic number: result.Environment = (VmEnvironment)reader (composite.Elements [2]);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,RebuildEnvFrame,The following statement contains a magic number: result.IntroducedAtProgramCounter = (int)(long)reader (composite.Elements [2]);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeBool,The following statement contains a magic number: if (b) {                 return -2;             } else {                 return -3;             }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeBool,The following statement contains a magic number: if (b) {                 return -2;             } else {                 return -3;             }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeHash,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Hash'                  Elements = new int[dict.Count * 2 + 2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeHash,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Hash'                  Elements = new int[dict.Count * 2 + 2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeHash,The following statement contains a magic number: foreach (var kv in dict) {                 composite.Elements [cursor] = Serialize (kv.Key);                 composite.Elements [cursor + 1] = Serialize (kv.Value);                 cursor += 2;             }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeList,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.ShovelValueList'                  Elements = new int[list.Count + 2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Callable'                  Elements = new int[5]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: composite.Elements [2] = SerializeOne (callable.Arity);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: composite.Elements [3] = SerializeOne (callable.ProgramCounter);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeCallable,The following statement contains a magic number: composite.Elements [4] = Serialize (callable.Environment);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeReturnAddress,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.ReturnAddress'                  Elements = new int[2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeNamedBlock,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.NamedBlock'                 Elements = new int[3]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeNamedBlock,The following statement contains a magic number: composite.Elements [2] = Serialize (namedBlock.Environment);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeEnvironment,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.Environment'                  Elements = new int[2]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeEnvFrame,The following statement contains a magic number: var composite = new Composite {                  Kind = ObjectTypes.EnvFrame'                  Elements = new int[3]              };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeEnvFrame,The following statement contains a magic number: composite.Elements [2] = SerializeOne (frame.IntroducedAtProgramCounter);
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,SerializeStructInstance,The following statement contains a magic number: var composite = new Composite {                 Kind = ObjectTypes.StructInstance'                 Elements = new int[2]             };
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,WriteString,The following statement contains a magic number: if (bytes.Length <= 255) {                 bs.Write ((byte)Types.ShortString);                 bs.Write ((byte)bytes.Length);             } else {                 bs.Write ((byte)Types.String);                 bs.Write (bytes.Length);             }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,WriteComposite,The following statement contains a magic number: if (length < 255) {                 bs.Write ((byte)Types.ShortComposite);                 bs.Write ((byte)length);             } else {                 bs.Write ((byte)Types.Composite);                 bs.Write (length);             }
Magic Number,Shovel.Serialization,VmStateSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\VmStateSerializer.cs,WriteComposite,The following statement contains a magic number: var lengthInBytes = 4 * composite.Elements.Length;
Magic Number,Shovel.Serialization,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,DeserializeWithMd5CheckSum,The following statement contains a magic number: byte[] expectedMd5 = new byte[16];
Magic Number,Shovel.Serialization,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadInt,The following statement contains a magic number: var bytes = new byte[4];
Magic Number,Shovel.Serialization,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadInt,The following statement contains a magic number: ms.Read (bytes' 0' 4);
Magic Number,Shovel.Serialization,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadLong,The following statement contains a magic number: var bytes = new byte[8];
Magic Number,Shovel.Serialization,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\Utils.cs,ReadLong,The following statement contains a magic number: ms.Read (bytes' 0' 8);
Magic Number,Shovel.Compiler.Types,ParseTree,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Compiler\Types\ParseTree.cs,RenderToStringBuilder,The following statement contains a magic number: if (this.Children != null) {                 foreach (var child in this.Children) {                     child.RenderToStringBuilder (sb' indentation + 2);                 }             }
Missing Default,Shovel,Utils,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Utils.cs,GetNumericLabels,The following switch statement is missing a default case: switch (instruction.Opcode) {                 case Instruction.Opcodes.Jump:                     result.Add((int)instruction.Arguments);                     break;                 case Instruction.Opcodes.Fjump:                     result.Add((int)instruction.Arguments);                     break;                               case Instruction.Opcodes.Fn:                     result.Add (((int[])instruction.Arguments)[0]);                     break;                 case Instruction.Opcodes.Block:                     result.Add((int)instruction.Arguments);                     break;                 case Instruction.Opcodes.Tjump:                     result.Add((int)instruction.Arguments);                     break;                 }
Missing Default,Shovel.Vm,Vm,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Vm.cs,CallPrimitive,The following switch statement is missing a default case: switch (udpResult.After) {                 case UdpResult.AfterCall.Continue:                     vm.stack.Pop ();                     FinishPrimitiveCall (vm' numArgs' saveReturnAddress' udpResult.Result);                     break;                 case UdpResult.AfterCall.Nap:                     vm.stack.Pop ();                     FinishPrimitiveCall (vm' numArgs' saveReturnAddress' udpResult.Result);                     vm.shouldTakeANap = true;                     break;                 case UdpResult.AfterCall.NapAndRetryOnWakeUp:                     vm.shouldTakeANap = true;                     break;                 }
Missing Default,Shovel.Vm,Prim0,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Vm\Prim0.cs,DecodeTime,The following switch statement is missing a default case: switch (date.DayOfWeek) {             case DayOfWeek.Monday:                 result [dayOfWeekKey] = Value.MakeInt (1);                 break;             case DayOfWeek.Tuesday:                 result [dayOfWeekKey] = Value.MakeInt (2);                 break;             case DayOfWeek.Wednesday:                 result [dayOfWeekKey] = Value.MakeInt (3);                 break;             case DayOfWeek.Thursday:                 result [dayOfWeekKey] = Value.MakeInt (4);                 break;             case DayOfWeek.Friday:                 result [dayOfWeekKey] = Value.MakeInt (5);                 break;             case DayOfWeek.Saturday:                 result [dayOfWeekKey] = Value.MakeInt (6);                 break;             case DayOfWeek.Sunday:                 result [dayOfWeekKey] = Value.MakeInt (7);                 break;             }
Missing Default,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,ReadArguments,The following switch statement is missing a default case: switch (instruction.Opcode) {              case Instruction.Opcodes.VmVersion:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.VmSourcesMd5:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.VmBytecodeMd5:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.FileName:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.Prim0:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.Prim:                  instruction.Arguments = ReadString (s);                  break;              case Instruction.Opcodes.Const:                  instruction.Arguments = ReadConst (s);                  break;              case Instruction.Opcodes.Block:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Label:                  Shovel.Utils.Panic ();                  break;              case Instruction.Opcodes.Call:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.CallJ:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Lget:                  instruction.Arguments = ReadArrayOfTwoInts (s);                  break;              case Instruction.Opcodes.Fjump:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Jump:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Lset:                  instruction.Arguments = ReadArrayOfTwoInts (s);                  break;              case Instruction.Opcodes.Fn:                  instruction.Arguments = ReadArrayOfTwoInts (s);                  break;              case Instruction.Opcodes.NewFrame:                  instruction.Arguments = ReadArrayOfStrings (s);                  break;              case Instruction.Opcodes.Args:                  instruction.Arguments = Utils.ReadInt (s);                  break;              case Instruction.Opcodes.Tjump:                  instruction.Arguments = Utils.ReadInt (s);                  break;              }
Missing Default,Shovel.Serialization,BytecodeSerializer,C:\repos\mbrezu_Shovel\csharp\NShovel\Shovel\Serialization\BytecodeSerializer.cs,WriteArguments,The following switch statement is missing a default case: switch (instruction.Opcode) {              case Instruction.Opcodes.VmVersion:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.VmSourcesMd5:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.VmBytecodeMd5:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.FileName:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.Prim0:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.Prim:                  WriteString (stream' (string)instruction.Arguments);                  break;              case Instruction.Opcodes.Const:                  WriteConst (stream' (Value)instruction.Arguments);                  break;              case Instruction.Opcodes.Block:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Label:                  Shovel.Utils.Panic ();                  break;              case Instruction.Opcodes.Call:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.CallJ:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Lget:                  WriteArrayOfTwoInts (stream' instruction.Arguments);                  break;              case Instruction.Opcodes.Fjump:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Jump:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Lset:                  WriteArrayOfTwoInts (stream' instruction.Arguments);                  break;              case Instruction.Opcodes.Fn:                  WriteArrayOfTwoInts (stream' instruction.Arguments);                  break;              case Instruction.Opcodes.NewFrame:                  WriteArrayOfStrings (stream' (string[])instruction.Arguments);                  break;              case Instruction.Opcodes.Args:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              case Instruction.Opcodes.Tjump:                  Utils.WriteBytes (stream' BitConverter.GetBytes ((int)instruction.Arguments));                  break;              }
