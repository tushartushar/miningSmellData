Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,Cyclomatic complexity of the method is 9
Complex Method,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,DetermineKeys,Cyclomatic complexity of the method is 9
Long Parameter List,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,The method has 5 parameters.
Long Statement,VersionOne.Localization,Localizer,C:\repos\versionone_VersionOne.Localization\source\Localizer.cs,StripLiteralBraces,The length of the statement  "	return rxDoubleRightBrace.Replace (rxDoubleLeftBrace.Replace (input' LeftBracePlaceholderString)' RightBracePlaceholderString); " is 127.
Magic Number,VersionOne.Localization,TextTemplateSet,C:\repos\versionone_VersionOne.Localization\source\TextTemplateSet.cs,NextTemplate,The following statement contains a magic number: while ((line = NextLine (reader)) != null) {  	if (line.StartsWith (";"))  		continue;  	int eqindex = line.IndexOf ('=');  	while (eqindex >= 0 && eqindex + 1 < line.Length && line [eqindex + 1] == '=')  		eqindex = line.IndexOf ('='' eqindex + 2);  	if (eqindex < 0)  		continue;  	string tag = line.Substring (0' eqindex).Replace ("=="' "=");  	string translation = line.Substring (eqindex + 1);  	return new Template (tag' translation);  }  
Magic Number,VersionOne.Localization,TextTemplateSet,C:\repos\versionone_VersionOne.Localization\source\TextTemplateSet.cs,NextTemplate,The following statement contains a magic number: while (eqindex >= 0 && eqindex + 1 < line.Length && line [eqindex + 1] == '=')  	eqindex = line.IndexOf ('='' eqindex + 2);  
Magic Number,VersionOne.Localization,TextTemplateSet,C:\repos\versionone_VersionOne.Localization\source\TextTemplateSet.cs,NextTemplate,The following statement contains a magic number: eqindex = line.IndexOf ('='' eqindex + 2);  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,The following statement contains a magic number: if (startTag.Length != 2)  	throw new ApplicationException ("Start Tag must be 2 characters");  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,The following statement contains a magic number: for (; ;) {  	int c = input.Read ();  	if (c == -1)  		break;  	if (c != startTag [0] || input.Peek () != startTag [1])  		output.Write ((char)c);  	else {  		input.Read ();  		//consume the 2nd char of the startTag  		//build the word we want to resolve  		//if we hit EOF then it's just like we hit the endTag  		// if we hit the endTag' resolve the word and write it to output  		int pos = 0;  		for (; ;) {  			c = input.Read ();  			if (c == -1 || c == endTag [0])  				//end of file is just like endTag or end tag found  				break;  			if (pos == buffer.Length)  				Array.Resize (ref buffer' buffer.Length * 2);  			buffer [pos++] = (char)c;  		}  		//resolve the word and write it to the output  		string word = new string (buffer' 0' pos);  		string result = resolver.Resolve (word);  		output.Write (result);  	}  }  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,The following statement contains a magic number: if (c != startTag [0] || input.Peek () != startTag [1])  	output.Write ((char)c);  else {  	input.Read ();  	//consume the 2nd char of the startTag  	//build the word we want to resolve  	//if we hit EOF then it's just like we hit the endTag  	// if we hit the endTag' resolve the word and write it to output  	int pos = 0;  	for (; ;) {  		c = input.Read ();  		if (c == -1 || c == endTag [0])  			//end of file is just like endTag or end tag found  			break;  		if (pos == buffer.Length)  			Array.Resize (ref buffer' buffer.Length * 2);  		buffer [pos++] = (char)c;  	}  	//resolve the word and write it to the output  	string word = new string (buffer' 0' pos);  	string result = resolver.Resolve (word);  	output.Write (result);  }  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,The following statement contains a magic number: for (; ;) {  	c = input.Read ();  	if (c == -1 || c == endTag [0])  		//end of file is just like endTag or end tag found  		break;  	if (pos == buffer.Length)  		Array.Resize (ref buffer' buffer.Length * 2);  	buffer [pos++] = (char)c;  }  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,The following statement contains a magic number: if (pos == buffer.Length)  	Array.Resize (ref buffer' buffer.Length * 2);  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,Translate,The following statement contains a magic number: Array.Resize (ref buffer' buffer.Length * 2);  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,DetermineKeys,The following statement contains a magic number: if (startTag.Length != 2)  	throw new ApplicationException ("Start Tag must be 2 characters");  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,DetermineKeys,The following statement contains a magic number: for (; ;) {  	int c = input.Read ();  	if (c == -1)  		break;  	if (c == startTag [0] && input.Peek () == startTag [1]) {  		input.Read ();  		//consume the 2nd char of the startTag  		//build the word we want to resolve  		//if we hit EOF then it's just like we hit the endTag  		// if we hit the endTag' add the word to the result list  		int pos = 0;  		for (; ;) {  			c = input.Read ();  			if (c == -1 || c == endTag [0])  				//end of file is just like endTag or end tag found  				break;  			if (pos == buffer.Length)  				Array.Resize (ref buffer' buffer.Length * 2);  			buffer [pos++] = (char)c;  		}  		//add the word to the results list of found keys  		results.Add (new string (buffer' 0' pos));  	}  }  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,DetermineKeys,The following statement contains a magic number: if (c == startTag [0] && input.Peek () == startTag [1]) {  	input.Read ();  	//consume the 2nd char of the startTag  	//build the word we want to resolve  	//if we hit EOF then it's just like we hit the endTag  	// if we hit the endTag' add the word to the result list  	int pos = 0;  	for (; ;) {  		c = input.Read ();  		if (c == -1 || c == endTag [0])  			//end of file is just like endTag or end tag found  			break;  		if (pos == buffer.Length)  			Array.Resize (ref buffer' buffer.Length * 2);  		buffer [pos++] = (char)c;  	}  	//add the word to the results list of found keys  	results.Add (new string (buffer' 0' pos));  }  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,DetermineKeys,The following statement contains a magic number: for (; ;) {  	c = input.Read ();  	if (c == -1 || c == endTag [0])  		//end of file is just like endTag or end tag found  		break;  	if (pos == buffer.Length)  		Array.Resize (ref buffer' buffer.Length * 2);  	buffer [pos++] = (char)c;  }  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,DetermineKeys,The following statement contains a magic number: if (pos == buffer.Length)  	Array.Resize (ref buffer' buffer.Length * 2);  
Magic Number,VersionOne.Localization,Translator,C:\repos\versionone_VersionOne.Localization\source\Translator.cs,DetermineKeys,The following statement contains a magic number: Array.Resize (ref buffer' buffer.Length * 2);  
