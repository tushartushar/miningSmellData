Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DatabaseChange,MvcApplication,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\DatabaseChange\Global.asax.cs,Application_Start,The length of the statement  "            Database.SetInitializer<JobsDbContext>(new MigrateDatabaseToLatestVersion<JobsDbContext' DatabaseChange.Migrations.Configuration>()); " is 133.
Long Statement,DatabaseChange.Models,JobInfoRepository,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\DatabaseChange\Models\JobInfo.cs,GetData,The length of the statement  "            using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString)) " is 120.
Magic Number,DatabaseChange.Migrations,Configuration,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\DatabaseChange\Migrations\Configuration.cs,Seed,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  context.Jobs.Add(new JobInfo                  {                      Name = "Job " + i'                      Status = "Pending"'                      LastExecutionDate = DateTime.Now                  });              }
Magic Number,DatabaseChange.Models,JobInfoRepository,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\DatabaseChange\Models\JobInfo.cs,GetData,The following statement contains a magic number: using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))              {                  connection.Open();                  using (SqlCommand command = new SqlCommand(@"SELECT [JobID]'[Name]'[LastExecutionDate]'[Status]                 FROM [dbo].[JobInfoes]"' connection))                  {                      // Make sure the command object does not already have                      // a notification object associated with it.                      command.Notification = null;                        SqlDependency dependency = new SqlDependency(command);                      dependency.OnChange += new OnChangeEventHandler(dependency_OnChange);                        if (connection.State == ConnectionState.Closed)                          connection.Open();                        using (var reader = command.ExecuteReader())                          return reader.Cast<IDataRecord>()                              .Select(x => new JobInfo()                              {                                  JobID = x.GetInt32(0)'                                  Name = x.GetString(1)'                                  LastExecutionDate = x.GetDateTime(2)'                                  Status = x.GetString(3)                              }).ToList();                  }              }
Magic Number,DatabaseChange.Models,JobInfoRepository,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\DatabaseChange\Models\JobInfo.cs,GetData,The following statement contains a magic number: using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))              {                  connection.Open();                  using (SqlCommand command = new SqlCommand(@"SELECT [JobID]'[Name]'[LastExecutionDate]'[Status]                 FROM [dbo].[JobInfoes]"' connection))                  {                      // Make sure the command object does not already have                      // a notification object associated with it.                      command.Notification = null;                        SqlDependency dependency = new SqlDependency(command);                      dependency.OnChange += new OnChangeEventHandler(dependency_OnChange);                        if (connection.State == ConnectionState.Closed)                          connection.Open();                        using (var reader = command.ExecuteReader())                          return reader.Cast<IDataRecord>()                              .Select(x => new JobInfo()                              {                                  JobID = x.GetInt32(0)'                                  Name = x.GetString(1)'                                  LastExecutionDate = x.GetDateTime(2)'                                  Status = x.GetString(3)                              }).ToList();                  }              }
