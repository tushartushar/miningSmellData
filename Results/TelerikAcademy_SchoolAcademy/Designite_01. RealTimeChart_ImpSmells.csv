Implementation smell,Namespace,Class,File,Method,Description
Magic Number,RealTimeChart.Hubs,ChartData,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\RealTimeChart\Hubs\ChartData.cs,TimerCallBack,The following statement contains a magic number: lock (_updatePointsLock)              {                  if (!_updatingData)                  {                      _updatingData = true;                        // Randomly choose whether to udpate this point or not                                 if (_updateOrNotRandom.Next(0' 3) == 1)                      {                          BroadcastChartData(UpdateData());                      }                      _updatingData = false;                  }              }
Magic Number,RealTimeChart.Hubs,ChartData,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\RealTimeChart\Hubs\ChartData.cs,UpdateData,The following statement contains a magic number: if (_points.TryDequeue(out point))              {                  // Update the point price by a random factor of the range percent                  var random = new Random();                  var pos = random.NextDouble() > .51;                  var change = random.Next((int)point / 2);                  change = pos ? change : -change;                  point += change;                  if (point < _minPoint)                  {                      point = _minPoint;                  }                  if (point > _maxPoint)                  {                      point = _maxPoint;                  }                  _points.Enqueue(point);              }
Magic Number,RealTimeChart.Hubs,ChartData,C:\repos\TelerikAcademy_SchoolAcademy\2015-02-ASP.NET-MVC\07. SignalR\RealTimeChart\Hubs\ChartData.cs,UpdateData,The following statement contains a magic number: if (_points.TryDequeue(out point))              {                  // Update the point price by a random factor of the range percent                  var random = new Random();                  var pos = random.NextDouble() > .51;                  var change = random.Next((int)point / 2);                  change = pos ? change : -change;                  point += change;                  if (point < _minPoint)                  {                      point = _minPoint;                  }                  if (point > _maxPoint)                  {                      point = _maxPoint;                  }                  _points.Enqueue(point);              }
