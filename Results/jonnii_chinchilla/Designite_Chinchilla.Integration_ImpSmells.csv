Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,Cyclomatic complexity of the method is 8
Complex Method,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,Cyclomatic complexity of the method is 7
Complex Method,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,Cyclomatic complexity of the method is 7
Long Statement,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The length of the statement  "		var subscriptionBuilder = new Action<ISubscriptionBuilder> (b => b.SetTopology (new CustomSubscribeMessageTopology ())); " is 120.
Long Statement,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The length of the statement  "		var publisherBuilder = new Action<IPublisherBuilder<HelloWorldMessage>> (b => b.SetTopology (new CustomSubscribeMessageTopology ())); " is 133.
Long Statement,Chinchilla.Integration.Features,PausableWorkersFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PausableWorkersFeature.cs,ShouldBeAbleToPauseWorker,The length of the statement  "		var subscription = bus.Subscribe<HelloWorldMessage> (m => Interlocked.Increment (ref seen)' c => c.DeliverUsing<WorkerPoolDeliveryStrategy> ()); " is 144.
Long Statement,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,The length of the statement  "		bus.Subscribe ((HelloWorldMessage hwm) => Interlocked.Increment (ref numReceived)' o => o.SubscribeOn ("queue-1"' "queue-2").SetTopology (new SharedSubscriptionTopology ())); " is 174.
Long Statement,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldRunAdditionalRegisteredListeners,The length of the statement  "		bus.Subscribe<HelloWorldMessage> ((hwm' ctx) => ctx.Delivery.RegisterDeliveryListener (new ActionDeliveryListener (() => didRunAfterAccept = true))); " is 149.
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		Interlocked.Increment (ref numReceived);  		if (numReceived == 50) {  			Console.WriteLine ("Disconnecting with a vengeance");  			var connections = admin.Connections ();  			admin.Delete (connections.First ());  		}  	});  	var subscription = bus.Subscribe (handler);  	using (subscription) {  		Console.WriteLine ("Publishing 100 messages");  		var publisher = bus.CreatePublisher<HelloWorldMessage> ();  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  	}  	Assert.That (numReceived' Is.GreaterThanOrEqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		Interlocked.Increment (ref numReceived);  		if (numReceived == 50) {  			Console.WriteLine ("Disconnecting with a vengeance");  			var connections = admin.Connections ();  			admin.Delete (connections.First ());  		}  	});  	var subscription = bus.Subscribe (handler);  	using (subscription) {  		Console.WriteLine ("Publishing 100 messages");  		var publisher = bus.CreatePublisher<HelloWorldMessage> ();  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  	}  	Assert.That (numReceived' Is.GreaterThanOrEqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		Interlocked.Increment (ref numReceived);  		if (numReceived == 50) {  			Console.WriteLine ("Disconnecting with a vengeance");  			var connections = admin.Connections ();  			admin.Delete (connections.First ());  		}  	});  	var subscription = bus.Subscribe (handler);  	using (subscription) {  		Console.WriteLine ("Publishing 100 messages");  		var publisher = bus.CreatePublisher<HelloWorldMessage> ();  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  	}  	Assert.That (numReceived' Is.GreaterThanOrEqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: if (numReceived == 50) {  	Console.WriteLine ("Disconnecting with a vengeance");  	var connections = admin.Connections ();  	admin.Delete (connections.First ());  }  
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (subscription) {  	Console.WriteLine ("Publishing 100 messages");  	var publisher = bus.CreatePublisher<HelloWorldMessage> ();  	for (var i = 0; i < 100; ++i) {  		publisher.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  }  
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	publisher.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: Assert.That (numReceived' Is.GreaterThanOrEqualTo (100));  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var subscriber = bus.Subscribe (new HelloWorldMessageConsumer ())) {  		for (var i = 0; i < 100; ++i) {  			bus.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  		Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var subscriber = bus.Subscribe (new HelloWorldMessageConsumer ())) {  		for (var i = 0; i < 100; ++i) {  			bus.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  		Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: using (var subscriber = bus.Subscribe (new HelloWorldMessageConsumer ())) {  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: using (var subscriber = bus.Subscribe (new HelloWorldMessageConsumer ())) {  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	bus.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var subscriber = bus.Subscribe<HelloWorldMessageConsumer> ()) {  		for (var i = 0; i < 100; ++i) {  			bus.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  		Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var subscriber = bus.Subscribe<HelloWorldMessageConsumer> ()) {  		for (var i = 0; i < 100; ++i) {  			bus.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  		Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: using (var subscriber = bus.Subscribe<HelloWorldMessageConsumer> ()) {  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: using (var subscriber = bus.Subscribe<HelloWorldMessageConsumer> ()) {  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	bus.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: Assert.That (subscriber.State.TotalAcceptedMessages ()' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var onMessage = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		Interlocked.Increment (ref numReceived);  	});  	var subscriptionBuilder = new Action<ISubscriptionBuilder> (b => b.SetTopology (new CustomSubscribeMessageTopology ()));  	var publisherBuilder = new Action<IPublisherBuilder<HelloWorldMessage>> (b => b.SetTopology (new CustomSubscribeMessageTopology ()));  	using (bus.Subscribe (onMessage' subscriptionBuilder)) {  		using (var publisher = bus.CreatePublisher (publisherBuilder)) {  			for (var i = 0; i < 100; ++i) {  				publisher.Publish (new HelloWorldMessage {  					Message = i % 2 == 0 ? "even" : "odd"  				});  			}  		}  		WaitForDelivery ();  	}  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("even"));  	Assert.That (numReceived' Is.EqualTo (50));  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var onMessage = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		Interlocked.Increment (ref numReceived);  	});  	var subscriptionBuilder = new Action<ISubscriptionBuilder> (b => b.SetTopology (new CustomSubscribeMessageTopology ()));  	var publisherBuilder = new Action<IPublisherBuilder<HelloWorldMessage>> (b => b.SetTopology (new CustomSubscribeMessageTopology ()));  	using (bus.Subscribe (onMessage' subscriptionBuilder)) {  		using (var publisher = bus.CreatePublisher (publisherBuilder)) {  			for (var i = 0; i < 100; ++i) {  				publisher.Publish (new HelloWorldMessage {  					Message = i % 2 == 0 ? "even" : "odd"  				});  			}  		}  		WaitForDelivery ();  	}  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("even"));  	Assert.That (numReceived' Is.EqualTo (50));  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var onMessage = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		Interlocked.Increment (ref numReceived);  	});  	var subscriptionBuilder = new Action<ISubscriptionBuilder> (b => b.SetTopology (new CustomSubscribeMessageTopology ()));  	var publisherBuilder = new Action<IPublisherBuilder<HelloWorldMessage>> (b => b.SetTopology (new CustomSubscribeMessageTopology ()));  	using (bus.Subscribe (onMessage' subscriptionBuilder)) {  		using (var publisher = bus.CreatePublisher (publisherBuilder)) {  			for (var i = 0; i < 100; ++i) {  				publisher.Publish (new HelloWorldMessage {  					Message = i % 2 == 0 ? "even" : "odd"  				});  			}  		}  		WaitForDelivery ();  	}  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("even"));  	Assert.That (numReceived' Is.EqualTo (50));  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (bus.Subscribe (onMessage' subscriptionBuilder)) {  	using (var publisher = bus.CreatePublisher (publisherBuilder)) {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage {  				Message = i % 2 == 0 ? "even" : "odd"  			});  		}  	}  	WaitForDelivery ();  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (bus.Subscribe (onMessage' subscriptionBuilder)) {  	using (var publisher = bus.CreatePublisher (publisherBuilder)) {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage {  				Message = i % 2 == 0 ? "even" : "odd"  			});  		}  	}  	WaitForDelivery ();  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var publisher = bus.CreatePublisher (publisherBuilder)) {  	for (var i = 0; i < 100; ++i) {  		publisher.Publish (new HelloWorldMessage {  			Message = i % 2 == 0 ? "even" : "odd"  		});  	}  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var publisher = bus.CreatePublisher (publisherBuilder)) {  	for (var i = 0; i < 100; ++i) {  		publisher.Publish (new HelloWorldMessage {  			Message = i % 2 == 0 ? "even" : "odd"  		});  	}  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	publisher.Publish (new HelloWorldMessage {  		Message = i % 2 == 0 ? "even" : "odd"  	});  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	publisher.Publish (new HelloWorldMessage {  		Message = i % 2 == 0 ? "even" : "odd"  	});  }  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: publisher.Publish (new HelloWorldMessage {  	Message = i % 2 == 0 ? "even" : "odd"  });  
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: Assert.That (numReceived' Is.EqualTo (50));  
Magic Number,Chinchilla.Integration.Features,PublisherConfirmsFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublisherConfirmsFeature.cs,ShouldCreatePublisherWithoutConfirms,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var publisher = bus.CreatePublisher<HelloWorldMessage> (p => p.Confirm (false));  	var receipts = Enumerable.Range (0' 100).Select (_ => publisher.Publish (new HelloWorldMessage ())).ToArray ();  	publisher.Dispose ();  	Assert.That (receipts.All (r => r.Status == PublishStatus.None));  }  
Magic Number,Chinchilla.Integration.Features,PublisherConfirmsFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublisherConfirmsFeature.cs,ShouldWaitForAllMessagesToBeConfirmedWhenDisposing,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var publisher = bus.CreatePublisher<HelloWorldMessage> (p => p.Confirm (true));  	var receipts = Enumerable.Range (0' 100).Select (_ => publisher.Publish (new HelloWorldMessage ())).ToArray ();  	publisher.Dispose ();  	Assert.That (receipts.All (r => r.IsConfirmed));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage ());  		}  		Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage ());  		}  		Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  	for (var i = 0; i < 100; ++i) {  		publisher.Publish (new HelloWorldMessage ());  	}  	Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  	for (var i = 0; i < 100; ++i) {  		publisher.Publish (new HelloWorldMessage ());  	}  	Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	publisher.Publish (new HelloWorldMessage ());  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var publisher = bus.CreatePublisher<HelloWorldMessage> (o => o.RouteWith<CustomRouter> ());  	using (publisher) {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage ());  		}  		Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var publisher = bus.CreatePublisher<HelloWorldMessage> (o => o.RouteWith<CustomRouter> ());  	using (publisher) {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage ());  		}  		Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  	}  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: using (publisher) {  	for (var i = 0; i < 100; ++i) {  		publisher.Publish (new HelloWorldMessage ());  	}  	Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: using (publisher) {  	for (var i = 0; i < 100; ++i) {  		publisher.Publish (new HelloWorldMessage ());  	}  	Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	publisher.Publish (new HelloWorldMessage ());  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: Assert.That (publisher.NumPublishedMessages' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  		var threads = Enumerable.Range (0' 10).Select (_ => new Thread (() => {  			for (var i = 0; i < 100; ++i) {  				publisher.Publish (new HelloWorldMessage ());  			}  		})).ToArray ();  		foreach (var thread in threads) {  			thread.Start ();  		}  		foreach (var thread in threads) {  			thread.Join ();  		}  		WaitForDelivery ();  		Assert.That (publisher.NumPublishedMessages' Is.EqualTo (1000));  	}  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  		var threads = Enumerable.Range (0' 10).Select (_ => new Thread (() => {  			for (var i = 0; i < 100; ++i) {  				publisher.Publish (new HelloWorldMessage ());  			}  		})).ToArray ();  		foreach (var thread in threads) {  			thread.Start ();  		}  		foreach (var thread in threads) {  			thread.Join ();  		}  		WaitForDelivery ();  		Assert.That (publisher.NumPublishedMessages' Is.EqualTo (1000));  	}  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  		var threads = Enumerable.Range (0' 10).Select (_ => new Thread (() => {  			for (var i = 0; i < 100; ++i) {  				publisher.Publish (new HelloWorldMessage ());  			}  		})).ToArray ();  		foreach (var thread in threads) {  			thread.Start ();  		}  		foreach (var thread in threads) {  			thread.Join ();  		}  		WaitForDelivery ();  		Assert.That (publisher.NumPublishedMessages' Is.EqualTo (1000));  	}  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  	var threads = Enumerable.Range (0' 10).Select (_ => new Thread (() => {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage ());  		}  	})).ToArray ();  	foreach (var thread in threads) {  		thread.Start ();  	}  	foreach (var thread in threads) {  		thread.Join ();  	}  	WaitForDelivery ();  	Assert.That (publisher.NumPublishedMessages' Is.EqualTo (1000));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  	var threads = Enumerable.Range (0' 10).Select (_ => new Thread (() => {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage ());  		}  	})).ToArray ();  	foreach (var thread in threads) {  		thread.Start ();  	}  	foreach (var thread in threads) {  		thread.Join ();  	}  	WaitForDelivery ();  	Assert.That (publisher.NumPublishedMessages' Is.EqualTo (1000));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var publisher = bus.CreatePublisher<HelloWorldMessage> ()) {  	var threads = Enumerable.Range (0' 10).Select (_ => new Thread (() => {  		for (var i = 0; i < 100; ++i) {  			publisher.Publish (new HelloWorldMessage ());  		}  	})).ToArray ();  	foreach (var thread in threads) {  		thread.Start ();  	}  	foreach (var thread in threads) {  		thread.Join ();  	}  	WaitForDelivery ();  	Assert.That (publisher.NumPublishedMessages' Is.EqualTo (1000));  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	publisher.Publish (new HelloWorldMessage ());  }  
Magic Number,Chinchilla.Integration.Features,PublishFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: Assert.That (publisher.NumPublishedMessages' Is.EqualTo (1000));  
Magic Number,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var numReceived = 0;  	bus.Subscribe ((HelloWorldMessage hwm) => Interlocked.Increment (ref numReceived)' o => o.SubscribeOn ("queue-1"' "queue-2").SetTopology (new SharedSubscriptionTopology ()));  	using (var first = bus.CreatePublisher<HelloWorldMessage> (o => o.PublishOn ("exchange-queue-1")))  		using (var second = bus.CreatePublisher<HelloWorldMessage> (o => o.PublishOn ("exchange-queue-2"))) {  			for (var i = 0; i < 25; ++i) {  				first.Publish (new HelloWorldMessage {  					Message = "subscribe!"  				});  				second.Publish (new HelloWorldMessage {  					Message = "subscribe!"  				});  			}  		}  	WaitForDelivery ();  	Assert.That (numReceived' Is.EqualTo (50));  }  
Magic Number,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var numReceived = 0;  	bus.Subscribe ((HelloWorldMessage hwm) => Interlocked.Increment (ref numReceived)' o => o.SubscribeOn ("queue-1"' "queue-2").SetTopology (new SharedSubscriptionTopology ()));  	using (var first = bus.CreatePublisher<HelloWorldMessage> (o => o.PublishOn ("exchange-queue-1")))  		using (var second = bus.CreatePublisher<HelloWorldMessage> (o => o.PublishOn ("exchange-queue-2"))) {  			for (var i = 0; i < 25; ++i) {  				first.Publish (new HelloWorldMessage {  					Message = "subscribe!"  				});  				second.Publish (new HelloWorldMessage {  					Message = "subscribe!"  				});  			}  		}  	WaitForDelivery ();  	Assert.That (numReceived' Is.EqualTo (50));  }  
Magic Number,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: using (var first = bus.CreatePublisher<HelloWorldMessage> (o => o.PublishOn ("exchange-queue-1")))  	using (var second = bus.CreatePublisher<HelloWorldMessage> (o => o.PublishOn ("exchange-queue-2"))) {  		for (var i = 0; i < 25; ++i) {  			first.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  			second.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  	}  
Magic Number,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: using (var second = bus.CreatePublisher<HelloWorldMessage> (o => o.PublishOn ("exchange-queue-2"))) {  	for (var i = 0; i < 25; ++i) {  		first.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  		second.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  }  
Magic Number,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: for (var i = 0; i < 25; ++i) {  	first.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  	second.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,SharedSubscriptionFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SharedSubscriptionFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: Assert.That (numReceived' Is.EqualTo (50));  
Magic Number,Chinchilla.Integration.Features,StateQueryFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\StateQueryFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var handler = new Action<HelloWorldMessage> (hwm => {  	});  	var subscription = bus.Subscribe (handler' o => o.DeliverUsing<WorkerPoolDeliveryStrategy> (s => s.NumWorkers = 5));  	WaitForDelivery ();  	var state = subscription.State;  	var queueState = state.QueueStates.Single ();  	Assert.That (queueState.NumAcceptedMessages' Is.EqualTo (0));  	Assert.That (queueState.NumFailedMessages' Is.EqualTo (0));  	var workerStates = state.Workers;  	Assert.That (workerStates.Length' Is.EqualTo (5));  	foreach (var workerState in workerStates) {  		Assert.That (workerState.Status' Is.EqualTo (WorkerStatus.Idle));  	}  	subscription.Dispose ();  	state = subscription.State;  	workerStates = state.Workers;  	Assert.That (workerStates.Length' Is.EqualTo (5));  	foreach (var workerState in workerStates) {  		Assert.That (workerState.Status' Is.EqualTo (WorkerStatus.Stopped));  	}  }  
Magic Number,Chinchilla.Integration.Features,StateQueryFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\StateQueryFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var handler = new Action<HelloWorldMessage> (hwm => {  	});  	var subscription = bus.Subscribe (handler' o => o.DeliverUsing<WorkerPoolDeliveryStrategy> (s => s.NumWorkers = 5));  	WaitForDelivery ();  	var state = subscription.State;  	var queueState = state.QueueStates.Single ();  	Assert.That (queueState.NumAcceptedMessages' Is.EqualTo (0));  	Assert.That (queueState.NumFailedMessages' Is.EqualTo (0));  	var workerStates = state.Workers;  	Assert.That (workerStates.Length' Is.EqualTo (5));  	foreach (var workerState in workerStates) {  		Assert.That (workerState.Status' Is.EqualTo (WorkerStatus.Idle));  	}  	subscription.Dispose ();  	state = subscription.State;  	workerStates = state.Workers;  	Assert.That (workerStates.Length' Is.EqualTo (5));  	foreach (var workerState in workerStates) {  		Assert.That (workerState.Status' Is.EqualTo (WorkerStatus.Stopped));  	}  }  
Magic Number,Chinchilla.Integration.Features,StateQueryFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\StateQueryFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var handler = new Action<HelloWorldMessage> (hwm => {  	});  	var subscription = bus.Subscribe (handler' o => o.DeliverUsing<WorkerPoolDeliveryStrategy> (s => s.NumWorkers = 5));  	WaitForDelivery ();  	var state = subscription.State;  	var queueState = state.QueueStates.Single ();  	Assert.That (queueState.NumAcceptedMessages' Is.EqualTo (0));  	Assert.That (queueState.NumFailedMessages' Is.EqualTo (0));  	var workerStates = state.Workers;  	Assert.That (workerStates.Length' Is.EqualTo (5));  	foreach (var workerState in workerStates) {  		Assert.That (workerState.Status' Is.EqualTo (WorkerStatus.Idle));  	}  	subscription.Dispose ();  	state = subscription.State;  	workerStates = state.Workers;  	Assert.That (workerStates.Length' Is.EqualTo (5));  	foreach (var workerState in workerStates) {  		Assert.That (workerState.Status' Is.EqualTo (WorkerStatus.Stopped));  	}  }  
Magic Number,Chinchilla.Integration.Features,StateQueryFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\StateQueryFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: Assert.That (workerStates.Length' Is.EqualTo (5));  
Magic Number,Chinchilla.Integration.Features,StateQueryFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\StateQueryFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: Assert.That (workerStates.Length' Is.EqualTo (5));  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	bus.Subscribe ((HelloWorldMessage hwm) => {  		lastReceived = hwm;  		++numReceived;  	});  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  	Assert.That (numReceived' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	bus.Subscribe ((HelloWorldMessage hwm) => {  		lastReceived = hwm;  		++numReceived;  	});  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  	Assert.That (numReceived' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	bus.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldReceivedPublishedMessage,The following statement contains a magic number: Assert.That (numReceived' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		++numReceived;  	});  	bus.Subscribe (handler' o => o.DeliverUsing<WorkerPoolDeliveryStrategy> (s => s.NumWorkers = 5));  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  	Assert.That (numReceived' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		++numReceived;  	});  	bus.Subscribe (handler' o => o.DeliverUsing<WorkerPoolDeliveryStrategy> (s => s.NumWorkers = 5));  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  	Assert.That (numReceived' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		++numReceived;  	});  	bus.Subscribe (handler' o => o.DeliverUsing<WorkerPoolDeliveryStrategy> (s => s.NumWorkers = 5));  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  	Assert.That (numReceived' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: bus.Subscribe (handler' o => o.DeliverUsing<WorkerPoolDeliveryStrategy> (s => s.NumWorkers = 5));  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	bus.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithWorkerPoolStrategy,The following statement contains a magic number: Assert.That (numReceived' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithTaskPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		++numReceived;  	});  	using (var subscription = bus.Subscribe (handler' o => o.DeliverUsing<TaskDeliveryStrategy> ())) {  		for (var i = 0; i < 100; ++i) {  			bus.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  		Assert.That (lastReceived' Is.Not.Null);  		Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  		Assert.That (numReceived' Is.EqualTo (100));  		Assert.That (subscription.State.Workers.Count ()' Is.EqualTo (0));  	}  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithTaskPoolStrategy,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	HelloWorldMessage lastReceived = null;  	var numReceived = 0;  	var handler = new Action<HelloWorldMessage> (hwm => {  		lastReceived = hwm;  		++numReceived;  	});  	using (var subscription = bus.Subscribe (handler' o => o.DeliverUsing<TaskDeliveryStrategy> ())) {  		for (var i = 0; i < 100; ++i) {  			bus.Publish (new HelloWorldMessage {  				Message = "subscribe!"  			});  		}  		WaitForDelivery ();  		Assert.That (lastReceived' Is.Not.Null);  		Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  		Assert.That (numReceived' Is.EqualTo (100));  		Assert.That (subscription.State.Workers.Count ()' Is.EqualTo (0));  	}  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithTaskPoolStrategy,The following statement contains a magic number: using (var subscription = bus.Subscribe (handler' o => o.DeliverUsing<TaskDeliveryStrategy> ())) {  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  	Assert.That (numReceived' Is.EqualTo (100));  	Assert.That (subscription.State.Workers.Count ()' Is.EqualTo (0));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithTaskPoolStrategy,The following statement contains a magic number: using (var subscription = bus.Subscribe (handler' o => o.DeliverUsing<TaskDeliveryStrategy> ())) {  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (lastReceived' Is.Not.Null);  	Assert.That (lastReceived.Message' Is.EqualTo ("subscribe!"));  	Assert.That (numReceived' Is.EqualTo (100));  	Assert.That (subscription.State.Workers.Count ()' Is.EqualTo (0));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithTaskPoolStrategy,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	bus.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithTaskPoolStrategy,The following statement contains a magic number: Assert.That (numReceived' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithCallbackWithContext,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var numReceived = 0;  	bus.Subscribe<HelloWorldMessage> ((hwm' ctx) => {  		++numReceived;  		Assert.That (ctx' Is.Not.Null);  	});  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (numReceived' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithCallbackWithContext,The following statement contains a magic number: using (var bus = Depot.Connect ("localhost/integration")) {  	var numReceived = 0;  	bus.Subscribe<HelloWorldMessage> ((hwm' ctx) => {  		++numReceived;  		Assert.That (ctx' Is.Not.Null);  	});  	for (var i = 0; i < 100; ++i) {  		bus.Publish (new HelloWorldMessage {  			Message = "subscribe!"  		});  	}  	WaitForDelivery ();  	Assert.That (numReceived' Is.EqualTo (100));  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithCallbackWithContext,The following statement contains a magic number: for (var i = 0; i < 100; ++i) {  	bus.Publish (new HelloWorldMessage {  		Message = "subscribe!"  	});  }  
Magic Number,Chinchilla.Integration.Features,SubscribeFeature,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\SubscribeFeature.cs,ShouldCreateSubscriberWithCallbackWithContext,The following statement contains a magic number: Assert.That (numReceived' Is.EqualTo (100));  
Magic Number,Chinchilla.Integration.Features,WithApi,D:\newReposJune17\jonnii_chinchilla\src\Chinchilla.Integration\Features\WithApi.cs,WaitForDelivery,The following statement contains a magic number: Thread.Sleep (500);  
