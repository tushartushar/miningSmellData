Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Chinchilla.Integration,Feature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Feature.cs,WaitFor,The following statement contains a magic number: return Task.WhenAny(WaitForInner(condition)' Task.Delay(TimeSpan.FromSeconds(5)));
Magic Number,Chinchilla.Integration,Feature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Feature.cs,WaitForInner,The following statement contains a magic number: while (!condition())              {                  await Task.Delay(10).ConfigureAwait(false);              }
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (var bus = Depot.Connect($"localhost/{vhost}"))              {                  var numReceived = 0;                  var handler = new Action<HelloWorldMessage>(hwm =>                  {                      Interlocked.Increment(ref numReceived);                        if (numReceived == 50)                      {                          var connections = Admin.ConnectionsAsync().Result;                          Admin.DeleteAsync(connections.First()).Wait();                      }                  });                    var subscription = bus.Subscribe(handler);                    using (subscription)                  {                      var publisher = bus.CreatePublisher<HelloWorldMessage>();                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        await WaitFor(() => numReceived >= 100);                  }                    Assert.True(numReceived >= 100);              }
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (var bus = Depot.Connect($"localhost/{vhost}"))              {                  var numReceived = 0;                  var handler = new Action<HelloWorldMessage>(hwm =>                  {                      Interlocked.Increment(ref numReceived);                        if (numReceived == 50)                      {                          var connections = Admin.ConnectionsAsync().Result;                          Admin.DeleteAsync(connections.First()).Wait();                      }                  });                    var subscription = bus.Subscribe(handler);                    using (subscription)                  {                      var publisher = bus.CreatePublisher<HelloWorldMessage>();                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        await WaitFor(() => numReceived >= 100);                  }                    Assert.True(numReceived >= 100);              }
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (var bus = Depot.Connect($"localhost/{vhost}"))              {                  var numReceived = 0;                  var handler = new Action<HelloWorldMessage>(hwm =>                  {                      Interlocked.Increment(ref numReceived);                        if (numReceived == 50)                      {                          var connections = Admin.ConnectionsAsync().Result;                          Admin.DeleteAsync(connections.First()).Wait();                      }                  });                    var subscription = bus.Subscribe(handler);                    using (subscription)                  {                      var publisher = bus.CreatePublisher<HelloWorldMessage>();                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        await WaitFor(() => numReceived >= 100);                  }                    Assert.True(numReceived >= 100);              }
Magic Number,Chinchilla.Integration.Features,ConnectionFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConnectionFeature.cs,ShouldSurviveBeingDisconnected,The following statement contains a magic number: using (var bus = Depot.Connect($"localhost/{vhost}"))              {                  var numReceived = 0;                  var handler = new Action<HelloWorldMessage>(hwm =>                  {                      Interlocked.Increment(ref numReceived);                        if (numReceived == 50)                      {                          var connections = Admin.ConnectionsAsync().Result;                          Admin.DeleteAsync(connections.First()).Wait();                      }                  });                    var subscription = bus.Subscribe(handler);                    using (subscription)                  {                      var publisher = bus.CreatePublisher<HelloWorldMessage>();                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        await WaitFor(() => numReceived >= 100);                  }                    Assert.True(numReceived >= 100);              }
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var subscriber = bus.Subscribe(new HelloWorldMessageConsumer()))                  {                      for (var i = 0; i < 100; ++i)                      {                          bus.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        var s = subscriber;                      await WaitFor(() => s.State.TotalAcceptedMessages() == 100);                        Assert.Equal(100' subscriber.State.TotalAcceptedMessages());                  }              }
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var subscriber = bus.Subscribe(new HelloWorldMessageConsumer()))                  {                      for (var i = 0; i < 100; ++i)                      {                          bus.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        var s = subscriber;                      await WaitFor(() => s.State.TotalAcceptedMessages() == 100);                        Assert.Equal(100' subscriber.State.TotalAcceptedMessages());                  }              }
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerInstance,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var subscriber = bus.Subscribe(new HelloWorldMessageConsumer()))                  {                      for (var i = 0; i < 100; ++i)                      {                          bus.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        var s = subscriber;                      await WaitFor(() => s.State.TotalAcceptedMessages() == 100);                        Assert.Equal(100' subscriber.State.TotalAcceptedMessages());                  }              }
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var subscriber = bus.Subscribe<HelloWorldMessageConsumer>())                  {                      for (var i = 0; i < 100; ++i)                      {                          bus.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        var s = subscriber;                      await WaitFor(() => s.State.TotalAcceptedMessages() > 100);                        Assert.Equal(100' subscriber.State.TotalAcceptedMessages());                  }              }
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var subscriber = bus.Subscribe<HelloWorldMessageConsumer>())                  {                      for (var i = 0; i < 100; ++i)                      {                          bus.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        var s = subscriber;                      await WaitFor(() => s.State.TotalAcceptedMessages() > 100);                        Assert.Equal(100' subscriber.State.TotalAcceptedMessages());                  }              }
Magic Number,Chinchilla.Integration.Features,ConsumerFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\ConsumerFeature.cs,ShouldSubscribeWithConsumerType,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var subscriber = bus.Subscribe<HelloWorldMessageConsumer>())                  {                      for (var i = 0; i < 100; ++i)                      {                          bus.Publish(new HelloWorldMessage { Message = "subscribe!" });                      }                        var s = subscriber;                      await WaitFor(() => s.State.TotalAcceptedMessages() > 100);                        Assert.Equal(100' subscriber.State.TotalAcceptedMessages());                  }              }
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var bus = await CreateBus())              {                  HelloWorldMessage lastReceived = null;                  var numReceived = 0;                    var onMessage = new Action<HelloWorldMessage>(hwm => { lastReceived = hwm; Interlocked.Increment(ref numReceived); });                  var subscriptionBuilder = new Action<ISubscriptionBuilder>(b =>                      b.SetTopology(new CustomSubscribeMessageTopology())                  );                    var publisherBuilder = new Action<IPublisherBuilder<HelloWorldMessage>>(b =>                      b.SetTopology(new CustomSubscribeMessageTopology())                  );                    using (bus.Subscribe(onMessage' subscriptionBuilder))                  {                      using (var publisher = bus.CreatePublisher(publisherBuilder))                      {                          for (var i = 0; i < 100; ++i)                          {                              publisher.Publish(new HelloWorldMessage { Message = i % 2 == 0 ? "even" : "odd" });                          }                      }                        await WaitFor(() => lastReceived != null);                  }                    Assert.NotNull(lastReceived);                  Assert.Equal("even"' lastReceived.Message);                  Assert.Equal(50' numReceived);              }
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var bus = await CreateBus())              {                  HelloWorldMessage lastReceived = null;                  var numReceived = 0;                    var onMessage = new Action<HelloWorldMessage>(hwm => { lastReceived = hwm; Interlocked.Increment(ref numReceived); });                  var subscriptionBuilder = new Action<ISubscriptionBuilder>(b =>                      b.SetTopology(new CustomSubscribeMessageTopology())                  );                    var publisherBuilder = new Action<IPublisherBuilder<HelloWorldMessage>>(b =>                      b.SetTopology(new CustomSubscribeMessageTopology())                  );                    using (bus.Subscribe(onMessage' subscriptionBuilder))                  {                      using (var publisher = bus.CreatePublisher(publisherBuilder))                      {                          for (var i = 0; i < 100; ++i)                          {                              publisher.Publish(new HelloWorldMessage { Message = i % 2 == 0 ? "even" : "odd" });                          }                      }                        await WaitFor(() => lastReceived != null);                  }                    Assert.NotNull(lastReceived);                  Assert.Equal("even"' lastReceived.Message);                  Assert.Equal(50' numReceived);              }
Magic Number,Chinchilla.Integration.Features,CustomTopologyFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\CustomTopologyFeature.cs,ShouldSubscribeWithCustomTopology,The following statement contains a magic number: using (var bus = await CreateBus())              {                  HelloWorldMessage lastReceived = null;                  var numReceived = 0;                    var onMessage = new Action<HelloWorldMessage>(hwm => { lastReceived = hwm; Interlocked.Increment(ref numReceived); });                  var subscriptionBuilder = new Action<ISubscriptionBuilder>(b =>                      b.SetTopology(new CustomSubscribeMessageTopology())                  );                    var publisherBuilder = new Action<IPublisherBuilder<HelloWorldMessage>>(b =>                      b.SetTopology(new CustomSubscribeMessageTopology())                  );                    using (bus.Subscribe(onMessage' subscriptionBuilder))                  {                      using (var publisher = bus.CreatePublisher(publisherBuilder))                      {                          for (var i = 0; i < 100; ++i)                          {                              publisher.Publish(new HelloWorldMessage { Message = i % 2 == 0 ? "even" : "odd" });                          }                      }                        await WaitFor(() => lastReceived != null);                  }                    Assert.NotNull(lastReceived);                  Assert.Equal("even"' lastReceived.Message);                  Assert.Equal(50' numReceived);              }
Magic Number,Chinchilla.Integration.Features,PausableWorkersFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PausableWorkersFeature.cs,ShouldBeAbleToPauseWorker,The following statement contains a magic number: using (var bus = await CreateBus())              {                  var seen = 0;                    var subscription = bus.Subscribe<HelloWorldMessage>(                      m => Interlocked.Increment(ref seen)'                      c => c.DeliverUsing<WorkerPoolDeliveryStrategy>());                    // pause the worker                  var state = subscription.State;                  var worker = state.Workers.Single();                  subscription.Workers.Pause(worker.Name);                    // publish a message to the queue                  bus.Publish(new HelloWorldMessage());                    await Task.Delay(100);                    // we shouldn't have processed the message and the worker should be paused                  Assert.Equal(0' seen);                  state = subscription.State;                  Assert.Equal(WorkerStatus.Paused' state.Workers.First().Status);                    // resume the worker                  subscription.Workers.Resume(worker.Name);                    await WaitFor(() => seen == 1);                    Assert.Equal(1' seen);                    state = subscription.State;                  Assert.NotEqual(WorkerStatus.Paused' state.Workers.First().Status);              }
Magic Number,Chinchilla.Integration.Features,PublisherConfirmsFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublisherConfirmsFeature.cs,ShouldCreatePublisherWithoutConfirms,The following statement contains a magic number: using (var bus = await CreateBus())              {                  var publisher = bus.CreatePublisher<HelloWorldMessage>(p => p.Confirm(false));                    var receipts = Enumerable.Range(0' 100)                      .Select(_ => publisher.Publish(new HelloWorldMessage()))                      .ToArray();                    publisher.Dispose();                    Assert.True(receipts.All(r => r.Status == PublishStatus.None));              }
Magic Number,Chinchilla.Integration.Features,PublisherConfirmsFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublisherConfirmsFeature.cs,ShouldWaitForAllMessagesToBeConfirmedWhenDisposing,The following statement contains a magic number: using (var bus = await CreateBus())              {                  var publisher = bus.CreatePublisher<HelloWorldMessage>(p => p.Confirm(true));                    var receipts = Enumerable.Range(0' 100)                      .Select(_ => publisher.Publish(new HelloWorldMessage()))                      .ToArray();                    publisher.Dispose();                    Assert.True(receipts.All(r => r.IsConfirmed));              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var publisher = bus.CreatePublisher<HelloWorldMessage>())                  {                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage());                      }                        Assert.Equal(100' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishMultipleMessages,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var publisher = bus.CreatePublisher<HelloWorldMessage>())                  {                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage());                      }                        Assert.Equal(100' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: using (var bus = await CreateBus())              {                  var publisher = bus.CreatePublisher<HelloWorldMessage>(o => o.RouteWith<CustomRouter>());                    using (publisher)                  {                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage());                      }                        Assert.Equal(100' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishWithCustomRouter,The following statement contains a magic number: using (var bus = await CreateBus())              {                  var publisher = bus.CreatePublisher<HelloWorldMessage>(o => o.RouteWith<CustomRouter>());                    using (publisher)                  {                      for (var i = 0; i < 100; ++i)                      {                          publisher.Publish(new HelloWorldMessage());                      }                        Assert.Equal(100' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var publisher = bus.CreatePublisher<HelloWorldMessage>())                  {                      var p = publisher;                        var threads = Enumerable.Range(0' 10).Select(_ => new Thread(() =>                      {                          for (var i = 0; i < 100; ++i)                          {                              p.Publish(new HelloWorldMessage());                          }                      })).ToArray();                        foreach (var thread in threads)                      {                          thread.Start();                      }                        foreach (var thread in threads)                      {                          thread.Join();                      }                        await WaitFor(() => p.NumPublishedMessages == 1000);                        Assert.Equal(1000' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var publisher = bus.CreatePublisher<HelloWorldMessage>())                  {                      var p = publisher;                        var threads = Enumerable.Range(0' 10).Select(_ => new Thread(() =>                      {                          for (var i = 0; i < 100; ++i)                          {                              p.Publish(new HelloWorldMessage());                          }                      })).ToArray();                        foreach (var thread in threads)                      {                          thread.Start();                      }                        foreach (var thread in threads)                      {                          thread.Join();                      }                        await WaitFor(() => p.NumPublishedMessages == 1000);                        Assert.Equal(1000' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var publisher = bus.CreatePublisher<HelloWorldMessage>())                  {                      var p = publisher;                        var threads = Enumerable.Range(0' 10).Select(_ => new Thread(() =>                      {                          for (var i = 0; i < 100; ++i)                          {                              p.Publish(new HelloWorldMessage());                          }                      })).ToArray();                        foreach (var thread in threads)                      {                          thread.Start();                      }                        foreach (var thread in threads)                      {                          thread.Join();                      }                        await WaitFor(() => p.NumPublishedMessages == 1000);                        Assert.Equal(1000' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features,PublishFeature,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\PublishFeature.cs,ShouldPublishFromMultipleThreads,The following statement contains a magic number: using (var bus = await CreateBus())              {                  using (var publisher = bus.CreatePublisher<HelloWorldMessage>())                  {                      var p = publisher;                        var threads = Enumerable.Range(0' 10).Select(_ => new Thread(() =>                      {                          for (var i = 0; i < 100; ++i)                          {                              p.Publish(new HelloWorldMessage());                          }                      })).ToArray();                        foreach (var thread in threads)                      {                          thread.Start();                      }                        foreach (var thread in threads)                      {                          thread.Join();                      }                        await WaitFor(() => p.NumPublishedMessages == 1000);                        Assert.Equal(1000' publisher.NumPublishedMessages);                  }              }
Magic Number,Chinchilla.Integration.Features.MessageTypeFactories,BasicInterceptor,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\MessageTypeFactories\CastleMessageTypeFactory.cs,Intercept,The following statement contains a magic number: if (methodName.StartsWith("set_"))                  {                      var propertyName = methodName.Substring(4);                      properties[propertyName] = invocation.Arguments[0];                      return;                  }
Magic Number,Chinchilla.Integration.Features.MessageTypeFactories,BasicInterceptor,C:\repos\jonnii_chinchilla\src\Chinchilla.Integration\Features\MessageTypeFactories\CastleMessageTypeFactory.cs,Intercept,The following statement contains a magic number: if (methodName.StartsWith("get_"))                  {                      var propertyName = methodName.Substring(4);                      var value = properties[propertyName];                      invocation.ReturnValue = value;                      return;                  }
